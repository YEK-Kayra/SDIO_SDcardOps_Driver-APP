
SDIO_SDcardOps_Driver-APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08009370  08009370  00019370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c0  080097c0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c8  080097c8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080097d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  200001d4  080099a4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200003e4  080099a4  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a000  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000217f  00000000  00000000  0002a247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0002c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072a  00000000  00000000  0002cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003319  00000000  00000000  0002d4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3e5  00000000  00000000  000307cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a233  00000000  00000000  0003cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003af8  00000000  00000000  000c6de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000ca8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009358 	.word	0x08009358

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009358 	.word	0x08009358

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f000 faa0 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f808 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f000 f892 	bl	8001134 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8001010:	f000 f86e 	bl	80010f0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001014:	f003 fb42 	bl	800469c <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001018:	e7fe      	b.n	8001018 <main+0x18>
	...

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2230      	movs	r2, #48	; 0x30
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f004 fd59 	bl	8005ae2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <SystemClock_Config+0xcc>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	4a27      	ldr	r2, [pc, #156]	; (80010e8 <SystemClock_Config+0xcc>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <SystemClock_Config+0xcc>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <SystemClock_Config+0xd0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <SystemClock_Config+0xd0>)
 800106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <SystemClock_Config+0xd0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800107c:	2301      	movs	r3, #1
 800107e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001086:	2302      	movs	r3, #2
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001090:	2319      	movs	r3, #25
 8001092:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001094:	23a8      	movs	r3, #168	; 0xa8
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fe2f 	bl	8001d08 <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010b0:	f000 f876 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2102      	movs	r1, #2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 f891 	bl	80021f8 <HAL_RCC_ClockConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010dc:	f000 f860 	bl	80011a0 <Error_Handler>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3750      	adds	r7, #80	; 0x50
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <MX_SDIO_SD_Init+0x3c>)
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <MX_SDIO_SD_Init+0x40>)
 80010f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SDIO_SD_Init+0x3c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_SDIO_SD_Init+0x3c>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SDIO_SD_Init+0x3c>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_SDIO_SD_Init+0x3c>)
 800110e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001112:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <MX_SDIO_SD_Init+0x3c>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <MX_SDIO_SD_Init+0x3c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200001f0 	.word	0x200001f0
 8001130:	40012c00 	.word	0x40012c00

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_GPIO_Init+0x68>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <MX_GPIO_Init+0x68>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_GPIO_Init+0x68>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_GPIO_Init+0x68>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <MX_GPIO_Init+0x68>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <MX_GPIO_Init+0x68>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_GPIO_Init+0x68>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <MX_GPIO_Init+0x68>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_GPIO_Init+0x68>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <HAL_MspInit+0x4c>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_MspInit+0x4c>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2c      	ldr	r2, [pc, #176]	; (80012cc <HAL_SD_MspInit+0xd0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d152      	bne.n	80012c4 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_SD_MspInit+0xd4>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a2a      	ldr	r2, [pc, #168]	; (80012d0 <HAL_SD_MspInit+0xd4>)
 8001228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_SD_MspInit+0xd4>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_SD_MspInit+0xd4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <HAL_SD_MspInit+0xd4>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_SD_MspInit+0xd4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_SD_MspInit+0xd4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <HAL_SD_MspInit+0xd4>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_SD_MspInit+0xd4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001272:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001276:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001284:	230c      	movs	r3, #12
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <HAL_SD_MspInit+0xd8>)
 8001290:	f000 fbb6 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001294:	2304      	movs	r3, #4
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012a4:	230c      	movs	r3, #12
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	480a      	ldr	r0, [pc, #40]	; (80012d8 <HAL_SD_MspInit+0xdc>)
 80012b0:	f000 fba6 	bl	8001a00 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2031      	movs	r0, #49	; 0x31
 80012ba:	f000 fab6 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80012be:	2031      	movs	r0, #49	; 0x31
 80012c0:	f000 facf 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40012c00 	.word	0x40012c00
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001328:	f000 f960 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <SDIO_IRQHandler+0x10>)
 8001336:	f001 fb83 	bl	8002a40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001f0 	.word	0x200001f0

08001344 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_kill>:

int _kill(int pid, int sig)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800135e:	f004 fc13 	bl	8005b88 <__errno>
 8001362:	4603      	mov	r3, r0
 8001364:	2216      	movs	r2, #22
 8001366:	601a      	str	r2, [r3, #0]
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_exit>:

void _exit (int status)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ffe7 	bl	8001354 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001386:	e7fe      	b.n	8001386 <_exit+0x12>

08001388 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	e00a      	b.n	80013b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139a:	f3af 8000 	nop.w
 800139e:	4601      	mov	r1, r0
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	b2ca      	uxtb	r2, r1
 80013a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbf0      	blt.n	800139a <_read+0x12>
  }

  return len;
 80013b8:	687b      	ldr	r3, [r7, #4]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e009      	b.n	80013e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	60ba      	str	r2, [r7, #8]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf1      	blt.n	80013d4 <_write+0x12>
  }
  return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_close>:

int _close(int file)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001422:	605a      	str	r2, [r3, #4]
  return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_isatty>:

int _isatty(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f004 fb78 	bl	8005b88 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20010000 	.word	0x20010000
 80014c4:	00000800 	.word	0x00000800
 80014c8:	20000274 	.word	0x20000274
 80014cc:	200003e8 	.word	0x200003e8

080014d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001510:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151e:	f7ff ffd7 	bl	80014d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f004 fb37 	bl	8005b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7ff fd6b 	bl	8001000 <main>
  bx  lr    
 800152a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001538:	080097d0 	.word	0x080097d0
  ldr r2, =_sbss
 800153c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001540:	200003e4 	.word	0x200003e4

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_Init+0x40>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_Init+0x40>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x40>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f94f 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fe16 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f967 	bl	800187e <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f92f 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	20000278 	.word	0x20000278

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000278 	.word	0x20000278

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_DMA_Start_IT+0x26>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e040      	b.n	800193e <HAL_DMA_Start_IT+0xa8>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d12f      	bne.n	8001930 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f85c 	bl	80019a2 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	223f      	movs	r2, #63	; 0x3f
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0216 	orr.w	r2, r2, #22
 8001904:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0208 	orr.w	r2, r2, #8
 800191c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0201 	orr.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	e005      	b.n	800193c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001938:	2302      	movs	r3, #2
 800193a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800193c:	7dfb      	ldrb	r3, [r7, #23]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d004      	beq.n	8001964 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e00c      	b.n	800197e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2205      	movs	r2, #5
 8001968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019be:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b40      	cmp	r3, #64	; 0x40
 80019ce:	d108      	bne.n	80019e2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019e0:	e007      	b.n	80019f2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	60da      	str	r2, [r3, #12]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e159      	b.n	8001cd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 8148 	bne.w	8001cca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d005      	beq.n	8001a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d017      	beq.n	8001af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80a2 	beq.w	8001cca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_GPIO_Init+0x2e8>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a56      	ldr	r2, [pc, #344]	; (8001ce8 <HAL_GPIO_Init+0x2e8>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b54      	ldr	r3, [pc, #336]	; (8001ce8 <HAL_GPIO_Init+0x2e8>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba2:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_GPIO_Init+0x2ec>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a49      	ldr	r2, [pc, #292]	; (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x202>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a48      	ldr	r2, [pc, #288]	; (8001cf4 <HAL_GPIO_Init+0x2f4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x1fe>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a47      	ldr	r2, [pc, #284]	; (8001cf8 <HAL_GPIO_Init+0x2f8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x1fa>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a46      	ldr	r2, [pc, #280]	; (8001cfc <HAL_GPIO_Init+0x2fc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x1f6>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <HAL_GPIO_Init+0x300>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x1f2>
 8001bee:	2304      	movs	r3, #4
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001c02:	2300      	movs	r3, #0
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c14:	4935      	ldr	r1, [pc, #212]	; (8001cec <HAL_GPIO_Init+0x2ec>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c46:	4a2f      	ldr	r2, [pc, #188]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c70:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c76:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c9a:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc4:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	f67f aea2 	bls.w	8001a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020c00 	.word	0x40020c00
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e267      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d075      	beq.n	8001e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d00c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b85      	ldr	r3, [pc, #532]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d112      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4b82      	ldr	r3, [pc, #520]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	4b7e      	ldr	r3, [pc, #504]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d05b      	beq.n	8001e10 <HAL_RCC_OscConfig+0x108>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d157      	bne.n	8001e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e242      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_OscConfig+0x74>
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a75      	ldr	r2, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x98>
 8001d86:	4b70      	ldr	r3, [pc, #448]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a6f      	ldr	r2, [pc, #444]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b6d      	ldr	r3, [pc, #436]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6c      	ldr	r2, [pc, #432]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001da0:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a68      	ldr	r2, [pc, #416]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a65      	ldr	r2, [pc, #404]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fc28 	bl	8001614 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fc24 	bl	8001614 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e207      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b5b      	ldr	r3, [pc, #364]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xc0>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fc14 	bl	8001614 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff fc10 	bl	8001614 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1f3      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b51      	ldr	r3, [pc, #324]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0xe8>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1c7      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4937      	ldr	r1, [pc, #220]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b34      	ldr	r3, [pc, #208]	; (8001f4c <HAL_RCC_OscConfig+0x244>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fbc9 	bl	8001614 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff fbc5 	bl	8001614 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1a8      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4925      	ldr	r1, [pc, #148]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_OscConfig+0x244>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fba8 	bl	8001614 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fba4 	bl	8001614 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e187      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d036      	beq.n	8001f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_RCC_OscConfig+0x248>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff fb88 	bl	8001614 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff fb84 	bl	8001614 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e167      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x200>
 8001f26:	e01b      	b.n	8001f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_OscConfig+0x248>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fb71 	bl	8001614 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	e00e      	b.n	8001f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff fb6d 	bl	8001614 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d907      	bls.n	8001f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e150      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470000 	.word	0x42470000
 8001f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ea      	bne.n	8001f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8097 	beq.w	800209c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b81      	ldr	r3, [pc, #516]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b7d      	ldr	r3, [pc, #500]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a7c      	ldr	r2, [pc, #496]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b7a      	ldr	r3, [pc, #488]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b77      	ldr	r3, [pc, #476]	; (800217c <HAL_RCC_OscConfig+0x474>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b74      	ldr	r3, [pc, #464]	; (800217c <HAL_RCC_OscConfig+0x474>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a73      	ldr	r2, [pc, #460]	; (800217c <HAL_RCC_OscConfig+0x474>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fb2d 	bl	8001614 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7ff fb29 	bl	8001614 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e10c      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_OscConfig+0x474>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2ea>
 8001fe4:	4b64      	ldr	r3, [pc, #400]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	4a63      	ldr	r2, [pc, #396]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x324>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x30c>
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	4a5e      	ldr	r2, [pc, #376]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6713      	str	r3, [r2, #112]	; 0x70
 8002006:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a5b      	ldr	r2, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0x324>
 8002014:	4b58      	ldr	r3, [pc, #352]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a57      	ldr	r2, [pc, #348]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	4b55      	ldr	r3, [pc, #340]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a54      	ldr	r2, [pc, #336]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002026:	f023 0304 	bic.w	r3, r3, #4
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d015      	beq.n	8002060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff faee 	bl	8001614 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff faea 	bl	8001614 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0cb      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	4b49      	ldr	r3, [pc, #292]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ee      	beq.n	800203c <HAL_RCC_OscConfig+0x334>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7ff fad8 	bl	8001614 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7ff fad4 	bl	8001614 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0b5      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ee      	bne.n	8002068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	4a38      	ldr	r2, [pc, #224]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a1 	beq.w	80021e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a6:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d05c      	beq.n	800216c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d141      	bne.n	800213e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_RCC_OscConfig+0x478>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff faa8 	bl	8001614 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff faa4 	bl	8001614 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e087      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	019b      	lsls	r3, r3, #6
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	491b      	ldr	r1, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x478>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7ff fa7d 	bl	8001614 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7ff fa79 	bl	8001614 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e05c      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x416>
 800213c:	e054      	b.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_RCC_OscConfig+0x478>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fa66 	bl	8001614 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff fa62 	bl	8001614 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e045      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_OscConfig+0x470>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x444>
 800216a:	e03d      	b.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d107      	bne.n	8002184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e038      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
 8002180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x4ec>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d028      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d121      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11a      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021bc:	4293      	cmp	r3, r2
 80021be:	d111      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	3b01      	subs	r3, #1
 80021ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0cc      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d90c      	bls.n	8002234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800226e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d044      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d119      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e067      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4934      	ldr	r1, [pc, #208]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7ff f994 	bl	8001614 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7ff f990 	bl	8001614 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d20c      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f821 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	490a      	ldr	r1, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	5ccb      	ldrb	r3, [r1, r3]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f8f4 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	08009370 	.word	0x08009370
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c8:	b090      	sub	sp, #64	; 0x40
 80023ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
 80023d0:	2300      	movs	r3, #0
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d4:	2300      	movs	r3, #0
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d00d      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x40>
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	f200 80a1 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x16c>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x34>
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x3a>
 80023f6:	e09b      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_GetSysClockFreq+0x184>)
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023fc:	e09b      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023fe:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_GetSysClockFreq+0x188>)
 8002400:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002402:	e098      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800240e:	4b4d      	ldr	r3, [pc, #308]	; (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d028      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241a:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	2200      	movs	r2, #0
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	627a      	str	r2, [r7, #36]	; 0x24
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800242c:	2100      	movs	r1, #0
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_GetSysClockFreq+0x188>)
 8002430:	fb03 f201 	mul.w	r2, r3, r1
 8002434:	2300      	movs	r3, #0
 8002436:	fb00 f303 	mul.w	r3, r0, r3
 800243a:	4413      	add	r3, r2
 800243c:	4a43      	ldr	r2, [pc, #268]	; (800254c <HAL_RCC_GetSysClockFreq+0x188>)
 800243e:	fba0 1202 	umull	r1, r2, r0, r2
 8002442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002444:	460a      	mov	r2, r1
 8002446:	62ba      	str	r2, [r7, #40]	; 0x28
 8002448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244a:	4413      	add	r3, r2
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	2200      	movs	r2, #0
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	61fa      	str	r2, [r7, #28]
 8002456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800245a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800245e:	f7fe fc1b 	bl	8000c98 <__aeabi_uldivmod>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4613      	mov	r3, r2
 8002468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246a:	e053      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246c:	4b35      	ldr	r3, [pc, #212]	; (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	2200      	movs	r2, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	617a      	str	r2, [r7, #20]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800247e:	f04f 0b00 	mov.w	fp, #0
 8002482:	4652      	mov	r2, sl
 8002484:	465b      	mov	r3, fp
 8002486:	f04f 0000 	mov.w	r0, #0
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	0159      	lsls	r1, r3, #5
 8002490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002494:	0150      	lsls	r0, r2, #5
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	ebb2 080a 	subs.w	r8, r2, sl
 800249e:	eb63 090b 	sbc.w	r9, r3, fp
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024b6:	ebb2 0408 	subs.w	r4, r2, r8
 80024ba:	eb63 0509 	sbc.w	r5, r3, r9
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	00eb      	lsls	r3, r5, #3
 80024c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024cc:	00e2      	lsls	r2, r4, #3
 80024ce:	4614      	mov	r4, r2
 80024d0:	461d      	mov	r5, r3
 80024d2:	eb14 030a 	adds.w	r3, r4, sl
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	eb45 030b 	adc.w	r3, r5, fp
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ea:	4629      	mov	r1, r5
 80024ec:	028b      	lsls	r3, r1, #10
 80024ee:	4621      	mov	r1, r4
 80024f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f4:	4621      	mov	r1, r4
 80024f6:	028a      	lsls	r2, r1, #10
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fe:	2200      	movs	r2, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	60fa      	str	r2, [r7, #12]
 8002504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002508:	f7fe fbc6 	bl	8000c98 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800252e:	e002      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_RCC_GetSysClockFreq+0x184>)
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002538:	4618      	mov	r0, r3
 800253a:	3740      	adds	r7, #64	; 0x40
 800253c:	46bd      	mov	sp, r7
 800253e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	017d7840 	.word	0x017d7840

08002550 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e022      	b.n	80025a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d105      	bne.n	800257a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe fe41 	bl	80011fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2203      	movs	r2, #3
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f814 	bl	80025b0 <HAL_SD_InitCard>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00a      	b.n	80025a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	b08e      	sub	sp, #56	; 0x38
 80025b4:	af04      	add	r7, sp, #16
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80025cc:	2376      	movs	r3, #118	; 0x76
 80025ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681d      	ldr	r5, [r3, #0]
 80025d4:	466c      	mov	r4, sp
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e8:	4628      	mov	r0, r5
 80025ea:	f001 fae4 	bl	8003bb6 <SDIO_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80025f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e04f      	b.n	80026a0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002600:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_SD_InitCard+0xf8>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fb1c 	bl	8003c48 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_SD_InitCard+0xf8>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002616:	2002      	movs	r0, #2
 8002618:	f7ff f808 	bl	800162c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f001 f805 	bl	800362c <SD_PowerON>
 8002622:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e02e      	b.n	80026a0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 ff24 	bl	8003490 <SD_InitCard>
 8002648:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00b      	beq.n	8002668 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e01b      	b.n	80026a0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fb7b 	bl	8003d6c <SDMMC_CmdBlockLength>
 8002676:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00f      	beq.n	800269e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_SD_InitCard+0xfc>)
 8002684:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bdb0      	pop	{r4, r5, r7, pc}
 80026a8:	422580a0 	.word	0x422580a0
 80026ac:	004005ff 	.word	0x004005ff

080026b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	; 0x30
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0c0      	b.n	800285a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	f040 80b9 	bne.w	8002858 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	441a      	add	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d907      	bls.n	800270a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0a7      	b.n	800285a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2203      	movs	r2, #3
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2200      	movs	r2, #0
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a4c      	ldr	r2, [pc, #304]	; (8002864 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a4b      	ldr	r2, [pc, #300]	; (8002868 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800273c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2200      	movs	r2, #0
 8002744:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3380      	adds	r3, #128	; 0x80
 8002774:	4619      	mov	r1, r3
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	025b      	lsls	r3, r3, #9
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	f7ff f88a 	bl	8001896 <HAL_DMA_Start_IT>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d017      	beq.n	80027b8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002796:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a33      	ldr	r2, [pc, #204]	; (800286c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800279e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e050      	b.n	800285a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d002      	beq.n	80027cc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	025b      	lsls	r3, r3, #9
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
 80027d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	025b      	lsls	r3, r3, #9
 80027d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80027d8:	2390      	movs	r3, #144	; 0x90
 80027da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80027dc:	2302      	movs	r3, #2
 80027de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80027e4:	2301      	movs	r3, #1
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f107 0210 	add.w	r2, r7, #16
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 fa8e 	bl	8003d14 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d90a      	bls.n	8002814 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2282      	movs	r2, #130	; 0x82
 8002802:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800280a:	4618      	mov	r0, r3
 800280c:	f001 faf2 	bl	8003df4 <SDMMC_CmdReadMultiBlock>
 8002810:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002812:	e009      	b.n	8002828 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2281      	movs	r2, #129	; 0x81
 8002818:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002820:	4618      	mov	r0, r3
 8002822:	f001 fac5 	bl	8003db0 <SDMMC_CmdReadSingleBlock>
 8002826:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d012      	beq.n	8002854 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a0e      	ldr	r2, [pc, #56]	; (800286c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e002      	b.n	800285a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3730      	adds	r7, #48	; 0x30
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	0800329f 	.word	0x0800329f
 8002868:	08003311 	.word	0x08003311
 800286c:	004005ff 	.word	0x004005ff
 8002870:	4225858c 	.word	0x4225858c

08002874 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08c      	sub	sp, #48	; 0x30
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d107      	bne.n	800289c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0c5      	b.n	8002a28 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f040 80be 	bne.w	8002a26 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80028b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	441a      	add	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d907      	bls.n	80028ce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0ac      	b.n	8002a28 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2203      	movs	r2, #3
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	4a4e      	ldr	r2, [pc, #312]	; (8002a30 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80028f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	4a4d      	ldr	r2, [pc, #308]	; (8002a34 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002900:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	2200      	movs	r2, #0
 8002908:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	2b01      	cmp	r3, #1
 8002910:	d002      	beq.n	8002918 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	025b      	lsls	r3, r3, #9
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d90a      	bls.n	8002934 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	22a0      	movs	r2, #160	; 0xa0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292a:	4618      	mov	r0, r3
 800292c:	f001 faa6 	bl	8003e7c <SDMMC_CmdWriteMultiBlock>
 8002930:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002932:	e009      	b.n	8002948 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2290      	movs	r2, #144	; 0x90
 8002938:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fa79 	bl	8003e38 <SDMMC_CmdWriteSingleBlock>
 8002946:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d012      	beq.n	8002974 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a39      	ldr	r2, [pc, #228]	; (8002a38 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	431a      	orrs	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e059      	b.n	8002a28 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002974:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2240      	movs	r2, #64	; 0x40
 8002980:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3380      	adds	r3, #128	; 0x80
 80029aa:	461a      	mov	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	f7fe ff70 	bl	8001896 <HAL_DMA_Start_IT>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01c      	beq.n	80029f6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80029ca:	f023 0302 	bic.w	r3, r3, #2
 80029ce:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e018      	b.n	8002a28 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	025b      	lsls	r3, r3, #9
 8002a00:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a02:	2390      	movs	r3, #144	; 0x90
 8002a04:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f107 0210 	add.w	r2, r7, #16
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 f979 	bl	8003d14 <SDIO_ConfigData>

      return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3730      	adds	r7, #48	; 0x30
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	08003275 	.word	0x08003275
 8002a34:	08003311 	.word	0x08003311
 8002a38:	004005ff 	.word	0x004005ff
 8002a3c:	4225858c 	.word	0x4225858c

08002a40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_SD_IRQHandler+0x2e>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 ffff 	bl	8003a6a <SD_Read_IT>
 8002a6c:	e165      	b.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 808f 	beq.w	8002b9c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002a96:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002a9a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d039      	beq.n	8002b2a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <HAL_SD_IRQHandler+0x8a>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d011      	beq.n	8002aee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 f9f6 	bl	8003ec0 <SDMMC_CmdStopTransfer>
 8002ad4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f92f 	bl	8002d4c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f240 523a 	movw	r2, #1338	; 0x53a
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_SD_IRQHandler+0xda>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f001 fe5c 	bl	80047d8 <HAL_SD_RxCpltCallback>
 8002b20:	e10b      	b.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f001 fe4e 	bl	80047c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b28:	e107      	b.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8102 	beq.w	8002d3a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d011      	beq.n	8002b64 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 f9bb 	bl	8003ec0 <SDMMC_CmdStopTransfer>
 8002b4a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8f4 	bl	8002d4c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 80e5 	bne.w	8002d3a <HAL_SD_IRQHandler+0x2fa>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 80df 	bne.w	8002d3a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0208 	bic.w	r2, r2, #8
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f001 fe15 	bl	80047c4 <HAL_SD_TxCpltCallback>
}
 8002b9a:	e0ce      	b.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_SD_IRQHandler+0x17c>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 ffa9 	bl	8003b0c <SD_Write_IT>
 8002bba:	e0be      	b.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc2:	f240 233a 	movw	r3, #570	; 0x23a
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80b6 	beq.w	8002d3a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	f043 0202 	orr.w	r2, r3, #2
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	f043 0208 	orr.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	f043 0208 	orr.w	r2, r3, #8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f240 723a 	movw	r2, #1850	; 0x73a
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002c68:	f023 0302 	bic.w	r3, r3, #2
 8002c6c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 f924 	bl	8003ec0 <SDMMC_CmdStopTransfer>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f855 	bl	8002d4c <HAL_SD_ErrorCallback>
}
 8002ca2:	e04a      	b.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d045      	beq.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <HAL_SD_IRQHandler+0x282>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d011      	beq.n	8002ce6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <HAL_SD_IRQHandler+0x304>)
 8002cc8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe fe39 	bl	8001946 <HAL_DMA_Abort_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d02f      	beq.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fb68 	bl	80033b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002ce4:	e029      	b.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_SD_IRQHandler+0x2ba>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d011      	beq.n	8002d1e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <HAL_SD_IRQHandler+0x308>)
 8002d00:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fe1d 	bl	8001946 <HAL_DMA_Abort_IT>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d013      	beq.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fb83 	bl	8003422 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002d1c:	e00d      	b.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f001 fd3c 	bl	80047b0 <HAL_SD_AbortCallback>
}
 8002d38:	e7ff      	b.n	8002d3a <HAL_SD_IRQHandler+0x2fa>
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	080033b5 	.word	0x080033b5
 8002d48:	08003423 	.word	0x08003423

08002d4c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6e:	0f9b      	lsrs	r3, r3, #30
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d8c:	0e1b      	lsrs	r3, r3, #24
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc0:	0d1b      	lsrs	r3, r3, #20
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dde:	0bdb      	lsrs	r3, r3, #15
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df0:	0b9b      	lsrs	r3, r3, #14
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e02:	0b5b      	lsrs	r3, r3, #13
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e14:	0b1b      	lsrs	r3, r3, #12
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2200      	movs	r2, #0
 8002e26:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d163      	bne.n	8002ef8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e34:	009a      	lsls	r2, r3, #2
 8002e36:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002e40:	0f92      	lsrs	r2, r2, #30
 8002e42:	431a      	orrs	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e4c:	0edb      	lsrs	r3, r3, #27
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e5e:	0e1b      	lsrs	r3, r3, #24
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e70:	0d5b      	lsrs	r3, r3, #21
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e82:	0c9b      	lsrs	r3, r3, #18
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e94:	0bdb      	lsrs	r3, r3, #15
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	7e1b      	ldrb	r3, [r3, #24]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	2201      	movs	r2, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ec2:	fb03 f202 	mul.w	r2, r3, r2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	7a1b      	ldrb	r3, [r3, #8]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ee4:	0a52      	lsrs	r2, r2, #9
 8002ee6:	fb03 f202 	mul.w	r2, r3, r2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef4:	661a      	str	r2, [r3, #96]	; 0x60
 8002ef6:	e031      	b.n	8002f5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d11d      	bne.n	8002f3c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	431a      	orrs	r2, r3
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	029a      	lsls	r2, r3, #10
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f30:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	661a      	str	r2, [r3, #96]	; 0x60
 8002f3a:	e00f      	b.n	8002f5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a58      	ldr	r2, [pc, #352]	; (80030a4 <HAL_SD_GetCardCSD+0x344>)
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e09d      	b.n	8003098 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f60:	0b9b      	lsrs	r3, r3, #14
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f72:	09db      	lsrs	r3, r3, #7
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	0fdb      	lsrs	r3, r3, #31
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	0f5b      	lsrs	r3, r3, #29
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	0e9b      	lsrs	r3, r3, #26
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	0d9b      	lsrs	r3, r3, #22
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	0d5b      	lsrs	r3, r3, #21
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	0bdb      	lsrs	r3, r3, #15
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	b2da      	uxtb	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	0b9b      	lsrs	r3, r3, #14
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	b2da      	uxtb	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	0b5b      	lsrs	r3, r3, #13
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	b2da      	uxtb	r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	0b1b      	lsrs	r3, r3, #12
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	0a9b      	lsrs	r3, r3, #10
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	b2da      	uxtb	r2, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	b2da      	uxtb	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003086:	b2da      	uxtb	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	004005ff 	.word	0x004005ff

080030a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b08e      	sub	sp, #56	; 0x38
 8003104:	af04      	add	r7, sp, #16
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2203      	movs	r2, #3
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	2b03      	cmp	r3, #3
 800311e:	d02e      	beq.n	800317e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003126:	d106      	bne.n	8003136 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	639a      	str	r2, [r3, #56]	; 0x38
 8003134:	e029      	b.n	800318a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800313c:	d10a      	bne.n	8003154 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fb2a 	bl	8003798 <SD_WideBus_Enable>
 8003144:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	639a      	str	r2, [r3, #56]	; 0x38
 8003152:	e01a      	b.n	800318a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fb67 	bl	800382e <SD_WideBus_Disable>
 8003160:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
 800316e:	e00c      	b.n	800318a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
 800317c:	e005      	b.n	800318a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a26      	ldr	r2, [pc, #152]	; (8003230 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003198:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031a8:	e01f      	b.n	80031ea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681d      	ldr	r5, [r3, #0]
 80031d0:	466c      	mov	r4, sp
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e4:	4628      	mov	r0, r5
 80031e6:	f000 fce6 	bl	8003bb6 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fdba 	bl	8003d6c <SDMMC_CmdBlockLength>
 80031f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003226:	4618      	mov	r0, r3
 8003228:	3728      	adds	r7, #40	; 0x28
 800322a:	46bd      	mov	sp, r7
 800322c:	bdb0      	pop	{r4, r5, r7, pc}
 800322e:	bf00      	nop
 8003230:	004005ff 	.word	0x004005ff

08003234 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fa7e 	bl	8003748 <SD_SendStatus>
 800324c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	0a5b      	lsrs	r3, r3, #9
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800326a:	693b      	ldr	r3, [r7, #16]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	2b82      	cmp	r3, #130	; 0x82
 80032b2:	d111      	bne.n	80032d8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fe01 	bl	8003ec0 <SDMMC_CmdStopTransfer>
 80032be:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f7ff fd3a 	bl	8002d4c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0208 	bic.w	r2, r2, #8
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f001 fa69 	bl	80047d8 <HAL_SD_RxCpltCallback>
#endif
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fb33 	bl	800198a <HAL_DMA_GetError>
 8003324:	4603      	mov	r3, r0
 8003326:	2b02      	cmp	r3, #2
 8003328:	d03e      	beq.n	80033a8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d002      	beq.n	8003346 <SD_DMAError+0x36>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d12d      	bne.n	80033a2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <SD_DMAError+0xa0>)
 800334c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff62 	bl	8003234 <HAL_SD_GetCardState>
 8003370:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b06      	cmp	r3, #6
 8003376:	d002      	beq.n	800337e <SD_DMAError+0x6e>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b05      	cmp	r3, #5
 800337c:	d10a      	bne.n	8003394 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fd9c 	bl	8003ec0 <SDMMC_CmdStopTransfer>
 8003388:	4602      	mov	r2, r0
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	431a      	orrs	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f7ff fcd2 	bl	8002d4c <HAL_SD_ErrorCallback>
#endif
  }
}
 80033a8:	bf00      	nop
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	004005ff 	.word	0x004005ff

080033b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff31 	bl	8003234 <HAL_SD_GetCardState>
 80033d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d002      	beq.n	80033ee <SD_DMATxAbort+0x3a>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d10a      	bne.n	8003404 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fd64 	bl	8003ec0 <SDMMC_CmdStopTransfer>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	431a      	orrs	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	2b00      	cmp	r3, #0
 800340a:	d103      	bne.n	8003414 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f001 f9cf 	bl	80047b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003412:	e002      	b.n	800341a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7ff fc99 	bl	8002d4c <HAL_SD_ErrorCallback>
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f240 523a 	movw	r2, #1338	; 0x53a
 8003438:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff fefa 	bl	8003234 <HAL_SD_GetCardState>
 8003440:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b06      	cmp	r3, #6
 8003454:	d002      	beq.n	800345c <SD_DMARxAbort+0x3a>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d10a      	bne.n	8003472 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fd2d 	bl	8003ec0 <SDMMC_CmdStopTransfer>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f001 f998 	bl	80047b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003480:	e002      	b.n	8003488 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff fc62 	bl	8002d4c <HAL_SD_ErrorCallback>
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003490:	b5b0      	push	{r4, r5, r7, lr}
 8003492:	b094      	sub	sp, #80	; 0x50
 8003494:	af04      	add	r7, sp, #16
 8003496:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003498:	2301      	movs	r3, #1
 800349a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fbdf 	bl	8003c64 <SDIO_GetPowerState>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034b0:	e0b8      	b.n	8003624 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d02f      	beq.n	800351a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fe08 	bl	80040d4 <SDMMC_CmdSendCID>
 80034c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80034cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ce:	e0a9      	b.n	8003624 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fc09 	bl	8003cee <SDIO_GetResponse>
 80034dc:	4602      	mov	r2, r0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2104      	movs	r1, #4
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fc00 	bl	8003cee <SDIO_GetResponse>
 80034ee:	4602      	mov	r2, r0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2108      	movs	r1, #8
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fbf7 	bl	8003cee <SDIO_GetResponse>
 8003500:	4602      	mov	r2, r0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	210c      	movs	r1, #12
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fbee 	bl	8003cee <SDIO_GetResponse>
 8003512:	4602      	mov	r2, r0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	2b03      	cmp	r3, #3
 8003520:	d00d      	beq.n	800353e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f107 020e 	add.w	r2, r7, #14
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fe0e 	bl	800414e <SDMMC_CmdSetRelAdd>
 8003532:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <SD_InitCard+0xae>
    {
      return errorstate;
 800353a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353c:	e072      	b.n	8003624 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	2b03      	cmp	r3, #3
 8003544:	d036      	beq.n	80035b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003546:	89fb      	ldrh	r3, [r7, #14]
 8003548:	461a      	mov	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f000 fdd8 	bl	8004110 <SDMMC_CmdSendCSD>
 8003560:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356a:	e05b      	b.n	8003624 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fbbb 	bl	8003cee <SDIO_GetResponse>
 8003578:	4602      	mov	r2, r0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2104      	movs	r1, #4
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fbb2 	bl	8003cee <SDIO_GetResponse>
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2108      	movs	r1, #8
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fba9 	bl	8003cee <SDIO_GetResponse>
 800359c:	4602      	mov	r2, r0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	210c      	movs	r1, #12
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fba0 	bl	8003cee <SDIO_GetResponse>
 80035ae:	4602      	mov	r2, r0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2104      	movs	r1, #4
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fb97 	bl	8003cee <SDIO_GetResponse>
 80035c0:	4603      	mov	r3, r0
 80035c2:	0d1a      	lsrs	r2, r3, #20
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80035c8:	f107 0310 	add.w	r3, r7, #16
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff fbc6 	bl	8002d60 <HAL_SD_GetCardCSD>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035de:	e021      	b.n	8003624 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	2200      	movs	r2, #0
 80035ec:	461c      	mov	r4, r3
 80035ee:	4615      	mov	r5, r2
 80035f0:	4622      	mov	r2, r4
 80035f2:	462b      	mov	r3, r5
 80035f4:	4608      	mov	r0, r1
 80035f6:	f000 fc85 	bl	8003f04 <SDMMC_CmdSelDesel>
 80035fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80035fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <SD_InitCard+0x176>
  {
    return errorstate;
 8003602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003604:	e00e      	b.n	8003624 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681d      	ldr	r5, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	466c      	mov	r4, sp
 800360e:	f103 0210 	add.w	r2, r3, #16
 8003612:	ca07      	ldmia	r2, {r0, r1, r2}
 8003614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003618:	3304      	adds	r3, #4
 800361a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800361c:	4628      	mov	r0, r5
 800361e:	f000 faca 	bl	8003bb6 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3740      	adds	r7, #64	; 0x40
 8003628:	46bd      	mov	sp, r7
 800362a:	bdb0      	pop	{r4, r5, r7, pc}

0800362c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fc80 	bl	8003f4a <SDMMC_CmdGoIdleState>
 800364a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	e072      	b.n	800373c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fc93 	bl	8003f86 <SDMMC_CmdOperCond>
 8003660:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fc69 	bl	8003f4a <SDMMC_CmdGoIdleState>
 8003678:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	e05b      	b.n	800373c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368e:	2b01      	cmp	r3, #1
 8003690:	d137      	bne.n	8003702 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fc93 	bl	8003fc4 <SDMMC_CmdAppCommand>
 800369e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02d      	beq.n	8003702 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036aa:	e047      	b.n	800373c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fc86 	bl	8003fc4 <SDMMC_CmdAppCommand>
 80036b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	e03b      	b.n	800373c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	491e      	ldr	r1, [pc, #120]	; (8003744 <SD_PowerON+0x118>)
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fc9c 	bl	8004008 <SDMMC_CmdAppOperCommand>
 80036d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036dc:	e02e      	b.n	800373c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fb02 	bl	8003cee <SDIO_GetResponse>
 80036ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	0fdb      	lsrs	r3, r3, #31
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <SD_PowerON+0xcc>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <SD_PowerON+0xce>
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]

    count++;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	3301      	adds	r3, #1
 8003700:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003708:	4293      	cmp	r3, r2
 800370a:	d802      	bhi.n	8003712 <SD_PowerON+0xe6>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0cc      	beq.n	80036ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003718:	4293      	cmp	r3, r2
 800371a:	d902      	bls.n	8003722 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800371c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003720:	e00c      	b.n	800373c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
 8003732:	e002      	b.n	800373a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	c1100000 	.word	0xc1100000

08003748 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003758:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800375c:	e018      	b.n	8003790 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 fd10 	bl	8004190 <SDMMC_CmdSendStatus>
 8003770:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	e009      	b.n	8003790 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fab3 	bl	8003cee <SDIO_GetResponse>
 8003788:	4602      	mov	r2, r0
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	2300      	movs	r3, #0
 80037a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fa9d 	bl	8003cee <SDIO_GetResponse>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037be:	d102      	bne.n	80037c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80037c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037c4:	e02f      	b.n	8003826 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80037c6:	f107 030c 	add.w	r3, r7, #12
 80037ca:	4619      	mov	r1, r3
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f879 	bl	80038c4 <SD_FindSCR>
 80037d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	e023      	b.n	8003826 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01c      	beq.n	8003822 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f0:	041b      	lsls	r3, r3, #16
 80037f2:	4619      	mov	r1, r3
 80037f4:	4610      	mov	r0, r2
 80037f6:	f000 fbe5 	bl	8003fc4 <SDMMC_CmdAppCommand>
 80037fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	e00f      	b.n	8003826 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2102      	movs	r1, #2
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fc1e 	bl	800404e <SDMMC_CmdBusWidth>
 8003812:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	e003      	b.n	8003826 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800381e:	2300      	movs	r3, #0
 8003820:	e001      	b.n	8003826 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003822:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fa52 	bl	8003cee <SDIO_GetResponse>
 800384a:	4603      	mov	r3, r0
 800384c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003854:	d102      	bne.n	800385c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800385a:	e02f      	b.n	80038bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800385c:	f107 030c 	add.w	r3, r7, #12
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f82e 	bl	80038c4 <SD_FindSCR>
 8003868:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	e023      	b.n	80038bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01c      	beq.n	80038b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f000 fb9a 	bl	8003fc4 <SDMMC_CmdAppCommand>
 8003890:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	e00f      	b.n	80038bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fbd3 	bl	800404e <SDMMC_CmdBusWidth>
 80038a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	e003      	b.n	80038bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e001      	b.n	80038bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b08f      	sub	sp, #60	; 0x3c
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80038ce:	f7fd fea1 	bl	8001614 <HAL_GetTick>
 80038d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2108      	movs	r1, #8
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fa3e 	bl	8003d6c <SDMMC_CmdBlockLength>
 80038f0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <SD_FindSCR+0x38>
  {
    return errorstate;
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	e0b2      	b.n	8003a62 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f000 fb5b 	bl	8003fc4 <SDMMC_CmdAppCommand>
 800390e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	e0a3      	b.n	8003a62 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003920:	2308      	movs	r3, #8
 8003922:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003924:	2330      	movs	r3, #48	; 0x30
 8003926:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003928:	2302      	movs	r3, #2
 800392a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800392c:	2300      	movs	r3, #0
 800392e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003930:	2301      	movs	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f107 0210 	add.w	r2, r7, #16
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f9e8 	bl	8003d14 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fba2 	bl	8004092 <SDMMC_CmdSendSCR>
 800394e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	2b00      	cmp	r3, #0
 8003954:	d02a      	beq.n	80039ac <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	e083      	b.n	8003a62 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00f      	beq.n	8003988 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	f107 0208 	add.w	r2, r7, #8
 8003974:	18d4      	adds	r4, r2, r3
 8003976:	4608      	mov	r0, r1
 8003978:	f000 f948 	bl	8003c0c <SDIO_ReadFIFO>
 800397c:	4603      	mov	r3, r0
 800397e:	6023      	str	r3, [r4, #0]
      index++;
 8003980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003982:	3301      	adds	r3, #1
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
 8003986:	e006      	b.n	8003996 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003996:	f7fd fe3d 	bl	8001614 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d102      	bne.n	80039ac <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80039a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039aa:	e05a      	b.n	8003a62 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0cf      	beq.n	800395a <SD_FindSCR+0x96>
 80039ba:	e000      	b.n	80039be <SD_FindSCR+0xfa>
      break;
 80039bc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2208      	movs	r2, #8
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80039d4:	2308      	movs	r3, #8
 80039d6:	e044      	b.n	8003a62 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2202      	movs	r2, #2
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80039ee:	2302      	movs	r3, #2
 80039f0:	e037      	b.n	8003a62 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2220      	movs	r2, #32
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003a08:	2320      	movs	r3, #32
 8003a0a:	e02a      	b.n	8003a62 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	061a      	lsls	r2, r3, #24
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a22:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a2c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	601a      	str	r2, [r3, #0]
    scr++;
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	061a      	lsls	r2, r3, #24
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a4a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a54:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	0e1b      	lsrs	r3, r3, #24
 8003a5a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	373c      	adds	r7, #60	; 0x3c
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd90      	pop	{r4, r7, pc}

08003a6a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d03f      	beq.n	8003b04 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e033      	b.n	8003af2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f8bc 	bl	8003c0c <SDIO_ReadFIFO>
 8003a94:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	0e1b      	lsrs	r3, r3, #24
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3301      	adds	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b07      	cmp	r3, #7
 8003af6:	d9c8      	bls.n	8003a8a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003b04:	bf00      	nop
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d043      	beq.n	8003bae <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e037      	b.n	8003b9c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3301      	adds	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	021a      	lsls	r2, r3, #8
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	041a      	lsls	r2, r3, #16
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3301      	adds	r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	061a      	lsls	r2, r3, #24
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f107 0208 	add.w	r2, r7, #8
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 f848 	bl	8003c26 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b07      	cmp	r3, #7
 8003ba0:	d9c4      	bls.n	8003b2c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	f107 001c 	add.w	r0, r7, #28
 8003bc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003bcc:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003bce:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003bd0:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003bd4:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003bd8:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003bdc:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003be0:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003bf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	b004      	add	sp, #16
 8003c0a:	4770      	bx	lr

08003c0c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0303 	and.w	r3, r3, #3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003c9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003ca4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003caa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003cba:	f023 030f 	bic.w	r3, r3, #15
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	b2db      	uxtb	r3, r3
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
}  
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d3a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003d40:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003d46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0

}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d7e:	2340      	movs	r3, #64	; 0x40
 8003d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d8c:	f107 0308 	add.w	r3, r7, #8
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ff74 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	2110      	movs	r1, #16
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa18 	bl	80041d4 <SDMMC_GetCmdResp1>
 8003da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003da6:	69fb      	ldr	r3, [r7, #28]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003dbe:	2311      	movs	r3, #17
 8003dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dc2:	2340      	movs	r3, #64	; 0x40
 8003dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dd0:	f107 0308 	add.w	r3, r7, #8
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ff52 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	2111      	movs	r1, #17
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f9f6 	bl	80041d4 <SDMMC_GetCmdResp1>
 8003de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dea:	69fb      	ldr	r3, [r7, #28]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003e02:	2312      	movs	r3, #18
 8003e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e06:	2340      	movs	r3, #64	; 0x40
 8003e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e14:	f107 0308 	add.w	r3, r7, #8
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ff30 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	2112      	movs	r1, #18
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9d4 	bl	80041d4 <SDMMC_GetCmdResp1>
 8003e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003e46:	2318      	movs	r3, #24
 8003e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e4a:	2340      	movs	r3, #64	; 0x40
 8003e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e58:	f107 0308 	add.w	r3, r7, #8
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff ff0e 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	2118      	movs	r1, #24
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9b2 	bl	80041d4 <SDMMC_GetCmdResp1>
 8003e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e72:	69fb      	ldr	r3, [r7, #28]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003e8a:	2319      	movs	r3, #25
 8003e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e8e:	2340      	movs	r3, #64	; 0x40
 8003e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff feec 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eac:	2119      	movs	r1, #25
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f990 	bl	80041d4 <SDMMC_GetCmdResp1>
 8003eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003ecc:	230c      	movs	r3, #12
 8003ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ed0:	2340      	movs	r3, #64	; 0x40
 8003ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003edc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ede:	f107 0308 	add.w	r3, r7, #8
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fecb 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003eea:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <SDMMC_CmdStopTransfer+0x40>)
 8003eec:	210c      	movs	r1, #12
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f970 	bl	80041d4 <SDMMC_GetCmdResp1>
 8003ef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	05f5e100 	.word	0x05f5e100

08003f04 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f14:	2307      	movs	r3, #7
 8003f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f18:	2340      	movs	r3, #64	; 0x40
 8003f1a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f24:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f26:	f107 0310 	add.w	r3, r7, #16
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff fea7 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	2107      	movs	r1, #7
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f94b 	bl	80041d4 <SDMMC_GetCmdResp1>
 8003f3e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3728      	adds	r7, #40	; 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b088      	sub	sp, #32
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fe86 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fb65 	bl	8004644 <SDMMC_GetCmdError>
 8003f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b088      	sub	sp, #32
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003f8e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003f94:	2308      	movs	r3, #8
 8003f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f98:	2340      	movs	r3, #64	; 0x40
 8003f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff fe67 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 faf8 	bl	80045a8 <SDMMC_GetCmdResp7>
 8003fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fba:	69fb      	ldr	r3, [r7, #28]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003fd2:	2337      	movs	r3, #55	; 0x37
 8003fd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fd6:	2340      	movs	r3, #64	; 0x40
 8003fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fe4:	f107 0308 	add.w	r3, r7, #8
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fe48 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff4:	2137      	movs	r1, #55	; 0x37
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8ec 	bl	80041d4 <SDMMC_GetCmdResp1>
 8003ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800401e:	2329      	movs	r3, #41	; 0x29
 8004020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004022:	2340      	movs	r3, #64	; 0x40
 8004024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800402a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800402e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004030:	f107 0308 	add.w	r3, r7, #8
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fe22 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f9ff 	bl	8004440 <SDMMC_GetCmdResp3>
 8004042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004044:	69fb      	ldr	r3, [r7, #28]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b088      	sub	sp, #32
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800405c:	2306      	movs	r3, #6
 800405e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004060:	2340      	movs	r3, #64	; 0x40
 8004062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800406c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fe03 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	2106      	movs	r1, #6
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f8a7 	bl	80041d4 <SDMMC_GetCmdResp1>
 8004086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004088:	69fb      	ldr	r3, [r7, #28]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b088      	sub	sp, #32
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800409e:	2333      	movs	r3, #51	; 0x33
 80040a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040a2:	2340      	movs	r3, #64	; 0x40
 80040a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040b0:	f107 0308 	add.w	r3, r7, #8
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fde2 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80040bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c0:	2133      	movs	r1, #51	; 0x33
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f886 	bl	80041d4 <SDMMC_GetCmdResp1>
 80040c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040ca:	69fb      	ldr	r3, [r7, #28]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80040e0:	2302      	movs	r3, #2
 80040e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80040e4:	23c0      	movs	r3, #192	; 0xc0
 80040e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040f2:	f107 0308 	add.w	r3, r7, #8
 80040f6:	4619      	mov	r1, r3
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fdc1 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f956 	bl	80043b0 <SDMMC_GetCmdResp2>
 8004104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004106:	69fb      	ldr	r3, [r7, #28]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800411e:	2309      	movs	r3, #9
 8004120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004122:	23c0      	movs	r3, #192	; 0xc0
 8004124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800412a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800412e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004130:	f107 0308 	add.w	r3, r7, #8
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fda2 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f937 	bl	80043b0 <SDMMC_GetCmdResp2>
 8004142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004144:	69fb      	ldr	r3, [r7, #28]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b088      	sub	sp, #32
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800415c:	2303      	movs	r3, #3
 800415e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800416e:	f107 0308 	add.w	r3, r7, #8
 8004172:	4619      	mov	r1, r3
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fd83 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	2103      	movs	r1, #3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f99c 	bl	80044bc <SDMMC_GetCmdResp6>
 8004184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004186:	69fb      	ldr	r3, [r7, #28]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3720      	adds	r7, #32
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800419e:	230d      	movs	r3, #13
 80041a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041a2:	2340      	movs	r3, #64	; 0x40
 80041a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041b0:	f107 0308 	add.w	r3, r7, #8
 80041b4:	4619      	mov	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fd62 	bl	8003c80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	210d      	movs	r1, #13
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f806 	bl	80041d4 <SDMMC_GetCmdResp1>
 80041c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041ca:	69fb      	ldr	r3, [r7, #28]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	460b      	mov	r3, r1
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80041e2:	4b70      	ldr	r3, [pc, #448]	; (80043a4 <SDMMC_GetCmdResp1+0x1d0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a70      	ldr	r2, [pc, #448]	; (80043a8 <SDMMC_GetCmdResp1+0x1d4>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	0a5a      	lsrs	r2, r3, #9
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	fb02 f303 	mul.w	r3, r2, r3
 80041f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	1e5a      	subs	r2, r3, #1
 80041fa:	61fa      	str	r2, [r7, #28]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004204:	e0c9      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0ef      	beq.n	80041f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ea      	bne.n	80041f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2204      	movs	r2, #4
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004232:	2304      	movs	r3, #4
 8004234:	e0b1      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004248:	2301      	movs	r3, #1
 800424a:	e0a6      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	22c5      	movs	r2, #197	; 0xc5
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff fd3e 	bl	8003cd4 <SDIO_GetCommandResponse>
 8004258:	4603      	mov	r3, r0
 800425a:	461a      	mov	r2, r3
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	4293      	cmp	r3, r2
 8004260:	d001      	beq.n	8004266 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004262:	2301      	movs	r3, #1
 8004264:	e099      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004266:	2100      	movs	r1, #0
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fd40 	bl	8003cee <SDIO_GetResponse>
 800426e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4b4e      	ldr	r3, [pc, #312]	; (80043ac <SDMMC_GetCmdResp1+0x1d8>)
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800427a:	2300      	movs	r3, #0
 800427c:	e08d      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	da02      	bge.n	800428a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004288:	e087      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004294:	2340      	movs	r3, #64	; 0x40
 8004296:	e080      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	e079      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80042b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042b4:	e071      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80042c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042c4:	e069      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80042d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d4:	e061      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80042e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042e4:	e059      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80042f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042f4:	e051      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004304:	e049      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004314:	e041      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004324:	e039      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004334:	e031      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004344:	e029      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004354:	e021      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004360:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004364:	e019      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004374:	e011      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004380:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004384:	e009      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004390:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004394:	e001      	b.n	800439a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000000 	.word	0x20000000
 80043a8:	10624dd3 	.word	0x10624dd3
 80043ac:	fdffe008 	.word	0xfdffe008

080043b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043b8:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <SDMMC_GetCmdResp2+0x88>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <SDMMC_GetCmdResp2+0x8c>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	0a5b      	lsrs	r3, r3, #9
 80043c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1e5a      	subs	r2, r3, #1
 80043d2:	60fa      	str	r2, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80043d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043dc:	e026      	b.n	800442c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ef      	beq.n	80043ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ea      	bne.n	80043ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2204      	movs	r2, #4
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800440a:	2304      	movs	r3, #4
 800440c:	e00e      	b.n	800442c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004420:	2301      	movs	r3, #1
 8004422:	e003      	b.n	800442c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	22c5      	movs	r2, #197	; 0xc5
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20000000 	.word	0x20000000
 800443c:	10624dd3 	.word	0x10624dd3

08004440 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <SDMMC_GetCmdResp3+0x74>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <SDMMC_GetCmdResp3+0x78>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	0a5b      	lsrs	r3, r3, #9
 8004454:	f241 3288 	movw	r2, #5000	; 0x1388
 8004458:	fb02 f303 	mul.w	r3, r2, r3
 800445c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1e5a      	subs	r2, r3, #1
 8004462:	60fa      	str	r2, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800446c:	e01b      	b.n	80044a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0ef      	beq.n	800445e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ea      	bne.n	800445e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2204      	movs	r2, #4
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800449a:	2304      	movs	r3, #4
 800449c:	e003      	b.n	80044a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	22c5      	movs	r2, #197	; 0xc5
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000000 	.word	0x20000000
 80044b8:	10624dd3 	.word	0x10624dd3

080044bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	460b      	mov	r3, r1
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044ca:	4b35      	ldr	r3, [pc, #212]	; (80045a0 <SDMMC_GetCmdResp6+0xe4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a35      	ldr	r2, [pc, #212]	; (80045a4 <SDMMC_GetCmdResp6+0xe8>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	0a5b      	lsrs	r3, r3, #9
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	1e5a      	subs	r2, r3, #1
 80044e4:	61fa      	str	r2, [r7, #28]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044ee:	e052      	b.n	8004596 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0ef      	beq.n	80044e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ea      	bne.n	80044e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2204      	movs	r2, #4
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800451c:	2304      	movs	r3, #4
 800451e:	e03a      	b.n	8004596 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004532:	2301      	movs	r3, #1
 8004534:	e02f      	b.n	8004596 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff fbcc 	bl	8003cd4 <SDIO_GetCommandResponse>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	7afb      	ldrb	r3, [r7, #11]
 8004542:	4293      	cmp	r3, r2
 8004544:	d001      	beq.n	800454a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004546:	2301      	movs	r3, #1
 8004548:	e025      	b.n	8004596 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	22c5      	movs	r2, #197	; 0xc5
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004550:	2100      	movs	r1, #0
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff fbcb 	bl	8003cee <SDIO_GetResponse>
 8004558:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	b29a      	uxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800456e:	2300      	movs	r3, #0
 8004570:	e011      	b.n	8004596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800457c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004580:	e009      	b.n	8004596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800458c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004590:	e001      	b.n	8004596 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000000 	.word	0x20000000
 80045a4:	10624dd3 	.word	0x10624dd3

080045a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045b0:	4b22      	ldr	r3, [pc, #136]	; (800463c <SDMMC_GetCmdResp7+0x94>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <SDMMC_GetCmdResp7+0x98>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	0a5b      	lsrs	r3, r3, #9
 80045bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c0:	fb02 f303 	mul.w	r3, r2, r3
 80045c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1e5a      	subs	r2, r3, #1
 80045ca:	60fa      	str	r2, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d102      	bne.n	80045d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045d4:	e02c      	b.n	8004630 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ef      	beq.n	80045c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ea      	bne.n	80045c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2204      	movs	r2, #4
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004602:	2304      	movs	r3, #4
 8004604:	e014      	b.n	8004630 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004618:	2301      	movs	r3, #1
 800461a:	e009      	b.n	8004630 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2240      	movs	r2, #64	; 0x40
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800462e:	2300      	movs	r3, #0
  
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	20000000 	.word	0x20000000
 8004640:	10624dd3 	.word	0x10624dd3

08004644 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <SDMMC_GetCmdError+0x50>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a11      	ldr	r2, [pc, #68]	; (8004698 <SDMMC_GetCmdError+0x54>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	0a5b      	lsrs	r3, r3, #9
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1e5a      	subs	r2, r3, #1
 8004666:	60fa      	str	r2, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800466c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004670:	e009      	b.n	8004686 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f1      	beq.n	8004662 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	22c5      	movs	r2, #197	; 0xc5
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000000 	.word	0x20000000
 8004698:	10624dd3 	.word	0x10624dd3

0800469c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80046a0:	4904      	ldr	r1, [pc, #16]	; (80046b4 <MX_FATFS_Init+0x18>)
 80046a2:	4805      	ldr	r0, [pc, #20]	; (80046b8 <MX_FATFS_Init+0x1c>)
 80046a4:	f000 fa84 	bl	8004bb0 <FATFS_LinkDriver>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <MX_FATFS_Init+0x20>)
 80046ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000280 	.word	0x20000280
 80046b8:	08009380 	.word	0x08009380
 80046bc:	2000027c 	.word	0x2000027c

080046c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80046ca:	f000 f896 	bl	80047fa <BSP_SD_IsDetected>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e012      	b.n	80046fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80046d8:	480b      	ldr	r0, [pc, #44]	; (8004708 <BSP_SD_Init+0x48>)
 80046da:	f7fd ff39 	bl	8002550 <HAL_SD_Init>
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80046e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046ec:	4806      	ldr	r0, [pc, #24]	; (8004708 <BSP_SD_Init+0x48>)
 80046ee:	f7fe fd07 	bl	8003100 <HAL_SD_ConfigWideBusOperation>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80046fc:	79fb      	ldrb	r3, [r7, #7]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	200001f0 	.word	0x200001f0

0800470c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	68f9      	ldr	r1, [r7, #12]
 8004722:	4806      	ldr	r0, [pc, #24]	; (800473c <BSP_SD_ReadBlocks_DMA+0x30>)
 8004724:	f7fd ffc4 	bl	80026b0 <HAL_SD_ReadBlocks_DMA>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004732:	7dfb      	ldrb	r3, [r7, #23]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	200001f0 	.word	0x200001f0

08004740 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	68f9      	ldr	r1, [r7, #12]
 8004756:	4806      	ldr	r0, [pc, #24]	; (8004770 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004758:	f7fe f88c 	bl	8002874 <HAL_SD_WriteBlocks_DMA>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	200001f0 	.word	0x200001f0

08004774 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004778:	4805      	ldr	r0, [pc, #20]	; (8004790 <BSP_SD_GetCardState+0x1c>)
 800477a:	f7fe fd5b 	bl	8003234 <HAL_SD_GetCardState>
 800477e:	4603      	mov	r3, r0
 8004780:	2b04      	cmp	r3, #4
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
}
 800478a:	4618      	mov	r0, r3
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	200001f0 	.word	0x200001f0

08004794 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4803      	ldr	r0, [pc, #12]	; (80047ac <BSP_SD_GetCardInfo+0x18>)
 80047a0:	f7fe fc82 	bl	80030a8 <HAL_SD_GetCardInfo>
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	200001f0 	.word	0x200001f0

080047b0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80047b8:	f000 f818 	bl	80047ec <BSP_SD_AbortCallback>
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80047cc:	f000 f98c 	bl	8004ae8 <BSP_SD_WriteCpltCallback>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80047e0:	f000 f98e 	bl	8004b00 <BSP_SD_ReadCpltCallback>
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0

}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004800:	2301      	movs	r3, #1
 8004802:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	b2db      	uxtb	r3, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800481c:	f7fc fefa 	bl	8001614 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8004822:	e006      	b.n	8004832 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004824:	f7ff ffa6 	bl	8004774 <BSP_SD_GetCardState>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800482e:	2300      	movs	r3, #0
 8004830:	e009      	b.n	8004846 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8004832:	f7fc feef 	bl	8001614 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	d8f0      	bhi.n	8004824 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <SD_CheckStatus+0x38>)
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004860:	f7ff ff88 	bl	8004774 <BSP_SD_GetCardState>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d107      	bne.n	800487a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <SD_CheckStatus+0x38>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	b2da      	uxtb	r2, r3
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <SD_CheckStatus+0x38>)
 8004878:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800487a:	4b03      	ldr	r3, [pc, #12]	; (8004888 <SD_CheckStatus+0x38>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b2db      	uxtb	r3, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20000009 	.word	0x20000009

0800488c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004896:	f7ff ff13 	bl	80046c0 <BSP_SD_Init>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d107      	bne.n	80048b0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff ffd4 	bl	8004850 <SD_CheckStatus>
 80048a8:	4603      	mov	r3, r0
 80048aa:	461a      	mov	r2, r3
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <SD_initialize+0x34>)
 80048ae:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <SD_initialize+0x34>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000009 	.word	0x20000009

080048c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff ffbd 	bl	8004850 <SD_CheckStatus>
 80048d6:	4603      	mov	r3, r0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80048f4:	f247 5030 	movw	r0, #30000	; 0x7530
 80048f8:	f7ff ff8c 	bl	8004814 <SD_CheckStatusWithTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da01      	bge.n	8004906 <SD_read+0x26>
  {
    return res;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	e03b      	b.n	800497e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	68b8      	ldr	r0, [r7, #8]
 800490c:	f7ff fefe 	bl	800470c <BSP_SD_ReadBlocks_DMA>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d132      	bne.n	800497c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004916:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <SD_read+0xa8>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800491c:	f7fc fe7a 	bl	8001614 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004922:	bf00      	nop
 8004924:	4b18      	ldr	r3, [pc, #96]	; (8004988 <SD_read+0xa8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d108      	bne.n	800493e <SD_read+0x5e>
 800492c:	f7fc fe72 	bl	8001614 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f247 522f 	movw	r2, #29999	; 0x752f
 800493a:	4293      	cmp	r3, r2
 800493c:	d9f2      	bls.n	8004924 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800493e:	4b12      	ldr	r3, [pc, #72]	; (8004988 <SD_read+0xa8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
 800494a:	e017      	b.n	800497c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800494c:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <SD_read+0xa8>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004952:	f7fc fe5f 	bl	8001614 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004958:	e007      	b.n	800496a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800495a:	f7ff ff0b 	bl	8004774 <BSP_SD_GetCardState>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <SD_read+0x8a>
          {
            res = RES_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004968:	e008      	b.n	800497c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800496a:	f7fc fe53 	bl	8001614 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f247 522f 	movw	r2, #29999	; 0x752f
 8004978:	4293      	cmp	r3, r2
 800497a:	d9ee      	bls.n	800495a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800497c:	7dfb      	ldrb	r3, [r7, #23]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000288 	.word	0x20000288

0800498c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	4603      	mov	r3, r0
 800499a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <SD_write+0xa8>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80049a6:	f247 5030 	movw	r0, #30000	; 0x7530
 80049aa:	f7ff ff33 	bl	8004814 <SD_CheckStatusWithTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da01      	bge.n	80049b8 <SD_write+0x2c>
  {
    return res;
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	e038      	b.n	8004a2a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	68b8      	ldr	r0, [r7, #8]
 80049be:	f7ff febf 	bl	8004740 <BSP_SD_WriteBlocks_DMA>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d12f      	bne.n	8004a28 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80049c8:	f7fc fe24 	bl	8001614 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80049ce:	bf00      	nop
 80049d0:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <SD_write+0xa8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d108      	bne.n	80049ea <SD_write+0x5e>
 80049d8:	f7fc fe1c 	bl	8001614 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f247 522f 	movw	r2, #29999	; 0x752f
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d9f2      	bls.n	80049d0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80049ea:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <SD_write+0xa8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	75fb      	strb	r3, [r7, #23]
 80049f6:	e017      	b.n	8004a28 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <SD_write+0xa8>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80049fe:	f7fc fe09 	bl	8001614 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a04:	e007      	b.n	8004a16 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004a06:	f7ff feb5 	bl	8004774 <BSP_SD_GetCardState>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <SD_write+0x8a>
          {
            res = RES_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]
            break;
 8004a14:	e008      	b.n	8004a28 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a16:	f7fc fdfd 	bl	8001614 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f247 522f 	movw	r2, #29999	; 0x752f
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d9ee      	bls.n	8004a06 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000284 	.word	0x20000284

08004a38 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08c      	sub	sp, #48	; 0x30
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	603a      	str	r2, [r7, #0]
 8004a42:	71fb      	strb	r3, [r7, #7]
 8004a44:	460b      	mov	r3, r1
 8004a46:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a4e:	4b25      	ldr	r3, [pc, #148]	; (8004ae4 <SD_ioctl+0xac>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <SD_ioctl+0x28>
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e03c      	b.n	8004ada <SD_ioctl+0xa2>

  switch (cmd)
 8004a60:	79bb      	ldrb	r3, [r7, #6]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d834      	bhi.n	8004ad0 <SD_ioctl+0x98>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <SD_ioctl+0x34>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a85 	.word	0x08004a85
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004ab7 	.word	0x08004ab7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004a82:	e028      	b.n	8004ad6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004a84:	f107 030c 	add.w	r3, r7, #12
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fe83 	bl	8004794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004a9a:	e01c      	b.n	8004ad6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fe77 	bl	8004794 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004ab4:	e00f      	b.n	8004ad6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004ab6:	f107 030c 	add.w	r3, r7, #12
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fe6a 	bl	8004794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	0a5a      	lsrs	r2, r3, #9
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004ace:	e002      	b.n	8004ad6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3730      	adds	r7, #48	; 0x30
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000009 	.word	0x20000009

08004ae8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <BSP_SD_WriteCpltCallback+0x14>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
}
 8004af2:	bf00      	nop
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	20000284 	.word	0x20000284

08004b00 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <BSP_SD_ReadCpltCallback+0x14>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	20000288 	.word	0x20000288

08004b18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	4613      	mov	r3, r2
 8004b24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <FATFS_LinkDriverEx+0x94>)
 8004b30:	7a5b      	ldrb	r3, [r3, #9]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d131      	bne.n	8004b9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004b38:	4b1c      	ldr	r3, [pc, #112]	; (8004bac <FATFS_LinkDriverEx+0x94>)
 8004b3a:	7a5b      	ldrb	r3, [r3, #9]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <FATFS_LinkDriverEx+0x94>)
 8004b42:	2100      	movs	r1, #0
 8004b44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004b46:	4b19      	ldr	r3, [pc, #100]	; (8004bac <FATFS_LinkDriverEx+0x94>)
 8004b48:	7a5b      	ldrb	r3, [r3, #9]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	4a17      	ldr	r2, [pc, #92]	; (8004bac <FATFS_LinkDriverEx+0x94>)
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <FATFS_LinkDriverEx+0x94>)
 8004b58:	7a5b      	ldrb	r3, [r3, #9]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <FATFS_LinkDriverEx+0x94>)
 8004b60:	4413      	add	r3, r2
 8004b62:	79fa      	ldrb	r2, [r7, #7]
 8004b64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004b66:	4b11      	ldr	r3, [pc, #68]	; (8004bac <FATFS_LinkDriverEx+0x94>)
 8004b68:	7a5b      	ldrb	r3, [r3, #9]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	b2d1      	uxtb	r1, r2
 8004b70:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <FATFS_LinkDriverEx+0x94>)
 8004b72:	7251      	strb	r1, [r2, #9]
 8004b74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004b76:	7dbb      	ldrb	r3, [r7, #22]
 8004b78:	3330      	adds	r3, #48	; 0x30
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	3301      	adds	r3, #1
 8004b84:	223a      	movs	r2, #58	; 0x3a
 8004b86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	3302      	adds	r3, #2
 8004b8c:	222f      	movs	r2, #47	; 0x2f
 8004b8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	3303      	adds	r3, #3
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	2000028c 	.word	0x2000028c

08004bb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ffaa 	bl	8004b18 <FATFS_LinkDriverEx>
 8004bc4:	4603      	mov	r3, r0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <__cvt>:
 8004bce:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd2:	ec55 4b10 	vmov	r4, r5, d0
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	460e      	mov	r6, r1
 8004bda:	4619      	mov	r1, r3
 8004bdc:	462b      	mov	r3, r5
 8004bde:	bfbb      	ittet	lt
 8004be0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004be4:	461d      	movlt	r5, r3
 8004be6:	2300      	movge	r3, #0
 8004be8:	232d      	movlt	r3, #45	; 0x2d
 8004bea:	700b      	strb	r3, [r1, #0]
 8004bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bf2:	4691      	mov	r9, r2
 8004bf4:	f023 0820 	bic.w	r8, r3, #32
 8004bf8:	bfbc      	itt	lt
 8004bfa:	4622      	movlt	r2, r4
 8004bfc:	4614      	movlt	r4, r2
 8004bfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c02:	d005      	beq.n	8004c10 <__cvt+0x42>
 8004c04:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c08:	d100      	bne.n	8004c0c <__cvt+0x3e>
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	e000      	b.n	8004c12 <__cvt+0x44>
 8004c10:	2103      	movs	r1, #3
 8004c12:	ab03      	add	r3, sp, #12
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	ab02      	add	r3, sp, #8
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	ec45 4b10 	vmov	d0, r4, r5
 8004c1e:	4653      	mov	r3, sl
 8004c20:	4632      	mov	r2, r6
 8004c22:	f001 f86d 	bl	8005d00 <_dtoa_r>
 8004c26:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c2a:	4607      	mov	r7, r0
 8004c2c:	d102      	bne.n	8004c34 <__cvt+0x66>
 8004c2e:	f019 0f01 	tst.w	r9, #1
 8004c32:	d022      	beq.n	8004c7a <__cvt+0xac>
 8004c34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c38:	eb07 0906 	add.w	r9, r7, r6
 8004c3c:	d110      	bne.n	8004c60 <__cvt+0x92>
 8004c3e:	783b      	ldrb	r3, [r7, #0]
 8004c40:	2b30      	cmp	r3, #48	; 0x30
 8004c42:	d10a      	bne.n	8004c5a <__cvt+0x8c>
 8004c44:	2200      	movs	r2, #0
 8004c46:	2300      	movs	r3, #0
 8004c48:	4620      	mov	r0, r4
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	f7fb ff44 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c50:	b918      	cbnz	r0, 8004c5a <__cvt+0x8c>
 8004c52:	f1c6 0601 	rsb	r6, r6, #1
 8004c56:	f8ca 6000 	str.w	r6, [sl]
 8004c5a:	f8da 3000 	ldr.w	r3, [sl]
 8004c5e:	4499      	add	r9, r3
 8004c60:	2200      	movs	r2, #0
 8004c62:	2300      	movs	r3, #0
 8004c64:	4620      	mov	r0, r4
 8004c66:	4629      	mov	r1, r5
 8004c68:	f7fb ff36 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c6c:	b108      	cbz	r0, 8004c72 <__cvt+0xa4>
 8004c6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c72:	2230      	movs	r2, #48	; 0x30
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	454b      	cmp	r3, r9
 8004c78:	d307      	bcc.n	8004c8a <__cvt+0xbc>
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c7e:	1bdb      	subs	r3, r3, r7
 8004c80:	4638      	mov	r0, r7
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	b004      	add	sp, #16
 8004c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8a:	1c59      	adds	r1, r3, #1
 8004c8c:	9103      	str	r1, [sp, #12]
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	e7f0      	b.n	8004c74 <__cvt+0xa6>

08004c92 <__exponent>:
 8004c92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c94:	4603      	mov	r3, r0
 8004c96:	2900      	cmp	r1, #0
 8004c98:	bfb8      	it	lt
 8004c9a:	4249      	neglt	r1, r1
 8004c9c:	f803 2b02 	strb.w	r2, [r3], #2
 8004ca0:	bfb4      	ite	lt
 8004ca2:	222d      	movlt	r2, #45	; 0x2d
 8004ca4:	222b      	movge	r2, #43	; 0x2b
 8004ca6:	2909      	cmp	r1, #9
 8004ca8:	7042      	strb	r2, [r0, #1]
 8004caa:	dd2a      	ble.n	8004d02 <__exponent+0x70>
 8004cac:	f10d 0207 	add.w	r2, sp, #7
 8004cb0:	4617      	mov	r7, r2
 8004cb2:	260a      	movs	r6, #10
 8004cb4:	4694      	mov	ip, r2
 8004cb6:	fb91 f5f6 	sdiv	r5, r1, r6
 8004cba:	fb06 1415 	mls	r4, r6, r5, r1
 8004cbe:	3430      	adds	r4, #48	; 0x30
 8004cc0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	2c63      	cmp	r4, #99	; 0x63
 8004cc8:	f102 32ff 	add.w	r2, r2, #4294967295
 8004ccc:	4629      	mov	r1, r5
 8004cce:	dcf1      	bgt.n	8004cb4 <__exponent+0x22>
 8004cd0:	3130      	adds	r1, #48	; 0x30
 8004cd2:	f1ac 0402 	sub.w	r4, ip, #2
 8004cd6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004cda:	1c41      	adds	r1, r0, #1
 8004cdc:	4622      	mov	r2, r4
 8004cde:	42ba      	cmp	r2, r7
 8004ce0:	d30a      	bcc.n	8004cf8 <__exponent+0x66>
 8004ce2:	f10d 0209 	add.w	r2, sp, #9
 8004ce6:	eba2 020c 	sub.w	r2, r2, ip
 8004cea:	42bc      	cmp	r4, r7
 8004cec:	bf88      	it	hi
 8004cee:	2200      	movhi	r2, #0
 8004cf0:	4413      	add	r3, r2
 8004cf2:	1a18      	subs	r0, r3, r0
 8004cf4:	b003      	add	sp, #12
 8004cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cf8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004cfc:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004d00:	e7ed      	b.n	8004cde <__exponent+0x4c>
 8004d02:	2330      	movs	r3, #48	; 0x30
 8004d04:	3130      	adds	r1, #48	; 0x30
 8004d06:	7083      	strb	r3, [r0, #2]
 8004d08:	70c1      	strb	r1, [r0, #3]
 8004d0a:	1d03      	adds	r3, r0, #4
 8004d0c:	e7f1      	b.n	8004cf2 <__exponent+0x60>
	...

08004d10 <_printf_float>:
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	ed2d 8b02 	vpush	{d8}
 8004d18:	b08d      	sub	sp, #52	; 0x34
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d20:	4616      	mov	r6, r2
 8004d22:	461f      	mov	r7, r3
 8004d24:	4605      	mov	r5, r0
 8004d26:	f000 fee5 	bl	8005af4 <_localeconv_r>
 8004d2a:	f8d0 a000 	ldr.w	sl, [r0]
 8004d2e:	4650      	mov	r0, sl
 8004d30:	f7fb faa6 	bl	8000280 <strlen>
 8004d34:	2300      	movs	r3, #0
 8004d36:	930a      	str	r3, [sp, #40]	; 0x28
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	9305      	str	r3, [sp, #20]
 8004d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d44:	3307      	adds	r3, #7
 8004d46:	f023 0307 	bic.w	r3, r3, #7
 8004d4a:	f103 0208 	add.w	r2, r3, #8
 8004d4e:	f8c8 2000 	str.w	r2, [r8]
 8004d52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d5a:	9307      	str	r3, [sp, #28]
 8004d5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d60:	ee08 0a10 	vmov	s16, r0
 8004d64:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004d68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d6c:	4b9e      	ldr	r3, [pc, #632]	; (8004fe8 <_printf_float+0x2d8>)
 8004d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d72:	f7fb fee3 	bl	8000b3c <__aeabi_dcmpun>
 8004d76:	bb88      	cbnz	r0, 8004ddc <_printf_float+0xcc>
 8004d78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d7c:	4b9a      	ldr	r3, [pc, #616]	; (8004fe8 <_printf_float+0x2d8>)
 8004d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d82:	f7fb febd 	bl	8000b00 <__aeabi_dcmple>
 8004d86:	bb48      	cbnz	r0, 8004ddc <_printf_float+0xcc>
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	4649      	mov	r1, r9
 8004d90:	f7fb feac 	bl	8000aec <__aeabi_dcmplt>
 8004d94:	b110      	cbz	r0, 8004d9c <_printf_float+0x8c>
 8004d96:	232d      	movs	r3, #45	; 0x2d
 8004d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9c:	4a93      	ldr	r2, [pc, #588]	; (8004fec <_printf_float+0x2dc>)
 8004d9e:	4b94      	ldr	r3, [pc, #592]	; (8004ff0 <_printf_float+0x2e0>)
 8004da0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004da4:	bf94      	ite	ls
 8004da6:	4690      	movls	r8, r2
 8004da8:	4698      	movhi	r8, r3
 8004daa:	2303      	movs	r3, #3
 8004dac:	6123      	str	r3, [r4, #16]
 8004dae:	9b05      	ldr	r3, [sp, #20]
 8004db0:	f023 0304 	bic.w	r3, r3, #4
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	f04f 0900 	mov.w	r9, #0
 8004dba:	9700      	str	r7, [sp, #0]
 8004dbc:	4633      	mov	r3, r6
 8004dbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 f9da 	bl	800517c <_printf_common>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	f040 8090 	bne.w	8004eee <_printf_float+0x1de>
 8004dce:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd2:	b00d      	add	sp, #52	; 0x34
 8004dd4:	ecbd 8b02 	vpop	{d8}
 8004dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ddc:	4642      	mov	r2, r8
 8004dde:	464b      	mov	r3, r9
 8004de0:	4640      	mov	r0, r8
 8004de2:	4649      	mov	r1, r9
 8004de4:	f7fb feaa 	bl	8000b3c <__aeabi_dcmpun>
 8004de8:	b140      	cbz	r0, 8004dfc <_printf_float+0xec>
 8004dea:	464b      	mov	r3, r9
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bfbc      	itt	lt
 8004df0:	232d      	movlt	r3, #45	; 0x2d
 8004df2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004df6:	4a7f      	ldr	r2, [pc, #508]	; (8004ff4 <_printf_float+0x2e4>)
 8004df8:	4b7f      	ldr	r3, [pc, #508]	; (8004ff8 <_printf_float+0x2e8>)
 8004dfa:	e7d1      	b.n	8004da0 <_printf_float+0x90>
 8004dfc:	6863      	ldr	r3, [r4, #4]
 8004dfe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e02:	9206      	str	r2, [sp, #24]
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	d13f      	bne.n	8004e88 <_printf_float+0x178>
 8004e08:	2306      	movs	r3, #6
 8004e0a:	6063      	str	r3, [r4, #4]
 8004e0c:	9b05      	ldr	r3, [sp, #20]
 8004e0e:	6861      	ldr	r1, [r4, #4]
 8004e10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e14:	2300      	movs	r3, #0
 8004e16:	9303      	str	r3, [sp, #12]
 8004e18:	ab0a      	add	r3, sp, #40	; 0x28
 8004e1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e1e:	ab09      	add	r3, sp, #36	; 0x24
 8004e20:	ec49 8b10 	vmov	d0, r8, r9
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	6022      	str	r2, [r4, #0]
 8004e28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f7ff fece 	bl	8004bce <__cvt>
 8004e32:	9b06      	ldr	r3, [sp, #24]
 8004e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e36:	2b47      	cmp	r3, #71	; 0x47
 8004e38:	4680      	mov	r8, r0
 8004e3a:	d108      	bne.n	8004e4e <_printf_float+0x13e>
 8004e3c:	1cc8      	adds	r0, r1, #3
 8004e3e:	db02      	blt.n	8004e46 <_printf_float+0x136>
 8004e40:	6863      	ldr	r3, [r4, #4]
 8004e42:	4299      	cmp	r1, r3
 8004e44:	dd41      	ble.n	8004eca <_printf_float+0x1ba>
 8004e46:	f1ab 0302 	sub.w	r3, fp, #2
 8004e4a:	fa5f fb83 	uxtb.w	fp, r3
 8004e4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e52:	d820      	bhi.n	8004e96 <_printf_float+0x186>
 8004e54:	3901      	subs	r1, #1
 8004e56:	465a      	mov	r2, fp
 8004e58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e5c:	9109      	str	r1, [sp, #36]	; 0x24
 8004e5e:	f7ff ff18 	bl	8004c92 <__exponent>
 8004e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e64:	1813      	adds	r3, r2, r0
 8004e66:	2a01      	cmp	r2, #1
 8004e68:	4681      	mov	r9, r0
 8004e6a:	6123      	str	r3, [r4, #16]
 8004e6c:	dc02      	bgt.n	8004e74 <_printf_float+0x164>
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	07d2      	lsls	r2, r2, #31
 8004e72:	d501      	bpl.n	8004e78 <_printf_float+0x168>
 8004e74:	3301      	adds	r3, #1
 8004e76:	6123      	str	r3, [r4, #16]
 8004e78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d09c      	beq.n	8004dba <_printf_float+0xaa>
 8004e80:	232d      	movs	r3, #45	; 0x2d
 8004e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e86:	e798      	b.n	8004dba <_printf_float+0xaa>
 8004e88:	9a06      	ldr	r2, [sp, #24]
 8004e8a:	2a47      	cmp	r2, #71	; 0x47
 8004e8c:	d1be      	bne.n	8004e0c <_printf_float+0xfc>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1bc      	bne.n	8004e0c <_printf_float+0xfc>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e7b9      	b.n	8004e0a <_printf_float+0xfa>
 8004e96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e9a:	d118      	bne.n	8004ece <_printf_float+0x1be>
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	6863      	ldr	r3, [r4, #4]
 8004ea0:	dd0b      	ble.n	8004eba <_printf_float+0x1aa>
 8004ea2:	6121      	str	r1, [r4, #16]
 8004ea4:	b913      	cbnz	r3, 8004eac <_printf_float+0x19c>
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	07d0      	lsls	r0, r2, #31
 8004eaa:	d502      	bpl.n	8004eb2 <_printf_float+0x1a2>
 8004eac:	3301      	adds	r3, #1
 8004eae:	440b      	add	r3, r1
 8004eb0:	6123      	str	r3, [r4, #16]
 8004eb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004eb4:	f04f 0900 	mov.w	r9, #0
 8004eb8:	e7de      	b.n	8004e78 <_printf_float+0x168>
 8004eba:	b913      	cbnz	r3, 8004ec2 <_printf_float+0x1b2>
 8004ebc:	6822      	ldr	r2, [r4, #0]
 8004ebe:	07d2      	lsls	r2, r2, #31
 8004ec0:	d501      	bpl.n	8004ec6 <_printf_float+0x1b6>
 8004ec2:	3302      	adds	r3, #2
 8004ec4:	e7f4      	b.n	8004eb0 <_printf_float+0x1a0>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e7f2      	b.n	8004eb0 <_printf_float+0x1a0>
 8004eca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed0:	4299      	cmp	r1, r3
 8004ed2:	db05      	blt.n	8004ee0 <_printf_float+0x1d0>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	6121      	str	r1, [r4, #16]
 8004ed8:	07d8      	lsls	r0, r3, #31
 8004eda:	d5ea      	bpl.n	8004eb2 <_printf_float+0x1a2>
 8004edc:	1c4b      	adds	r3, r1, #1
 8004ede:	e7e7      	b.n	8004eb0 <_printf_float+0x1a0>
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	bfd4      	ite	le
 8004ee4:	f1c1 0202 	rsble	r2, r1, #2
 8004ee8:	2201      	movgt	r2, #1
 8004eea:	4413      	add	r3, r2
 8004eec:	e7e0      	b.n	8004eb0 <_printf_float+0x1a0>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	055a      	lsls	r2, r3, #21
 8004ef2:	d407      	bmi.n	8004f04 <_printf_float+0x1f4>
 8004ef4:	6923      	ldr	r3, [r4, #16]
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4628      	mov	r0, r5
 8004efc:	47b8      	blx	r7
 8004efe:	3001      	adds	r0, #1
 8004f00:	d12c      	bne.n	8004f5c <_printf_float+0x24c>
 8004f02:	e764      	b.n	8004dce <_printf_float+0xbe>
 8004f04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f08:	f240 80e0 	bls.w	80050cc <_printf_float+0x3bc>
 8004f0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f10:	2200      	movs	r2, #0
 8004f12:	2300      	movs	r3, #0
 8004f14:	f7fb fde0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d034      	beq.n	8004f86 <_printf_float+0x276>
 8004f1c:	4a37      	ldr	r2, [pc, #220]	; (8004ffc <_printf_float+0x2ec>)
 8004f1e:	2301      	movs	r3, #1
 8004f20:	4631      	mov	r1, r6
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	f43f af51 	beq.w	8004dce <_printf_float+0xbe>
 8004f2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f30:	429a      	cmp	r2, r3
 8004f32:	db02      	blt.n	8004f3a <_printf_float+0x22a>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	07d8      	lsls	r0, r3, #31
 8004f38:	d510      	bpl.n	8004f5c <_printf_float+0x24c>
 8004f3a:	ee18 3a10 	vmov	r3, s16
 8004f3e:	4652      	mov	r2, sl
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	f43f af41 	beq.w	8004dce <_printf_float+0xbe>
 8004f4c:	f04f 0800 	mov.w	r8, #0
 8004f50:	f104 091a 	add.w	r9, r4, #26
 8004f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	4543      	cmp	r3, r8
 8004f5a:	dc09      	bgt.n	8004f70 <_printf_float+0x260>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	079b      	lsls	r3, r3, #30
 8004f60:	f100 8107 	bmi.w	8005172 <_printf_float+0x462>
 8004f64:	68e0      	ldr	r0, [r4, #12]
 8004f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f68:	4298      	cmp	r0, r3
 8004f6a:	bfb8      	it	lt
 8004f6c:	4618      	movlt	r0, r3
 8004f6e:	e730      	b.n	8004dd2 <_printf_float+0xc2>
 8004f70:	2301      	movs	r3, #1
 8004f72:	464a      	mov	r2, r9
 8004f74:	4631      	mov	r1, r6
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	f43f af27 	beq.w	8004dce <_printf_float+0xbe>
 8004f80:	f108 0801 	add.w	r8, r8, #1
 8004f84:	e7e6      	b.n	8004f54 <_printf_float+0x244>
 8004f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	dc39      	bgt.n	8005000 <_printf_float+0x2f0>
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <_printf_float+0x2ec>)
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4631      	mov	r1, r6
 8004f92:	4628      	mov	r0, r5
 8004f94:	47b8      	blx	r7
 8004f96:	3001      	adds	r0, #1
 8004f98:	f43f af19 	beq.w	8004dce <_printf_float+0xbe>
 8004f9c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	d102      	bne.n	8004faa <_printf_float+0x29a>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	07d9      	lsls	r1, r3, #31
 8004fa8:	d5d8      	bpl.n	8004f5c <_printf_float+0x24c>
 8004faa:	ee18 3a10 	vmov	r3, s16
 8004fae:	4652      	mov	r2, sl
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	f43f af09 	beq.w	8004dce <_printf_float+0xbe>
 8004fbc:	f04f 0900 	mov.w	r9, #0
 8004fc0:	f104 0a1a 	add.w	sl, r4, #26
 8004fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc6:	425b      	negs	r3, r3
 8004fc8:	454b      	cmp	r3, r9
 8004fca:	dc01      	bgt.n	8004fd0 <_printf_float+0x2c0>
 8004fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fce:	e792      	b.n	8004ef6 <_printf_float+0x1e6>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4652      	mov	r2, sl
 8004fd4:	4631      	mov	r1, r6
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	47b8      	blx	r7
 8004fda:	3001      	adds	r0, #1
 8004fdc:	f43f aef7 	beq.w	8004dce <_printf_float+0xbe>
 8004fe0:	f109 0901 	add.w	r9, r9, #1
 8004fe4:	e7ee      	b.n	8004fc4 <_printf_float+0x2b4>
 8004fe6:	bf00      	nop
 8004fe8:	7fefffff 	.word	0x7fefffff
 8004fec:	08009394 	.word	0x08009394
 8004ff0:	08009398 	.word	0x08009398
 8004ff4:	0800939c 	.word	0x0800939c
 8004ff8:	080093a0 	.word	0x080093a0
 8004ffc:	080093a4 	.word	0x080093a4
 8005000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005002:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005004:	429a      	cmp	r2, r3
 8005006:	bfa8      	it	ge
 8005008:	461a      	movge	r2, r3
 800500a:	2a00      	cmp	r2, #0
 800500c:	4691      	mov	r9, r2
 800500e:	dc37      	bgt.n	8005080 <_printf_float+0x370>
 8005010:	f04f 0b00 	mov.w	fp, #0
 8005014:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005018:	f104 021a 	add.w	r2, r4, #26
 800501c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800501e:	9305      	str	r3, [sp, #20]
 8005020:	eba3 0309 	sub.w	r3, r3, r9
 8005024:	455b      	cmp	r3, fp
 8005026:	dc33      	bgt.n	8005090 <_printf_float+0x380>
 8005028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800502c:	429a      	cmp	r2, r3
 800502e:	db3b      	blt.n	80050a8 <_printf_float+0x398>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	07da      	lsls	r2, r3, #31
 8005034:	d438      	bmi.n	80050a8 <_printf_float+0x398>
 8005036:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800503a:	eba2 0903 	sub.w	r9, r2, r3
 800503e:	9b05      	ldr	r3, [sp, #20]
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	4591      	cmp	r9, r2
 8005044:	bfa8      	it	ge
 8005046:	4691      	movge	r9, r2
 8005048:	f1b9 0f00 	cmp.w	r9, #0
 800504c:	dc35      	bgt.n	80050ba <_printf_float+0x3aa>
 800504e:	f04f 0800 	mov.w	r8, #0
 8005052:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005056:	f104 0a1a 	add.w	sl, r4, #26
 800505a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	eba3 0309 	sub.w	r3, r3, r9
 8005064:	4543      	cmp	r3, r8
 8005066:	f77f af79 	ble.w	8004f5c <_printf_float+0x24c>
 800506a:	2301      	movs	r3, #1
 800506c:	4652      	mov	r2, sl
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	47b8      	blx	r7
 8005074:	3001      	adds	r0, #1
 8005076:	f43f aeaa 	beq.w	8004dce <_printf_float+0xbe>
 800507a:	f108 0801 	add.w	r8, r8, #1
 800507e:	e7ec      	b.n	800505a <_printf_float+0x34a>
 8005080:	4613      	mov	r3, r2
 8005082:	4631      	mov	r1, r6
 8005084:	4642      	mov	r2, r8
 8005086:	4628      	mov	r0, r5
 8005088:	47b8      	blx	r7
 800508a:	3001      	adds	r0, #1
 800508c:	d1c0      	bne.n	8005010 <_printf_float+0x300>
 800508e:	e69e      	b.n	8004dce <_printf_float+0xbe>
 8005090:	2301      	movs	r3, #1
 8005092:	4631      	mov	r1, r6
 8005094:	4628      	mov	r0, r5
 8005096:	9205      	str	r2, [sp, #20]
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f43f ae97 	beq.w	8004dce <_printf_float+0xbe>
 80050a0:	9a05      	ldr	r2, [sp, #20]
 80050a2:	f10b 0b01 	add.w	fp, fp, #1
 80050a6:	e7b9      	b.n	800501c <_printf_float+0x30c>
 80050a8:	ee18 3a10 	vmov	r3, s16
 80050ac:	4652      	mov	r2, sl
 80050ae:	4631      	mov	r1, r6
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b8      	blx	r7
 80050b4:	3001      	adds	r0, #1
 80050b6:	d1be      	bne.n	8005036 <_printf_float+0x326>
 80050b8:	e689      	b.n	8004dce <_printf_float+0xbe>
 80050ba:	9a05      	ldr	r2, [sp, #20]
 80050bc:	464b      	mov	r3, r9
 80050be:	4442      	add	r2, r8
 80050c0:	4631      	mov	r1, r6
 80050c2:	4628      	mov	r0, r5
 80050c4:	47b8      	blx	r7
 80050c6:	3001      	adds	r0, #1
 80050c8:	d1c1      	bne.n	800504e <_printf_float+0x33e>
 80050ca:	e680      	b.n	8004dce <_printf_float+0xbe>
 80050cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ce:	2a01      	cmp	r2, #1
 80050d0:	dc01      	bgt.n	80050d6 <_printf_float+0x3c6>
 80050d2:	07db      	lsls	r3, r3, #31
 80050d4:	d53a      	bpl.n	800514c <_printf_float+0x43c>
 80050d6:	2301      	movs	r3, #1
 80050d8:	4642      	mov	r2, r8
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	f43f ae74 	beq.w	8004dce <_printf_float+0xbe>
 80050e6:	ee18 3a10 	vmov	r3, s16
 80050ea:	4652      	mov	r2, sl
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f ae6b 	beq.w	8004dce <_printf_float+0xbe>
 80050f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050fc:	2200      	movs	r2, #0
 80050fe:	2300      	movs	r3, #0
 8005100:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005104:	f7fb fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005108:	b9d8      	cbnz	r0, 8005142 <_printf_float+0x432>
 800510a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800510e:	f108 0201 	add.w	r2, r8, #1
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	d10e      	bne.n	800513a <_printf_float+0x42a>
 800511c:	e657      	b.n	8004dce <_printf_float+0xbe>
 800511e:	2301      	movs	r3, #1
 8005120:	4652      	mov	r2, sl
 8005122:	4631      	mov	r1, r6
 8005124:	4628      	mov	r0, r5
 8005126:	47b8      	blx	r7
 8005128:	3001      	adds	r0, #1
 800512a:	f43f ae50 	beq.w	8004dce <_printf_float+0xbe>
 800512e:	f108 0801 	add.w	r8, r8, #1
 8005132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005134:	3b01      	subs	r3, #1
 8005136:	4543      	cmp	r3, r8
 8005138:	dcf1      	bgt.n	800511e <_printf_float+0x40e>
 800513a:	464b      	mov	r3, r9
 800513c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005140:	e6da      	b.n	8004ef8 <_printf_float+0x1e8>
 8005142:	f04f 0800 	mov.w	r8, #0
 8005146:	f104 0a1a 	add.w	sl, r4, #26
 800514a:	e7f2      	b.n	8005132 <_printf_float+0x422>
 800514c:	2301      	movs	r3, #1
 800514e:	4642      	mov	r2, r8
 8005150:	e7df      	b.n	8005112 <_printf_float+0x402>
 8005152:	2301      	movs	r3, #1
 8005154:	464a      	mov	r2, r9
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	f43f ae36 	beq.w	8004dce <_printf_float+0xbe>
 8005162:	f108 0801 	add.w	r8, r8, #1
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800516a:	1a5b      	subs	r3, r3, r1
 800516c:	4543      	cmp	r3, r8
 800516e:	dcf0      	bgt.n	8005152 <_printf_float+0x442>
 8005170:	e6f8      	b.n	8004f64 <_printf_float+0x254>
 8005172:	f04f 0800 	mov.w	r8, #0
 8005176:	f104 0919 	add.w	r9, r4, #25
 800517a:	e7f4      	b.n	8005166 <_printf_float+0x456>

0800517c <_printf_common>:
 800517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	4616      	mov	r6, r2
 8005182:	4699      	mov	r9, r3
 8005184:	688a      	ldr	r2, [r1, #8]
 8005186:	690b      	ldr	r3, [r1, #16]
 8005188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800518c:	4293      	cmp	r3, r2
 800518e:	bfb8      	it	lt
 8005190:	4613      	movlt	r3, r2
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005198:	4607      	mov	r7, r0
 800519a:	460c      	mov	r4, r1
 800519c:	b10a      	cbz	r2, 80051a2 <_printf_common+0x26>
 800519e:	3301      	adds	r3, #1
 80051a0:	6033      	str	r3, [r6, #0]
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	0699      	lsls	r1, r3, #26
 80051a6:	bf42      	ittt	mi
 80051a8:	6833      	ldrmi	r3, [r6, #0]
 80051aa:	3302      	addmi	r3, #2
 80051ac:	6033      	strmi	r3, [r6, #0]
 80051ae:	6825      	ldr	r5, [r4, #0]
 80051b0:	f015 0506 	ands.w	r5, r5, #6
 80051b4:	d106      	bne.n	80051c4 <_printf_common+0x48>
 80051b6:	f104 0a19 	add.w	sl, r4, #25
 80051ba:	68e3      	ldr	r3, [r4, #12]
 80051bc:	6832      	ldr	r2, [r6, #0]
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	42ab      	cmp	r3, r5
 80051c2:	dc26      	bgt.n	8005212 <_printf_common+0x96>
 80051c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051c8:	1e13      	subs	r3, r2, #0
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	bf18      	it	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	0692      	lsls	r2, r2, #26
 80051d2:	d42b      	bmi.n	800522c <_printf_common+0xb0>
 80051d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051d8:	4649      	mov	r1, r9
 80051da:	4638      	mov	r0, r7
 80051dc:	47c0      	blx	r8
 80051de:	3001      	adds	r0, #1
 80051e0:	d01e      	beq.n	8005220 <_printf_common+0xa4>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	6922      	ldr	r2, [r4, #16]
 80051e6:	f003 0306 	and.w	r3, r3, #6
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	bf02      	ittt	eq
 80051ee:	68e5      	ldreq	r5, [r4, #12]
 80051f0:	6833      	ldreq	r3, [r6, #0]
 80051f2:	1aed      	subeq	r5, r5, r3
 80051f4:	68a3      	ldr	r3, [r4, #8]
 80051f6:	bf0c      	ite	eq
 80051f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051fc:	2500      	movne	r5, #0
 80051fe:	4293      	cmp	r3, r2
 8005200:	bfc4      	itt	gt
 8005202:	1a9b      	subgt	r3, r3, r2
 8005204:	18ed      	addgt	r5, r5, r3
 8005206:	2600      	movs	r6, #0
 8005208:	341a      	adds	r4, #26
 800520a:	42b5      	cmp	r5, r6
 800520c:	d11a      	bne.n	8005244 <_printf_common+0xc8>
 800520e:	2000      	movs	r0, #0
 8005210:	e008      	b.n	8005224 <_printf_common+0xa8>
 8005212:	2301      	movs	r3, #1
 8005214:	4652      	mov	r2, sl
 8005216:	4649      	mov	r1, r9
 8005218:	4638      	mov	r0, r7
 800521a:	47c0      	blx	r8
 800521c:	3001      	adds	r0, #1
 800521e:	d103      	bne.n	8005228 <_printf_common+0xac>
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005228:	3501      	adds	r5, #1
 800522a:	e7c6      	b.n	80051ba <_printf_common+0x3e>
 800522c:	18e1      	adds	r1, r4, r3
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	2030      	movs	r0, #48	; 0x30
 8005232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005236:	4422      	add	r2, r4
 8005238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800523c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005240:	3302      	adds	r3, #2
 8005242:	e7c7      	b.n	80051d4 <_printf_common+0x58>
 8005244:	2301      	movs	r3, #1
 8005246:	4622      	mov	r2, r4
 8005248:	4649      	mov	r1, r9
 800524a:	4638      	mov	r0, r7
 800524c:	47c0      	blx	r8
 800524e:	3001      	adds	r0, #1
 8005250:	d0e6      	beq.n	8005220 <_printf_common+0xa4>
 8005252:	3601      	adds	r6, #1
 8005254:	e7d9      	b.n	800520a <_printf_common+0x8e>
	...

08005258 <_printf_i>:
 8005258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	7e0f      	ldrb	r7, [r1, #24]
 800525e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005260:	2f78      	cmp	r7, #120	; 0x78
 8005262:	4691      	mov	r9, r2
 8005264:	4680      	mov	r8, r0
 8005266:	460c      	mov	r4, r1
 8005268:	469a      	mov	sl, r3
 800526a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800526e:	d807      	bhi.n	8005280 <_printf_i+0x28>
 8005270:	2f62      	cmp	r7, #98	; 0x62
 8005272:	d80a      	bhi.n	800528a <_printf_i+0x32>
 8005274:	2f00      	cmp	r7, #0
 8005276:	f000 80d4 	beq.w	8005422 <_printf_i+0x1ca>
 800527a:	2f58      	cmp	r7, #88	; 0x58
 800527c:	f000 80c0 	beq.w	8005400 <_printf_i+0x1a8>
 8005280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005288:	e03a      	b.n	8005300 <_printf_i+0xa8>
 800528a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800528e:	2b15      	cmp	r3, #21
 8005290:	d8f6      	bhi.n	8005280 <_printf_i+0x28>
 8005292:	a101      	add	r1, pc, #4	; (adr r1, 8005298 <_printf_i+0x40>)
 8005294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005298:	080052f1 	.word	0x080052f1
 800529c:	08005305 	.word	0x08005305
 80052a0:	08005281 	.word	0x08005281
 80052a4:	08005281 	.word	0x08005281
 80052a8:	08005281 	.word	0x08005281
 80052ac:	08005281 	.word	0x08005281
 80052b0:	08005305 	.word	0x08005305
 80052b4:	08005281 	.word	0x08005281
 80052b8:	08005281 	.word	0x08005281
 80052bc:	08005281 	.word	0x08005281
 80052c0:	08005281 	.word	0x08005281
 80052c4:	08005409 	.word	0x08005409
 80052c8:	08005331 	.word	0x08005331
 80052cc:	080053c3 	.word	0x080053c3
 80052d0:	08005281 	.word	0x08005281
 80052d4:	08005281 	.word	0x08005281
 80052d8:	0800542b 	.word	0x0800542b
 80052dc:	08005281 	.word	0x08005281
 80052e0:	08005331 	.word	0x08005331
 80052e4:	08005281 	.word	0x08005281
 80052e8:	08005281 	.word	0x08005281
 80052ec:	080053cb 	.word	0x080053cb
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	1d1a      	adds	r2, r3, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	602a      	str	r2, [r5, #0]
 80052f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005300:	2301      	movs	r3, #1
 8005302:	e09f      	b.n	8005444 <_printf_i+0x1ec>
 8005304:	6820      	ldr	r0, [r4, #0]
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	0607      	lsls	r7, r0, #24
 800530a:	f103 0104 	add.w	r1, r3, #4
 800530e:	6029      	str	r1, [r5, #0]
 8005310:	d501      	bpl.n	8005316 <_printf_i+0xbe>
 8005312:	681e      	ldr	r6, [r3, #0]
 8005314:	e003      	b.n	800531e <_printf_i+0xc6>
 8005316:	0646      	lsls	r6, r0, #25
 8005318:	d5fb      	bpl.n	8005312 <_printf_i+0xba>
 800531a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800531e:	2e00      	cmp	r6, #0
 8005320:	da03      	bge.n	800532a <_printf_i+0xd2>
 8005322:	232d      	movs	r3, #45	; 0x2d
 8005324:	4276      	negs	r6, r6
 8005326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532a:	485a      	ldr	r0, [pc, #360]	; (8005494 <_printf_i+0x23c>)
 800532c:	230a      	movs	r3, #10
 800532e:	e012      	b.n	8005356 <_printf_i+0xfe>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	1d19      	adds	r1, r3, #4
 8005336:	6029      	str	r1, [r5, #0]
 8005338:	0605      	lsls	r5, r0, #24
 800533a:	d501      	bpl.n	8005340 <_printf_i+0xe8>
 800533c:	681e      	ldr	r6, [r3, #0]
 800533e:	e002      	b.n	8005346 <_printf_i+0xee>
 8005340:	0641      	lsls	r1, r0, #25
 8005342:	d5fb      	bpl.n	800533c <_printf_i+0xe4>
 8005344:	881e      	ldrh	r6, [r3, #0]
 8005346:	4853      	ldr	r0, [pc, #332]	; (8005494 <_printf_i+0x23c>)
 8005348:	2f6f      	cmp	r7, #111	; 0x6f
 800534a:	bf0c      	ite	eq
 800534c:	2308      	moveq	r3, #8
 800534e:	230a      	movne	r3, #10
 8005350:	2100      	movs	r1, #0
 8005352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005356:	6865      	ldr	r5, [r4, #4]
 8005358:	60a5      	str	r5, [r4, #8]
 800535a:	2d00      	cmp	r5, #0
 800535c:	bfa2      	ittt	ge
 800535e:	6821      	ldrge	r1, [r4, #0]
 8005360:	f021 0104 	bicge.w	r1, r1, #4
 8005364:	6021      	strge	r1, [r4, #0]
 8005366:	b90e      	cbnz	r6, 800536c <_printf_i+0x114>
 8005368:	2d00      	cmp	r5, #0
 800536a:	d04b      	beq.n	8005404 <_printf_i+0x1ac>
 800536c:	4615      	mov	r5, r2
 800536e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005372:	fb03 6711 	mls	r7, r3, r1, r6
 8005376:	5dc7      	ldrb	r7, [r0, r7]
 8005378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800537c:	4637      	mov	r7, r6
 800537e:	42bb      	cmp	r3, r7
 8005380:	460e      	mov	r6, r1
 8005382:	d9f4      	bls.n	800536e <_printf_i+0x116>
 8005384:	2b08      	cmp	r3, #8
 8005386:	d10b      	bne.n	80053a0 <_printf_i+0x148>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	07de      	lsls	r6, r3, #31
 800538c:	d508      	bpl.n	80053a0 <_printf_i+0x148>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	6861      	ldr	r1, [r4, #4]
 8005392:	4299      	cmp	r1, r3
 8005394:	bfde      	ittt	le
 8005396:	2330      	movle	r3, #48	; 0x30
 8005398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800539c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053a0:	1b52      	subs	r2, r2, r5
 80053a2:	6122      	str	r2, [r4, #16]
 80053a4:	f8cd a000 	str.w	sl, [sp]
 80053a8:	464b      	mov	r3, r9
 80053aa:	aa03      	add	r2, sp, #12
 80053ac:	4621      	mov	r1, r4
 80053ae:	4640      	mov	r0, r8
 80053b0:	f7ff fee4 	bl	800517c <_printf_common>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d14a      	bne.n	800544e <_printf_i+0x1f6>
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	b004      	add	sp, #16
 80053be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	f043 0320 	orr.w	r3, r3, #32
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	4833      	ldr	r0, [pc, #204]	; (8005498 <_printf_i+0x240>)
 80053cc:	2778      	movs	r7, #120	; 0x78
 80053ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	6829      	ldr	r1, [r5, #0]
 80053d6:	061f      	lsls	r7, r3, #24
 80053d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80053dc:	d402      	bmi.n	80053e4 <_printf_i+0x18c>
 80053de:	065f      	lsls	r7, r3, #25
 80053e0:	bf48      	it	mi
 80053e2:	b2b6      	uxthmi	r6, r6
 80053e4:	07df      	lsls	r7, r3, #31
 80053e6:	bf48      	it	mi
 80053e8:	f043 0320 	orrmi.w	r3, r3, #32
 80053ec:	6029      	str	r1, [r5, #0]
 80053ee:	bf48      	it	mi
 80053f0:	6023      	strmi	r3, [r4, #0]
 80053f2:	b91e      	cbnz	r6, 80053fc <_printf_i+0x1a4>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	f023 0320 	bic.w	r3, r3, #32
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	2310      	movs	r3, #16
 80053fe:	e7a7      	b.n	8005350 <_printf_i+0xf8>
 8005400:	4824      	ldr	r0, [pc, #144]	; (8005494 <_printf_i+0x23c>)
 8005402:	e7e4      	b.n	80053ce <_printf_i+0x176>
 8005404:	4615      	mov	r5, r2
 8005406:	e7bd      	b.n	8005384 <_printf_i+0x12c>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	6826      	ldr	r6, [r4, #0]
 800540c:	6961      	ldr	r1, [r4, #20]
 800540e:	1d18      	adds	r0, r3, #4
 8005410:	6028      	str	r0, [r5, #0]
 8005412:	0635      	lsls	r5, r6, #24
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	d501      	bpl.n	800541c <_printf_i+0x1c4>
 8005418:	6019      	str	r1, [r3, #0]
 800541a:	e002      	b.n	8005422 <_printf_i+0x1ca>
 800541c:	0670      	lsls	r0, r6, #25
 800541e:	d5fb      	bpl.n	8005418 <_printf_i+0x1c0>
 8005420:	8019      	strh	r1, [r3, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	4615      	mov	r5, r2
 8005428:	e7bc      	b.n	80053a4 <_printf_i+0x14c>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	602a      	str	r2, [r5, #0]
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	2100      	movs	r1, #0
 8005436:	4628      	mov	r0, r5
 8005438:	f7fa fed2 	bl	80001e0 <memchr>
 800543c:	b108      	cbz	r0, 8005442 <_printf_i+0x1ea>
 800543e:	1b40      	subs	r0, r0, r5
 8005440:	6060      	str	r0, [r4, #4]
 8005442:	6863      	ldr	r3, [r4, #4]
 8005444:	6123      	str	r3, [r4, #16]
 8005446:	2300      	movs	r3, #0
 8005448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800544c:	e7aa      	b.n	80053a4 <_printf_i+0x14c>
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	462a      	mov	r2, r5
 8005452:	4649      	mov	r1, r9
 8005454:	4640      	mov	r0, r8
 8005456:	47d0      	blx	sl
 8005458:	3001      	adds	r0, #1
 800545a:	d0ad      	beq.n	80053b8 <_printf_i+0x160>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	079b      	lsls	r3, r3, #30
 8005460:	d413      	bmi.n	800548a <_printf_i+0x232>
 8005462:	68e0      	ldr	r0, [r4, #12]
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	4298      	cmp	r0, r3
 8005468:	bfb8      	it	lt
 800546a:	4618      	movlt	r0, r3
 800546c:	e7a6      	b.n	80053bc <_printf_i+0x164>
 800546e:	2301      	movs	r3, #1
 8005470:	4632      	mov	r2, r6
 8005472:	4649      	mov	r1, r9
 8005474:	4640      	mov	r0, r8
 8005476:	47d0      	blx	sl
 8005478:	3001      	adds	r0, #1
 800547a:	d09d      	beq.n	80053b8 <_printf_i+0x160>
 800547c:	3501      	adds	r5, #1
 800547e:	68e3      	ldr	r3, [r4, #12]
 8005480:	9903      	ldr	r1, [sp, #12]
 8005482:	1a5b      	subs	r3, r3, r1
 8005484:	42ab      	cmp	r3, r5
 8005486:	dcf2      	bgt.n	800546e <_printf_i+0x216>
 8005488:	e7eb      	b.n	8005462 <_printf_i+0x20a>
 800548a:	2500      	movs	r5, #0
 800548c:	f104 0619 	add.w	r6, r4, #25
 8005490:	e7f5      	b.n	800547e <_printf_i+0x226>
 8005492:	bf00      	nop
 8005494:	080093a6 	.word	0x080093a6
 8005498:	080093b7 	.word	0x080093b7

0800549c <_scanf_float>:
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	b087      	sub	sp, #28
 80054a2:	4617      	mov	r7, r2
 80054a4:	9303      	str	r3, [sp, #12]
 80054a6:	688b      	ldr	r3, [r1, #8]
 80054a8:	1e5a      	subs	r2, r3, #1
 80054aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80054ae:	bf83      	ittte	hi
 80054b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80054b4:	195b      	addhi	r3, r3, r5
 80054b6:	9302      	strhi	r3, [sp, #8]
 80054b8:	2300      	movls	r3, #0
 80054ba:	bf86      	itte	hi
 80054bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80054c0:	608b      	strhi	r3, [r1, #8]
 80054c2:	9302      	strls	r3, [sp, #8]
 80054c4:	680b      	ldr	r3, [r1, #0]
 80054c6:	468b      	mov	fp, r1
 80054c8:	2500      	movs	r5, #0
 80054ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80054ce:	f84b 3b1c 	str.w	r3, [fp], #28
 80054d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80054d6:	4680      	mov	r8, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	465e      	mov	r6, fp
 80054dc:	46aa      	mov	sl, r5
 80054de:	46a9      	mov	r9, r5
 80054e0:	9501      	str	r5, [sp, #4]
 80054e2:	68a2      	ldr	r2, [r4, #8]
 80054e4:	b152      	cbz	r2, 80054fc <_scanf_float+0x60>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b4e      	cmp	r3, #78	; 0x4e
 80054ec:	d864      	bhi.n	80055b8 <_scanf_float+0x11c>
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d83c      	bhi.n	800556c <_scanf_float+0xd0>
 80054f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80054f6:	b2c8      	uxtb	r0, r1
 80054f8:	280e      	cmp	r0, #14
 80054fa:	d93a      	bls.n	8005572 <_scanf_float+0xd6>
 80054fc:	f1b9 0f00 	cmp.w	r9, #0
 8005500:	d003      	beq.n	800550a <_scanf_float+0x6e>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800550e:	f1ba 0f01 	cmp.w	sl, #1
 8005512:	f200 8113 	bhi.w	800573c <_scanf_float+0x2a0>
 8005516:	455e      	cmp	r6, fp
 8005518:	f200 8105 	bhi.w	8005726 <_scanf_float+0x28a>
 800551c:	2501      	movs	r5, #1
 800551e:	4628      	mov	r0, r5
 8005520:	b007      	add	sp, #28
 8005522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005526:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800552a:	2a0d      	cmp	r2, #13
 800552c:	d8e6      	bhi.n	80054fc <_scanf_float+0x60>
 800552e:	a101      	add	r1, pc, #4	; (adr r1, 8005534 <_scanf_float+0x98>)
 8005530:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005534:	08005673 	.word	0x08005673
 8005538:	080054fd 	.word	0x080054fd
 800553c:	080054fd 	.word	0x080054fd
 8005540:	080054fd 	.word	0x080054fd
 8005544:	080056d3 	.word	0x080056d3
 8005548:	080056ab 	.word	0x080056ab
 800554c:	080054fd 	.word	0x080054fd
 8005550:	080054fd 	.word	0x080054fd
 8005554:	08005681 	.word	0x08005681
 8005558:	080054fd 	.word	0x080054fd
 800555c:	080054fd 	.word	0x080054fd
 8005560:	080054fd 	.word	0x080054fd
 8005564:	080054fd 	.word	0x080054fd
 8005568:	08005639 	.word	0x08005639
 800556c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005570:	e7db      	b.n	800552a <_scanf_float+0x8e>
 8005572:	290e      	cmp	r1, #14
 8005574:	d8c2      	bhi.n	80054fc <_scanf_float+0x60>
 8005576:	a001      	add	r0, pc, #4	; (adr r0, 800557c <_scanf_float+0xe0>)
 8005578:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800557c:	0800562b 	.word	0x0800562b
 8005580:	080054fd 	.word	0x080054fd
 8005584:	0800562b 	.word	0x0800562b
 8005588:	080056bf 	.word	0x080056bf
 800558c:	080054fd 	.word	0x080054fd
 8005590:	080055d9 	.word	0x080055d9
 8005594:	08005615 	.word	0x08005615
 8005598:	08005615 	.word	0x08005615
 800559c:	08005615 	.word	0x08005615
 80055a0:	08005615 	.word	0x08005615
 80055a4:	08005615 	.word	0x08005615
 80055a8:	08005615 	.word	0x08005615
 80055ac:	08005615 	.word	0x08005615
 80055b0:	08005615 	.word	0x08005615
 80055b4:	08005615 	.word	0x08005615
 80055b8:	2b6e      	cmp	r3, #110	; 0x6e
 80055ba:	d809      	bhi.n	80055d0 <_scanf_float+0x134>
 80055bc:	2b60      	cmp	r3, #96	; 0x60
 80055be:	d8b2      	bhi.n	8005526 <_scanf_float+0x8a>
 80055c0:	2b54      	cmp	r3, #84	; 0x54
 80055c2:	d077      	beq.n	80056b4 <_scanf_float+0x218>
 80055c4:	2b59      	cmp	r3, #89	; 0x59
 80055c6:	d199      	bne.n	80054fc <_scanf_float+0x60>
 80055c8:	2d07      	cmp	r5, #7
 80055ca:	d197      	bne.n	80054fc <_scanf_float+0x60>
 80055cc:	2508      	movs	r5, #8
 80055ce:	e029      	b.n	8005624 <_scanf_float+0x188>
 80055d0:	2b74      	cmp	r3, #116	; 0x74
 80055d2:	d06f      	beq.n	80056b4 <_scanf_float+0x218>
 80055d4:	2b79      	cmp	r3, #121	; 0x79
 80055d6:	e7f6      	b.n	80055c6 <_scanf_float+0x12a>
 80055d8:	6821      	ldr	r1, [r4, #0]
 80055da:	05c8      	lsls	r0, r1, #23
 80055dc:	d51a      	bpl.n	8005614 <_scanf_float+0x178>
 80055de:	9b02      	ldr	r3, [sp, #8]
 80055e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80055e4:	6021      	str	r1, [r4, #0]
 80055e6:	f109 0901 	add.w	r9, r9, #1
 80055ea:	b11b      	cbz	r3, 80055f4 <_scanf_float+0x158>
 80055ec:	3b01      	subs	r3, #1
 80055ee:	3201      	adds	r2, #1
 80055f0:	9302      	str	r3, [sp, #8]
 80055f2:	60a2      	str	r2, [r4, #8]
 80055f4:	68a3      	ldr	r3, [r4, #8]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	60a3      	str	r3, [r4, #8]
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	3301      	adds	r3, #1
 80055fe:	6123      	str	r3, [r4, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3b01      	subs	r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	f340 8084 	ble.w	8005714 <_scanf_float+0x278>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	3301      	adds	r3, #1
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	e766      	b.n	80054e2 <_scanf_float+0x46>
 8005614:	eb1a 0f05 	cmn.w	sl, r5
 8005618:	f47f af70 	bne.w	80054fc <_scanf_float+0x60>
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005622:	6022      	str	r2, [r4, #0]
 8005624:	f806 3b01 	strb.w	r3, [r6], #1
 8005628:	e7e4      	b.n	80055f4 <_scanf_float+0x158>
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	0610      	lsls	r0, r2, #24
 800562e:	f57f af65 	bpl.w	80054fc <_scanf_float+0x60>
 8005632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005636:	e7f4      	b.n	8005622 <_scanf_float+0x186>
 8005638:	f1ba 0f00 	cmp.w	sl, #0
 800563c:	d10e      	bne.n	800565c <_scanf_float+0x1c0>
 800563e:	f1b9 0f00 	cmp.w	r9, #0
 8005642:	d10e      	bne.n	8005662 <_scanf_float+0x1c6>
 8005644:	6822      	ldr	r2, [r4, #0]
 8005646:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800564a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800564e:	d108      	bne.n	8005662 <_scanf_float+0x1c6>
 8005650:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	f04f 0a01 	mov.w	sl, #1
 800565a:	e7e3      	b.n	8005624 <_scanf_float+0x188>
 800565c:	f1ba 0f02 	cmp.w	sl, #2
 8005660:	d055      	beq.n	800570e <_scanf_float+0x272>
 8005662:	2d01      	cmp	r5, #1
 8005664:	d002      	beq.n	800566c <_scanf_float+0x1d0>
 8005666:	2d04      	cmp	r5, #4
 8005668:	f47f af48 	bne.w	80054fc <_scanf_float+0x60>
 800566c:	3501      	adds	r5, #1
 800566e:	b2ed      	uxtb	r5, r5
 8005670:	e7d8      	b.n	8005624 <_scanf_float+0x188>
 8005672:	f1ba 0f01 	cmp.w	sl, #1
 8005676:	f47f af41 	bne.w	80054fc <_scanf_float+0x60>
 800567a:	f04f 0a02 	mov.w	sl, #2
 800567e:	e7d1      	b.n	8005624 <_scanf_float+0x188>
 8005680:	b97d      	cbnz	r5, 80056a2 <_scanf_float+0x206>
 8005682:	f1b9 0f00 	cmp.w	r9, #0
 8005686:	f47f af3c 	bne.w	8005502 <_scanf_float+0x66>
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005690:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005694:	f47f af39 	bne.w	800550a <_scanf_float+0x6e>
 8005698:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800569c:	6022      	str	r2, [r4, #0]
 800569e:	2501      	movs	r5, #1
 80056a0:	e7c0      	b.n	8005624 <_scanf_float+0x188>
 80056a2:	2d03      	cmp	r5, #3
 80056a4:	d0e2      	beq.n	800566c <_scanf_float+0x1d0>
 80056a6:	2d05      	cmp	r5, #5
 80056a8:	e7de      	b.n	8005668 <_scanf_float+0x1cc>
 80056aa:	2d02      	cmp	r5, #2
 80056ac:	f47f af26 	bne.w	80054fc <_scanf_float+0x60>
 80056b0:	2503      	movs	r5, #3
 80056b2:	e7b7      	b.n	8005624 <_scanf_float+0x188>
 80056b4:	2d06      	cmp	r5, #6
 80056b6:	f47f af21 	bne.w	80054fc <_scanf_float+0x60>
 80056ba:	2507      	movs	r5, #7
 80056bc:	e7b2      	b.n	8005624 <_scanf_float+0x188>
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	0591      	lsls	r1, r2, #22
 80056c2:	f57f af1b 	bpl.w	80054fc <_scanf_float+0x60>
 80056c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80056d0:	e7a8      	b.n	8005624 <_scanf_float+0x188>
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80056d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80056dc:	d006      	beq.n	80056ec <_scanf_float+0x250>
 80056de:	0550      	lsls	r0, r2, #21
 80056e0:	f57f af0c 	bpl.w	80054fc <_scanf_float+0x60>
 80056e4:	f1b9 0f00 	cmp.w	r9, #0
 80056e8:	f43f af0f 	beq.w	800550a <_scanf_float+0x6e>
 80056ec:	0591      	lsls	r1, r2, #22
 80056ee:	bf58      	it	pl
 80056f0:	9901      	ldrpl	r1, [sp, #4]
 80056f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056f6:	bf58      	it	pl
 80056f8:	eba9 0101 	subpl.w	r1, r9, r1
 80056fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005700:	bf58      	it	pl
 8005702:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005706:	6022      	str	r2, [r4, #0]
 8005708:	f04f 0900 	mov.w	r9, #0
 800570c:	e78a      	b.n	8005624 <_scanf_float+0x188>
 800570e:	f04f 0a03 	mov.w	sl, #3
 8005712:	e787      	b.n	8005624 <_scanf_float+0x188>
 8005714:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005718:	4639      	mov	r1, r7
 800571a:	4640      	mov	r0, r8
 800571c:	4798      	blx	r3
 800571e:	2800      	cmp	r0, #0
 8005720:	f43f aedf 	beq.w	80054e2 <_scanf_float+0x46>
 8005724:	e6ea      	b.n	80054fc <_scanf_float+0x60>
 8005726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800572a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800572e:	463a      	mov	r2, r7
 8005730:	4640      	mov	r0, r8
 8005732:	4798      	blx	r3
 8005734:	6923      	ldr	r3, [r4, #16]
 8005736:	3b01      	subs	r3, #1
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	e6ec      	b.n	8005516 <_scanf_float+0x7a>
 800573c:	1e6b      	subs	r3, r5, #1
 800573e:	2b06      	cmp	r3, #6
 8005740:	d825      	bhi.n	800578e <_scanf_float+0x2f2>
 8005742:	2d02      	cmp	r5, #2
 8005744:	d836      	bhi.n	80057b4 <_scanf_float+0x318>
 8005746:	455e      	cmp	r6, fp
 8005748:	f67f aee8 	bls.w	800551c <_scanf_float+0x80>
 800574c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005750:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005754:	463a      	mov	r2, r7
 8005756:	4640      	mov	r0, r8
 8005758:	4798      	blx	r3
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	3b01      	subs	r3, #1
 800575e:	6123      	str	r3, [r4, #16]
 8005760:	e7f1      	b.n	8005746 <_scanf_float+0x2aa>
 8005762:	9802      	ldr	r0, [sp, #8]
 8005764:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005768:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800576c:	9002      	str	r0, [sp, #8]
 800576e:	463a      	mov	r2, r7
 8005770:	4640      	mov	r0, r8
 8005772:	4798      	blx	r3
 8005774:	6923      	ldr	r3, [r4, #16]
 8005776:	3b01      	subs	r3, #1
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800577e:	fa5f fa8a 	uxtb.w	sl, sl
 8005782:	f1ba 0f02 	cmp.w	sl, #2
 8005786:	d1ec      	bne.n	8005762 <_scanf_float+0x2c6>
 8005788:	3d03      	subs	r5, #3
 800578a:	b2ed      	uxtb	r5, r5
 800578c:	1b76      	subs	r6, r6, r5
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	05da      	lsls	r2, r3, #23
 8005792:	d52f      	bpl.n	80057f4 <_scanf_float+0x358>
 8005794:	055b      	lsls	r3, r3, #21
 8005796:	d510      	bpl.n	80057ba <_scanf_float+0x31e>
 8005798:	455e      	cmp	r6, fp
 800579a:	f67f aebf 	bls.w	800551c <_scanf_float+0x80>
 800579e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057a6:	463a      	mov	r2, r7
 80057a8:	4640      	mov	r0, r8
 80057aa:	4798      	blx	r3
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	6123      	str	r3, [r4, #16]
 80057b2:	e7f1      	b.n	8005798 <_scanf_float+0x2fc>
 80057b4:	46aa      	mov	sl, r5
 80057b6:	9602      	str	r6, [sp, #8]
 80057b8:	e7df      	b.n	800577a <_scanf_float+0x2de>
 80057ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	2965      	cmp	r1, #101	; 0x65
 80057c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80057c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80057ca:	6123      	str	r3, [r4, #16]
 80057cc:	d00c      	beq.n	80057e8 <_scanf_float+0x34c>
 80057ce:	2945      	cmp	r1, #69	; 0x45
 80057d0:	d00a      	beq.n	80057e8 <_scanf_float+0x34c>
 80057d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057d6:	463a      	mov	r2, r7
 80057d8:	4640      	mov	r0, r8
 80057da:	4798      	blx	r3
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	1eb5      	subs	r5, r6, #2
 80057e6:	6123      	str	r3, [r4, #16]
 80057e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057ec:	463a      	mov	r2, r7
 80057ee:	4640      	mov	r0, r8
 80057f0:	4798      	blx	r3
 80057f2:	462e      	mov	r6, r5
 80057f4:	6825      	ldr	r5, [r4, #0]
 80057f6:	f015 0510 	ands.w	r5, r5, #16
 80057fa:	d158      	bne.n	80058ae <_scanf_float+0x412>
 80057fc:	7035      	strb	r5, [r6, #0]
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005808:	d11c      	bne.n	8005844 <_scanf_float+0x3a8>
 800580a:	9b01      	ldr	r3, [sp, #4]
 800580c:	454b      	cmp	r3, r9
 800580e:	eba3 0209 	sub.w	r2, r3, r9
 8005812:	d124      	bne.n	800585e <_scanf_float+0x3c2>
 8005814:	2200      	movs	r2, #0
 8005816:	4659      	mov	r1, fp
 8005818:	4640      	mov	r0, r8
 800581a:	f002 fc1d 	bl	8008058 <_strtod_r>
 800581e:	9b03      	ldr	r3, [sp, #12]
 8005820:	6821      	ldr	r1, [r4, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f011 0f02 	tst.w	r1, #2
 8005828:	ec57 6b10 	vmov	r6, r7, d0
 800582c:	f103 0204 	add.w	r2, r3, #4
 8005830:	d020      	beq.n	8005874 <_scanf_float+0x3d8>
 8005832:	9903      	ldr	r1, [sp, #12]
 8005834:	600a      	str	r2, [r1, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	e9c3 6700 	strd	r6, r7, [r3]
 800583c:	68e3      	ldr	r3, [r4, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	60e3      	str	r3, [r4, #12]
 8005842:	e66c      	b.n	800551e <_scanf_float+0x82>
 8005844:	9b04      	ldr	r3, [sp, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0e4      	beq.n	8005814 <_scanf_float+0x378>
 800584a:	9905      	ldr	r1, [sp, #20]
 800584c:	230a      	movs	r3, #10
 800584e:	462a      	mov	r2, r5
 8005850:	3101      	adds	r1, #1
 8005852:	4640      	mov	r0, r8
 8005854:	f002 fc88 	bl	8008168 <_strtol_r>
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	9e05      	ldr	r6, [sp, #20]
 800585c:	1ac2      	subs	r2, r0, r3
 800585e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005862:	429e      	cmp	r6, r3
 8005864:	bf28      	it	cs
 8005866:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800586a:	4912      	ldr	r1, [pc, #72]	; (80058b4 <_scanf_float+0x418>)
 800586c:	4630      	mov	r0, r6
 800586e:	f000 f8d5 	bl	8005a1c <siprintf>
 8005872:	e7cf      	b.n	8005814 <_scanf_float+0x378>
 8005874:	f011 0f04 	tst.w	r1, #4
 8005878:	9903      	ldr	r1, [sp, #12]
 800587a:	600a      	str	r2, [r1, #0]
 800587c:	d1db      	bne.n	8005836 <_scanf_float+0x39a>
 800587e:	f8d3 8000 	ldr.w	r8, [r3]
 8005882:	ee10 2a10 	vmov	r2, s0
 8005886:	ee10 0a10 	vmov	r0, s0
 800588a:	463b      	mov	r3, r7
 800588c:	4639      	mov	r1, r7
 800588e:	f7fb f955 	bl	8000b3c <__aeabi_dcmpun>
 8005892:	b128      	cbz	r0, 80058a0 <_scanf_float+0x404>
 8005894:	4808      	ldr	r0, [pc, #32]	; (80058b8 <_scanf_float+0x41c>)
 8005896:	f000 f9a3 	bl	8005be0 <nanf>
 800589a:	ed88 0a00 	vstr	s0, [r8]
 800589e:	e7cd      	b.n	800583c <_scanf_float+0x3a0>
 80058a0:	4630      	mov	r0, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7fb f9a8 	bl	8000bf8 <__aeabi_d2f>
 80058a8:	f8c8 0000 	str.w	r0, [r8]
 80058ac:	e7c6      	b.n	800583c <_scanf_float+0x3a0>
 80058ae:	2500      	movs	r5, #0
 80058b0:	e635      	b.n	800551e <_scanf_float+0x82>
 80058b2:	bf00      	nop
 80058b4:	080093c8 	.word	0x080093c8
 80058b8:	0800975d 	.word	0x0800975d

080058bc <std>:
 80058bc:	2300      	movs	r3, #0
 80058be:	b510      	push	{r4, lr}
 80058c0:	4604      	mov	r4, r0
 80058c2:	e9c0 3300 	strd	r3, r3, [r0]
 80058c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058ca:	6083      	str	r3, [r0, #8]
 80058cc:	8181      	strh	r1, [r0, #12]
 80058ce:	6643      	str	r3, [r0, #100]	; 0x64
 80058d0:	81c2      	strh	r2, [r0, #14]
 80058d2:	6183      	str	r3, [r0, #24]
 80058d4:	4619      	mov	r1, r3
 80058d6:	2208      	movs	r2, #8
 80058d8:	305c      	adds	r0, #92	; 0x5c
 80058da:	f000 f902 	bl	8005ae2 <memset>
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <std+0x38>)
 80058e0:	6263      	str	r3, [r4, #36]	; 0x24
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <std+0x3c>)
 80058e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80058e6:	4b05      	ldr	r3, [pc, #20]	; (80058fc <std+0x40>)
 80058e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058ea:	4b05      	ldr	r3, [pc, #20]	; (8005900 <std+0x44>)
 80058ec:	6224      	str	r4, [r4, #32]
 80058ee:	6323      	str	r3, [r4, #48]	; 0x30
 80058f0:	bd10      	pop	{r4, pc}
 80058f2:	bf00      	nop
 80058f4:	08005a5d 	.word	0x08005a5d
 80058f8:	08005a7f 	.word	0x08005a7f
 80058fc:	08005ab7 	.word	0x08005ab7
 8005900:	08005adb 	.word	0x08005adb

08005904 <stdio_exit_handler>:
 8005904:	4a02      	ldr	r2, [pc, #8]	; (8005910 <stdio_exit_handler+0xc>)
 8005906:	4903      	ldr	r1, [pc, #12]	; (8005914 <stdio_exit_handler+0x10>)
 8005908:	4803      	ldr	r0, [pc, #12]	; (8005918 <stdio_exit_handler+0x14>)
 800590a:	f000 b869 	b.w	80059e0 <_fwalk_sglue>
 800590e:	bf00      	nop
 8005910:	2000000c 	.word	0x2000000c
 8005914:	08008529 	.word	0x08008529
 8005918:	20000018 	.word	0x20000018

0800591c <cleanup_stdio>:
 800591c:	6841      	ldr	r1, [r0, #4]
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <cleanup_stdio+0x34>)
 8005920:	4299      	cmp	r1, r3
 8005922:	b510      	push	{r4, lr}
 8005924:	4604      	mov	r4, r0
 8005926:	d001      	beq.n	800592c <cleanup_stdio+0x10>
 8005928:	f002 fdfe 	bl	8008528 <_fflush_r>
 800592c:	68a1      	ldr	r1, [r4, #8]
 800592e:	4b09      	ldr	r3, [pc, #36]	; (8005954 <cleanup_stdio+0x38>)
 8005930:	4299      	cmp	r1, r3
 8005932:	d002      	beq.n	800593a <cleanup_stdio+0x1e>
 8005934:	4620      	mov	r0, r4
 8005936:	f002 fdf7 	bl	8008528 <_fflush_r>
 800593a:	68e1      	ldr	r1, [r4, #12]
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <cleanup_stdio+0x3c>)
 800593e:	4299      	cmp	r1, r3
 8005940:	d004      	beq.n	800594c <cleanup_stdio+0x30>
 8005942:	4620      	mov	r0, r4
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005948:	f002 bdee 	b.w	8008528 <_fflush_r>
 800594c:	bd10      	pop	{r4, pc}
 800594e:	bf00      	nop
 8005950:	20000298 	.word	0x20000298
 8005954:	20000300 	.word	0x20000300
 8005958:	20000368 	.word	0x20000368

0800595c <global_stdio_init.part.0>:
 800595c:	b510      	push	{r4, lr}
 800595e:	4b0b      	ldr	r3, [pc, #44]	; (800598c <global_stdio_init.part.0+0x30>)
 8005960:	4c0b      	ldr	r4, [pc, #44]	; (8005990 <global_stdio_init.part.0+0x34>)
 8005962:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <global_stdio_init.part.0+0x38>)
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	4620      	mov	r0, r4
 8005968:	2200      	movs	r2, #0
 800596a:	2104      	movs	r1, #4
 800596c:	f7ff ffa6 	bl	80058bc <std>
 8005970:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005974:	2201      	movs	r2, #1
 8005976:	2109      	movs	r1, #9
 8005978:	f7ff ffa0 	bl	80058bc <std>
 800597c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005980:	2202      	movs	r2, #2
 8005982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005986:	2112      	movs	r1, #18
 8005988:	f7ff bf98 	b.w	80058bc <std>
 800598c:	200003d0 	.word	0x200003d0
 8005990:	20000298 	.word	0x20000298
 8005994:	08005905 	.word	0x08005905

08005998 <__sfp_lock_acquire>:
 8005998:	4801      	ldr	r0, [pc, #4]	; (80059a0 <__sfp_lock_acquire+0x8>)
 800599a:	f000 b91f 	b.w	8005bdc <__retarget_lock_acquire_recursive>
 800599e:	bf00      	nop
 80059a0:	200003d9 	.word	0x200003d9

080059a4 <__sfp_lock_release>:
 80059a4:	4801      	ldr	r0, [pc, #4]	; (80059ac <__sfp_lock_release+0x8>)
 80059a6:	f000 b91a 	b.w	8005bde <__retarget_lock_release_recursive>
 80059aa:	bf00      	nop
 80059ac:	200003d9 	.word	0x200003d9

080059b0 <__sinit>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	4604      	mov	r4, r0
 80059b4:	f7ff fff0 	bl	8005998 <__sfp_lock_acquire>
 80059b8:	6a23      	ldr	r3, [r4, #32]
 80059ba:	b11b      	cbz	r3, 80059c4 <__sinit+0x14>
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f7ff bff0 	b.w	80059a4 <__sfp_lock_release>
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <__sinit+0x28>)
 80059c6:	6223      	str	r3, [r4, #32]
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <__sinit+0x2c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f5      	bne.n	80059bc <__sinit+0xc>
 80059d0:	f7ff ffc4 	bl	800595c <global_stdio_init.part.0>
 80059d4:	e7f2      	b.n	80059bc <__sinit+0xc>
 80059d6:	bf00      	nop
 80059d8:	0800591d 	.word	0x0800591d
 80059dc:	200003d0 	.word	0x200003d0

080059e0 <_fwalk_sglue>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	4688      	mov	r8, r1
 80059e8:	4614      	mov	r4, r2
 80059ea:	2600      	movs	r6, #0
 80059ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059f0:	f1b9 0901 	subs.w	r9, r9, #1
 80059f4:	d505      	bpl.n	8005a02 <_fwalk_sglue+0x22>
 80059f6:	6824      	ldr	r4, [r4, #0]
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d1f7      	bne.n	80059ec <_fwalk_sglue+0xc>
 80059fc:	4630      	mov	r0, r6
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d907      	bls.n	8005a18 <_fwalk_sglue+0x38>
 8005a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <_fwalk_sglue+0x38>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	47c0      	blx	r8
 8005a16:	4306      	orrs	r6, r0
 8005a18:	3568      	adds	r5, #104	; 0x68
 8005a1a:	e7e9      	b.n	80059f0 <_fwalk_sglue+0x10>

08005a1c <siprintf>:
 8005a1c:	b40e      	push	{r1, r2, r3}
 8005a1e:	b500      	push	{lr}
 8005a20:	b09c      	sub	sp, #112	; 0x70
 8005a22:	ab1d      	add	r3, sp, #116	; 0x74
 8005a24:	9002      	str	r0, [sp, #8]
 8005a26:	9006      	str	r0, [sp, #24]
 8005a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a2c:	4809      	ldr	r0, [pc, #36]	; (8005a54 <siprintf+0x38>)
 8005a2e:	9107      	str	r1, [sp, #28]
 8005a30:	9104      	str	r1, [sp, #16]
 8005a32:	4909      	ldr	r1, [pc, #36]	; (8005a58 <siprintf+0x3c>)
 8005a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a38:	9105      	str	r1, [sp, #20]
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	a902      	add	r1, sp, #8
 8005a40:	f002 fbee 	bl	8008220 <_svfiprintf_r>
 8005a44:	9b02      	ldr	r3, [sp, #8]
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	b01c      	add	sp, #112	; 0x70
 8005a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a50:	b003      	add	sp, #12
 8005a52:	4770      	bx	lr
 8005a54:	20000064 	.word	0x20000064
 8005a58:	ffff0208 	.word	0xffff0208

08005a5c <__sread>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	460c      	mov	r4, r1
 8005a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a64:	f000 f86c 	bl	8005b40 <_read_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	bfab      	itete	ge
 8005a6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a70:	181b      	addge	r3, r3, r0
 8005a72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a76:	bfac      	ite	ge
 8005a78:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a7a:	81a3      	strhlt	r3, [r4, #12]
 8005a7c:	bd10      	pop	{r4, pc}

08005a7e <__swrite>:
 8005a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a82:	461f      	mov	r7, r3
 8005a84:	898b      	ldrh	r3, [r1, #12]
 8005a86:	05db      	lsls	r3, r3, #23
 8005a88:	4605      	mov	r5, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	d505      	bpl.n	8005a9c <__swrite+0x1e>
 8005a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a94:	2302      	movs	r3, #2
 8005a96:	2200      	movs	r2, #0
 8005a98:	f000 f840 	bl	8005b1c <_lseek_r>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa6:	81a3      	strh	r3, [r4, #12]
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	463b      	mov	r3, r7
 8005aac:	4628      	mov	r0, r5
 8005aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab2:	f000 b857 	b.w	8005b64 <_write_r>

08005ab6 <__sseek>:
 8005ab6:	b510      	push	{r4, lr}
 8005ab8:	460c      	mov	r4, r1
 8005aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005abe:	f000 f82d 	bl	8005b1c <_lseek_r>
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	bf15      	itete	ne
 8005ac8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ace:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ad2:	81a3      	strheq	r3, [r4, #12]
 8005ad4:	bf18      	it	ne
 8005ad6:	81a3      	strhne	r3, [r4, #12]
 8005ad8:	bd10      	pop	{r4, pc}

08005ada <__sclose>:
 8005ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ade:	f000 b80d 	b.w	8005afc <_close_r>

08005ae2 <memset>:
 8005ae2:	4402      	add	r2, r0
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d100      	bne.n	8005aec <memset+0xa>
 8005aea:	4770      	bx	lr
 8005aec:	f803 1b01 	strb.w	r1, [r3], #1
 8005af0:	e7f9      	b.n	8005ae6 <memset+0x4>
	...

08005af4 <_localeconv_r>:
 8005af4:	4800      	ldr	r0, [pc, #0]	; (8005af8 <_localeconv_r+0x4>)
 8005af6:	4770      	bx	lr
 8005af8:	20000158 	.word	0x20000158

08005afc <_close_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	4d06      	ldr	r5, [pc, #24]	; (8005b18 <_close_r+0x1c>)
 8005b00:	2300      	movs	r3, #0
 8005b02:	4604      	mov	r4, r0
 8005b04:	4608      	mov	r0, r1
 8005b06:	602b      	str	r3, [r5, #0]
 8005b08:	f7fb fc77 	bl	80013fa <_close>
 8005b0c:	1c43      	adds	r3, r0, #1
 8005b0e:	d102      	bne.n	8005b16 <_close_r+0x1a>
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	b103      	cbz	r3, 8005b16 <_close_r+0x1a>
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	bd38      	pop	{r3, r4, r5, pc}
 8005b18:	200003d4 	.word	0x200003d4

08005b1c <_lseek_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d07      	ldr	r5, [pc, #28]	; (8005b3c <_lseek_r+0x20>)
 8005b20:	4604      	mov	r4, r0
 8005b22:	4608      	mov	r0, r1
 8005b24:	4611      	mov	r1, r2
 8005b26:	2200      	movs	r2, #0
 8005b28:	602a      	str	r2, [r5, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f7fb fc8c 	bl	8001448 <_lseek>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_lseek_r+0x1e>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_lseek_r+0x1e>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	200003d4 	.word	0x200003d4

08005b40 <_read_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d07      	ldr	r5, [pc, #28]	; (8005b60 <_read_r+0x20>)
 8005b44:	4604      	mov	r4, r0
 8005b46:	4608      	mov	r0, r1
 8005b48:	4611      	mov	r1, r2
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	602a      	str	r2, [r5, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f7fb fc1a 	bl	8001388 <_read>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d102      	bne.n	8005b5e <_read_r+0x1e>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	b103      	cbz	r3, 8005b5e <_read_r+0x1e>
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	bd38      	pop	{r3, r4, r5, pc}
 8005b60:	200003d4 	.word	0x200003d4

08005b64 <_write_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4d07      	ldr	r5, [pc, #28]	; (8005b84 <_write_r+0x20>)
 8005b68:	4604      	mov	r4, r0
 8005b6a:	4608      	mov	r0, r1
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	602a      	str	r2, [r5, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	f7fb fc25 	bl	80013c2 <_write>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_write_r+0x1e>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_write_r+0x1e>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	200003d4 	.word	0x200003d4

08005b88 <__errno>:
 8005b88:	4b01      	ldr	r3, [pc, #4]	; (8005b90 <__errno+0x8>)
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000064 	.word	0x20000064

08005b94 <__libc_init_array>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	4d0d      	ldr	r5, [pc, #52]	; (8005bcc <__libc_init_array+0x38>)
 8005b98:	4c0d      	ldr	r4, [pc, #52]	; (8005bd0 <__libc_init_array+0x3c>)
 8005b9a:	1b64      	subs	r4, r4, r5
 8005b9c:	10a4      	asrs	r4, r4, #2
 8005b9e:	2600      	movs	r6, #0
 8005ba0:	42a6      	cmp	r6, r4
 8005ba2:	d109      	bne.n	8005bb8 <__libc_init_array+0x24>
 8005ba4:	4d0b      	ldr	r5, [pc, #44]	; (8005bd4 <__libc_init_array+0x40>)
 8005ba6:	4c0c      	ldr	r4, [pc, #48]	; (8005bd8 <__libc_init_array+0x44>)
 8005ba8:	f003 fbd6 	bl	8009358 <_init>
 8005bac:	1b64      	subs	r4, r4, r5
 8005bae:	10a4      	asrs	r4, r4, #2
 8005bb0:	2600      	movs	r6, #0
 8005bb2:	42a6      	cmp	r6, r4
 8005bb4:	d105      	bne.n	8005bc2 <__libc_init_array+0x2e>
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bbc:	4798      	blx	r3
 8005bbe:	3601      	adds	r6, #1
 8005bc0:	e7ee      	b.n	8005ba0 <__libc_init_array+0xc>
 8005bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc6:	4798      	blx	r3
 8005bc8:	3601      	adds	r6, #1
 8005bca:	e7f2      	b.n	8005bb2 <__libc_init_array+0x1e>
 8005bcc:	080097c8 	.word	0x080097c8
 8005bd0:	080097c8 	.word	0x080097c8
 8005bd4:	080097c8 	.word	0x080097c8
 8005bd8:	080097cc 	.word	0x080097cc

08005bdc <__retarget_lock_acquire_recursive>:
 8005bdc:	4770      	bx	lr

08005bde <__retarget_lock_release_recursive>:
 8005bde:	4770      	bx	lr

08005be0 <nanf>:
 8005be0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005be8 <nanf+0x8>
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	7fc00000 	.word	0x7fc00000

08005bec <quorem>:
 8005bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	6903      	ldr	r3, [r0, #16]
 8005bf2:	690c      	ldr	r4, [r1, #16]
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	db7e      	blt.n	8005cf8 <quorem+0x10c>
 8005bfa:	3c01      	subs	r4, #1
 8005bfc:	f101 0814 	add.w	r8, r1, #20
 8005c00:	f100 0514 	add.w	r5, r0, #20
 8005c04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c12:	3301      	adds	r3, #1
 8005c14:	429a      	cmp	r2, r3
 8005c16:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c22:	d331      	bcc.n	8005c88 <quorem+0x9c>
 8005c24:	f04f 0e00 	mov.w	lr, #0
 8005c28:	4640      	mov	r0, r8
 8005c2a:	46ac      	mov	ip, r5
 8005c2c:	46f2      	mov	sl, lr
 8005c2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c32:	b293      	uxth	r3, r2
 8005c34:	fb06 e303 	mla	r3, r6, r3, lr
 8005c38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c3c:	0c1a      	lsrs	r2, r3, #16
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	ebaa 0303 	sub.w	r3, sl, r3
 8005c44:	f8dc a000 	ldr.w	sl, [ip]
 8005c48:	fa13 f38a 	uxtah	r3, r3, sl
 8005c4c:	fb06 220e 	mla	r2, r6, lr, r2
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	9b00      	ldr	r3, [sp, #0]
 8005c54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c62:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c66:	4581      	cmp	r9, r0
 8005c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c6c:	f84c 3b04 	str.w	r3, [ip], #4
 8005c70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c74:	d2db      	bcs.n	8005c2e <quorem+0x42>
 8005c76:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c7a:	b92b      	cbnz	r3, 8005c88 <quorem+0x9c>
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	3b04      	subs	r3, #4
 8005c80:	429d      	cmp	r5, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	d32c      	bcc.n	8005ce0 <quorem+0xf4>
 8005c86:	613c      	str	r4, [r7, #16]
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f001 f9f1 	bl	8007070 <__mcmp>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	db22      	blt.n	8005cd8 <quorem+0xec>
 8005c92:	3601      	adds	r6, #1
 8005c94:	4629      	mov	r1, r5
 8005c96:	2000      	movs	r0, #0
 8005c98:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c9c:	f8d1 c000 	ldr.w	ip, [r1]
 8005ca0:	b293      	uxth	r3, r2
 8005ca2:	1ac3      	subs	r3, r0, r3
 8005ca4:	0c12      	lsrs	r2, r2, #16
 8005ca6:	fa13 f38c 	uxtah	r3, r3, ip
 8005caa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005cae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cb8:	45c1      	cmp	r9, r8
 8005cba:	f841 3b04 	str.w	r3, [r1], #4
 8005cbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cc2:	d2e9      	bcs.n	8005c98 <quorem+0xac>
 8005cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ccc:	b922      	cbnz	r2, 8005cd8 <quorem+0xec>
 8005cce:	3b04      	subs	r3, #4
 8005cd0:	429d      	cmp	r5, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	d30a      	bcc.n	8005cec <quorem+0x100>
 8005cd6:	613c      	str	r4, [r7, #16]
 8005cd8:	4630      	mov	r0, r6
 8005cda:	b003      	add	sp, #12
 8005cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	3b04      	subs	r3, #4
 8005ce4:	2a00      	cmp	r2, #0
 8005ce6:	d1ce      	bne.n	8005c86 <quorem+0x9a>
 8005ce8:	3c01      	subs	r4, #1
 8005cea:	e7c9      	b.n	8005c80 <quorem+0x94>
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	3b04      	subs	r3, #4
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	d1f0      	bne.n	8005cd6 <quorem+0xea>
 8005cf4:	3c01      	subs	r4, #1
 8005cf6:	e7eb      	b.n	8005cd0 <quorem+0xe4>
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e7ee      	b.n	8005cda <quorem+0xee>
 8005cfc:	0000      	movs	r0, r0
	...

08005d00 <_dtoa_r>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	ed2d 8b04 	vpush	{d8-d9}
 8005d08:	69c5      	ldr	r5, [r0, #28]
 8005d0a:	b093      	sub	sp, #76	; 0x4c
 8005d0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005d10:	ec57 6b10 	vmov	r6, r7, d0
 8005d14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d18:	9107      	str	r1, [sp, #28]
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	920a      	str	r2, [sp, #40]	; 0x28
 8005d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8005d20:	b975      	cbnz	r5, 8005d40 <_dtoa_r+0x40>
 8005d22:	2010      	movs	r0, #16
 8005d24:	f000 fe2a 	bl	800697c <malloc>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	61e0      	str	r0, [r4, #28]
 8005d2c:	b920      	cbnz	r0, 8005d38 <_dtoa_r+0x38>
 8005d2e:	4bae      	ldr	r3, [pc, #696]	; (8005fe8 <_dtoa_r+0x2e8>)
 8005d30:	21ef      	movs	r1, #239	; 0xef
 8005d32:	48ae      	ldr	r0, [pc, #696]	; (8005fec <_dtoa_r+0x2ec>)
 8005d34:	f002 fc74 	bl	8008620 <__assert_func>
 8005d38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d3c:	6005      	str	r5, [r0, #0]
 8005d3e:	60c5      	str	r5, [r0, #12]
 8005d40:	69e3      	ldr	r3, [r4, #28]
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	b151      	cbz	r1, 8005d5c <_dtoa_r+0x5c>
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	604a      	str	r2, [r1, #4]
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4093      	lsls	r3, r2
 8005d4e:	608b      	str	r3, [r1, #8]
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 ff07 	bl	8006b64 <_Bfree>
 8005d56:	69e3      	ldr	r3, [r4, #28]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	1e3b      	subs	r3, r7, #0
 8005d5e:	bfbb      	ittet	lt
 8005d60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	9303      	strlt	r3, [sp, #12]
 8005d66:	2300      	movge	r3, #0
 8005d68:	2201      	movlt	r2, #1
 8005d6a:	bfac      	ite	ge
 8005d6c:	f8c8 3000 	strge.w	r3, [r8]
 8005d70:	f8c8 2000 	strlt.w	r2, [r8]
 8005d74:	4b9e      	ldr	r3, [pc, #632]	; (8005ff0 <_dtoa_r+0x2f0>)
 8005d76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d7a:	ea33 0308 	bics.w	r3, r3, r8
 8005d7e:	d11b      	bne.n	8005db8 <_dtoa_r+0xb8>
 8005d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d82:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d8c:	4333      	orrs	r3, r6
 8005d8e:	f000 8593 	beq.w	80068b8 <_dtoa_r+0xbb8>
 8005d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d94:	b963      	cbnz	r3, 8005db0 <_dtoa_r+0xb0>
 8005d96:	4b97      	ldr	r3, [pc, #604]	; (8005ff4 <_dtoa_r+0x2f4>)
 8005d98:	e027      	b.n	8005dea <_dtoa_r+0xea>
 8005d9a:	4b97      	ldr	r3, [pc, #604]	; (8005ff8 <_dtoa_r+0x2f8>)
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	9800      	ldr	r0, [sp, #0]
 8005da6:	b013      	add	sp, #76	; 0x4c
 8005da8:	ecbd 8b04 	vpop	{d8-d9}
 8005dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	4b90      	ldr	r3, [pc, #576]	; (8005ff4 <_dtoa_r+0x2f4>)
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	3303      	adds	r3, #3
 8005db6:	e7f3      	b.n	8005da0 <_dtoa_r+0xa0>
 8005db8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	ec51 0b17 	vmov	r0, r1, d7
 8005dc2:	eeb0 8a47 	vmov.f32	s16, s14
 8005dc6:	eef0 8a67 	vmov.f32	s17, s15
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f7fa fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dd0:	4681      	mov	r9, r0
 8005dd2:	b160      	cbz	r0, 8005dee <_dtoa_r+0xee>
 8005dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8568 	beq.w	80068b2 <_dtoa_r+0xbb2>
 8005de2:	4b86      	ldr	r3, [pc, #536]	; (8005ffc <_dtoa_r+0x2fc>)
 8005de4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	e7da      	b.n	8005da4 <_dtoa_r+0xa4>
 8005dee:	aa10      	add	r2, sp, #64	; 0x40
 8005df0:	a911      	add	r1, sp, #68	; 0x44
 8005df2:	4620      	mov	r0, r4
 8005df4:	eeb0 0a48 	vmov.f32	s0, s16
 8005df8:	eef0 0a68 	vmov.f32	s1, s17
 8005dfc:	f001 fa4e 	bl	800729c <__d2b>
 8005e00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005e04:	4682      	mov	sl, r0
 8005e06:	2d00      	cmp	r5, #0
 8005e08:	d07f      	beq.n	8005f0a <_dtoa_r+0x20a>
 8005e0a:	ee18 3a90 	vmov	r3, s17
 8005e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e16:	ec51 0b18 	vmov	r0, r1, d8
 8005e1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005e26:	4619      	mov	r1, r3
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4b75      	ldr	r3, [pc, #468]	; (8006000 <_dtoa_r+0x300>)
 8005e2c:	f7fa fa34 	bl	8000298 <__aeabi_dsub>
 8005e30:	a367      	add	r3, pc, #412	; (adr r3, 8005fd0 <_dtoa_r+0x2d0>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa fbe7 	bl	8000608 <__aeabi_dmul>
 8005e3a:	a367      	add	r3, pc, #412	; (adr r3, 8005fd8 <_dtoa_r+0x2d8>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fa2c 	bl	800029c <__adddf3>
 8005e44:	4606      	mov	r6, r0
 8005e46:	4628      	mov	r0, r5
 8005e48:	460f      	mov	r7, r1
 8005e4a:	f7fa fb73 	bl	8000534 <__aeabi_i2d>
 8005e4e:	a364      	add	r3, pc, #400	; (adr r3, 8005fe0 <_dtoa_r+0x2e0>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f7fa fbd8 	bl	8000608 <__aeabi_dmul>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa fa1c 	bl	800029c <__adddf3>
 8005e64:	4606      	mov	r6, r0
 8005e66:	460f      	mov	r7, r1
 8005e68:	f7fa fe7e 	bl	8000b68 <__aeabi_d2iz>
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4683      	mov	fp, r0
 8005e70:	2300      	movs	r3, #0
 8005e72:	4630      	mov	r0, r6
 8005e74:	4639      	mov	r1, r7
 8005e76:	f7fa fe39 	bl	8000aec <__aeabi_dcmplt>
 8005e7a:	b148      	cbz	r0, 8005e90 <_dtoa_r+0x190>
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	f7fa fb59 	bl	8000534 <__aeabi_i2d>
 8005e82:	4632      	mov	r2, r6
 8005e84:	463b      	mov	r3, r7
 8005e86:	f7fa fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e8a:	b908      	cbnz	r0, 8005e90 <_dtoa_r+0x190>
 8005e8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e90:	f1bb 0f16 	cmp.w	fp, #22
 8005e94:	d857      	bhi.n	8005f46 <_dtoa_r+0x246>
 8005e96:	4b5b      	ldr	r3, [pc, #364]	; (8006004 <_dtoa_r+0x304>)
 8005e98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	ec51 0b18 	vmov	r0, r1, d8
 8005ea4:	f7fa fe22 	bl	8000aec <__aeabi_dcmplt>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d04e      	beq.n	8005f4a <_dtoa_r+0x24a>
 8005eac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8005eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005eb6:	1b5b      	subs	r3, r3, r5
 8005eb8:	1e5a      	subs	r2, r3, #1
 8005eba:	bf45      	ittet	mi
 8005ebc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ec0:	9305      	strmi	r3, [sp, #20]
 8005ec2:	2300      	movpl	r3, #0
 8005ec4:	2300      	movmi	r3, #0
 8005ec6:	9206      	str	r2, [sp, #24]
 8005ec8:	bf54      	ite	pl
 8005eca:	9305      	strpl	r3, [sp, #20]
 8005ecc:	9306      	strmi	r3, [sp, #24]
 8005ece:	f1bb 0f00 	cmp.w	fp, #0
 8005ed2:	db3c      	blt.n	8005f4e <_dtoa_r+0x24e>
 8005ed4:	9b06      	ldr	r3, [sp, #24]
 8005ed6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005eda:	445b      	add	r3, fp
 8005edc:	9306      	str	r3, [sp, #24]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9308      	str	r3, [sp, #32]
 8005ee2:	9b07      	ldr	r3, [sp, #28]
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d868      	bhi.n	8005fba <_dtoa_r+0x2ba>
 8005ee8:	2b05      	cmp	r3, #5
 8005eea:	bfc4      	itt	gt
 8005eec:	3b04      	subgt	r3, #4
 8005eee:	9307      	strgt	r3, [sp, #28]
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ef6:	bfcc      	ite	gt
 8005ef8:	2500      	movgt	r5, #0
 8005efa:	2501      	movle	r5, #1
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	f200 8085 	bhi.w	800600c <_dtoa_r+0x30c>
 8005f02:	e8df f003 	tbb	[pc, r3]
 8005f06:	3b2e      	.short	0x3b2e
 8005f08:	5839      	.short	0x5839
 8005f0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f0e:	441d      	add	r5, r3
 8005f10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	bfc1      	itttt	gt
 8005f18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005f24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005f28:	bfd6      	itet	le
 8005f2a:	f1c3 0320 	rsble	r3, r3, #32
 8005f2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f32:	fa06 f003 	lslle.w	r0, r6, r3
 8005f36:	f7fa faed 	bl	8000514 <__aeabi_ui2d>
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005f40:	3d01      	subs	r5, #1
 8005f42:	920e      	str	r2, [sp, #56]	; 0x38
 8005f44:	e76f      	b.n	8005e26 <_dtoa_r+0x126>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e7b3      	b.n	8005eb2 <_dtoa_r+0x1b2>
 8005f4a:	900c      	str	r0, [sp, #48]	; 0x30
 8005f4c:	e7b2      	b.n	8005eb4 <_dtoa_r+0x1b4>
 8005f4e:	9b05      	ldr	r3, [sp, #20]
 8005f50:	eba3 030b 	sub.w	r3, r3, fp
 8005f54:	9305      	str	r3, [sp, #20]
 8005f56:	f1cb 0300 	rsb	r3, fp, #0
 8005f5a:	9308      	str	r3, [sp, #32]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f60:	e7bf      	b.n	8005ee2 <_dtoa_r+0x1e2>
 8005f62:	2300      	movs	r3, #0
 8005f64:	9309      	str	r3, [sp, #36]	; 0x24
 8005f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dc52      	bgt.n	8006012 <_dtoa_r+0x312>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	461a      	mov	r2, r3
 8005f74:	920a      	str	r2, [sp, #40]	; 0x28
 8005f76:	e00b      	b.n	8005f90 <_dtoa_r+0x290>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e7f3      	b.n	8005f64 <_dtoa_r+0x264>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f82:	445b      	add	r3, fp
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	3301      	adds	r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	9304      	str	r3, [sp, #16]
 8005f8c:	bfb8      	it	lt
 8005f8e:	2301      	movlt	r3, #1
 8005f90:	69e0      	ldr	r0, [r4, #28]
 8005f92:	2100      	movs	r1, #0
 8005f94:	2204      	movs	r2, #4
 8005f96:	f102 0614 	add.w	r6, r2, #20
 8005f9a:	429e      	cmp	r6, r3
 8005f9c:	d93d      	bls.n	800601a <_dtoa_r+0x31a>
 8005f9e:	6041      	str	r1, [r0, #4]
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fd9f 	bl	8006ae4 <_Balloc>
 8005fa6:	9000      	str	r0, [sp, #0]
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d139      	bne.n	8006020 <_dtoa_r+0x320>
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <_dtoa_r+0x308>)
 8005fae:	4602      	mov	r2, r0
 8005fb0:	f240 11af 	movw	r1, #431	; 0x1af
 8005fb4:	e6bd      	b.n	8005d32 <_dtoa_r+0x32>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e7e1      	b.n	8005f7e <_dtoa_r+0x27e>
 8005fba:	2501      	movs	r5, #1
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	9509      	str	r5, [sp, #36]	; 0x24
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	9304      	str	r3, [sp, #16]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2312      	movs	r3, #18
 8005fce:	e7d1      	b.n	8005f74 <_dtoa_r+0x274>
 8005fd0:	636f4361 	.word	0x636f4361
 8005fd4:	3fd287a7 	.word	0x3fd287a7
 8005fd8:	8b60c8b3 	.word	0x8b60c8b3
 8005fdc:	3fc68a28 	.word	0x3fc68a28
 8005fe0:	509f79fb 	.word	0x509f79fb
 8005fe4:	3fd34413 	.word	0x3fd34413
 8005fe8:	080093da 	.word	0x080093da
 8005fec:	080093f1 	.word	0x080093f1
 8005ff0:	7ff00000 	.word	0x7ff00000
 8005ff4:	080093d6 	.word	0x080093d6
 8005ff8:	080093cd 	.word	0x080093cd
 8005ffc:	080093a5 	.word	0x080093a5
 8006000:	3ff80000 	.word	0x3ff80000
 8006004:	080094e0 	.word	0x080094e0
 8006008:	08009449 	.word	0x08009449
 800600c:	2301      	movs	r3, #1
 800600e:	9309      	str	r3, [sp, #36]	; 0x24
 8006010:	e7d7      	b.n	8005fc2 <_dtoa_r+0x2c2>
 8006012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	9304      	str	r3, [sp, #16]
 8006018:	e7ba      	b.n	8005f90 <_dtoa_r+0x290>
 800601a:	3101      	adds	r1, #1
 800601c:	0052      	lsls	r2, r2, #1
 800601e:	e7ba      	b.n	8005f96 <_dtoa_r+0x296>
 8006020:	69e3      	ldr	r3, [r4, #28]
 8006022:	9a00      	ldr	r2, [sp, #0]
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	9b04      	ldr	r3, [sp, #16]
 8006028:	2b0e      	cmp	r3, #14
 800602a:	f200 80a8 	bhi.w	800617e <_dtoa_r+0x47e>
 800602e:	2d00      	cmp	r5, #0
 8006030:	f000 80a5 	beq.w	800617e <_dtoa_r+0x47e>
 8006034:	f1bb 0f00 	cmp.w	fp, #0
 8006038:	dd38      	ble.n	80060ac <_dtoa_r+0x3ac>
 800603a:	4bc0      	ldr	r3, [pc, #768]	; (800633c <_dtoa_r+0x63c>)
 800603c:	f00b 020f 	and.w	r2, fp, #15
 8006040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006044:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006048:	e9d3 6700 	ldrd	r6, r7, [r3]
 800604c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006050:	d019      	beq.n	8006086 <_dtoa_r+0x386>
 8006052:	4bbb      	ldr	r3, [pc, #748]	; (8006340 <_dtoa_r+0x640>)
 8006054:	ec51 0b18 	vmov	r0, r1, d8
 8006058:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800605c:	f7fa fbfe 	bl	800085c <__aeabi_ddiv>
 8006060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006064:	f008 080f 	and.w	r8, r8, #15
 8006068:	2503      	movs	r5, #3
 800606a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006340 <_dtoa_r+0x640>
 800606e:	f1b8 0f00 	cmp.w	r8, #0
 8006072:	d10a      	bne.n	800608a <_dtoa_r+0x38a>
 8006074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006078:	4632      	mov	r2, r6
 800607a:	463b      	mov	r3, r7
 800607c:	f7fa fbee 	bl	800085c <__aeabi_ddiv>
 8006080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006084:	e02b      	b.n	80060de <_dtoa_r+0x3de>
 8006086:	2502      	movs	r5, #2
 8006088:	e7ef      	b.n	800606a <_dtoa_r+0x36a>
 800608a:	f018 0f01 	tst.w	r8, #1
 800608e:	d008      	beq.n	80060a2 <_dtoa_r+0x3a2>
 8006090:	4630      	mov	r0, r6
 8006092:	4639      	mov	r1, r7
 8006094:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006098:	f7fa fab6 	bl	8000608 <__aeabi_dmul>
 800609c:	3501      	adds	r5, #1
 800609e:	4606      	mov	r6, r0
 80060a0:	460f      	mov	r7, r1
 80060a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80060a6:	f109 0908 	add.w	r9, r9, #8
 80060aa:	e7e0      	b.n	800606e <_dtoa_r+0x36e>
 80060ac:	f000 809f 	beq.w	80061ee <_dtoa_r+0x4ee>
 80060b0:	f1cb 0600 	rsb	r6, fp, #0
 80060b4:	4ba1      	ldr	r3, [pc, #644]	; (800633c <_dtoa_r+0x63c>)
 80060b6:	4fa2      	ldr	r7, [pc, #648]	; (8006340 <_dtoa_r+0x640>)
 80060b8:	f006 020f 	and.w	r2, r6, #15
 80060bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	ec51 0b18 	vmov	r0, r1, d8
 80060c8:	f7fa fa9e 	bl	8000608 <__aeabi_dmul>
 80060cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d0:	1136      	asrs	r6, r6, #4
 80060d2:	2300      	movs	r3, #0
 80060d4:	2502      	movs	r5, #2
 80060d6:	2e00      	cmp	r6, #0
 80060d8:	d17e      	bne.n	80061d8 <_dtoa_r+0x4d8>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1d0      	bne.n	8006080 <_dtoa_r+0x380>
 80060de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8084 	beq.w	80061f2 <_dtoa_r+0x4f2>
 80060ea:	4b96      	ldr	r3, [pc, #600]	; (8006344 <_dtoa_r+0x644>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	4640      	mov	r0, r8
 80060f0:	4649      	mov	r1, r9
 80060f2:	f7fa fcfb 	bl	8000aec <__aeabi_dcmplt>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d07b      	beq.n	80061f2 <_dtoa_r+0x4f2>
 80060fa:	9b04      	ldr	r3, [sp, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d078      	beq.n	80061f2 <_dtoa_r+0x4f2>
 8006100:	9b01      	ldr	r3, [sp, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	dd39      	ble.n	800617a <_dtoa_r+0x47a>
 8006106:	4b90      	ldr	r3, [pc, #576]	; (8006348 <_dtoa_r+0x648>)
 8006108:	2200      	movs	r2, #0
 800610a:	4640      	mov	r0, r8
 800610c:	4649      	mov	r1, r9
 800610e:	f7fa fa7b 	bl	8000608 <__aeabi_dmul>
 8006112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006116:	9e01      	ldr	r6, [sp, #4]
 8006118:	f10b 37ff 	add.w	r7, fp, #4294967295
 800611c:	3501      	adds	r5, #1
 800611e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006122:	4628      	mov	r0, r5
 8006124:	f7fa fa06 	bl	8000534 <__aeabi_i2d>
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	f7fa fa6c 	bl	8000608 <__aeabi_dmul>
 8006130:	4b86      	ldr	r3, [pc, #536]	; (800634c <_dtoa_r+0x64c>)
 8006132:	2200      	movs	r2, #0
 8006134:	f7fa f8b2 	bl	800029c <__adddf3>
 8006138:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800613c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006140:	9303      	str	r3, [sp, #12]
 8006142:	2e00      	cmp	r6, #0
 8006144:	d158      	bne.n	80061f8 <_dtoa_r+0x4f8>
 8006146:	4b82      	ldr	r3, [pc, #520]	; (8006350 <_dtoa_r+0x650>)
 8006148:	2200      	movs	r2, #0
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	f7fa f8a3 	bl	8000298 <__aeabi_dsub>
 8006152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006156:	4680      	mov	r8, r0
 8006158:	4689      	mov	r9, r1
 800615a:	f7fa fce5 	bl	8000b28 <__aeabi_dcmpgt>
 800615e:	2800      	cmp	r0, #0
 8006160:	f040 8296 	bne.w	8006690 <_dtoa_r+0x990>
 8006164:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006168:	4640      	mov	r0, r8
 800616a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800616e:	4649      	mov	r1, r9
 8006170:	f7fa fcbc 	bl	8000aec <__aeabi_dcmplt>
 8006174:	2800      	cmp	r0, #0
 8006176:	f040 8289 	bne.w	800668c <_dtoa_r+0x98c>
 800617a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800617e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006180:	2b00      	cmp	r3, #0
 8006182:	f2c0 814e 	blt.w	8006422 <_dtoa_r+0x722>
 8006186:	f1bb 0f0e 	cmp.w	fp, #14
 800618a:	f300 814a 	bgt.w	8006422 <_dtoa_r+0x722>
 800618e:	4b6b      	ldr	r3, [pc, #428]	; (800633c <_dtoa_r+0x63c>)
 8006190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	f280 80dc 	bge.w	8006358 <_dtoa_r+0x658>
 80061a0:	9b04      	ldr	r3, [sp, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f300 80d8 	bgt.w	8006358 <_dtoa_r+0x658>
 80061a8:	f040 826f 	bne.w	800668a <_dtoa_r+0x98a>
 80061ac:	4b68      	ldr	r3, [pc, #416]	; (8006350 <_dtoa_r+0x650>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	4640      	mov	r0, r8
 80061b2:	4649      	mov	r1, r9
 80061b4:	f7fa fa28 	bl	8000608 <__aeabi_dmul>
 80061b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061bc:	f7fa fcaa 	bl	8000b14 <__aeabi_dcmpge>
 80061c0:	9e04      	ldr	r6, [sp, #16]
 80061c2:	4637      	mov	r7, r6
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f040 8245 	bne.w	8006654 <_dtoa_r+0x954>
 80061ca:	9d00      	ldr	r5, [sp, #0]
 80061cc:	2331      	movs	r3, #49	; 0x31
 80061ce:	f805 3b01 	strb.w	r3, [r5], #1
 80061d2:	f10b 0b01 	add.w	fp, fp, #1
 80061d6:	e241      	b.n	800665c <_dtoa_r+0x95c>
 80061d8:	07f2      	lsls	r2, r6, #31
 80061da:	d505      	bpl.n	80061e8 <_dtoa_r+0x4e8>
 80061dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e0:	f7fa fa12 	bl	8000608 <__aeabi_dmul>
 80061e4:	3501      	adds	r5, #1
 80061e6:	2301      	movs	r3, #1
 80061e8:	1076      	asrs	r6, r6, #1
 80061ea:	3708      	adds	r7, #8
 80061ec:	e773      	b.n	80060d6 <_dtoa_r+0x3d6>
 80061ee:	2502      	movs	r5, #2
 80061f0:	e775      	b.n	80060de <_dtoa_r+0x3de>
 80061f2:	9e04      	ldr	r6, [sp, #16]
 80061f4:	465f      	mov	r7, fp
 80061f6:	e792      	b.n	800611e <_dtoa_r+0x41e>
 80061f8:	9900      	ldr	r1, [sp, #0]
 80061fa:	4b50      	ldr	r3, [pc, #320]	; (800633c <_dtoa_r+0x63c>)
 80061fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006200:	4431      	add	r1, r6
 8006202:	9102      	str	r1, [sp, #8]
 8006204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006206:	eeb0 9a47 	vmov.f32	s18, s14
 800620a:	eef0 9a67 	vmov.f32	s19, s15
 800620e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006216:	2900      	cmp	r1, #0
 8006218:	d044      	beq.n	80062a4 <_dtoa_r+0x5a4>
 800621a:	494e      	ldr	r1, [pc, #312]	; (8006354 <_dtoa_r+0x654>)
 800621c:	2000      	movs	r0, #0
 800621e:	f7fa fb1d 	bl	800085c <__aeabi_ddiv>
 8006222:	ec53 2b19 	vmov	r2, r3, d9
 8006226:	f7fa f837 	bl	8000298 <__aeabi_dsub>
 800622a:	9d00      	ldr	r5, [sp, #0]
 800622c:	ec41 0b19 	vmov	d9, r0, r1
 8006230:	4649      	mov	r1, r9
 8006232:	4640      	mov	r0, r8
 8006234:	f7fa fc98 	bl	8000b68 <__aeabi_d2iz>
 8006238:	4606      	mov	r6, r0
 800623a:	f7fa f97b 	bl	8000534 <__aeabi_i2d>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7fa f827 	bl	8000298 <__aeabi_dsub>
 800624a:	3630      	adds	r6, #48	; 0x30
 800624c:	f805 6b01 	strb.w	r6, [r5], #1
 8006250:	ec53 2b19 	vmov	r2, r3, d9
 8006254:	4680      	mov	r8, r0
 8006256:	4689      	mov	r9, r1
 8006258:	f7fa fc48 	bl	8000aec <__aeabi_dcmplt>
 800625c:	2800      	cmp	r0, #0
 800625e:	d164      	bne.n	800632a <_dtoa_r+0x62a>
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	4937      	ldr	r1, [pc, #220]	; (8006344 <_dtoa_r+0x644>)
 8006266:	2000      	movs	r0, #0
 8006268:	f7fa f816 	bl	8000298 <__aeabi_dsub>
 800626c:	ec53 2b19 	vmov	r2, r3, d9
 8006270:	f7fa fc3c 	bl	8000aec <__aeabi_dcmplt>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 80b6 	bne.w	80063e6 <_dtoa_r+0x6e6>
 800627a:	9b02      	ldr	r3, [sp, #8]
 800627c:	429d      	cmp	r5, r3
 800627e:	f43f af7c 	beq.w	800617a <_dtoa_r+0x47a>
 8006282:	4b31      	ldr	r3, [pc, #196]	; (8006348 <_dtoa_r+0x648>)
 8006284:	ec51 0b19 	vmov	r0, r1, d9
 8006288:	2200      	movs	r2, #0
 800628a:	f7fa f9bd 	bl	8000608 <__aeabi_dmul>
 800628e:	4b2e      	ldr	r3, [pc, #184]	; (8006348 <_dtoa_r+0x648>)
 8006290:	ec41 0b19 	vmov	d9, r0, r1
 8006294:	2200      	movs	r2, #0
 8006296:	4640      	mov	r0, r8
 8006298:	4649      	mov	r1, r9
 800629a:	f7fa f9b5 	bl	8000608 <__aeabi_dmul>
 800629e:	4680      	mov	r8, r0
 80062a0:	4689      	mov	r9, r1
 80062a2:	e7c5      	b.n	8006230 <_dtoa_r+0x530>
 80062a4:	ec51 0b17 	vmov	r0, r1, d7
 80062a8:	f7fa f9ae 	bl	8000608 <__aeabi_dmul>
 80062ac:	9b02      	ldr	r3, [sp, #8]
 80062ae:	9d00      	ldr	r5, [sp, #0]
 80062b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b2:	ec41 0b19 	vmov	d9, r0, r1
 80062b6:	4649      	mov	r1, r9
 80062b8:	4640      	mov	r0, r8
 80062ba:	f7fa fc55 	bl	8000b68 <__aeabi_d2iz>
 80062be:	4606      	mov	r6, r0
 80062c0:	f7fa f938 	bl	8000534 <__aeabi_i2d>
 80062c4:	3630      	adds	r6, #48	; 0x30
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4640      	mov	r0, r8
 80062cc:	4649      	mov	r1, r9
 80062ce:	f7f9 ffe3 	bl	8000298 <__aeabi_dsub>
 80062d2:	f805 6b01 	strb.w	r6, [r5], #1
 80062d6:	9b02      	ldr	r3, [sp, #8]
 80062d8:	429d      	cmp	r5, r3
 80062da:	4680      	mov	r8, r0
 80062dc:	4689      	mov	r9, r1
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	d124      	bne.n	800632e <_dtoa_r+0x62e>
 80062e4:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <_dtoa_r+0x654>)
 80062e6:	ec51 0b19 	vmov	r0, r1, d9
 80062ea:	f7f9 ffd7 	bl	800029c <__adddf3>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7fa fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d173      	bne.n	80063e6 <_dtoa_r+0x6e6>
 80062fe:	ec53 2b19 	vmov	r2, r3, d9
 8006302:	4914      	ldr	r1, [pc, #80]	; (8006354 <_dtoa_r+0x654>)
 8006304:	2000      	movs	r0, #0
 8006306:	f7f9 ffc7 	bl	8000298 <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	f7fa fbeb 	bl	8000aec <__aeabi_dcmplt>
 8006316:	2800      	cmp	r0, #0
 8006318:	f43f af2f 	beq.w	800617a <_dtoa_r+0x47a>
 800631c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800631e:	1e6b      	subs	r3, r5, #1
 8006320:	930f      	str	r3, [sp, #60]	; 0x3c
 8006322:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006326:	2b30      	cmp	r3, #48	; 0x30
 8006328:	d0f8      	beq.n	800631c <_dtoa_r+0x61c>
 800632a:	46bb      	mov	fp, r7
 800632c:	e04a      	b.n	80063c4 <_dtoa_r+0x6c4>
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <_dtoa_r+0x648>)
 8006330:	f7fa f96a 	bl	8000608 <__aeabi_dmul>
 8006334:	4680      	mov	r8, r0
 8006336:	4689      	mov	r9, r1
 8006338:	e7bd      	b.n	80062b6 <_dtoa_r+0x5b6>
 800633a:	bf00      	nop
 800633c:	080094e0 	.word	0x080094e0
 8006340:	080094b8 	.word	0x080094b8
 8006344:	3ff00000 	.word	0x3ff00000
 8006348:	40240000 	.word	0x40240000
 800634c:	401c0000 	.word	0x401c0000
 8006350:	40140000 	.word	0x40140000
 8006354:	3fe00000 	.word	0x3fe00000
 8006358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800635c:	9d00      	ldr	r5, [sp, #0]
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	4630      	mov	r0, r6
 8006364:	4639      	mov	r1, r7
 8006366:	f7fa fa79 	bl	800085c <__aeabi_ddiv>
 800636a:	f7fa fbfd 	bl	8000b68 <__aeabi_d2iz>
 800636e:	9001      	str	r0, [sp, #4]
 8006370:	f7fa f8e0 	bl	8000534 <__aeabi_i2d>
 8006374:	4642      	mov	r2, r8
 8006376:	464b      	mov	r3, r9
 8006378:	f7fa f946 	bl	8000608 <__aeabi_dmul>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4630      	mov	r0, r6
 8006382:	4639      	mov	r1, r7
 8006384:	f7f9 ff88 	bl	8000298 <__aeabi_dsub>
 8006388:	9e01      	ldr	r6, [sp, #4]
 800638a:	9f04      	ldr	r7, [sp, #16]
 800638c:	3630      	adds	r6, #48	; 0x30
 800638e:	f805 6b01 	strb.w	r6, [r5], #1
 8006392:	9e00      	ldr	r6, [sp, #0]
 8006394:	1bae      	subs	r6, r5, r6
 8006396:	42b7      	cmp	r7, r6
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	d134      	bne.n	8006408 <_dtoa_r+0x708>
 800639e:	f7f9 ff7d 	bl	800029c <__adddf3>
 80063a2:	4642      	mov	r2, r8
 80063a4:	464b      	mov	r3, r9
 80063a6:	4606      	mov	r6, r0
 80063a8:	460f      	mov	r7, r1
 80063aa:	f7fa fbbd 	bl	8000b28 <__aeabi_dcmpgt>
 80063ae:	b9c8      	cbnz	r0, 80063e4 <_dtoa_r+0x6e4>
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	4630      	mov	r0, r6
 80063b6:	4639      	mov	r1, r7
 80063b8:	f7fa fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80063bc:	b110      	cbz	r0, 80063c4 <_dtoa_r+0x6c4>
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	07db      	lsls	r3, r3, #31
 80063c2:	d40f      	bmi.n	80063e4 <_dtoa_r+0x6e4>
 80063c4:	4651      	mov	r1, sl
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 fbcc 	bl	8006b64 <_Bfree>
 80063cc:	2300      	movs	r3, #0
 80063ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063d0:	702b      	strb	r3, [r5, #0]
 80063d2:	f10b 0301 	add.w	r3, fp, #1
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f43f ace2 	beq.w	8005da4 <_dtoa_r+0xa4>
 80063e0:	601d      	str	r5, [r3, #0]
 80063e2:	e4df      	b.n	8005da4 <_dtoa_r+0xa4>
 80063e4:	465f      	mov	r7, fp
 80063e6:	462b      	mov	r3, r5
 80063e8:	461d      	mov	r5, r3
 80063ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ee:	2a39      	cmp	r2, #57	; 0x39
 80063f0:	d106      	bne.n	8006400 <_dtoa_r+0x700>
 80063f2:	9a00      	ldr	r2, [sp, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d1f7      	bne.n	80063e8 <_dtoa_r+0x6e8>
 80063f8:	9900      	ldr	r1, [sp, #0]
 80063fa:	2230      	movs	r2, #48	; 0x30
 80063fc:	3701      	adds	r7, #1
 80063fe:	700a      	strb	r2, [r1, #0]
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	3201      	adds	r2, #1
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	e790      	b.n	800632a <_dtoa_r+0x62a>
 8006408:	4ba3      	ldr	r3, [pc, #652]	; (8006698 <_dtoa_r+0x998>)
 800640a:	2200      	movs	r2, #0
 800640c:	f7fa f8fc 	bl	8000608 <__aeabi_dmul>
 8006410:	2200      	movs	r2, #0
 8006412:	2300      	movs	r3, #0
 8006414:	4606      	mov	r6, r0
 8006416:	460f      	mov	r7, r1
 8006418:	f7fa fb5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800641c:	2800      	cmp	r0, #0
 800641e:	d09e      	beq.n	800635e <_dtoa_r+0x65e>
 8006420:	e7d0      	b.n	80063c4 <_dtoa_r+0x6c4>
 8006422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006424:	2a00      	cmp	r2, #0
 8006426:	f000 80ca 	beq.w	80065be <_dtoa_r+0x8be>
 800642a:	9a07      	ldr	r2, [sp, #28]
 800642c:	2a01      	cmp	r2, #1
 800642e:	f300 80ad 	bgt.w	800658c <_dtoa_r+0x88c>
 8006432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006434:	2a00      	cmp	r2, #0
 8006436:	f000 80a5 	beq.w	8006584 <_dtoa_r+0x884>
 800643a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800643e:	9e08      	ldr	r6, [sp, #32]
 8006440:	9d05      	ldr	r5, [sp, #20]
 8006442:	9a05      	ldr	r2, [sp, #20]
 8006444:	441a      	add	r2, r3
 8006446:	9205      	str	r2, [sp, #20]
 8006448:	9a06      	ldr	r2, [sp, #24]
 800644a:	2101      	movs	r1, #1
 800644c:	441a      	add	r2, r3
 800644e:	4620      	mov	r0, r4
 8006450:	9206      	str	r2, [sp, #24]
 8006452:	f000 fc87 	bl	8006d64 <__i2b>
 8006456:	4607      	mov	r7, r0
 8006458:	b165      	cbz	r5, 8006474 <_dtoa_r+0x774>
 800645a:	9b06      	ldr	r3, [sp, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd09      	ble.n	8006474 <_dtoa_r+0x774>
 8006460:	42ab      	cmp	r3, r5
 8006462:	9a05      	ldr	r2, [sp, #20]
 8006464:	bfa8      	it	ge
 8006466:	462b      	movge	r3, r5
 8006468:	1ad2      	subs	r2, r2, r3
 800646a:	9205      	str	r2, [sp, #20]
 800646c:	9a06      	ldr	r2, [sp, #24]
 800646e:	1aed      	subs	r5, r5, r3
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	9306      	str	r3, [sp, #24]
 8006474:	9b08      	ldr	r3, [sp, #32]
 8006476:	b1f3      	cbz	r3, 80064b6 <_dtoa_r+0x7b6>
 8006478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80a3 	beq.w	80065c6 <_dtoa_r+0x8c6>
 8006480:	2e00      	cmp	r6, #0
 8006482:	dd10      	ble.n	80064a6 <_dtoa_r+0x7a6>
 8006484:	4639      	mov	r1, r7
 8006486:	4632      	mov	r2, r6
 8006488:	4620      	mov	r0, r4
 800648a:	f000 fd2b 	bl	8006ee4 <__pow5mult>
 800648e:	4652      	mov	r2, sl
 8006490:	4601      	mov	r1, r0
 8006492:	4607      	mov	r7, r0
 8006494:	4620      	mov	r0, r4
 8006496:	f000 fc7b 	bl	8006d90 <__multiply>
 800649a:	4651      	mov	r1, sl
 800649c:	4680      	mov	r8, r0
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fb60 	bl	8006b64 <_Bfree>
 80064a4:	46c2      	mov	sl, r8
 80064a6:	9b08      	ldr	r3, [sp, #32]
 80064a8:	1b9a      	subs	r2, r3, r6
 80064aa:	d004      	beq.n	80064b6 <_dtoa_r+0x7b6>
 80064ac:	4651      	mov	r1, sl
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 fd18 	bl	8006ee4 <__pow5mult>
 80064b4:	4682      	mov	sl, r0
 80064b6:	2101      	movs	r1, #1
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 fc53 	bl	8006d64 <__i2b>
 80064be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	4606      	mov	r6, r0
 80064c4:	f340 8081 	ble.w	80065ca <_dtoa_r+0x8ca>
 80064c8:	461a      	mov	r2, r3
 80064ca:	4601      	mov	r1, r0
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fd09 	bl	8006ee4 <__pow5mult>
 80064d2:	9b07      	ldr	r3, [sp, #28]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	4606      	mov	r6, r0
 80064d8:	dd7a      	ble.n	80065d0 <_dtoa_r+0x8d0>
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	6933      	ldr	r3, [r6, #16]
 80064e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064e4:	6918      	ldr	r0, [r3, #16]
 80064e6:	f000 fbef 	bl	8006cc8 <__hi0bits>
 80064ea:	f1c0 0020 	rsb	r0, r0, #32
 80064ee:	9b06      	ldr	r3, [sp, #24]
 80064f0:	4418      	add	r0, r3
 80064f2:	f010 001f 	ands.w	r0, r0, #31
 80064f6:	f000 8094 	beq.w	8006622 <_dtoa_r+0x922>
 80064fa:	f1c0 0320 	rsb	r3, r0, #32
 80064fe:	2b04      	cmp	r3, #4
 8006500:	f340 8085 	ble.w	800660e <_dtoa_r+0x90e>
 8006504:	9b05      	ldr	r3, [sp, #20]
 8006506:	f1c0 001c 	rsb	r0, r0, #28
 800650a:	4403      	add	r3, r0
 800650c:	9305      	str	r3, [sp, #20]
 800650e:	9b06      	ldr	r3, [sp, #24]
 8006510:	4403      	add	r3, r0
 8006512:	4405      	add	r5, r0
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	9b05      	ldr	r3, [sp, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	dd05      	ble.n	8006528 <_dtoa_r+0x828>
 800651c:	4651      	mov	r1, sl
 800651e:	461a      	mov	r2, r3
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fd39 	bl	8006f98 <__lshift>
 8006526:	4682      	mov	sl, r0
 8006528:	9b06      	ldr	r3, [sp, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dd05      	ble.n	800653a <_dtoa_r+0x83a>
 800652e:	4631      	mov	r1, r6
 8006530:	461a      	mov	r2, r3
 8006532:	4620      	mov	r0, r4
 8006534:	f000 fd30 	bl	8006f98 <__lshift>
 8006538:	4606      	mov	r6, r0
 800653a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800653c:	2b00      	cmp	r3, #0
 800653e:	d072      	beq.n	8006626 <_dtoa_r+0x926>
 8006540:	4631      	mov	r1, r6
 8006542:	4650      	mov	r0, sl
 8006544:	f000 fd94 	bl	8007070 <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	da6c      	bge.n	8006626 <_dtoa_r+0x926>
 800654c:	2300      	movs	r3, #0
 800654e:	4651      	mov	r1, sl
 8006550:	220a      	movs	r2, #10
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fb28 	bl	8006ba8 <__multadd>
 8006558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800655e:	4682      	mov	sl, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 81b0 	beq.w	80068c6 <_dtoa_r+0xbc6>
 8006566:	2300      	movs	r3, #0
 8006568:	4639      	mov	r1, r7
 800656a:	220a      	movs	r2, #10
 800656c:	4620      	mov	r0, r4
 800656e:	f000 fb1b 	bl	8006ba8 <__multadd>
 8006572:	9b01      	ldr	r3, [sp, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	4607      	mov	r7, r0
 8006578:	f300 8096 	bgt.w	80066a8 <_dtoa_r+0x9a8>
 800657c:	9b07      	ldr	r3, [sp, #28]
 800657e:	2b02      	cmp	r3, #2
 8006580:	dc59      	bgt.n	8006636 <_dtoa_r+0x936>
 8006582:	e091      	b.n	80066a8 <_dtoa_r+0x9a8>
 8006584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800658a:	e758      	b.n	800643e <_dtoa_r+0x73e>
 800658c:	9b04      	ldr	r3, [sp, #16]
 800658e:	1e5e      	subs	r6, r3, #1
 8006590:	9b08      	ldr	r3, [sp, #32]
 8006592:	42b3      	cmp	r3, r6
 8006594:	bfbf      	itttt	lt
 8006596:	9b08      	ldrlt	r3, [sp, #32]
 8006598:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800659a:	9608      	strlt	r6, [sp, #32]
 800659c:	1af3      	sublt	r3, r6, r3
 800659e:	bfb4      	ite	lt
 80065a0:	18d2      	addlt	r2, r2, r3
 80065a2:	1b9e      	subge	r6, r3, r6
 80065a4:	9b04      	ldr	r3, [sp, #16]
 80065a6:	bfbc      	itt	lt
 80065a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80065aa:	2600      	movlt	r6, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bfb7      	itett	lt
 80065b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80065b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80065b8:	1a9d      	sublt	r5, r3, r2
 80065ba:	2300      	movlt	r3, #0
 80065bc:	e741      	b.n	8006442 <_dtoa_r+0x742>
 80065be:	9e08      	ldr	r6, [sp, #32]
 80065c0:	9d05      	ldr	r5, [sp, #20]
 80065c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80065c4:	e748      	b.n	8006458 <_dtoa_r+0x758>
 80065c6:	9a08      	ldr	r2, [sp, #32]
 80065c8:	e770      	b.n	80064ac <_dtoa_r+0x7ac>
 80065ca:	9b07      	ldr	r3, [sp, #28]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	dc19      	bgt.n	8006604 <_dtoa_r+0x904>
 80065d0:	9b02      	ldr	r3, [sp, #8]
 80065d2:	b9bb      	cbnz	r3, 8006604 <_dtoa_r+0x904>
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065da:	b99b      	cbnz	r3, 8006604 <_dtoa_r+0x904>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065e2:	0d1b      	lsrs	r3, r3, #20
 80065e4:	051b      	lsls	r3, r3, #20
 80065e6:	b183      	cbz	r3, 800660a <_dtoa_r+0x90a>
 80065e8:	9b05      	ldr	r3, [sp, #20]
 80065ea:	3301      	adds	r3, #1
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	3301      	adds	r3, #1
 80065f2:	9306      	str	r3, [sp, #24]
 80065f4:	f04f 0801 	mov.w	r8, #1
 80065f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f47f af6f 	bne.w	80064de <_dtoa_r+0x7de>
 8006600:	2001      	movs	r0, #1
 8006602:	e774      	b.n	80064ee <_dtoa_r+0x7ee>
 8006604:	f04f 0800 	mov.w	r8, #0
 8006608:	e7f6      	b.n	80065f8 <_dtoa_r+0x8f8>
 800660a:	4698      	mov	r8, r3
 800660c:	e7f4      	b.n	80065f8 <_dtoa_r+0x8f8>
 800660e:	d082      	beq.n	8006516 <_dtoa_r+0x816>
 8006610:	9a05      	ldr	r2, [sp, #20]
 8006612:	331c      	adds	r3, #28
 8006614:	441a      	add	r2, r3
 8006616:	9205      	str	r2, [sp, #20]
 8006618:	9a06      	ldr	r2, [sp, #24]
 800661a:	441a      	add	r2, r3
 800661c:	441d      	add	r5, r3
 800661e:	9206      	str	r2, [sp, #24]
 8006620:	e779      	b.n	8006516 <_dtoa_r+0x816>
 8006622:	4603      	mov	r3, r0
 8006624:	e7f4      	b.n	8006610 <_dtoa_r+0x910>
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	dc37      	bgt.n	800669c <_dtoa_r+0x99c>
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	2b02      	cmp	r3, #2
 8006630:	dd34      	ble.n	800669c <_dtoa_r+0x99c>
 8006632:	9b04      	ldr	r3, [sp, #16]
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	b963      	cbnz	r3, 8006654 <_dtoa_r+0x954>
 800663a:	4631      	mov	r1, r6
 800663c:	2205      	movs	r2, #5
 800663e:	4620      	mov	r0, r4
 8006640:	f000 fab2 	bl	8006ba8 <__multadd>
 8006644:	4601      	mov	r1, r0
 8006646:	4606      	mov	r6, r0
 8006648:	4650      	mov	r0, sl
 800664a:	f000 fd11 	bl	8007070 <__mcmp>
 800664e:	2800      	cmp	r0, #0
 8006650:	f73f adbb 	bgt.w	80061ca <_dtoa_r+0x4ca>
 8006654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006656:	9d00      	ldr	r5, [sp, #0]
 8006658:	ea6f 0b03 	mvn.w	fp, r3
 800665c:	f04f 0800 	mov.w	r8, #0
 8006660:	4631      	mov	r1, r6
 8006662:	4620      	mov	r0, r4
 8006664:	f000 fa7e 	bl	8006b64 <_Bfree>
 8006668:	2f00      	cmp	r7, #0
 800666a:	f43f aeab 	beq.w	80063c4 <_dtoa_r+0x6c4>
 800666e:	f1b8 0f00 	cmp.w	r8, #0
 8006672:	d005      	beq.n	8006680 <_dtoa_r+0x980>
 8006674:	45b8      	cmp	r8, r7
 8006676:	d003      	beq.n	8006680 <_dtoa_r+0x980>
 8006678:	4641      	mov	r1, r8
 800667a:	4620      	mov	r0, r4
 800667c:	f000 fa72 	bl	8006b64 <_Bfree>
 8006680:	4639      	mov	r1, r7
 8006682:	4620      	mov	r0, r4
 8006684:	f000 fa6e 	bl	8006b64 <_Bfree>
 8006688:	e69c      	b.n	80063c4 <_dtoa_r+0x6c4>
 800668a:	2600      	movs	r6, #0
 800668c:	4637      	mov	r7, r6
 800668e:	e7e1      	b.n	8006654 <_dtoa_r+0x954>
 8006690:	46bb      	mov	fp, r7
 8006692:	4637      	mov	r7, r6
 8006694:	e599      	b.n	80061ca <_dtoa_r+0x4ca>
 8006696:	bf00      	nop
 8006698:	40240000 	.word	0x40240000
 800669c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80c8 	beq.w	8006834 <_dtoa_r+0xb34>
 80066a4:	9b04      	ldr	r3, [sp, #16]
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	2d00      	cmp	r5, #0
 80066aa:	dd05      	ble.n	80066b8 <_dtoa_r+0x9b8>
 80066ac:	4639      	mov	r1, r7
 80066ae:	462a      	mov	r2, r5
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 fc71 	bl	8006f98 <__lshift>
 80066b6:	4607      	mov	r7, r0
 80066b8:	f1b8 0f00 	cmp.w	r8, #0
 80066bc:	d05b      	beq.n	8006776 <_dtoa_r+0xa76>
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fa0f 	bl	8006ae4 <_Balloc>
 80066c6:	4605      	mov	r5, r0
 80066c8:	b928      	cbnz	r0, 80066d6 <_dtoa_r+0x9d6>
 80066ca:	4b83      	ldr	r3, [pc, #524]	; (80068d8 <_dtoa_r+0xbd8>)
 80066cc:	4602      	mov	r2, r0
 80066ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80066d2:	f7ff bb2e 	b.w	8005d32 <_dtoa_r+0x32>
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	3202      	adds	r2, #2
 80066da:	0092      	lsls	r2, r2, #2
 80066dc:	f107 010c 	add.w	r1, r7, #12
 80066e0:	300c      	adds	r0, #12
 80066e2:	f001 ff85 	bl	80085f0 <memcpy>
 80066e6:	2201      	movs	r2, #1
 80066e8:	4629      	mov	r1, r5
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fc54 	bl	8006f98 <__lshift>
 80066f0:	9b00      	ldr	r3, [sp, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	9304      	str	r3, [sp, #16]
 80066f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066fa:	4413      	add	r3, r2
 80066fc:	9308      	str	r3, [sp, #32]
 80066fe:	9b02      	ldr	r3, [sp, #8]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	46b8      	mov	r8, r7
 8006706:	9306      	str	r3, [sp, #24]
 8006708:	4607      	mov	r7, r0
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	4631      	mov	r1, r6
 800670e:	3b01      	subs	r3, #1
 8006710:	4650      	mov	r0, sl
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	f7ff fa6a 	bl	8005bec <quorem>
 8006718:	4641      	mov	r1, r8
 800671a:	9002      	str	r0, [sp, #8]
 800671c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006720:	4650      	mov	r0, sl
 8006722:	f000 fca5 	bl	8007070 <__mcmp>
 8006726:	463a      	mov	r2, r7
 8006728:	9005      	str	r0, [sp, #20]
 800672a:	4631      	mov	r1, r6
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fcbb 	bl	80070a8 <__mdiff>
 8006732:	68c2      	ldr	r2, [r0, #12]
 8006734:	4605      	mov	r5, r0
 8006736:	bb02      	cbnz	r2, 800677a <_dtoa_r+0xa7a>
 8006738:	4601      	mov	r1, r0
 800673a:	4650      	mov	r0, sl
 800673c:	f000 fc98 	bl	8007070 <__mcmp>
 8006740:	4602      	mov	r2, r0
 8006742:	4629      	mov	r1, r5
 8006744:	4620      	mov	r0, r4
 8006746:	9209      	str	r2, [sp, #36]	; 0x24
 8006748:	f000 fa0c 	bl	8006b64 <_Bfree>
 800674c:	9b07      	ldr	r3, [sp, #28]
 800674e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006750:	9d04      	ldr	r5, [sp, #16]
 8006752:	ea43 0102 	orr.w	r1, r3, r2
 8006756:	9b06      	ldr	r3, [sp, #24]
 8006758:	4319      	orrs	r1, r3
 800675a:	d110      	bne.n	800677e <_dtoa_r+0xa7e>
 800675c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006760:	d029      	beq.n	80067b6 <_dtoa_r+0xab6>
 8006762:	9b05      	ldr	r3, [sp, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	dd02      	ble.n	800676e <_dtoa_r+0xa6e>
 8006768:	9b02      	ldr	r3, [sp, #8]
 800676a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800676e:	9b01      	ldr	r3, [sp, #4]
 8006770:	f883 9000 	strb.w	r9, [r3]
 8006774:	e774      	b.n	8006660 <_dtoa_r+0x960>
 8006776:	4638      	mov	r0, r7
 8006778:	e7ba      	b.n	80066f0 <_dtoa_r+0x9f0>
 800677a:	2201      	movs	r2, #1
 800677c:	e7e1      	b.n	8006742 <_dtoa_r+0xa42>
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	db04      	blt.n	800678e <_dtoa_r+0xa8e>
 8006784:	9907      	ldr	r1, [sp, #28]
 8006786:	430b      	orrs	r3, r1
 8006788:	9906      	ldr	r1, [sp, #24]
 800678a:	430b      	orrs	r3, r1
 800678c:	d120      	bne.n	80067d0 <_dtoa_r+0xad0>
 800678e:	2a00      	cmp	r2, #0
 8006790:	dded      	ble.n	800676e <_dtoa_r+0xa6e>
 8006792:	4651      	mov	r1, sl
 8006794:	2201      	movs	r2, #1
 8006796:	4620      	mov	r0, r4
 8006798:	f000 fbfe 	bl	8006f98 <__lshift>
 800679c:	4631      	mov	r1, r6
 800679e:	4682      	mov	sl, r0
 80067a0:	f000 fc66 	bl	8007070 <__mcmp>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	dc03      	bgt.n	80067b0 <_dtoa_r+0xab0>
 80067a8:	d1e1      	bne.n	800676e <_dtoa_r+0xa6e>
 80067aa:	f019 0f01 	tst.w	r9, #1
 80067ae:	d0de      	beq.n	800676e <_dtoa_r+0xa6e>
 80067b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067b4:	d1d8      	bne.n	8006768 <_dtoa_r+0xa68>
 80067b6:	9a01      	ldr	r2, [sp, #4]
 80067b8:	2339      	movs	r3, #57	; 0x39
 80067ba:	7013      	strb	r3, [r2, #0]
 80067bc:	462b      	mov	r3, r5
 80067be:	461d      	mov	r5, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067c6:	2a39      	cmp	r2, #57	; 0x39
 80067c8:	d06c      	beq.n	80068a4 <_dtoa_r+0xba4>
 80067ca:	3201      	adds	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	e747      	b.n	8006660 <_dtoa_r+0x960>
 80067d0:	2a00      	cmp	r2, #0
 80067d2:	dd07      	ble.n	80067e4 <_dtoa_r+0xae4>
 80067d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067d8:	d0ed      	beq.n	80067b6 <_dtoa_r+0xab6>
 80067da:	9a01      	ldr	r2, [sp, #4]
 80067dc:	f109 0301 	add.w	r3, r9, #1
 80067e0:	7013      	strb	r3, [r2, #0]
 80067e2:	e73d      	b.n	8006660 <_dtoa_r+0x960>
 80067e4:	9b04      	ldr	r3, [sp, #16]
 80067e6:	9a08      	ldr	r2, [sp, #32]
 80067e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d043      	beq.n	8006878 <_dtoa_r+0xb78>
 80067f0:	4651      	mov	r1, sl
 80067f2:	2300      	movs	r3, #0
 80067f4:	220a      	movs	r2, #10
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 f9d6 	bl	8006ba8 <__multadd>
 80067fc:	45b8      	cmp	r8, r7
 80067fe:	4682      	mov	sl, r0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	f04f 020a 	mov.w	r2, #10
 8006808:	4641      	mov	r1, r8
 800680a:	4620      	mov	r0, r4
 800680c:	d107      	bne.n	800681e <_dtoa_r+0xb1e>
 800680e:	f000 f9cb 	bl	8006ba8 <__multadd>
 8006812:	4680      	mov	r8, r0
 8006814:	4607      	mov	r7, r0
 8006816:	9b04      	ldr	r3, [sp, #16]
 8006818:	3301      	adds	r3, #1
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	e775      	b.n	800670a <_dtoa_r+0xa0a>
 800681e:	f000 f9c3 	bl	8006ba8 <__multadd>
 8006822:	4639      	mov	r1, r7
 8006824:	4680      	mov	r8, r0
 8006826:	2300      	movs	r3, #0
 8006828:	220a      	movs	r2, #10
 800682a:	4620      	mov	r0, r4
 800682c:	f000 f9bc 	bl	8006ba8 <__multadd>
 8006830:	4607      	mov	r7, r0
 8006832:	e7f0      	b.n	8006816 <_dtoa_r+0xb16>
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	9d00      	ldr	r5, [sp, #0]
 800683a:	4631      	mov	r1, r6
 800683c:	4650      	mov	r0, sl
 800683e:	f7ff f9d5 	bl	8005bec <quorem>
 8006842:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006846:	9b00      	ldr	r3, [sp, #0]
 8006848:	f805 9b01 	strb.w	r9, [r5], #1
 800684c:	1aea      	subs	r2, r5, r3
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	4293      	cmp	r3, r2
 8006852:	dd07      	ble.n	8006864 <_dtoa_r+0xb64>
 8006854:	4651      	mov	r1, sl
 8006856:	2300      	movs	r3, #0
 8006858:	220a      	movs	r2, #10
 800685a:	4620      	mov	r0, r4
 800685c:	f000 f9a4 	bl	8006ba8 <__multadd>
 8006860:	4682      	mov	sl, r0
 8006862:	e7ea      	b.n	800683a <_dtoa_r+0xb3a>
 8006864:	9b01      	ldr	r3, [sp, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	bfc8      	it	gt
 800686a:	461d      	movgt	r5, r3
 800686c:	9b00      	ldr	r3, [sp, #0]
 800686e:	bfd8      	it	le
 8006870:	2501      	movle	r5, #1
 8006872:	441d      	add	r5, r3
 8006874:	f04f 0800 	mov.w	r8, #0
 8006878:	4651      	mov	r1, sl
 800687a:	2201      	movs	r2, #1
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fb8b 	bl	8006f98 <__lshift>
 8006882:	4631      	mov	r1, r6
 8006884:	4682      	mov	sl, r0
 8006886:	f000 fbf3 	bl	8007070 <__mcmp>
 800688a:	2800      	cmp	r0, #0
 800688c:	dc96      	bgt.n	80067bc <_dtoa_r+0xabc>
 800688e:	d102      	bne.n	8006896 <_dtoa_r+0xb96>
 8006890:	f019 0f01 	tst.w	r9, #1
 8006894:	d192      	bne.n	80067bc <_dtoa_r+0xabc>
 8006896:	462b      	mov	r3, r5
 8006898:	461d      	mov	r5, r3
 800689a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800689e:	2a30      	cmp	r2, #48	; 0x30
 80068a0:	d0fa      	beq.n	8006898 <_dtoa_r+0xb98>
 80068a2:	e6dd      	b.n	8006660 <_dtoa_r+0x960>
 80068a4:	9a00      	ldr	r2, [sp, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d189      	bne.n	80067be <_dtoa_r+0xabe>
 80068aa:	f10b 0b01 	add.w	fp, fp, #1
 80068ae:	2331      	movs	r3, #49	; 0x31
 80068b0:	e796      	b.n	80067e0 <_dtoa_r+0xae0>
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <_dtoa_r+0xbdc>)
 80068b4:	f7ff ba99 	b.w	8005dea <_dtoa_r+0xea>
 80068b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f47f aa6d 	bne.w	8005d9a <_dtoa_r+0x9a>
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <_dtoa_r+0xbe0>)
 80068c2:	f7ff ba92 	b.w	8005dea <_dtoa_r+0xea>
 80068c6:	9b01      	ldr	r3, [sp, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dcb5      	bgt.n	8006838 <_dtoa_r+0xb38>
 80068cc:	9b07      	ldr	r3, [sp, #28]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	f73f aeb1 	bgt.w	8006636 <_dtoa_r+0x936>
 80068d4:	e7b0      	b.n	8006838 <_dtoa_r+0xb38>
 80068d6:	bf00      	nop
 80068d8:	08009449 	.word	0x08009449
 80068dc:	080093a4 	.word	0x080093a4
 80068e0:	080093cd 	.word	0x080093cd

080068e4 <_free_r>:
 80068e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e6:	2900      	cmp	r1, #0
 80068e8:	d044      	beq.n	8006974 <_free_r+0x90>
 80068ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ee:	9001      	str	r0, [sp, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f1a1 0404 	sub.w	r4, r1, #4
 80068f6:	bfb8      	it	lt
 80068f8:	18e4      	addlt	r4, r4, r3
 80068fa:	f000 f8e7 	bl	8006acc <__malloc_lock>
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <_free_r+0x94>)
 8006900:	9801      	ldr	r0, [sp, #4]
 8006902:	6813      	ldr	r3, [r2, #0]
 8006904:	b933      	cbnz	r3, 8006914 <_free_r+0x30>
 8006906:	6063      	str	r3, [r4, #4]
 8006908:	6014      	str	r4, [r2, #0]
 800690a:	b003      	add	sp, #12
 800690c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006910:	f000 b8e2 	b.w	8006ad8 <__malloc_unlock>
 8006914:	42a3      	cmp	r3, r4
 8006916:	d908      	bls.n	800692a <_free_r+0x46>
 8006918:	6825      	ldr	r5, [r4, #0]
 800691a:	1961      	adds	r1, r4, r5
 800691c:	428b      	cmp	r3, r1
 800691e:	bf01      	itttt	eq
 8006920:	6819      	ldreq	r1, [r3, #0]
 8006922:	685b      	ldreq	r3, [r3, #4]
 8006924:	1949      	addeq	r1, r1, r5
 8006926:	6021      	streq	r1, [r4, #0]
 8006928:	e7ed      	b.n	8006906 <_free_r+0x22>
 800692a:	461a      	mov	r2, r3
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	b10b      	cbz	r3, 8006934 <_free_r+0x50>
 8006930:	42a3      	cmp	r3, r4
 8006932:	d9fa      	bls.n	800692a <_free_r+0x46>
 8006934:	6811      	ldr	r1, [r2, #0]
 8006936:	1855      	adds	r5, r2, r1
 8006938:	42a5      	cmp	r5, r4
 800693a:	d10b      	bne.n	8006954 <_free_r+0x70>
 800693c:	6824      	ldr	r4, [r4, #0]
 800693e:	4421      	add	r1, r4
 8006940:	1854      	adds	r4, r2, r1
 8006942:	42a3      	cmp	r3, r4
 8006944:	6011      	str	r1, [r2, #0]
 8006946:	d1e0      	bne.n	800690a <_free_r+0x26>
 8006948:	681c      	ldr	r4, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	6053      	str	r3, [r2, #4]
 800694e:	440c      	add	r4, r1
 8006950:	6014      	str	r4, [r2, #0]
 8006952:	e7da      	b.n	800690a <_free_r+0x26>
 8006954:	d902      	bls.n	800695c <_free_r+0x78>
 8006956:	230c      	movs	r3, #12
 8006958:	6003      	str	r3, [r0, #0]
 800695a:	e7d6      	b.n	800690a <_free_r+0x26>
 800695c:	6825      	ldr	r5, [r4, #0]
 800695e:	1961      	adds	r1, r4, r5
 8006960:	428b      	cmp	r3, r1
 8006962:	bf04      	itt	eq
 8006964:	6819      	ldreq	r1, [r3, #0]
 8006966:	685b      	ldreq	r3, [r3, #4]
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	bf04      	itt	eq
 800696c:	1949      	addeq	r1, r1, r5
 800696e:	6021      	streq	r1, [r4, #0]
 8006970:	6054      	str	r4, [r2, #4]
 8006972:	e7ca      	b.n	800690a <_free_r+0x26>
 8006974:	b003      	add	sp, #12
 8006976:	bd30      	pop	{r4, r5, pc}
 8006978:	200003dc 	.word	0x200003dc

0800697c <malloc>:
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <malloc+0xc>)
 800697e:	4601      	mov	r1, r0
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	f000 b823 	b.w	80069cc <_malloc_r>
 8006986:	bf00      	nop
 8006988:	20000064 	.word	0x20000064

0800698c <sbrk_aligned>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4e0e      	ldr	r6, [pc, #56]	; (80069c8 <sbrk_aligned+0x3c>)
 8006990:	460c      	mov	r4, r1
 8006992:	6831      	ldr	r1, [r6, #0]
 8006994:	4605      	mov	r5, r0
 8006996:	b911      	cbnz	r1, 800699e <sbrk_aligned+0x12>
 8006998:	f001 fe1a 	bl	80085d0 <_sbrk_r>
 800699c:	6030      	str	r0, [r6, #0]
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f001 fe15 	bl	80085d0 <_sbrk_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d00a      	beq.n	80069c0 <sbrk_aligned+0x34>
 80069aa:	1cc4      	adds	r4, r0, #3
 80069ac:	f024 0403 	bic.w	r4, r4, #3
 80069b0:	42a0      	cmp	r0, r4
 80069b2:	d007      	beq.n	80069c4 <sbrk_aligned+0x38>
 80069b4:	1a21      	subs	r1, r4, r0
 80069b6:	4628      	mov	r0, r5
 80069b8:	f001 fe0a 	bl	80085d0 <_sbrk_r>
 80069bc:	3001      	adds	r0, #1
 80069be:	d101      	bne.n	80069c4 <sbrk_aligned+0x38>
 80069c0:	f04f 34ff 	mov.w	r4, #4294967295
 80069c4:	4620      	mov	r0, r4
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	200003e0 	.word	0x200003e0

080069cc <_malloc_r>:
 80069cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d0:	1ccd      	adds	r5, r1, #3
 80069d2:	f025 0503 	bic.w	r5, r5, #3
 80069d6:	3508      	adds	r5, #8
 80069d8:	2d0c      	cmp	r5, #12
 80069da:	bf38      	it	cc
 80069dc:	250c      	movcc	r5, #12
 80069de:	2d00      	cmp	r5, #0
 80069e0:	4607      	mov	r7, r0
 80069e2:	db01      	blt.n	80069e8 <_malloc_r+0x1c>
 80069e4:	42a9      	cmp	r1, r5
 80069e6:	d905      	bls.n	80069f4 <_malloc_r+0x28>
 80069e8:	230c      	movs	r3, #12
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	2600      	movs	r6, #0
 80069ee:	4630      	mov	r0, r6
 80069f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ac8 <_malloc_r+0xfc>
 80069f8:	f000 f868 	bl	8006acc <__malloc_lock>
 80069fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006a00:	461c      	mov	r4, r3
 8006a02:	bb5c      	cbnz	r4, 8006a5c <_malloc_r+0x90>
 8006a04:	4629      	mov	r1, r5
 8006a06:	4638      	mov	r0, r7
 8006a08:	f7ff ffc0 	bl	800698c <sbrk_aligned>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	4604      	mov	r4, r0
 8006a10:	d155      	bne.n	8006abe <_malloc_r+0xf2>
 8006a12:	f8d8 4000 	ldr.w	r4, [r8]
 8006a16:	4626      	mov	r6, r4
 8006a18:	2e00      	cmp	r6, #0
 8006a1a:	d145      	bne.n	8006aa8 <_malloc_r+0xdc>
 8006a1c:	2c00      	cmp	r4, #0
 8006a1e:	d048      	beq.n	8006ab2 <_malloc_r+0xe6>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	4631      	mov	r1, r6
 8006a24:	4638      	mov	r0, r7
 8006a26:	eb04 0903 	add.w	r9, r4, r3
 8006a2a:	f001 fdd1 	bl	80085d0 <_sbrk_r>
 8006a2e:	4581      	cmp	r9, r0
 8006a30:	d13f      	bne.n	8006ab2 <_malloc_r+0xe6>
 8006a32:	6821      	ldr	r1, [r4, #0]
 8006a34:	1a6d      	subs	r5, r5, r1
 8006a36:	4629      	mov	r1, r5
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f7ff ffa7 	bl	800698c <sbrk_aligned>
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d037      	beq.n	8006ab2 <_malloc_r+0xe6>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	442b      	add	r3, r5
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	f8d8 3000 	ldr.w	r3, [r8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d038      	beq.n	8006ac2 <_malloc_r+0xf6>
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	42a2      	cmp	r2, r4
 8006a54:	d12b      	bne.n	8006aae <_malloc_r+0xe2>
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	e00f      	b.n	8006a7c <_malloc_r+0xb0>
 8006a5c:	6822      	ldr	r2, [r4, #0]
 8006a5e:	1b52      	subs	r2, r2, r5
 8006a60:	d41f      	bmi.n	8006aa2 <_malloc_r+0xd6>
 8006a62:	2a0b      	cmp	r2, #11
 8006a64:	d917      	bls.n	8006a96 <_malloc_r+0xca>
 8006a66:	1961      	adds	r1, r4, r5
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	6025      	str	r5, [r4, #0]
 8006a6c:	bf18      	it	ne
 8006a6e:	6059      	strne	r1, [r3, #4]
 8006a70:	6863      	ldr	r3, [r4, #4]
 8006a72:	bf08      	it	eq
 8006a74:	f8c8 1000 	streq.w	r1, [r8]
 8006a78:	5162      	str	r2, [r4, r5]
 8006a7a:	604b      	str	r3, [r1, #4]
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f104 060b 	add.w	r6, r4, #11
 8006a82:	f000 f829 	bl	8006ad8 <__malloc_unlock>
 8006a86:	f026 0607 	bic.w	r6, r6, #7
 8006a8a:	1d23      	adds	r3, r4, #4
 8006a8c:	1af2      	subs	r2, r6, r3
 8006a8e:	d0ae      	beq.n	80069ee <_malloc_r+0x22>
 8006a90:	1b9b      	subs	r3, r3, r6
 8006a92:	50a3      	str	r3, [r4, r2]
 8006a94:	e7ab      	b.n	80069ee <_malloc_r+0x22>
 8006a96:	42a3      	cmp	r3, r4
 8006a98:	6862      	ldr	r2, [r4, #4]
 8006a9a:	d1dd      	bne.n	8006a58 <_malloc_r+0x8c>
 8006a9c:	f8c8 2000 	str.w	r2, [r8]
 8006aa0:	e7ec      	b.n	8006a7c <_malloc_r+0xb0>
 8006aa2:	4623      	mov	r3, r4
 8006aa4:	6864      	ldr	r4, [r4, #4]
 8006aa6:	e7ac      	b.n	8006a02 <_malloc_r+0x36>
 8006aa8:	4634      	mov	r4, r6
 8006aaa:	6876      	ldr	r6, [r6, #4]
 8006aac:	e7b4      	b.n	8006a18 <_malloc_r+0x4c>
 8006aae:	4613      	mov	r3, r2
 8006ab0:	e7cc      	b.n	8006a4c <_malloc_r+0x80>
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	603b      	str	r3, [r7, #0]
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	f000 f80e 	bl	8006ad8 <__malloc_unlock>
 8006abc:	e797      	b.n	80069ee <_malloc_r+0x22>
 8006abe:	6025      	str	r5, [r4, #0]
 8006ac0:	e7dc      	b.n	8006a7c <_malloc_r+0xb0>
 8006ac2:	605b      	str	r3, [r3, #4]
 8006ac4:	deff      	udf	#255	; 0xff
 8006ac6:	bf00      	nop
 8006ac8:	200003dc 	.word	0x200003dc

08006acc <__malloc_lock>:
 8006acc:	4801      	ldr	r0, [pc, #4]	; (8006ad4 <__malloc_lock+0x8>)
 8006ace:	f7ff b885 	b.w	8005bdc <__retarget_lock_acquire_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	200003d8 	.word	0x200003d8

08006ad8 <__malloc_unlock>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__malloc_unlock+0x8>)
 8006ada:	f7ff b880 	b.w	8005bde <__retarget_lock_release_recursive>
 8006ade:	bf00      	nop
 8006ae0:	200003d8 	.word	0x200003d8

08006ae4 <_Balloc>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	69c6      	ldr	r6, [r0, #28]
 8006ae8:	4604      	mov	r4, r0
 8006aea:	460d      	mov	r5, r1
 8006aec:	b976      	cbnz	r6, 8006b0c <_Balloc+0x28>
 8006aee:	2010      	movs	r0, #16
 8006af0:	f7ff ff44 	bl	800697c <malloc>
 8006af4:	4602      	mov	r2, r0
 8006af6:	61e0      	str	r0, [r4, #28]
 8006af8:	b920      	cbnz	r0, 8006b04 <_Balloc+0x20>
 8006afa:	4b18      	ldr	r3, [pc, #96]	; (8006b5c <_Balloc+0x78>)
 8006afc:	4818      	ldr	r0, [pc, #96]	; (8006b60 <_Balloc+0x7c>)
 8006afe:	216b      	movs	r1, #107	; 0x6b
 8006b00:	f001 fd8e 	bl	8008620 <__assert_func>
 8006b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b08:	6006      	str	r6, [r0, #0]
 8006b0a:	60c6      	str	r6, [r0, #12]
 8006b0c:	69e6      	ldr	r6, [r4, #28]
 8006b0e:	68f3      	ldr	r3, [r6, #12]
 8006b10:	b183      	cbz	r3, 8006b34 <_Balloc+0x50>
 8006b12:	69e3      	ldr	r3, [r4, #28]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b1a:	b9b8      	cbnz	r0, 8006b4c <_Balloc+0x68>
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b22:	1d72      	adds	r2, r6, #5
 8006b24:	0092      	lsls	r2, r2, #2
 8006b26:	4620      	mov	r0, r4
 8006b28:	f001 fd98 	bl	800865c <_calloc_r>
 8006b2c:	b160      	cbz	r0, 8006b48 <_Balloc+0x64>
 8006b2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b32:	e00e      	b.n	8006b52 <_Balloc+0x6e>
 8006b34:	2221      	movs	r2, #33	; 0x21
 8006b36:	2104      	movs	r1, #4
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f001 fd8f 	bl	800865c <_calloc_r>
 8006b3e:	69e3      	ldr	r3, [r4, #28]
 8006b40:	60f0      	str	r0, [r6, #12]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e4      	bne.n	8006b12 <_Balloc+0x2e>
 8006b48:	2000      	movs	r0, #0
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	6802      	ldr	r2, [r0, #0]
 8006b4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b52:	2300      	movs	r3, #0
 8006b54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b58:	e7f7      	b.n	8006b4a <_Balloc+0x66>
 8006b5a:	bf00      	nop
 8006b5c:	080093da 	.word	0x080093da
 8006b60:	0800945a 	.word	0x0800945a

08006b64 <_Bfree>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	69c6      	ldr	r6, [r0, #28]
 8006b68:	4605      	mov	r5, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	b976      	cbnz	r6, 8006b8c <_Bfree+0x28>
 8006b6e:	2010      	movs	r0, #16
 8006b70:	f7ff ff04 	bl	800697c <malloc>
 8006b74:	4602      	mov	r2, r0
 8006b76:	61e8      	str	r0, [r5, #28]
 8006b78:	b920      	cbnz	r0, 8006b84 <_Bfree+0x20>
 8006b7a:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <_Bfree+0x3c>)
 8006b7c:	4809      	ldr	r0, [pc, #36]	; (8006ba4 <_Bfree+0x40>)
 8006b7e:	218f      	movs	r1, #143	; 0x8f
 8006b80:	f001 fd4e 	bl	8008620 <__assert_func>
 8006b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b88:	6006      	str	r6, [r0, #0]
 8006b8a:	60c6      	str	r6, [r0, #12]
 8006b8c:	b13c      	cbz	r4, 8006b9e <_Bfree+0x3a>
 8006b8e:	69eb      	ldr	r3, [r5, #28]
 8006b90:	6862      	ldr	r2, [r4, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b98:	6021      	str	r1, [r4, #0]
 8006b9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	080093da 	.word	0x080093da
 8006ba4:	0800945a 	.word	0x0800945a

08006ba8 <__multadd>:
 8006ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bac:	690d      	ldr	r5, [r1, #16]
 8006bae:	4607      	mov	r7, r0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	461e      	mov	r6, r3
 8006bb4:	f101 0c14 	add.w	ip, r1, #20
 8006bb8:	2000      	movs	r0, #0
 8006bba:	f8dc 3000 	ldr.w	r3, [ip]
 8006bbe:	b299      	uxth	r1, r3
 8006bc0:	fb02 6101 	mla	r1, r2, r1, r6
 8006bc4:	0c1e      	lsrs	r6, r3, #16
 8006bc6:	0c0b      	lsrs	r3, r1, #16
 8006bc8:	fb02 3306 	mla	r3, r2, r6, r3
 8006bcc:	b289      	uxth	r1, r1
 8006bce:	3001      	adds	r0, #1
 8006bd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bd4:	4285      	cmp	r5, r0
 8006bd6:	f84c 1b04 	str.w	r1, [ip], #4
 8006bda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bde:	dcec      	bgt.n	8006bba <__multadd+0x12>
 8006be0:	b30e      	cbz	r6, 8006c26 <__multadd+0x7e>
 8006be2:	68a3      	ldr	r3, [r4, #8]
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	dc19      	bgt.n	8006c1c <__multadd+0x74>
 8006be8:	6861      	ldr	r1, [r4, #4]
 8006bea:	4638      	mov	r0, r7
 8006bec:	3101      	adds	r1, #1
 8006bee:	f7ff ff79 	bl	8006ae4 <_Balloc>
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	b928      	cbnz	r0, 8006c02 <__multadd+0x5a>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <__multadd+0x84>)
 8006bfa:	480d      	ldr	r0, [pc, #52]	; (8006c30 <__multadd+0x88>)
 8006bfc:	21ba      	movs	r1, #186	; 0xba
 8006bfe:	f001 fd0f 	bl	8008620 <__assert_func>
 8006c02:	6922      	ldr	r2, [r4, #16]
 8006c04:	3202      	adds	r2, #2
 8006c06:	f104 010c 	add.w	r1, r4, #12
 8006c0a:	0092      	lsls	r2, r2, #2
 8006c0c:	300c      	adds	r0, #12
 8006c0e:	f001 fcef 	bl	80085f0 <memcpy>
 8006c12:	4621      	mov	r1, r4
 8006c14:	4638      	mov	r0, r7
 8006c16:	f7ff ffa5 	bl	8006b64 <_Bfree>
 8006c1a:	4644      	mov	r4, r8
 8006c1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c20:	3501      	adds	r5, #1
 8006c22:	615e      	str	r6, [r3, #20]
 8006c24:	6125      	str	r5, [r4, #16]
 8006c26:	4620      	mov	r0, r4
 8006c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c2c:	08009449 	.word	0x08009449
 8006c30:	0800945a 	.word	0x0800945a

08006c34 <__s2b>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	460c      	mov	r4, r1
 8006c3a:	4615      	mov	r5, r2
 8006c3c:	461f      	mov	r7, r3
 8006c3e:	2209      	movs	r2, #9
 8006c40:	3308      	adds	r3, #8
 8006c42:	4606      	mov	r6, r0
 8006c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c48:	2100      	movs	r1, #0
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	db09      	blt.n	8006c64 <__s2b+0x30>
 8006c50:	4630      	mov	r0, r6
 8006c52:	f7ff ff47 	bl	8006ae4 <_Balloc>
 8006c56:	b940      	cbnz	r0, 8006c6a <__s2b+0x36>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <__s2b+0x8c>)
 8006c5c:	4819      	ldr	r0, [pc, #100]	; (8006cc4 <__s2b+0x90>)
 8006c5e:	21d3      	movs	r1, #211	; 0xd3
 8006c60:	f001 fcde 	bl	8008620 <__assert_func>
 8006c64:	0052      	lsls	r2, r2, #1
 8006c66:	3101      	adds	r1, #1
 8006c68:	e7f0      	b.n	8006c4c <__s2b+0x18>
 8006c6a:	9b08      	ldr	r3, [sp, #32]
 8006c6c:	6143      	str	r3, [r0, #20]
 8006c6e:	2d09      	cmp	r5, #9
 8006c70:	f04f 0301 	mov.w	r3, #1
 8006c74:	6103      	str	r3, [r0, #16]
 8006c76:	dd16      	ble.n	8006ca6 <__s2b+0x72>
 8006c78:	f104 0909 	add.w	r9, r4, #9
 8006c7c:	46c8      	mov	r8, r9
 8006c7e:	442c      	add	r4, r5
 8006c80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c84:	4601      	mov	r1, r0
 8006c86:	3b30      	subs	r3, #48	; 0x30
 8006c88:	220a      	movs	r2, #10
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ff8c 	bl	8006ba8 <__multadd>
 8006c90:	45a0      	cmp	r8, r4
 8006c92:	d1f5      	bne.n	8006c80 <__s2b+0x4c>
 8006c94:	f1a5 0408 	sub.w	r4, r5, #8
 8006c98:	444c      	add	r4, r9
 8006c9a:	1b2d      	subs	r5, r5, r4
 8006c9c:	1963      	adds	r3, r4, r5
 8006c9e:	42bb      	cmp	r3, r7
 8006ca0:	db04      	blt.n	8006cac <__s2b+0x78>
 8006ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	340a      	adds	r4, #10
 8006ca8:	2509      	movs	r5, #9
 8006caa:	e7f6      	b.n	8006c9a <__s2b+0x66>
 8006cac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006cb0:	4601      	mov	r1, r0
 8006cb2:	3b30      	subs	r3, #48	; 0x30
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff ff76 	bl	8006ba8 <__multadd>
 8006cbc:	e7ee      	b.n	8006c9c <__s2b+0x68>
 8006cbe:	bf00      	nop
 8006cc0:	08009449 	.word	0x08009449
 8006cc4:	0800945a 	.word	0x0800945a

08006cc8 <__hi0bits>:
 8006cc8:	0c03      	lsrs	r3, r0, #16
 8006cca:	041b      	lsls	r3, r3, #16
 8006ccc:	b9d3      	cbnz	r3, 8006d04 <__hi0bits+0x3c>
 8006cce:	0400      	lsls	r0, r0, #16
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006cd6:	bf04      	itt	eq
 8006cd8:	0200      	lsleq	r0, r0, #8
 8006cda:	3308      	addeq	r3, #8
 8006cdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ce0:	bf04      	itt	eq
 8006ce2:	0100      	lsleq	r0, r0, #4
 8006ce4:	3304      	addeq	r3, #4
 8006ce6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006cea:	bf04      	itt	eq
 8006cec:	0080      	lsleq	r0, r0, #2
 8006cee:	3302      	addeq	r3, #2
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	db05      	blt.n	8006d00 <__hi0bits+0x38>
 8006cf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006cf8:	f103 0301 	add.w	r3, r3, #1
 8006cfc:	bf08      	it	eq
 8006cfe:	2320      	moveq	r3, #32
 8006d00:	4618      	mov	r0, r3
 8006d02:	4770      	bx	lr
 8006d04:	2300      	movs	r3, #0
 8006d06:	e7e4      	b.n	8006cd2 <__hi0bits+0xa>

08006d08 <__lo0bits>:
 8006d08:	6803      	ldr	r3, [r0, #0]
 8006d0a:	f013 0207 	ands.w	r2, r3, #7
 8006d0e:	d00c      	beq.n	8006d2a <__lo0bits+0x22>
 8006d10:	07d9      	lsls	r1, r3, #31
 8006d12:	d422      	bmi.n	8006d5a <__lo0bits+0x52>
 8006d14:	079a      	lsls	r2, r3, #30
 8006d16:	bf49      	itett	mi
 8006d18:	085b      	lsrmi	r3, r3, #1
 8006d1a:	089b      	lsrpl	r3, r3, #2
 8006d1c:	6003      	strmi	r3, [r0, #0]
 8006d1e:	2201      	movmi	r2, #1
 8006d20:	bf5c      	itt	pl
 8006d22:	6003      	strpl	r3, [r0, #0]
 8006d24:	2202      	movpl	r2, #2
 8006d26:	4610      	mov	r0, r2
 8006d28:	4770      	bx	lr
 8006d2a:	b299      	uxth	r1, r3
 8006d2c:	b909      	cbnz	r1, 8006d32 <__lo0bits+0x2a>
 8006d2e:	0c1b      	lsrs	r3, r3, #16
 8006d30:	2210      	movs	r2, #16
 8006d32:	b2d9      	uxtb	r1, r3
 8006d34:	b909      	cbnz	r1, 8006d3a <__lo0bits+0x32>
 8006d36:	3208      	adds	r2, #8
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	0719      	lsls	r1, r3, #28
 8006d3c:	bf04      	itt	eq
 8006d3e:	091b      	lsreq	r3, r3, #4
 8006d40:	3204      	addeq	r2, #4
 8006d42:	0799      	lsls	r1, r3, #30
 8006d44:	bf04      	itt	eq
 8006d46:	089b      	lsreq	r3, r3, #2
 8006d48:	3202      	addeq	r2, #2
 8006d4a:	07d9      	lsls	r1, r3, #31
 8006d4c:	d403      	bmi.n	8006d56 <__lo0bits+0x4e>
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	f102 0201 	add.w	r2, r2, #1
 8006d54:	d003      	beq.n	8006d5e <__lo0bits+0x56>
 8006d56:	6003      	str	r3, [r0, #0]
 8006d58:	e7e5      	b.n	8006d26 <__lo0bits+0x1e>
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	e7e3      	b.n	8006d26 <__lo0bits+0x1e>
 8006d5e:	2220      	movs	r2, #32
 8006d60:	e7e1      	b.n	8006d26 <__lo0bits+0x1e>
	...

08006d64 <__i2b>:
 8006d64:	b510      	push	{r4, lr}
 8006d66:	460c      	mov	r4, r1
 8006d68:	2101      	movs	r1, #1
 8006d6a:	f7ff febb 	bl	8006ae4 <_Balloc>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <__i2b+0x1a>
 8006d72:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <__i2b+0x24>)
 8006d74:	4805      	ldr	r0, [pc, #20]	; (8006d8c <__i2b+0x28>)
 8006d76:	f240 1145 	movw	r1, #325	; 0x145
 8006d7a:	f001 fc51 	bl	8008620 <__assert_func>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	6144      	str	r4, [r0, #20]
 8006d82:	6103      	str	r3, [r0, #16]
 8006d84:	bd10      	pop	{r4, pc}
 8006d86:	bf00      	nop
 8006d88:	08009449 	.word	0x08009449
 8006d8c:	0800945a 	.word	0x0800945a

08006d90 <__multiply>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	4691      	mov	r9, r2
 8006d96:	690a      	ldr	r2, [r1, #16]
 8006d98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	bfb8      	it	lt
 8006da0:	460b      	movlt	r3, r1
 8006da2:	460c      	mov	r4, r1
 8006da4:	bfbc      	itt	lt
 8006da6:	464c      	movlt	r4, r9
 8006da8:	4699      	movlt	r9, r3
 8006daa:	6927      	ldr	r7, [r4, #16]
 8006dac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006db0:	68a3      	ldr	r3, [r4, #8]
 8006db2:	6861      	ldr	r1, [r4, #4]
 8006db4:	eb07 060a 	add.w	r6, r7, sl
 8006db8:	42b3      	cmp	r3, r6
 8006dba:	b085      	sub	sp, #20
 8006dbc:	bfb8      	it	lt
 8006dbe:	3101      	addlt	r1, #1
 8006dc0:	f7ff fe90 	bl	8006ae4 <_Balloc>
 8006dc4:	b930      	cbnz	r0, 8006dd4 <__multiply+0x44>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4b44      	ldr	r3, [pc, #272]	; (8006edc <__multiply+0x14c>)
 8006dca:	4845      	ldr	r0, [pc, #276]	; (8006ee0 <__multiply+0x150>)
 8006dcc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006dd0:	f001 fc26 	bl	8008620 <__assert_func>
 8006dd4:	f100 0514 	add.w	r5, r0, #20
 8006dd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ddc:	462b      	mov	r3, r5
 8006dde:	2200      	movs	r2, #0
 8006de0:	4543      	cmp	r3, r8
 8006de2:	d321      	bcc.n	8006e28 <__multiply+0x98>
 8006de4:	f104 0314 	add.w	r3, r4, #20
 8006de8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dec:	f109 0314 	add.w	r3, r9, #20
 8006df0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006df4:	9202      	str	r2, [sp, #8]
 8006df6:	1b3a      	subs	r2, r7, r4
 8006df8:	3a15      	subs	r2, #21
 8006dfa:	f022 0203 	bic.w	r2, r2, #3
 8006dfe:	3204      	adds	r2, #4
 8006e00:	f104 0115 	add.w	r1, r4, #21
 8006e04:	428f      	cmp	r7, r1
 8006e06:	bf38      	it	cc
 8006e08:	2204      	movcc	r2, #4
 8006e0a:	9201      	str	r2, [sp, #4]
 8006e0c:	9a02      	ldr	r2, [sp, #8]
 8006e0e:	9303      	str	r3, [sp, #12]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d80c      	bhi.n	8006e2e <__multiply+0x9e>
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	dd03      	ble.n	8006e20 <__multiply+0x90>
 8006e18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d05b      	beq.n	8006ed8 <__multiply+0x148>
 8006e20:	6106      	str	r6, [r0, #16]
 8006e22:	b005      	add	sp, #20
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	f843 2b04 	str.w	r2, [r3], #4
 8006e2c:	e7d8      	b.n	8006de0 <__multiply+0x50>
 8006e2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e32:	f1ba 0f00 	cmp.w	sl, #0
 8006e36:	d024      	beq.n	8006e82 <__multiply+0xf2>
 8006e38:	f104 0e14 	add.w	lr, r4, #20
 8006e3c:	46a9      	mov	r9, r5
 8006e3e:	f04f 0c00 	mov.w	ip, #0
 8006e42:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e46:	f8d9 1000 	ldr.w	r1, [r9]
 8006e4a:	fa1f fb82 	uxth.w	fp, r2
 8006e4e:	b289      	uxth	r1, r1
 8006e50:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e58:	f8d9 2000 	ldr.w	r2, [r9]
 8006e5c:	4461      	add	r1, ip
 8006e5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e62:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e6a:	b289      	uxth	r1, r1
 8006e6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e70:	4577      	cmp	r7, lr
 8006e72:	f849 1b04 	str.w	r1, [r9], #4
 8006e76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e7a:	d8e2      	bhi.n	8006e42 <__multiply+0xb2>
 8006e7c:	9a01      	ldr	r2, [sp, #4]
 8006e7e:	f845 c002 	str.w	ip, [r5, r2]
 8006e82:	9a03      	ldr	r2, [sp, #12]
 8006e84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	d021      	beq.n	8006ed4 <__multiply+0x144>
 8006e90:	6829      	ldr	r1, [r5, #0]
 8006e92:	f104 0c14 	add.w	ip, r4, #20
 8006e96:	46ae      	mov	lr, r5
 8006e98:	f04f 0a00 	mov.w	sl, #0
 8006e9c:	f8bc b000 	ldrh.w	fp, [ip]
 8006ea0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ea4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ea8:	4452      	add	r2, sl
 8006eaa:	b289      	uxth	r1, r1
 8006eac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006eb0:	f84e 1b04 	str.w	r1, [lr], #4
 8006eb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006eb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ebc:	f8be 1000 	ldrh.w	r1, [lr]
 8006ec0:	fb09 110a 	mla	r1, r9, sl, r1
 8006ec4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006ec8:	4567      	cmp	r7, ip
 8006eca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ece:	d8e5      	bhi.n	8006e9c <__multiply+0x10c>
 8006ed0:	9a01      	ldr	r2, [sp, #4]
 8006ed2:	50a9      	str	r1, [r5, r2]
 8006ed4:	3504      	adds	r5, #4
 8006ed6:	e799      	b.n	8006e0c <__multiply+0x7c>
 8006ed8:	3e01      	subs	r6, #1
 8006eda:	e79b      	b.n	8006e14 <__multiply+0x84>
 8006edc:	08009449 	.word	0x08009449
 8006ee0:	0800945a 	.word	0x0800945a

08006ee4 <__pow5mult>:
 8006ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee8:	4615      	mov	r5, r2
 8006eea:	f012 0203 	ands.w	r2, r2, #3
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	d007      	beq.n	8006f04 <__pow5mult+0x20>
 8006ef4:	4c25      	ldr	r4, [pc, #148]	; (8006f8c <__pow5mult+0xa8>)
 8006ef6:	3a01      	subs	r2, #1
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006efe:	f7ff fe53 	bl	8006ba8 <__multadd>
 8006f02:	4607      	mov	r7, r0
 8006f04:	10ad      	asrs	r5, r5, #2
 8006f06:	d03d      	beq.n	8006f84 <__pow5mult+0xa0>
 8006f08:	69f4      	ldr	r4, [r6, #28]
 8006f0a:	b97c      	cbnz	r4, 8006f2c <__pow5mult+0x48>
 8006f0c:	2010      	movs	r0, #16
 8006f0e:	f7ff fd35 	bl	800697c <malloc>
 8006f12:	4602      	mov	r2, r0
 8006f14:	61f0      	str	r0, [r6, #28]
 8006f16:	b928      	cbnz	r0, 8006f24 <__pow5mult+0x40>
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <__pow5mult+0xac>)
 8006f1a:	481e      	ldr	r0, [pc, #120]	; (8006f94 <__pow5mult+0xb0>)
 8006f1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006f20:	f001 fb7e 	bl	8008620 <__assert_func>
 8006f24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f28:	6004      	str	r4, [r0, #0]
 8006f2a:	60c4      	str	r4, [r0, #12]
 8006f2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f34:	b94c      	cbnz	r4, 8006f4a <__pow5mult+0x66>
 8006f36:	f240 2171 	movw	r1, #625	; 0x271
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f7ff ff12 	bl	8006d64 <__i2b>
 8006f40:	2300      	movs	r3, #0
 8006f42:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f46:	4604      	mov	r4, r0
 8006f48:	6003      	str	r3, [r0, #0]
 8006f4a:	f04f 0900 	mov.w	r9, #0
 8006f4e:	07eb      	lsls	r3, r5, #31
 8006f50:	d50a      	bpl.n	8006f68 <__pow5mult+0x84>
 8006f52:	4639      	mov	r1, r7
 8006f54:	4622      	mov	r2, r4
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7ff ff1a 	bl	8006d90 <__multiply>
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	4680      	mov	r8, r0
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7ff fdff 	bl	8006b64 <_Bfree>
 8006f66:	4647      	mov	r7, r8
 8006f68:	106d      	asrs	r5, r5, #1
 8006f6a:	d00b      	beq.n	8006f84 <__pow5mult+0xa0>
 8006f6c:	6820      	ldr	r0, [r4, #0]
 8006f6e:	b938      	cbnz	r0, 8006f80 <__pow5mult+0x9c>
 8006f70:	4622      	mov	r2, r4
 8006f72:	4621      	mov	r1, r4
 8006f74:	4630      	mov	r0, r6
 8006f76:	f7ff ff0b 	bl	8006d90 <__multiply>
 8006f7a:	6020      	str	r0, [r4, #0]
 8006f7c:	f8c0 9000 	str.w	r9, [r0]
 8006f80:	4604      	mov	r4, r0
 8006f82:	e7e4      	b.n	8006f4e <__pow5mult+0x6a>
 8006f84:	4638      	mov	r0, r7
 8006f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	bf00      	nop
 8006f8c:	080095a8 	.word	0x080095a8
 8006f90:	080093da 	.word	0x080093da
 8006f94:	0800945a 	.word	0x0800945a

08006f98 <__lshift>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	6849      	ldr	r1, [r1, #4]
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fa6:	68a3      	ldr	r3, [r4, #8]
 8006fa8:	4607      	mov	r7, r0
 8006faa:	4691      	mov	r9, r2
 8006fac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fb0:	f108 0601 	add.w	r6, r8, #1
 8006fb4:	42b3      	cmp	r3, r6
 8006fb6:	db0b      	blt.n	8006fd0 <__lshift+0x38>
 8006fb8:	4638      	mov	r0, r7
 8006fba:	f7ff fd93 	bl	8006ae4 <_Balloc>
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	b948      	cbnz	r0, 8006fd6 <__lshift+0x3e>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	4b28      	ldr	r3, [pc, #160]	; (8007068 <__lshift+0xd0>)
 8006fc6:	4829      	ldr	r0, [pc, #164]	; (800706c <__lshift+0xd4>)
 8006fc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006fcc:	f001 fb28 	bl	8008620 <__assert_func>
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	e7ee      	b.n	8006fb4 <__lshift+0x1c>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f100 0114 	add.w	r1, r0, #20
 8006fdc:	f100 0210 	add.w	r2, r0, #16
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	4553      	cmp	r3, sl
 8006fe4:	db33      	blt.n	800704e <__lshift+0xb6>
 8006fe6:	6920      	ldr	r0, [r4, #16]
 8006fe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fec:	f104 0314 	add.w	r3, r4, #20
 8006ff0:	f019 091f 	ands.w	r9, r9, #31
 8006ff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ff8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ffc:	d02b      	beq.n	8007056 <__lshift+0xbe>
 8006ffe:	f1c9 0e20 	rsb	lr, r9, #32
 8007002:	468a      	mov	sl, r1
 8007004:	2200      	movs	r2, #0
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	fa00 f009 	lsl.w	r0, r0, r9
 800700c:	4310      	orrs	r0, r2
 800700e:	f84a 0b04 	str.w	r0, [sl], #4
 8007012:	f853 2b04 	ldr.w	r2, [r3], #4
 8007016:	459c      	cmp	ip, r3
 8007018:	fa22 f20e 	lsr.w	r2, r2, lr
 800701c:	d8f3      	bhi.n	8007006 <__lshift+0x6e>
 800701e:	ebac 0304 	sub.w	r3, ip, r4
 8007022:	3b15      	subs	r3, #21
 8007024:	f023 0303 	bic.w	r3, r3, #3
 8007028:	3304      	adds	r3, #4
 800702a:	f104 0015 	add.w	r0, r4, #21
 800702e:	4584      	cmp	ip, r0
 8007030:	bf38      	it	cc
 8007032:	2304      	movcc	r3, #4
 8007034:	50ca      	str	r2, [r1, r3]
 8007036:	b10a      	cbz	r2, 800703c <__lshift+0xa4>
 8007038:	f108 0602 	add.w	r6, r8, #2
 800703c:	3e01      	subs	r6, #1
 800703e:	4638      	mov	r0, r7
 8007040:	612e      	str	r6, [r5, #16]
 8007042:	4621      	mov	r1, r4
 8007044:	f7ff fd8e 	bl	8006b64 <_Bfree>
 8007048:	4628      	mov	r0, r5
 800704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007052:	3301      	adds	r3, #1
 8007054:	e7c5      	b.n	8006fe2 <__lshift+0x4a>
 8007056:	3904      	subs	r1, #4
 8007058:	f853 2b04 	ldr.w	r2, [r3], #4
 800705c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007060:	459c      	cmp	ip, r3
 8007062:	d8f9      	bhi.n	8007058 <__lshift+0xc0>
 8007064:	e7ea      	b.n	800703c <__lshift+0xa4>
 8007066:	bf00      	nop
 8007068:	08009449 	.word	0x08009449
 800706c:	0800945a 	.word	0x0800945a

08007070 <__mcmp>:
 8007070:	b530      	push	{r4, r5, lr}
 8007072:	6902      	ldr	r2, [r0, #16]
 8007074:	690c      	ldr	r4, [r1, #16]
 8007076:	1b12      	subs	r2, r2, r4
 8007078:	d10e      	bne.n	8007098 <__mcmp+0x28>
 800707a:	f100 0314 	add.w	r3, r0, #20
 800707e:	3114      	adds	r1, #20
 8007080:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007084:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007088:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800708c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007090:	42a5      	cmp	r5, r4
 8007092:	d003      	beq.n	800709c <__mcmp+0x2c>
 8007094:	d305      	bcc.n	80070a2 <__mcmp+0x32>
 8007096:	2201      	movs	r2, #1
 8007098:	4610      	mov	r0, r2
 800709a:	bd30      	pop	{r4, r5, pc}
 800709c:	4283      	cmp	r3, r0
 800709e:	d3f3      	bcc.n	8007088 <__mcmp+0x18>
 80070a0:	e7fa      	b.n	8007098 <__mcmp+0x28>
 80070a2:	f04f 32ff 	mov.w	r2, #4294967295
 80070a6:	e7f7      	b.n	8007098 <__mcmp+0x28>

080070a8 <__mdiff>:
 80070a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	4606      	mov	r6, r0
 80070b0:	4611      	mov	r1, r2
 80070b2:	4620      	mov	r0, r4
 80070b4:	4690      	mov	r8, r2
 80070b6:	f7ff ffdb 	bl	8007070 <__mcmp>
 80070ba:	1e05      	subs	r5, r0, #0
 80070bc:	d110      	bne.n	80070e0 <__mdiff+0x38>
 80070be:	4629      	mov	r1, r5
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff fd0f 	bl	8006ae4 <_Balloc>
 80070c6:	b930      	cbnz	r0, 80070d6 <__mdiff+0x2e>
 80070c8:	4b3a      	ldr	r3, [pc, #232]	; (80071b4 <__mdiff+0x10c>)
 80070ca:	4602      	mov	r2, r0
 80070cc:	f240 2137 	movw	r1, #567	; 0x237
 80070d0:	4839      	ldr	r0, [pc, #228]	; (80071b8 <__mdiff+0x110>)
 80070d2:	f001 faa5 	bl	8008620 <__assert_func>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e0:	bfa4      	itt	ge
 80070e2:	4643      	movge	r3, r8
 80070e4:	46a0      	movge	r8, r4
 80070e6:	4630      	mov	r0, r6
 80070e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070ec:	bfa6      	itte	ge
 80070ee:	461c      	movge	r4, r3
 80070f0:	2500      	movge	r5, #0
 80070f2:	2501      	movlt	r5, #1
 80070f4:	f7ff fcf6 	bl	8006ae4 <_Balloc>
 80070f8:	b920      	cbnz	r0, 8007104 <__mdiff+0x5c>
 80070fa:	4b2e      	ldr	r3, [pc, #184]	; (80071b4 <__mdiff+0x10c>)
 80070fc:	4602      	mov	r2, r0
 80070fe:	f240 2145 	movw	r1, #581	; 0x245
 8007102:	e7e5      	b.n	80070d0 <__mdiff+0x28>
 8007104:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007108:	6926      	ldr	r6, [r4, #16]
 800710a:	60c5      	str	r5, [r0, #12]
 800710c:	f104 0914 	add.w	r9, r4, #20
 8007110:	f108 0514 	add.w	r5, r8, #20
 8007114:	f100 0e14 	add.w	lr, r0, #20
 8007118:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800711c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007120:	f108 0210 	add.w	r2, r8, #16
 8007124:	46f2      	mov	sl, lr
 8007126:	2100      	movs	r1, #0
 8007128:	f859 3b04 	ldr.w	r3, [r9], #4
 800712c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007130:	fa11 f88b 	uxtah	r8, r1, fp
 8007134:	b299      	uxth	r1, r3
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	eba8 0801 	sub.w	r8, r8, r1
 800713c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007140:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007144:	fa1f f888 	uxth.w	r8, r8
 8007148:	1419      	asrs	r1, r3, #16
 800714a:	454e      	cmp	r6, r9
 800714c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007150:	f84a 3b04 	str.w	r3, [sl], #4
 8007154:	d8e8      	bhi.n	8007128 <__mdiff+0x80>
 8007156:	1b33      	subs	r3, r6, r4
 8007158:	3b15      	subs	r3, #21
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	3304      	adds	r3, #4
 8007160:	3415      	adds	r4, #21
 8007162:	42a6      	cmp	r6, r4
 8007164:	bf38      	it	cc
 8007166:	2304      	movcc	r3, #4
 8007168:	441d      	add	r5, r3
 800716a:	4473      	add	r3, lr
 800716c:	469e      	mov	lr, r3
 800716e:	462e      	mov	r6, r5
 8007170:	4566      	cmp	r6, ip
 8007172:	d30e      	bcc.n	8007192 <__mdiff+0xea>
 8007174:	f10c 0203 	add.w	r2, ip, #3
 8007178:	1b52      	subs	r2, r2, r5
 800717a:	f022 0203 	bic.w	r2, r2, #3
 800717e:	3d03      	subs	r5, #3
 8007180:	45ac      	cmp	ip, r5
 8007182:	bf38      	it	cc
 8007184:	2200      	movcc	r2, #0
 8007186:	4413      	add	r3, r2
 8007188:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800718c:	b17a      	cbz	r2, 80071ae <__mdiff+0x106>
 800718e:	6107      	str	r7, [r0, #16]
 8007190:	e7a4      	b.n	80070dc <__mdiff+0x34>
 8007192:	f856 8b04 	ldr.w	r8, [r6], #4
 8007196:	fa11 f288 	uxtah	r2, r1, r8
 800719a:	1414      	asrs	r4, r2, #16
 800719c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071a0:	b292      	uxth	r2, r2
 80071a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071a6:	f84e 2b04 	str.w	r2, [lr], #4
 80071aa:	1421      	asrs	r1, r4, #16
 80071ac:	e7e0      	b.n	8007170 <__mdiff+0xc8>
 80071ae:	3f01      	subs	r7, #1
 80071b0:	e7ea      	b.n	8007188 <__mdiff+0xe0>
 80071b2:	bf00      	nop
 80071b4:	08009449 	.word	0x08009449
 80071b8:	0800945a 	.word	0x0800945a

080071bc <__ulp>:
 80071bc:	b082      	sub	sp, #8
 80071be:	ed8d 0b00 	vstr	d0, [sp]
 80071c2:	9a01      	ldr	r2, [sp, #4]
 80071c4:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <__ulp+0x48>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dc08      	bgt.n	80071e2 <__ulp+0x26>
 80071d0:	425b      	negs	r3, r3
 80071d2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80071d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071da:	da04      	bge.n	80071e6 <__ulp+0x2a>
 80071dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071e0:	4113      	asrs	r3, r2
 80071e2:	2200      	movs	r2, #0
 80071e4:	e008      	b.n	80071f8 <__ulp+0x3c>
 80071e6:	f1a2 0314 	sub.w	r3, r2, #20
 80071ea:	2b1e      	cmp	r3, #30
 80071ec:	bfda      	itte	le
 80071ee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80071f2:	40da      	lsrle	r2, r3
 80071f4:	2201      	movgt	r2, #1
 80071f6:	2300      	movs	r3, #0
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	ec41 0b10 	vmov	d0, r0, r1
 8007200:	b002      	add	sp, #8
 8007202:	4770      	bx	lr
 8007204:	7ff00000 	.word	0x7ff00000

08007208 <__b2d>:
 8007208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720c:	6906      	ldr	r6, [r0, #16]
 800720e:	f100 0814 	add.w	r8, r0, #20
 8007212:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007216:	1f37      	subs	r7, r6, #4
 8007218:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800721c:	4610      	mov	r0, r2
 800721e:	f7ff fd53 	bl	8006cc8 <__hi0bits>
 8007222:	f1c0 0320 	rsb	r3, r0, #32
 8007226:	280a      	cmp	r0, #10
 8007228:	600b      	str	r3, [r1, #0]
 800722a:	491b      	ldr	r1, [pc, #108]	; (8007298 <__b2d+0x90>)
 800722c:	dc15      	bgt.n	800725a <__b2d+0x52>
 800722e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007232:	fa22 f30c 	lsr.w	r3, r2, ip
 8007236:	45b8      	cmp	r8, r7
 8007238:	ea43 0501 	orr.w	r5, r3, r1
 800723c:	bf34      	ite	cc
 800723e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007242:	2300      	movcs	r3, #0
 8007244:	3015      	adds	r0, #21
 8007246:	fa02 f000 	lsl.w	r0, r2, r0
 800724a:	fa23 f30c 	lsr.w	r3, r3, ip
 800724e:	4303      	orrs	r3, r0
 8007250:	461c      	mov	r4, r3
 8007252:	ec45 4b10 	vmov	d0, r4, r5
 8007256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800725a:	45b8      	cmp	r8, r7
 800725c:	bf3a      	itte	cc
 800725e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007262:	f1a6 0708 	subcc.w	r7, r6, #8
 8007266:	2300      	movcs	r3, #0
 8007268:	380b      	subs	r0, #11
 800726a:	d012      	beq.n	8007292 <__b2d+0x8a>
 800726c:	f1c0 0120 	rsb	r1, r0, #32
 8007270:	fa23 f401 	lsr.w	r4, r3, r1
 8007274:	4082      	lsls	r2, r0
 8007276:	4322      	orrs	r2, r4
 8007278:	4547      	cmp	r7, r8
 800727a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800727e:	bf8c      	ite	hi
 8007280:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007284:	2200      	movls	r2, #0
 8007286:	4083      	lsls	r3, r0
 8007288:	40ca      	lsrs	r2, r1
 800728a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800728e:	4313      	orrs	r3, r2
 8007290:	e7de      	b.n	8007250 <__b2d+0x48>
 8007292:	ea42 0501 	orr.w	r5, r2, r1
 8007296:	e7db      	b.n	8007250 <__b2d+0x48>
 8007298:	3ff00000 	.word	0x3ff00000

0800729c <__d2b>:
 800729c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	460f      	mov	r7, r1
 80072a2:	2101      	movs	r1, #1
 80072a4:	ec59 8b10 	vmov	r8, r9, d0
 80072a8:	4616      	mov	r6, r2
 80072aa:	f7ff fc1b 	bl	8006ae4 <_Balloc>
 80072ae:	4604      	mov	r4, r0
 80072b0:	b930      	cbnz	r0, 80072c0 <__d2b+0x24>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b24      	ldr	r3, [pc, #144]	; (8007348 <__d2b+0xac>)
 80072b6:	4825      	ldr	r0, [pc, #148]	; (800734c <__d2b+0xb0>)
 80072b8:	f240 310f 	movw	r1, #783	; 0x30f
 80072bc:	f001 f9b0 	bl	8008620 <__assert_func>
 80072c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072c8:	bb2d      	cbnz	r5, 8007316 <__d2b+0x7a>
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	f1b8 0300 	subs.w	r3, r8, #0
 80072d0:	d026      	beq.n	8007320 <__d2b+0x84>
 80072d2:	4668      	mov	r0, sp
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	f7ff fd17 	bl	8006d08 <__lo0bits>
 80072da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072de:	b1e8      	cbz	r0, 800731c <__d2b+0x80>
 80072e0:	f1c0 0320 	rsb	r3, r0, #32
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	430b      	orrs	r3, r1
 80072ea:	40c2      	lsrs	r2, r0
 80072ec:	6163      	str	r3, [r4, #20]
 80072ee:	9201      	str	r2, [sp, #4]
 80072f0:	9b01      	ldr	r3, [sp, #4]
 80072f2:	61a3      	str	r3, [r4, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf14      	ite	ne
 80072f8:	2202      	movne	r2, #2
 80072fa:	2201      	moveq	r2, #1
 80072fc:	6122      	str	r2, [r4, #16]
 80072fe:	b1bd      	cbz	r5, 8007330 <__d2b+0x94>
 8007300:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007304:	4405      	add	r5, r0
 8007306:	603d      	str	r5, [r7, #0]
 8007308:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800730c:	6030      	str	r0, [r6, #0]
 800730e:	4620      	mov	r0, r4
 8007310:	b003      	add	sp, #12
 8007312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800731a:	e7d6      	b.n	80072ca <__d2b+0x2e>
 800731c:	6161      	str	r1, [r4, #20]
 800731e:	e7e7      	b.n	80072f0 <__d2b+0x54>
 8007320:	a801      	add	r0, sp, #4
 8007322:	f7ff fcf1 	bl	8006d08 <__lo0bits>
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	6163      	str	r3, [r4, #20]
 800732a:	3020      	adds	r0, #32
 800732c:	2201      	movs	r2, #1
 800732e:	e7e5      	b.n	80072fc <__d2b+0x60>
 8007330:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007334:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007338:	6038      	str	r0, [r7, #0]
 800733a:	6918      	ldr	r0, [r3, #16]
 800733c:	f7ff fcc4 	bl	8006cc8 <__hi0bits>
 8007340:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007344:	e7e2      	b.n	800730c <__d2b+0x70>
 8007346:	bf00      	nop
 8007348:	08009449 	.word	0x08009449
 800734c:	0800945a 	.word	0x0800945a

08007350 <__ratio>:
 8007350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	4688      	mov	r8, r1
 8007356:	4669      	mov	r1, sp
 8007358:	4681      	mov	r9, r0
 800735a:	f7ff ff55 	bl	8007208 <__b2d>
 800735e:	a901      	add	r1, sp, #4
 8007360:	4640      	mov	r0, r8
 8007362:	ec55 4b10 	vmov	r4, r5, d0
 8007366:	f7ff ff4f 	bl	8007208 <__b2d>
 800736a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800736e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007372:	eba3 0c02 	sub.w	ip, r3, r2
 8007376:	e9dd 3200 	ldrd	r3, r2, [sp]
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007380:	ec51 0b10 	vmov	r0, r1, d0
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfd6      	itet	le
 8007388:	460a      	movle	r2, r1
 800738a:	462a      	movgt	r2, r5
 800738c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007390:	468b      	mov	fp, r1
 8007392:	462f      	mov	r7, r5
 8007394:	bfd4      	ite	le
 8007396:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800739a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800739e:	4620      	mov	r0, r4
 80073a0:	ee10 2a10 	vmov	r2, s0
 80073a4:	465b      	mov	r3, fp
 80073a6:	4639      	mov	r1, r7
 80073a8:	f7f9 fa58 	bl	800085c <__aeabi_ddiv>
 80073ac:	ec41 0b10 	vmov	d0, r0, r1
 80073b0:	b003      	add	sp, #12
 80073b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073b6 <__copybits>:
 80073b6:	3901      	subs	r1, #1
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	1149      	asrs	r1, r1, #5
 80073bc:	6914      	ldr	r4, [r2, #16]
 80073be:	3101      	adds	r1, #1
 80073c0:	f102 0314 	add.w	r3, r2, #20
 80073c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073cc:	1f05      	subs	r5, r0, #4
 80073ce:	42a3      	cmp	r3, r4
 80073d0:	d30c      	bcc.n	80073ec <__copybits+0x36>
 80073d2:	1aa3      	subs	r3, r4, r2
 80073d4:	3b11      	subs	r3, #17
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	3211      	adds	r2, #17
 80073dc:	42a2      	cmp	r2, r4
 80073de:	bf88      	it	hi
 80073e0:	2300      	movhi	r3, #0
 80073e2:	4418      	add	r0, r3
 80073e4:	2300      	movs	r3, #0
 80073e6:	4288      	cmp	r0, r1
 80073e8:	d305      	bcc.n	80073f6 <__copybits+0x40>
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80073f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80073f4:	e7eb      	b.n	80073ce <__copybits+0x18>
 80073f6:	f840 3b04 	str.w	r3, [r0], #4
 80073fa:	e7f4      	b.n	80073e6 <__copybits+0x30>

080073fc <__any_on>:
 80073fc:	f100 0214 	add.w	r2, r0, #20
 8007400:	6900      	ldr	r0, [r0, #16]
 8007402:	114b      	asrs	r3, r1, #5
 8007404:	4298      	cmp	r0, r3
 8007406:	b510      	push	{r4, lr}
 8007408:	db11      	blt.n	800742e <__any_on+0x32>
 800740a:	dd0a      	ble.n	8007422 <__any_on+0x26>
 800740c:	f011 011f 	ands.w	r1, r1, #31
 8007410:	d007      	beq.n	8007422 <__any_on+0x26>
 8007412:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007416:	fa24 f001 	lsr.w	r0, r4, r1
 800741a:	fa00 f101 	lsl.w	r1, r0, r1
 800741e:	428c      	cmp	r4, r1
 8007420:	d10b      	bne.n	800743a <__any_on+0x3e>
 8007422:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007426:	4293      	cmp	r3, r2
 8007428:	d803      	bhi.n	8007432 <__any_on+0x36>
 800742a:	2000      	movs	r0, #0
 800742c:	bd10      	pop	{r4, pc}
 800742e:	4603      	mov	r3, r0
 8007430:	e7f7      	b.n	8007422 <__any_on+0x26>
 8007432:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007436:	2900      	cmp	r1, #0
 8007438:	d0f5      	beq.n	8007426 <__any_on+0x2a>
 800743a:	2001      	movs	r0, #1
 800743c:	e7f6      	b.n	800742c <__any_on+0x30>

0800743e <sulp>:
 800743e:	b570      	push	{r4, r5, r6, lr}
 8007440:	4604      	mov	r4, r0
 8007442:	460d      	mov	r5, r1
 8007444:	ec45 4b10 	vmov	d0, r4, r5
 8007448:	4616      	mov	r6, r2
 800744a:	f7ff feb7 	bl	80071bc <__ulp>
 800744e:	ec51 0b10 	vmov	r0, r1, d0
 8007452:	b17e      	cbz	r6, 8007474 <sulp+0x36>
 8007454:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007458:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800745c:	2b00      	cmp	r3, #0
 800745e:	dd09      	ble.n	8007474 <sulp+0x36>
 8007460:	051b      	lsls	r3, r3, #20
 8007462:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007466:	2400      	movs	r4, #0
 8007468:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800746c:	4622      	mov	r2, r4
 800746e:	462b      	mov	r3, r5
 8007470:	f7f9 f8ca 	bl	8000608 <__aeabi_dmul>
 8007474:	bd70      	pop	{r4, r5, r6, pc}
	...

08007478 <_strtod_l>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	ed2d 8b02 	vpush	{d8}
 8007480:	b09b      	sub	sp, #108	; 0x6c
 8007482:	4604      	mov	r4, r0
 8007484:	9213      	str	r2, [sp, #76]	; 0x4c
 8007486:	2200      	movs	r2, #0
 8007488:	9216      	str	r2, [sp, #88]	; 0x58
 800748a:	460d      	mov	r5, r1
 800748c:	f04f 0800 	mov.w	r8, #0
 8007490:	f04f 0900 	mov.w	r9, #0
 8007494:	460a      	mov	r2, r1
 8007496:	9215      	str	r2, [sp, #84]	; 0x54
 8007498:	7811      	ldrb	r1, [r2, #0]
 800749a:	292b      	cmp	r1, #43	; 0x2b
 800749c:	d04c      	beq.n	8007538 <_strtod_l+0xc0>
 800749e:	d83a      	bhi.n	8007516 <_strtod_l+0x9e>
 80074a0:	290d      	cmp	r1, #13
 80074a2:	d834      	bhi.n	800750e <_strtod_l+0x96>
 80074a4:	2908      	cmp	r1, #8
 80074a6:	d834      	bhi.n	8007512 <_strtod_l+0x9a>
 80074a8:	2900      	cmp	r1, #0
 80074aa:	d03d      	beq.n	8007528 <_strtod_l+0xb0>
 80074ac:	2200      	movs	r2, #0
 80074ae:	920a      	str	r2, [sp, #40]	; 0x28
 80074b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80074b2:	7832      	ldrb	r2, [r6, #0]
 80074b4:	2a30      	cmp	r2, #48	; 0x30
 80074b6:	f040 80b4 	bne.w	8007622 <_strtod_l+0x1aa>
 80074ba:	7872      	ldrb	r2, [r6, #1]
 80074bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80074c0:	2a58      	cmp	r2, #88	; 0x58
 80074c2:	d170      	bne.n	80075a6 <_strtod_l+0x12e>
 80074c4:	9302      	str	r3, [sp, #8]
 80074c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	ab16      	add	r3, sp, #88	; 0x58
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4a8e      	ldr	r2, [pc, #568]	; (8007708 <_strtod_l+0x290>)
 80074d0:	ab17      	add	r3, sp, #92	; 0x5c
 80074d2:	a915      	add	r1, sp, #84	; 0x54
 80074d4:	4620      	mov	r0, r4
 80074d6:	f001 f93f 	bl	8008758 <__gethex>
 80074da:	f010 070f 	ands.w	r7, r0, #15
 80074de:	4605      	mov	r5, r0
 80074e0:	d005      	beq.n	80074ee <_strtod_l+0x76>
 80074e2:	2f06      	cmp	r7, #6
 80074e4:	d12a      	bne.n	800753c <_strtod_l+0xc4>
 80074e6:	3601      	adds	r6, #1
 80074e8:	2300      	movs	r3, #0
 80074ea:	9615      	str	r6, [sp, #84]	; 0x54
 80074ec:	930a      	str	r3, [sp, #40]	; 0x28
 80074ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f040 857f 	bne.w	8007ff4 <_strtod_l+0xb7c>
 80074f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f8:	b1db      	cbz	r3, 8007532 <_strtod_l+0xba>
 80074fa:	4642      	mov	r2, r8
 80074fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007500:	ec43 2b10 	vmov	d0, r2, r3
 8007504:	b01b      	add	sp, #108	; 0x6c
 8007506:	ecbd 8b02 	vpop	{d8}
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	2920      	cmp	r1, #32
 8007510:	d1cc      	bne.n	80074ac <_strtod_l+0x34>
 8007512:	3201      	adds	r2, #1
 8007514:	e7bf      	b.n	8007496 <_strtod_l+0x1e>
 8007516:	292d      	cmp	r1, #45	; 0x2d
 8007518:	d1c8      	bne.n	80074ac <_strtod_l+0x34>
 800751a:	2101      	movs	r1, #1
 800751c:	910a      	str	r1, [sp, #40]	; 0x28
 800751e:	1c51      	adds	r1, r2, #1
 8007520:	9115      	str	r1, [sp, #84]	; 0x54
 8007522:	7852      	ldrb	r2, [r2, #1]
 8007524:	2a00      	cmp	r2, #0
 8007526:	d1c3      	bne.n	80074b0 <_strtod_l+0x38>
 8007528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800752a:	9515      	str	r5, [sp, #84]	; 0x54
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 855f 	bne.w	8007ff0 <_strtod_l+0xb78>
 8007532:	4642      	mov	r2, r8
 8007534:	464b      	mov	r3, r9
 8007536:	e7e3      	b.n	8007500 <_strtod_l+0x88>
 8007538:	2100      	movs	r1, #0
 800753a:	e7ef      	b.n	800751c <_strtod_l+0xa4>
 800753c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800753e:	b13a      	cbz	r2, 8007550 <_strtod_l+0xd8>
 8007540:	2135      	movs	r1, #53	; 0x35
 8007542:	a818      	add	r0, sp, #96	; 0x60
 8007544:	f7ff ff37 	bl	80073b6 <__copybits>
 8007548:	9916      	ldr	r1, [sp, #88]	; 0x58
 800754a:	4620      	mov	r0, r4
 800754c:	f7ff fb0a 	bl	8006b64 <_Bfree>
 8007550:	3f01      	subs	r7, #1
 8007552:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007554:	2f04      	cmp	r7, #4
 8007556:	d806      	bhi.n	8007566 <_strtod_l+0xee>
 8007558:	e8df f007 	tbb	[pc, r7]
 800755c:	201d0314 	.word	0x201d0314
 8007560:	14          	.byte	0x14
 8007561:	00          	.byte	0x00
 8007562:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007566:	05e9      	lsls	r1, r5, #23
 8007568:	bf48      	it	mi
 800756a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800756e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007572:	0d1b      	lsrs	r3, r3, #20
 8007574:	051b      	lsls	r3, r3, #20
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1b9      	bne.n	80074ee <_strtod_l+0x76>
 800757a:	f7fe fb05 	bl	8005b88 <__errno>
 800757e:	2322      	movs	r3, #34	; 0x22
 8007580:	6003      	str	r3, [r0, #0]
 8007582:	e7b4      	b.n	80074ee <_strtod_l+0x76>
 8007584:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007588:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800758c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007590:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007594:	e7e7      	b.n	8007566 <_strtod_l+0xee>
 8007596:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007710 <_strtod_l+0x298>
 800759a:	e7e4      	b.n	8007566 <_strtod_l+0xee>
 800759c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80075a0:	f04f 38ff 	mov.w	r8, #4294967295
 80075a4:	e7df      	b.n	8007566 <_strtod_l+0xee>
 80075a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	9215      	str	r2, [sp, #84]	; 0x54
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b30      	cmp	r3, #48	; 0x30
 80075b0:	d0f9      	beq.n	80075a6 <_strtod_l+0x12e>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d09b      	beq.n	80074ee <_strtod_l+0x76>
 80075b6:	2301      	movs	r3, #1
 80075b8:	f04f 0a00 	mov.w	sl, #0
 80075bc:	9304      	str	r3, [sp, #16]
 80075be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80075c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80075c6:	46d3      	mov	fp, sl
 80075c8:	220a      	movs	r2, #10
 80075ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 80075cc:	7806      	ldrb	r6, [r0, #0]
 80075ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80075d2:	b2d9      	uxtb	r1, r3
 80075d4:	2909      	cmp	r1, #9
 80075d6:	d926      	bls.n	8007626 <_strtod_l+0x1ae>
 80075d8:	494c      	ldr	r1, [pc, #304]	; (800770c <_strtod_l+0x294>)
 80075da:	2201      	movs	r2, #1
 80075dc:	f000 ffe6 	bl	80085ac <strncmp>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d030      	beq.n	8007646 <_strtod_l+0x1ce>
 80075e4:	2000      	movs	r0, #0
 80075e6:	4632      	mov	r2, r6
 80075e8:	9005      	str	r0, [sp, #20]
 80075ea:	465e      	mov	r6, fp
 80075ec:	4603      	mov	r3, r0
 80075ee:	2a65      	cmp	r2, #101	; 0x65
 80075f0:	d001      	beq.n	80075f6 <_strtod_l+0x17e>
 80075f2:	2a45      	cmp	r2, #69	; 0x45
 80075f4:	d113      	bne.n	800761e <_strtod_l+0x1a6>
 80075f6:	b91e      	cbnz	r6, 8007600 <_strtod_l+0x188>
 80075f8:	9a04      	ldr	r2, [sp, #16]
 80075fa:	4302      	orrs	r2, r0
 80075fc:	d094      	beq.n	8007528 <_strtod_l+0xb0>
 80075fe:	2600      	movs	r6, #0
 8007600:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007602:	1c6a      	adds	r2, r5, #1
 8007604:	9215      	str	r2, [sp, #84]	; 0x54
 8007606:	786a      	ldrb	r2, [r5, #1]
 8007608:	2a2b      	cmp	r2, #43	; 0x2b
 800760a:	d074      	beq.n	80076f6 <_strtod_l+0x27e>
 800760c:	2a2d      	cmp	r2, #45	; 0x2d
 800760e:	d078      	beq.n	8007702 <_strtod_l+0x28a>
 8007610:	f04f 0c00 	mov.w	ip, #0
 8007614:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007618:	2909      	cmp	r1, #9
 800761a:	d97f      	bls.n	800771c <_strtod_l+0x2a4>
 800761c:	9515      	str	r5, [sp, #84]	; 0x54
 800761e:	2700      	movs	r7, #0
 8007620:	e09e      	b.n	8007760 <_strtod_l+0x2e8>
 8007622:	2300      	movs	r3, #0
 8007624:	e7c8      	b.n	80075b8 <_strtod_l+0x140>
 8007626:	f1bb 0f08 	cmp.w	fp, #8
 800762a:	bfd8      	it	le
 800762c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800762e:	f100 0001 	add.w	r0, r0, #1
 8007632:	bfda      	itte	le
 8007634:	fb02 3301 	mlale	r3, r2, r1, r3
 8007638:	9309      	strle	r3, [sp, #36]	; 0x24
 800763a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800763e:	f10b 0b01 	add.w	fp, fp, #1
 8007642:	9015      	str	r0, [sp, #84]	; 0x54
 8007644:	e7c1      	b.n	80075ca <_strtod_l+0x152>
 8007646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	9215      	str	r2, [sp, #84]	; 0x54
 800764c:	785a      	ldrb	r2, [r3, #1]
 800764e:	f1bb 0f00 	cmp.w	fp, #0
 8007652:	d037      	beq.n	80076c4 <_strtod_l+0x24c>
 8007654:	9005      	str	r0, [sp, #20]
 8007656:	465e      	mov	r6, fp
 8007658:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800765c:	2b09      	cmp	r3, #9
 800765e:	d912      	bls.n	8007686 <_strtod_l+0x20e>
 8007660:	2301      	movs	r3, #1
 8007662:	e7c4      	b.n	80075ee <_strtod_l+0x176>
 8007664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	9215      	str	r2, [sp, #84]	; 0x54
 800766a:	785a      	ldrb	r2, [r3, #1]
 800766c:	3001      	adds	r0, #1
 800766e:	2a30      	cmp	r2, #48	; 0x30
 8007670:	d0f8      	beq.n	8007664 <_strtod_l+0x1ec>
 8007672:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007676:	2b08      	cmp	r3, #8
 8007678:	f200 84c1 	bhi.w	8007ffe <_strtod_l+0xb86>
 800767c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800767e:	9005      	str	r0, [sp, #20]
 8007680:	2000      	movs	r0, #0
 8007682:	930b      	str	r3, [sp, #44]	; 0x2c
 8007684:	4606      	mov	r6, r0
 8007686:	3a30      	subs	r2, #48	; 0x30
 8007688:	f100 0301 	add.w	r3, r0, #1
 800768c:	d014      	beq.n	80076b8 <_strtod_l+0x240>
 800768e:	9905      	ldr	r1, [sp, #20]
 8007690:	4419      	add	r1, r3
 8007692:	9105      	str	r1, [sp, #20]
 8007694:	4633      	mov	r3, r6
 8007696:	eb00 0c06 	add.w	ip, r0, r6
 800769a:	210a      	movs	r1, #10
 800769c:	4563      	cmp	r3, ip
 800769e:	d113      	bne.n	80076c8 <_strtod_l+0x250>
 80076a0:	1833      	adds	r3, r6, r0
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	f106 0601 	add.w	r6, r6, #1
 80076a8:	4406      	add	r6, r0
 80076aa:	dc1a      	bgt.n	80076e2 <_strtod_l+0x26a>
 80076ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ae:	230a      	movs	r3, #10
 80076b0:	fb03 2301 	mla	r3, r3, r1, r2
 80076b4:	9309      	str	r3, [sp, #36]	; 0x24
 80076b6:	2300      	movs	r3, #0
 80076b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076ba:	1c51      	adds	r1, r2, #1
 80076bc:	9115      	str	r1, [sp, #84]	; 0x54
 80076be:	7852      	ldrb	r2, [r2, #1]
 80076c0:	4618      	mov	r0, r3
 80076c2:	e7c9      	b.n	8007658 <_strtod_l+0x1e0>
 80076c4:	4658      	mov	r0, fp
 80076c6:	e7d2      	b.n	800766e <_strtod_l+0x1f6>
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	f103 0301 	add.w	r3, r3, #1
 80076ce:	dc03      	bgt.n	80076d8 <_strtod_l+0x260>
 80076d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80076d2:	434f      	muls	r7, r1
 80076d4:	9709      	str	r7, [sp, #36]	; 0x24
 80076d6:	e7e1      	b.n	800769c <_strtod_l+0x224>
 80076d8:	2b10      	cmp	r3, #16
 80076da:	bfd8      	it	le
 80076dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80076e0:	e7dc      	b.n	800769c <_strtod_l+0x224>
 80076e2:	2e10      	cmp	r6, #16
 80076e4:	bfdc      	itt	le
 80076e6:	230a      	movle	r3, #10
 80076e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80076ec:	e7e3      	b.n	80076b6 <_strtod_l+0x23e>
 80076ee:	2300      	movs	r3, #0
 80076f0:	9305      	str	r3, [sp, #20]
 80076f2:	2301      	movs	r3, #1
 80076f4:	e780      	b.n	80075f8 <_strtod_l+0x180>
 80076f6:	f04f 0c00 	mov.w	ip, #0
 80076fa:	1caa      	adds	r2, r5, #2
 80076fc:	9215      	str	r2, [sp, #84]	; 0x54
 80076fe:	78aa      	ldrb	r2, [r5, #2]
 8007700:	e788      	b.n	8007614 <_strtod_l+0x19c>
 8007702:	f04f 0c01 	mov.w	ip, #1
 8007706:	e7f8      	b.n	80076fa <_strtod_l+0x282>
 8007708:	080095b8 	.word	0x080095b8
 800770c:	080095b4 	.word	0x080095b4
 8007710:	7ff00000 	.word	0x7ff00000
 8007714:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007716:	1c51      	adds	r1, r2, #1
 8007718:	9115      	str	r1, [sp, #84]	; 0x54
 800771a:	7852      	ldrb	r2, [r2, #1]
 800771c:	2a30      	cmp	r2, #48	; 0x30
 800771e:	d0f9      	beq.n	8007714 <_strtod_l+0x29c>
 8007720:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007724:	2908      	cmp	r1, #8
 8007726:	f63f af7a 	bhi.w	800761e <_strtod_l+0x1a6>
 800772a:	3a30      	subs	r2, #48	; 0x30
 800772c:	9208      	str	r2, [sp, #32]
 800772e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007730:	920c      	str	r2, [sp, #48]	; 0x30
 8007732:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007734:	1c57      	adds	r7, r2, #1
 8007736:	9715      	str	r7, [sp, #84]	; 0x54
 8007738:	7852      	ldrb	r2, [r2, #1]
 800773a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800773e:	f1be 0f09 	cmp.w	lr, #9
 8007742:	d938      	bls.n	80077b6 <_strtod_l+0x33e>
 8007744:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007746:	1a7f      	subs	r7, r7, r1
 8007748:	2f08      	cmp	r7, #8
 800774a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800774e:	dc03      	bgt.n	8007758 <_strtod_l+0x2e0>
 8007750:	9908      	ldr	r1, [sp, #32]
 8007752:	428f      	cmp	r7, r1
 8007754:	bfa8      	it	ge
 8007756:	460f      	movge	r7, r1
 8007758:	f1bc 0f00 	cmp.w	ip, #0
 800775c:	d000      	beq.n	8007760 <_strtod_l+0x2e8>
 800775e:	427f      	negs	r7, r7
 8007760:	2e00      	cmp	r6, #0
 8007762:	d14f      	bne.n	8007804 <_strtod_l+0x38c>
 8007764:	9904      	ldr	r1, [sp, #16]
 8007766:	4301      	orrs	r1, r0
 8007768:	f47f aec1 	bne.w	80074ee <_strtod_l+0x76>
 800776c:	2b00      	cmp	r3, #0
 800776e:	f47f aedb 	bne.w	8007528 <_strtod_l+0xb0>
 8007772:	2a69      	cmp	r2, #105	; 0x69
 8007774:	d029      	beq.n	80077ca <_strtod_l+0x352>
 8007776:	dc26      	bgt.n	80077c6 <_strtod_l+0x34e>
 8007778:	2a49      	cmp	r2, #73	; 0x49
 800777a:	d026      	beq.n	80077ca <_strtod_l+0x352>
 800777c:	2a4e      	cmp	r2, #78	; 0x4e
 800777e:	f47f aed3 	bne.w	8007528 <_strtod_l+0xb0>
 8007782:	499b      	ldr	r1, [pc, #620]	; (80079f0 <_strtod_l+0x578>)
 8007784:	a815      	add	r0, sp, #84	; 0x54
 8007786:	f001 fa27 	bl	8008bd8 <__match>
 800778a:	2800      	cmp	r0, #0
 800778c:	f43f aecc 	beq.w	8007528 <_strtod_l+0xb0>
 8007790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b28      	cmp	r3, #40	; 0x28
 8007796:	d12f      	bne.n	80077f8 <_strtod_l+0x380>
 8007798:	4996      	ldr	r1, [pc, #600]	; (80079f4 <_strtod_l+0x57c>)
 800779a:	aa18      	add	r2, sp, #96	; 0x60
 800779c:	a815      	add	r0, sp, #84	; 0x54
 800779e:	f001 fa2f 	bl	8008c00 <__hexnan>
 80077a2:	2805      	cmp	r0, #5
 80077a4:	d128      	bne.n	80077f8 <_strtod_l+0x380>
 80077a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80077b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80077b4:	e69b      	b.n	80074ee <_strtod_l+0x76>
 80077b6:	9f08      	ldr	r7, [sp, #32]
 80077b8:	210a      	movs	r1, #10
 80077ba:	fb01 2107 	mla	r1, r1, r7, r2
 80077be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80077c2:	9208      	str	r2, [sp, #32]
 80077c4:	e7b5      	b.n	8007732 <_strtod_l+0x2ba>
 80077c6:	2a6e      	cmp	r2, #110	; 0x6e
 80077c8:	e7d9      	b.n	800777e <_strtod_l+0x306>
 80077ca:	498b      	ldr	r1, [pc, #556]	; (80079f8 <_strtod_l+0x580>)
 80077cc:	a815      	add	r0, sp, #84	; 0x54
 80077ce:	f001 fa03 	bl	8008bd8 <__match>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f43f aea8 	beq.w	8007528 <_strtod_l+0xb0>
 80077d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077da:	4988      	ldr	r1, [pc, #544]	; (80079fc <_strtod_l+0x584>)
 80077dc:	3b01      	subs	r3, #1
 80077de:	a815      	add	r0, sp, #84	; 0x54
 80077e0:	9315      	str	r3, [sp, #84]	; 0x54
 80077e2:	f001 f9f9 	bl	8008bd8 <__match>
 80077e6:	b910      	cbnz	r0, 80077ee <_strtod_l+0x376>
 80077e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ea:	3301      	adds	r3, #1
 80077ec:	9315      	str	r3, [sp, #84]	; 0x54
 80077ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007a0c <_strtod_l+0x594>
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	e67a      	b.n	80074ee <_strtod_l+0x76>
 80077f8:	4881      	ldr	r0, [pc, #516]	; (8007a00 <_strtod_l+0x588>)
 80077fa:	f000 ff09 	bl	8008610 <nan>
 80077fe:	ec59 8b10 	vmov	r8, r9, d0
 8007802:	e674      	b.n	80074ee <_strtod_l+0x76>
 8007804:	9b05      	ldr	r3, [sp, #20]
 8007806:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007808:	1afb      	subs	r3, r7, r3
 800780a:	f1bb 0f00 	cmp.w	fp, #0
 800780e:	bf08      	it	eq
 8007810:	46b3      	moveq	fp, r6
 8007812:	2e10      	cmp	r6, #16
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	4635      	mov	r5, r6
 8007818:	bfa8      	it	ge
 800781a:	2510      	movge	r5, #16
 800781c:	f7f8 fe7a 	bl	8000514 <__aeabi_ui2d>
 8007820:	2e09      	cmp	r6, #9
 8007822:	4680      	mov	r8, r0
 8007824:	4689      	mov	r9, r1
 8007826:	dd13      	ble.n	8007850 <_strtod_l+0x3d8>
 8007828:	4b76      	ldr	r3, [pc, #472]	; (8007a04 <_strtod_l+0x58c>)
 800782a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800782e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007832:	f7f8 fee9 	bl	8000608 <__aeabi_dmul>
 8007836:	4680      	mov	r8, r0
 8007838:	4650      	mov	r0, sl
 800783a:	4689      	mov	r9, r1
 800783c:	f7f8 fe6a 	bl	8000514 <__aeabi_ui2d>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4640      	mov	r0, r8
 8007846:	4649      	mov	r1, r9
 8007848:	f7f8 fd28 	bl	800029c <__adddf3>
 800784c:	4680      	mov	r8, r0
 800784e:	4689      	mov	r9, r1
 8007850:	2e0f      	cmp	r6, #15
 8007852:	dc38      	bgt.n	80078c6 <_strtod_l+0x44e>
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f43f ae49 	beq.w	80074ee <_strtod_l+0x76>
 800785c:	dd24      	ble.n	80078a8 <_strtod_l+0x430>
 800785e:	2b16      	cmp	r3, #22
 8007860:	dc0b      	bgt.n	800787a <_strtod_l+0x402>
 8007862:	4968      	ldr	r1, [pc, #416]	; (8007a04 <_strtod_l+0x58c>)
 8007864:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800786c:	4642      	mov	r2, r8
 800786e:	464b      	mov	r3, r9
 8007870:	f7f8 feca 	bl	8000608 <__aeabi_dmul>
 8007874:	4680      	mov	r8, r0
 8007876:	4689      	mov	r9, r1
 8007878:	e639      	b.n	80074ee <_strtod_l+0x76>
 800787a:	9a08      	ldr	r2, [sp, #32]
 800787c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007880:	4293      	cmp	r3, r2
 8007882:	db20      	blt.n	80078c6 <_strtod_l+0x44e>
 8007884:	4c5f      	ldr	r4, [pc, #380]	; (8007a04 <_strtod_l+0x58c>)
 8007886:	f1c6 060f 	rsb	r6, r6, #15
 800788a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800788e:	4642      	mov	r2, r8
 8007890:	464b      	mov	r3, r9
 8007892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007896:	f7f8 feb7 	bl	8000608 <__aeabi_dmul>
 800789a:	9b08      	ldr	r3, [sp, #32]
 800789c:	1b9e      	subs	r6, r3, r6
 800789e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80078a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078a6:	e7e3      	b.n	8007870 <_strtod_l+0x3f8>
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	3316      	adds	r3, #22
 80078ac:	db0b      	blt.n	80078c6 <_strtod_l+0x44e>
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	1bdf      	subs	r7, r3, r7
 80078b2:	4b54      	ldr	r3, [pc, #336]	; (8007a04 <_strtod_l+0x58c>)
 80078b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80078b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078bc:	4640      	mov	r0, r8
 80078be:	4649      	mov	r1, r9
 80078c0:	f7f8 ffcc 	bl	800085c <__aeabi_ddiv>
 80078c4:	e7d6      	b.n	8007874 <_strtod_l+0x3fc>
 80078c6:	9b08      	ldr	r3, [sp, #32]
 80078c8:	1b75      	subs	r5, r6, r5
 80078ca:	441d      	add	r5, r3
 80078cc:	2d00      	cmp	r5, #0
 80078ce:	dd70      	ble.n	80079b2 <_strtod_l+0x53a>
 80078d0:	f015 030f 	ands.w	r3, r5, #15
 80078d4:	d00a      	beq.n	80078ec <_strtod_l+0x474>
 80078d6:	494b      	ldr	r1, [pc, #300]	; (8007a04 <_strtod_l+0x58c>)
 80078d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078dc:	4642      	mov	r2, r8
 80078de:	464b      	mov	r3, r9
 80078e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078e4:	f7f8 fe90 	bl	8000608 <__aeabi_dmul>
 80078e8:	4680      	mov	r8, r0
 80078ea:	4689      	mov	r9, r1
 80078ec:	f035 050f 	bics.w	r5, r5, #15
 80078f0:	d04d      	beq.n	800798e <_strtod_l+0x516>
 80078f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80078f6:	dd22      	ble.n	800793e <_strtod_l+0x4c6>
 80078f8:	2500      	movs	r5, #0
 80078fa:	46ab      	mov	fp, r5
 80078fc:	9509      	str	r5, [sp, #36]	; 0x24
 80078fe:	9505      	str	r5, [sp, #20]
 8007900:	2322      	movs	r3, #34	; 0x22
 8007902:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007a0c <_strtod_l+0x594>
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	f04f 0800 	mov.w	r8, #0
 800790c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	f43f aded 	beq.w	80074ee <_strtod_l+0x76>
 8007914:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007916:	4620      	mov	r0, r4
 8007918:	f7ff f924 	bl	8006b64 <_Bfree>
 800791c:	9905      	ldr	r1, [sp, #20]
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff f920 	bl	8006b64 <_Bfree>
 8007924:	4659      	mov	r1, fp
 8007926:	4620      	mov	r0, r4
 8007928:	f7ff f91c 	bl	8006b64 <_Bfree>
 800792c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff f918 	bl	8006b64 <_Bfree>
 8007934:	4629      	mov	r1, r5
 8007936:	4620      	mov	r0, r4
 8007938:	f7ff f914 	bl	8006b64 <_Bfree>
 800793c:	e5d7      	b.n	80074ee <_strtod_l+0x76>
 800793e:	4b32      	ldr	r3, [pc, #200]	; (8007a08 <_strtod_l+0x590>)
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	2300      	movs	r3, #0
 8007944:	112d      	asrs	r5, r5, #4
 8007946:	4640      	mov	r0, r8
 8007948:	4649      	mov	r1, r9
 800794a:	469a      	mov	sl, r3
 800794c:	2d01      	cmp	r5, #1
 800794e:	dc21      	bgt.n	8007994 <_strtod_l+0x51c>
 8007950:	b10b      	cbz	r3, 8007956 <_strtod_l+0x4de>
 8007952:	4680      	mov	r8, r0
 8007954:	4689      	mov	r9, r1
 8007956:	492c      	ldr	r1, [pc, #176]	; (8007a08 <_strtod_l+0x590>)
 8007958:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800795c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007960:	4642      	mov	r2, r8
 8007962:	464b      	mov	r3, r9
 8007964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007968:	f7f8 fe4e 	bl	8000608 <__aeabi_dmul>
 800796c:	4b27      	ldr	r3, [pc, #156]	; (8007a0c <_strtod_l+0x594>)
 800796e:	460a      	mov	r2, r1
 8007970:	400b      	ands	r3, r1
 8007972:	4927      	ldr	r1, [pc, #156]	; (8007a10 <_strtod_l+0x598>)
 8007974:	428b      	cmp	r3, r1
 8007976:	4680      	mov	r8, r0
 8007978:	d8be      	bhi.n	80078f8 <_strtod_l+0x480>
 800797a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800797e:	428b      	cmp	r3, r1
 8007980:	bf86      	itte	hi
 8007982:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007a14 <_strtod_l+0x59c>
 8007986:	f04f 38ff 	movhi.w	r8, #4294967295
 800798a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800798e:	2300      	movs	r3, #0
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	e07b      	b.n	8007a8c <_strtod_l+0x614>
 8007994:	07ea      	lsls	r2, r5, #31
 8007996:	d505      	bpl.n	80079a4 <_strtod_l+0x52c>
 8007998:	9b04      	ldr	r3, [sp, #16]
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fe33 	bl	8000608 <__aeabi_dmul>
 80079a2:	2301      	movs	r3, #1
 80079a4:	9a04      	ldr	r2, [sp, #16]
 80079a6:	3208      	adds	r2, #8
 80079a8:	f10a 0a01 	add.w	sl, sl, #1
 80079ac:	106d      	asrs	r5, r5, #1
 80079ae:	9204      	str	r2, [sp, #16]
 80079b0:	e7cc      	b.n	800794c <_strtod_l+0x4d4>
 80079b2:	d0ec      	beq.n	800798e <_strtod_l+0x516>
 80079b4:	426d      	negs	r5, r5
 80079b6:	f015 020f 	ands.w	r2, r5, #15
 80079ba:	d00a      	beq.n	80079d2 <_strtod_l+0x55a>
 80079bc:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <_strtod_l+0x58c>)
 80079be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f7f8 ff47 	bl	800085c <__aeabi_ddiv>
 80079ce:	4680      	mov	r8, r0
 80079d0:	4689      	mov	r9, r1
 80079d2:	112d      	asrs	r5, r5, #4
 80079d4:	d0db      	beq.n	800798e <_strtod_l+0x516>
 80079d6:	2d1f      	cmp	r5, #31
 80079d8:	dd1e      	ble.n	8007a18 <_strtod_l+0x5a0>
 80079da:	2500      	movs	r5, #0
 80079dc:	46ab      	mov	fp, r5
 80079de:	9509      	str	r5, [sp, #36]	; 0x24
 80079e0:	9505      	str	r5, [sp, #20]
 80079e2:	2322      	movs	r3, #34	; 0x22
 80079e4:	f04f 0800 	mov.w	r8, #0
 80079e8:	f04f 0900 	mov.w	r9, #0
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	e78d      	b.n	800790c <_strtod_l+0x494>
 80079f0:	080093a1 	.word	0x080093a1
 80079f4:	080095cc 	.word	0x080095cc
 80079f8:	08009399 	.word	0x08009399
 80079fc:	080093d0 	.word	0x080093d0
 8007a00:	0800975d 	.word	0x0800975d
 8007a04:	080094e0 	.word	0x080094e0
 8007a08:	080094b8 	.word	0x080094b8
 8007a0c:	7ff00000 	.word	0x7ff00000
 8007a10:	7ca00000 	.word	0x7ca00000
 8007a14:	7fefffff 	.word	0x7fefffff
 8007a18:	f015 0310 	ands.w	r3, r5, #16
 8007a1c:	bf18      	it	ne
 8007a1e:	236a      	movne	r3, #106	; 0x6a
 8007a20:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007dc4 <_strtod_l+0x94c>
 8007a24:	9304      	str	r3, [sp, #16]
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	07ea      	lsls	r2, r5, #31
 8007a2e:	d504      	bpl.n	8007a3a <_strtod_l+0x5c2>
 8007a30:	e9da 2300 	ldrd	r2, r3, [sl]
 8007a34:	f7f8 fde8 	bl	8000608 <__aeabi_dmul>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	106d      	asrs	r5, r5, #1
 8007a3c:	f10a 0a08 	add.w	sl, sl, #8
 8007a40:	d1f4      	bne.n	8007a2c <_strtod_l+0x5b4>
 8007a42:	b10b      	cbz	r3, 8007a48 <_strtod_l+0x5d0>
 8007a44:	4680      	mov	r8, r0
 8007a46:	4689      	mov	r9, r1
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	b1bb      	cbz	r3, 8007a7c <_strtod_l+0x604>
 8007a4c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007a50:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	4649      	mov	r1, r9
 8007a58:	dd10      	ble.n	8007a7c <_strtod_l+0x604>
 8007a5a:	2b1f      	cmp	r3, #31
 8007a5c:	f340 811e 	ble.w	8007c9c <_strtod_l+0x824>
 8007a60:	2b34      	cmp	r3, #52	; 0x34
 8007a62:	bfde      	ittt	le
 8007a64:	f04f 33ff 	movle.w	r3, #4294967295
 8007a68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a6c:	4093      	lslle	r3, r2
 8007a6e:	f04f 0800 	mov.w	r8, #0
 8007a72:	bfcc      	ite	gt
 8007a74:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007a78:	ea03 0901 	andle.w	r9, r3, r1
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f9 f828 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d1a6      	bne.n	80079da <_strtod_l+0x562>
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a92:	4633      	mov	r3, r6
 8007a94:	465a      	mov	r2, fp
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7ff f8cc 	bl	8006c34 <__s2b>
 8007a9c:	9009      	str	r0, [sp, #36]	; 0x24
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f af2a 	beq.w	80078f8 <_strtod_l+0x480>
 8007aa4:	9a08      	ldr	r2, [sp, #32]
 8007aa6:	9b05      	ldr	r3, [sp, #20]
 8007aa8:	2a00      	cmp	r2, #0
 8007aaa:	eba3 0307 	sub.w	r3, r3, r7
 8007aae:	bfa8      	it	ge
 8007ab0:	2300      	movge	r3, #0
 8007ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ab4:	2500      	movs	r5, #0
 8007ab6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007aba:	9312      	str	r3, [sp, #72]	; 0x48
 8007abc:	46ab      	mov	fp, r5
 8007abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	6859      	ldr	r1, [r3, #4]
 8007ac4:	f7ff f80e 	bl	8006ae4 <_Balloc>
 8007ac8:	9005      	str	r0, [sp, #20]
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f43f af18 	beq.w	8007900 <_strtod_l+0x488>
 8007ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	3202      	adds	r2, #2
 8007ad6:	f103 010c 	add.w	r1, r3, #12
 8007ada:	0092      	lsls	r2, r2, #2
 8007adc:	300c      	adds	r0, #12
 8007ade:	f000 fd87 	bl	80085f0 <memcpy>
 8007ae2:	ec49 8b10 	vmov	d0, r8, r9
 8007ae6:	aa18      	add	r2, sp, #96	; 0x60
 8007ae8:	a917      	add	r1, sp, #92	; 0x5c
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7ff fbd6 	bl	800729c <__d2b>
 8007af0:	ec49 8b18 	vmov	d8, r8, r9
 8007af4:	9016      	str	r0, [sp, #88]	; 0x58
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f af02 	beq.w	8007900 <_strtod_l+0x488>
 8007afc:	2101      	movs	r1, #1
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7ff f930 	bl	8006d64 <__i2b>
 8007b04:	4683      	mov	fp, r0
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f43f aefa 	beq.w	8007900 <_strtod_l+0x488>
 8007b0c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007b0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b10:	2e00      	cmp	r6, #0
 8007b12:	bfab      	itete	ge
 8007b14:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007b16:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007b18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b1a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007b1e:	bfac      	ite	ge
 8007b20:	eb06 0a03 	addge.w	sl, r6, r3
 8007b24:	1b9f      	sublt	r7, r3, r6
 8007b26:	9b04      	ldr	r3, [sp, #16]
 8007b28:	1af6      	subs	r6, r6, r3
 8007b2a:	4416      	add	r6, r2
 8007b2c:	4ba0      	ldr	r3, [pc, #640]	; (8007db0 <_strtod_l+0x938>)
 8007b2e:	3e01      	subs	r6, #1
 8007b30:	429e      	cmp	r6, r3
 8007b32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b36:	f280 80c4 	bge.w	8007cc2 <_strtod_l+0x84a>
 8007b3a:	1b9b      	subs	r3, r3, r6
 8007b3c:	2b1f      	cmp	r3, #31
 8007b3e:	eba2 0203 	sub.w	r2, r2, r3
 8007b42:	f04f 0101 	mov.w	r1, #1
 8007b46:	f300 80b0 	bgt.w	8007caa <_strtod_l+0x832>
 8007b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8007b50:	2300      	movs	r3, #0
 8007b52:	930d      	str	r3, [sp, #52]	; 0x34
 8007b54:	eb0a 0602 	add.w	r6, sl, r2
 8007b58:	9b04      	ldr	r3, [sp, #16]
 8007b5a:	45b2      	cmp	sl, r6
 8007b5c:	4417      	add	r7, r2
 8007b5e:	441f      	add	r7, r3
 8007b60:	4653      	mov	r3, sl
 8007b62:	bfa8      	it	ge
 8007b64:	4633      	movge	r3, r6
 8007b66:	42bb      	cmp	r3, r7
 8007b68:	bfa8      	it	ge
 8007b6a:	463b      	movge	r3, r7
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bfc2      	ittt	gt
 8007b70:	1af6      	subgt	r6, r6, r3
 8007b72:	1aff      	subgt	r7, r7, r3
 8007b74:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dd17      	ble.n	8007bae <_strtod_l+0x736>
 8007b7e:	4659      	mov	r1, fp
 8007b80:	461a      	mov	r2, r3
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7ff f9ae 	bl	8006ee4 <__pow5mult>
 8007b88:	4683      	mov	fp, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	f43f aeb8 	beq.w	8007900 <_strtod_l+0x488>
 8007b90:	4601      	mov	r1, r0
 8007b92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7ff f8fb 	bl	8006d90 <__multiply>
 8007b9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f43f aeaf 	beq.w	8007900 <_strtod_l+0x488>
 8007ba2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f7fe ffdd 	bl	8006b64 <_Bfree>
 8007baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bac:	9316      	str	r3, [sp, #88]	; 0x58
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	f300 808c 	bgt.w	8007ccc <_strtod_l+0x854>
 8007bb4:	9b08      	ldr	r3, [sp, #32]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dd08      	ble.n	8007bcc <_strtod_l+0x754>
 8007bba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bbc:	9905      	ldr	r1, [sp, #20]
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff f990 	bl	8006ee4 <__pow5mult>
 8007bc4:	9005      	str	r0, [sp, #20]
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f43f ae9a 	beq.w	8007900 <_strtod_l+0x488>
 8007bcc:	2f00      	cmp	r7, #0
 8007bce:	dd08      	ble.n	8007be2 <_strtod_l+0x76a>
 8007bd0:	9905      	ldr	r1, [sp, #20]
 8007bd2:	463a      	mov	r2, r7
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f7ff f9df 	bl	8006f98 <__lshift>
 8007bda:	9005      	str	r0, [sp, #20]
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f43f ae8f 	beq.w	8007900 <_strtod_l+0x488>
 8007be2:	f1ba 0f00 	cmp.w	sl, #0
 8007be6:	dd08      	ble.n	8007bfa <_strtod_l+0x782>
 8007be8:	4659      	mov	r1, fp
 8007bea:	4652      	mov	r2, sl
 8007bec:	4620      	mov	r0, r4
 8007bee:	f7ff f9d3 	bl	8006f98 <__lshift>
 8007bf2:	4683      	mov	fp, r0
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f43f ae83 	beq.w	8007900 <_strtod_l+0x488>
 8007bfa:	9a05      	ldr	r2, [sp, #20]
 8007bfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7ff fa52 	bl	80070a8 <__mdiff>
 8007c04:	4605      	mov	r5, r0
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f43f ae7a 	beq.w	8007900 <_strtod_l+0x488>
 8007c0c:	68c3      	ldr	r3, [r0, #12]
 8007c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c10:	2300      	movs	r3, #0
 8007c12:	60c3      	str	r3, [r0, #12]
 8007c14:	4659      	mov	r1, fp
 8007c16:	f7ff fa2b 	bl	8007070 <__mcmp>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	da60      	bge.n	8007ce0 <_strtod_l+0x868>
 8007c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c20:	ea53 0308 	orrs.w	r3, r3, r8
 8007c24:	f040 8084 	bne.w	8007d30 <_strtod_l+0x8b8>
 8007c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d17f      	bne.n	8007d30 <_strtod_l+0x8b8>
 8007c30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c34:	0d1b      	lsrs	r3, r3, #20
 8007c36:	051b      	lsls	r3, r3, #20
 8007c38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c3c:	d978      	bls.n	8007d30 <_strtod_l+0x8b8>
 8007c3e:	696b      	ldr	r3, [r5, #20]
 8007c40:	b913      	cbnz	r3, 8007c48 <_strtod_l+0x7d0>
 8007c42:	692b      	ldr	r3, [r5, #16]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	dd73      	ble.n	8007d30 <_strtod_l+0x8b8>
 8007c48:	4629      	mov	r1, r5
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f7ff f9a3 	bl	8006f98 <__lshift>
 8007c52:	4659      	mov	r1, fp
 8007c54:	4605      	mov	r5, r0
 8007c56:	f7ff fa0b 	bl	8007070 <__mcmp>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	dd68      	ble.n	8007d30 <_strtod_l+0x8b8>
 8007c5e:	9904      	ldr	r1, [sp, #16]
 8007c60:	4a54      	ldr	r2, [pc, #336]	; (8007db4 <_strtod_l+0x93c>)
 8007c62:	464b      	mov	r3, r9
 8007c64:	2900      	cmp	r1, #0
 8007c66:	f000 8084 	beq.w	8007d72 <_strtod_l+0x8fa>
 8007c6a:	ea02 0109 	and.w	r1, r2, r9
 8007c6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c72:	dc7e      	bgt.n	8007d72 <_strtod_l+0x8fa>
 8007c74:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c78:	f77f aeb3 	ble.w	80079e2 <_strtod_l+0x56a>
 8007c7c:	4b4e      	ldr	r3, [pc, #312]	; (8007db8 <_strtod_l+0x940>)
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4649      	mov	r1, r9
 8007c82:	2200      	movs	r2, #0
 8007c84:	f7f8 fcc0 	bl	8000608 <__aeabi_dmul>
 8007c88:	4b4a      	ldr	r3, [pc, #296]	; (8007db4 <_strtod_l+0x93c>)
 8007c8a:	400b      	ands	r3, r1
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	4689      	mov	r9, r1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f47f ae3f 	bne.w	8007914 <_strtod_l+0x49c>
 8007c96:	2322      	movs	r3, #34	; 0x22
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	e63b      	b.n	8007914 <_strtod_l+0x49c>
 8007c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	ea03 0808 	and.w	r8, r3, r8
 8007ca8:	e6e8      	b.n	8007a7c <_strtod_l+0x604>
 8007caa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007cae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007cb2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007cb6:	36e2      	adds	r6, #226	; 0xe2
 8007cb8:	fa01 f306 	lsl.w	r3, r1, r6
 8007cbc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007cc0:	e748      	b.n	8007b54 <_strtod_l+0x6dc>
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007cca:	e743      	b.n	8007b54 <_strtod_l+0x6dc>
 8007ccc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007cce:	4632      	mov	r2, r6
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7ff f961 	bl	8006f98 <__lshift>
 8007cd6:	9016      	str	r0, [sp, #88]	; 0x58
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	f47f af6b 	bne.w	8007bb4 <_strtod_l+0x73c>
 8007cde:	e60f      	b.n	8007900 <_strtod_l+0x488>
 8007ce0:	46ca      	mov	sl, r9
 8007ce2:	d171      	bne.n	8007dc8 <_strtod_l+0x950>
 8007ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ce6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cea:	b352      	cbz	r2, 8007d42 <_strtod_l+0x8ca>
 8007cec:	4a33      	ldr	r2, [pc, #204]	; (8007dbc <_strtod_l+0x944>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d12a      	bne.n	8007d48 <_strtod_l+0x8d0>
 8007cf2:	9b04      	ldr	r3, [sp, #16]
 8007cf4:	4641      	mov	r1, r8
 8007cf6:	b1fb      	cbz	r3, 8007d38 <_strtod_l+0x8c0>
 8007cf8:	4b2e      	ldr	r3, [pc, #184]	; (8007db4 <_strtod_l+0x93c>)
 8007cfa:	ea09 0303 	and.w	r3, r9, r3
 8007cfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d02:	f04f 32ff 	mov.w	r2, #4294967295
 8007d06:	d81a      	bhi.n	8007d3e <_strtod_l+0x8c6>
 8007d08:	0d1b      	lsrs	r3, r3, #20
 8007d0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	4299      	cmp	r1, r3
 8007d14:	d118      	bne.n	8007d48 <_strtod_l+0x8d0>
 8007d16:	4b2a      	ldr	r3, [pc, #168]	; (8007dc0 <_strtod_l+0x948>)
 8007d18:	459a      	cmp	sl, r3
 8007d1a:	d102      	bne.n	8007d22 <_strtod_l+0x8aa>
 8007d1c:	3101      	adds	r1, #1
 8007d1e:	f43f adef 	beq.w	8007900 <_strtod_l+0x488>
 8007d22:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <_strtod_l+0x93c>)
 8007d24:	ea0a 0303 	and.w	r3, sl, r3
 8007d28:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007d2c:	f04f 0800 	mov.w	r8, #0
 8007d30:	9b04      	ldr	r3, [sp, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1a2      	bne.n	8007c7c <_strtod_l+0x804>
 8007d36:	e5ed      	b.n	8007914 <_strtod_l+0x49c>
 8007d38:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3c:	e7e9      	b.n	8007d12 <_strtod_l+0x89a>
 8007d3e:	4613      	mov	r3, r2
 8007d40:	e7e7      	b.n	8007d12 <_strtod_l+0x89a>
 8007d42:	ea53 0308 	orrs.w	r3, r3, r8
 8007d46:	d08a      	beq.n	8007c5e <_strtod_l+0x7e6>
 8007d48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d4a:	b1e3      	cbz	r3, 8007d86 <_strtod_l+0x90e>
 8007d4c:	ea13 0f0a 	tst.w	r3, sl
 8007d50:	d0ee      	beq.n	8007d30 <_strtod_l+0x8b8>
 8007d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d54:	9a04      	ldr	r2, [sp, #16]
 8007d56:	4640      	mov	r0, r8
 8007d58:	4649      	mov	r1, r9
 8007d5a:	b1c3      	cbz	r3, 8007d8e <_strtod_l+0x916>
 8007d5c:	f7ff fb6f 	bl	800743e <sulp>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	ec51 0b18 	vmov	r0, r1, d8
 8007d68:	f7f8 fa98 	bl	800029c <__adddf3>
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4689      	mov	r9, r1
 8007d70:	e7de      	b.n	8007d30 <_strtod_l+0x8b8>
 8007d72:	4013      	ands	r3, r2
 8007d74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007d7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007d80:	f04f 38ff 	mov.w	r8, #4294967295
 8007d84:	e7d4      	b.n	8007d30 <_strtod_l+0x8b8>
 8007d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d88:	ea13 0f08 	tst.w	r3, r8
 8007d8c:	e7e0      	b.n	8007d50 <_strtod_l+0x8d8>
 8007d8e:	f7ff fb56 	bl	800743e <sulp>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	ec51 0b18 	vmov	r0, r1, d8
 8007d9a:	f7f8 fa7d 	bl	8000298 <__aeabi_dsub>
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2300      	movs	r3, #0
 8007da2:	4680      	mov	r8, r0
 8007da4:	4689      	mov	r9, r1
 8007da6:	f7f8 fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d0c0      	beq.n	8007d30 <_strtod_l+0x8b8>
 8007dae:	e618      	b.n	80079e2 <_strtod_l+0x56a>
 8007db0:	fffffc02 	.word	0xfffffc02
 8007db4:	7ff00000 	.word	0x7ff00000
 8007db8:	39500000 	.word	0x39500000
 8007dbc:	000fffff 	.word	0x000fffff
 8007dc0:	7fefffff 	.word	0x7fefffff
 8007dc4:	080095e0 	.word	0x080095e0
 8007dc8:	4659      	mov	r1, fp
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f7ff fac0 	bl	8007350 <__ratio>
 8007dd0:	ec57 6b10 	vmov	r6, r7, d0
 8007dd4:	ee10 0a10 	vmov	r0, s0
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dde:	4639      	mov	r1, r7
 8007de0:	f7f8 fe8e 	bl	8000b00 <__aeabi_dcmple>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d071      	beq.n	8007ecc <_strtod_l+0xa54>
 8007de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d17c      	bne.n	8007ee8 <_strtod_l+0xa70>
 8007dee:	f1b8 0f00 	cmp.w	r8, #0
 8007df2:	d15a      	bne.n	8007eaa <_strtod_l+0xa32>
 8007df4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d15d      	bne.n	8007eb8 <_strtod_l+0xa40>
 8007dfc:	4b90      	ldr	r3, [pc, #576]	; (8008040 <_strtod_l+0xbc8>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	4630      	mov	r0, r6
 8007e02:	4639      	mov	r1, r7
 8007e04:	f7f8 fe72 	bl	8000aec <__aeabi_dcmplt>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d15c      	bne.n	8007ec6 <_strtod_l+0xa4e>
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	4639      	mov	r1, r7
 8007e10:	4b8c      	ldr	r3, [pc, #560]	; (8008044 <_strtod_l+0xbcc>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	f7f8 fbf8 	bl	8000608 <__aeabi_dmul>
 8007e18:	4606      	mov	r6, r0
 8007e1a:	460f      	mov	r7, r1
 8007e1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007e20:	9606      	str	r6, [sp, #24]
 8007e22:	9307      	str	r3, [sp, #28]
 8007e24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007e2c:	4b86      	ldr	r3, [pc, #536]	; (8008048 <_strtod_l+0xbd0>)
 8007e2e:	ea0a 0303 	and.w	r3, sl, r3
 8007e32:	930d      	str	r3, [sp, #52]	; 0x34
 8007e34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e36:	4b85      	ldr	r3, [pc, #532]	; (800804c <_strtod_l+0xbd4>)
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	f040 8090 	bne.w	8007f5e <_strtod_l+0xae6>
 8007e3e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007e42:	ec49 8b10 	vmov	d0, r8, r9
 8007e46:	f7ff f9b9 	bl	80071bc <__ulp>
 8007e4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e4e:	ec51 0b10 	vmov	r0, r1, d0
 8007e52:	f7f8 fbd9 	bl	8000608 <__aeabi_dmul>
 8007e56:	4642      	mov	r2, r8
 8007e58:	464b      	mov	r3, r9
 8007e5a:	f7f8 fa1f 	bl	800029c <__adddf3>
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4979      	ldr	r1, [pc, #484]	; (8008048 <_strtod_l+0xbd0>)
 8007e62:	4a7b      	ldr	r2, [pc, #492]	; (8008050 <_strtod_l+0xbd8>)
 8007e64:	4019      	ands	r1, r3
 8007e66:	4291      	cmp	r1, r2
 8007e68:	4680      	mov	r8, r0
 8007e6a:	d944      	bls.n	8007ef6 <_strtod_l+0xa7e>
 8007e6c:	ee18 2a90 	vmov	r2, s17
 8007e70:	4b78      	ldr	r3, [pc, #480]	; (8008054 <_strtod_l+0xbdc>)
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d104      	bne.n	8007e80 <_strtod_l+0xa08>
 8007e76:	ee18 3a10 	vmov	r3, s16
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f43f ad40 	beq.w	8007900 <_strtod_l+0x488>
 8007e80:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008054 <_strtod_l+0xbdc>
 8007e84:	f04f 38ff 	mov.w	r8, #4294967295
 8007e88:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7fe fe6a 	bl	8006b64 <_Bfree>
 8007e90:	9905      	ldr	r1, [sp, #20]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f7fe fe66 	bl	8006b64 <_Bfree>
 8007e98:	4659      	mov	r1, fp
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f7fe fe62 	bl	8006b64 <_Bfree>
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7fe fe5e 	bl	8006b64 <_Bfree>
 8007ea8:	e609      	b.n	8007abe <_strtod_l+0x646>
 8007eaa:	f1b8 0f01 	cmp.w	r8, #1
 8007eae:	d103      	bne.n	8007eb8 <_strtod_l+0xa40>
 8007eb0:	f1b9 0f00 	cmp.w	r9, #0
 8007eb4:	f43f ad95 	beq.w	80079e2 <_strtod_l+0x56a>
 8007eb8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008010 <_strtod_l+0xb98>
 8007ebc:	4f60      	ldr	r7, [pc, #384]	; (8008040 <_strtod_l+0xbc8>)
 8007ebe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	e7ae      	b.n	8007e24 <_strtod_l+0x9ac>
 8007ec6:	4f5f      	ldr	r7, [pc, #380]	; (8008044 <_strtod_l+0xbcc>)
 8007ec8:	2600      	movs	r6, #0
 8007eca:	e7a7      	b.n	8007e1c <_strtod_l+0x9a4>
 8007ecc:	4b5d      	ldr	r3, [pc, #372]	; (8008044 <_strtod_l+0xbcc>)
 8007ece:	4630      	mov	r0, r6
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f7f8 fb98 	bl	8000608 <__aeabi_dmul>
 8007ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eda:	4606      	mov	r6, r0
 8007edc:	460f      	mov	r7, r1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d09c      	beq.n	8007e1c <_strtod_l+0x9a4>
 8007ee2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007ee6:	e79d      	b.n	8007e24 <_strtod_l+0x9ac>
 8007ee8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008018 <_strtod_l+0xba0>
 8007eec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ef0:	ec57 6b17 	vmov	r6, r7, d7
 8007ef4:	e796      	b.n	8007e24 <_strtod_l+0x9ac>
 8007ef6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	46ca      	mov	sl, r9
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1c2      	bne.n	8007e88 <_strtod_l+0xa10>
 8007f02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f08:	0d1b      	lsrs	r3, r3, #20
 8007f0a:	051b      	lsls	r3, r3, #20
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d1bb      	bne.n	8007e88 <_strtod_l+0xa10>
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 fed8 	bl	8000cc8 <__aeabi_d2lz>
 8007f18:	f7f8 fb48 	bl	80005ac <__aeabi_l2d>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4630      	mov	r0, r6
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 f9b8 	bl	8000298 <__aeabi_dsub>
 8007f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f2e:	ea43 0308 	orr.w	r3, r3, r8
 8007f32:	4313      	orrs	r3, r2
 8007f34:	4606      	mov	r6, r0
 8007f36:	460f      	mov	r7, r1
 8007f38:	d054      	beq.n	8007fe4 <_strtod_l+0xb6c>
 8007f3a:	a339      	add	r3, pc, #228	; (adr r3, 8008020 <_strtod_l+0xba8>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f7f8 fdd4 	bl	8000aec <__aeabi_dcmplt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f47f ace5 	bne.w	8007914 <_strtod_l+0x49c>
 8007f4a:	a337      	add	r3, pc, #220	; (adr r3, 8008028 <_strtod_l+0xbb0>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 fde8 	bl	8000b28 <__aeabi_dcmpgt>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d095      	beq.n	8007e88 <_strtod_l+0xa10>
 8007f5c:	e4da      	b.n	8007914 <_strtod_l+0x49c>
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	b333      	cbz	r3, 8007fb0 <_strtod_l+0xb38>
 8007f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f68:	d822      	bhi.n	8007fb0 <_strtod_l+0xb38>
 8007f6a:	a331      	add	r3, pc, #196	; (adr r3, 8008030 <_strtod_l+0xbb8>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 fdc4 	bl	8000b00 <__aeabi_dcmple>
 8007f78:	b1a0      	cbz	r0, 8007fa4 <_strtod_l+0xb2c>
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f7f8 fe1b 	bl	8000bb8 <__aeabi_d2uiz>
 8007f82:	2801      	cmp	r0, #1
 8007f84:	bf38      	it	cc
 8007f86:	2001      	movcc	r0, #1
 8007f88:	f7f8 fac4 	bl	8000514 <__aeabi_ui2d>
 8007f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8e:	4606      	mov	r6, r0
 8007f90:	460f      	mov	r7, r1
 8007f92:	bb23      	cbnz	r3, 8007fde <_strtod_l+0xb66>
 8007f94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f98:	9010      	str	r0, [sp, #64]	; 0x40
 8007f9a:	9311      	str	r3, [sp, #68]	; 0x44
 8007f9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fa0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fa8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fb0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8007fb8:	eef0 0a68 	vmov.f32	s1, s17
 8007fbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007fc0:	f7ff f8fc 	bl	80071bc <__ulp>
 8007fc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007fc8:	ec53 2b10 	vmov	r2, r3, d0
 8007fcc:	f7f8 fb1c 	bl	8000608 <__aeabi_dmul>
 8007fd0:	ec53 2b18 	vmov	r2, r3, d8
 8007fd4:	f7f8 f962 	bl	800029c <__adddf3>
 8007fd8:	4680      	mov	r8, r0
 8007fda:	4689      	mov	r9, r1
 8007fdc:	e78d      	b.n	8007efa <_strtod_l+0xa82>
 8007fde:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007fe2:	e7db      	b.n	8007f9c <_strtod_l+0xb24>
 8007fe4:	a314      	add	r3, pc, #80	; (adr r3, 8008038 <_strtod_l+0xbc0>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 fd7f 	bl	8000aec <__aeabi_dcmplt>
 8007fee:	e7b3      	b.n	8007f58 <_strtod_l+0xae0>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	f7ff ba7c 	b.w	80074f6 <_strtod_l+0x7e>
 8007ffe:	2a65      	cmp	r2, #101	; 0x65
 8008000:	f43f ab75 	beq.w	80076ee <_strtod_l+0x276>
 8008004:	2a45      	cmp	r2, #69	; 0x45
 8008006:	f43f ab72 	beq.w	80076ee <_strtod_l+0x276>
 800800a:	2301      	movs	r3, #1
 800800c:	f7ff bbaa 	b.w	8007764 <_strtod_l+0x2ec>
 8008010:	00000000 	.word	0x00000000
 8008014:	bff00000 	.word	0xbff00000
 8008018:	00000000 	.word	0x00000000
 800801c:	3ff00000 	.word	0x3ff00000
 8008020:	94a03595 	.word	0x94a03595
 8008024:	3fdfffff 	.word	0x3fdfffff
 8008028:	35afe535 	.word	0x35afe535
 800802c:	3fe00000 	.word	0x3fe00000
 8008030:	ffc00000 	.word	0xffc00000
 8008034:	41dfffff 	.word	0x41dfffff
 8008038:	94a03595 	.word	0x94a03595
 800803c:	3fcfffff 	.word	0x3fcfffff
 8008040:	3ff00000 	.word	0x3ff00000
 8008044:	3fe00000 	.word	0x3fe00000
 8008048:	7ff00000 	.word	0x7ff00000
 800804c:	7fe00000 	.word	0x7fe00000
 8008050:	7c9fffff 	.word	0x7c9fffff
 8008054:	7fefffff 	.word	0x7fefffff

08008058 <_strtod_r>:
 8008058:	4b01      	ldr	r3, [pc, #4]	; (8008060 <_strtod_r+0x8>)
 800805a:	f7ff ba0d 	b.w	8007478 <_strtod_l>
 800805e:	bf00      	nop
 8008060:	20000068 	.word	0x20000068

08008064 <_strtol_l.constprop.0>:
 8008064:	2b01      	cmp	r3, #1
 8008066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806a:	d001      	beq.n	8008070 <_strtol_l.constprop.0+0xc>
 800806c:	2b24      	cmp	r3, #36	; 0x24
 800806e:	d906      	bls.n	800807e <_strtol_l.constprop.0+0x1a>
 8008070:	f7fd fd8a 	bl	8005b88 <__errno>
 8008074:	2316      	movs	r3, #22
 8008076:	6003      	str	r3, [r0, #0]
 8008078:	2000      	movs	r0, #0
 800807a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008164 <_strtol_l.constprop.0+0x100>
 8008082:	460d      	mov	r5, r1
 8008084:	462e      	mov	r6, r5
 8008086:	f815 4b01 	ldrb.w	r4, [r5], #1
 800808a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800808e:	f017 0708 	ands.w	r7, r7, #8
 8008092:	d1f7      	bne.n	8008084 <_strtol_l.constprop.0+0x20>
 8008094:	2c2d      	cmp	r4, #45	; 0x2d
 8008096:	d132      	bne.n	80080fe <_strtol_l.constprop.0+0x9a>
 8008098:	782c      	ldrb	r4, [r5, #0]
 800809a:	2701      	movs	r7, #1
 800809c:	1cb5      	adds	r5, r6, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d05b      	beq.n	800815a <_strtol_l.constprop.0+0xf6>
 80080a2:	2b10      	cmp	r3, #16
 80080a4:	d109      	bne.n	80080ba <_strtol_l.constprop.0+0x56>
 80080a6:	2c30      	cmp	r4, #48	; 0x30
 80080a8:	d107      	bne.n	80080ba <_strtol_l.constprop.0+0x56>
 80080aa:	782c      	ldrb	r4, [r5, #0]
 80080ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80080b0:	2c58      	cmp	r4, #88	; 0x58
 80080b2:	d14d      	bne.n	8008150 <_strtol_l.constprop.0+0xec>
 80080b4:	786c      	ldrb	r4, [r5, #1]
 80080b6:	2310      	movs	r3, #16
 80080b8:	3502      	adds	r5, #2
 80080ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80080be:	f108 38ff 	add.w	r8, r8, #4294967295
 80080c2:	f04f 0e00 	mov.w	lr, #0
 80080c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80080ca:	4676      	mov	r6, lr
 80080cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80080d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80080d4:	f1bc 0f09 	cmp.w	ip, #9
 80080d8:	d816      	bhi.n	8008108 <_strtol_l.constprop.0+0xa4>
 80080da:	4664      	mov	r4, ip
 80080dc:	42a3      	cmp	r3, r4
 80080de:	dd24      	ble.n	800812a <_strtol_l.constprop.0+0xc6>
 80080e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80080e4:	d008      	beq.n	80080f8 <_strtol_l.constprop.0+0x94>
 80080e6:	45b1      	cmp	r9, r6
 80080e8:	d31c      	bcc.n	8008124 <_strtol_l.constprop.0+0xc0>
 80080ea:	d101      	bne.n	80080f0 <_strtol_l.constprop.0+0x8c>
 80080ec:	45a2      	cmp	sl, r4
 80080ee:	db19      	blt.n	8008124 <_strtol_l.constprop.0+0xc0>
 80080f0:	fb06 4603 	mla	r6, r6, r3, r4
 80080f4:	f04f 0e01 	mov.w	lr, #1
 80080f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080fc:	e7e8      	b.n	80080d0 <_strtol_l.constprop.0+0x6c>
 80080fe:	2c2b      	cmp	r4, #43	; 0x2b
 8008100:	bf04      	itt	eq
 8008102:	782c      	ldrbeq	r4, [r5, #0]
 8008104:	1cb5      	addeq	r5, r6, #2
 8008106:	e7ca      	b.n	800809e <_strtol_l.constprop.0+0x3a>
 8008108:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800810c:	f1bc 0f19 	cmp.w	ip, #25
 8008110:	d801      	bhi.n	8008116 <_strtol_l.constprop.0+0xb2>
 8008112:	3c37      	subs	r4, #55	; 0x37
 8008114:	e7e2      	b.n	80080dc <_strtol_l.constprop.0+0x78>
 8008116:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800811a:	f1bc 0f19 	cmp.w	ip, #25
 800811e:	d804      	bhi.n	800812a <_strtol_l.constprop.0+0xc6>
 8008120:	3c57      	subs	r4, #87	; 0x57
 8008122:	e7db      	b.n	80080dc <_strtol_l.constprop.0+0x78>
 8008124:	f04f 3eff 	mov.w	lr, #4294967295
 8008128:	e7e6      	b.n	80080f8 <_strtol_l.constprop.0+0x94>
 800812a:	f1be 3fff 	cmp.w	lr, #4294967295
 800812e:	d105      	bne.n	800813c <_strtol_l.constprop.0+0xd8>
 8008130:	2322      	movs	r3, #34	; 0x22
 8008132:	6003      	str	r3, [r0, #0]
 8008134:	4646      	mov	r6, r8
 8008136:	b942      	cbnz	r2, 800814a <_strtol_l.constprop.0+0xe6>
 8008138:	4630      	mov	r0, r6
 800813a:	e79e      	b.n	800807a <_strtol_l.constprop.0+0x16>
 800813c:	b107      	cbz	r7, 8008140 <_strtol_l.constprop.0+0xdc>
 800813e:	4276      	negs	r6, r6
 8008140:	2a00      	cmp	r2, #0
 8008142:	d0f9      	beq.n	8008138 <_strtol_l.constprop.0+0xd4>
 8008144:	f1be 0f00 	cmp.w	lr, #0
 8008148:	d000      	beq.n	800814c <_strtol_l.constprop.0+0xe8>
 800814a:	1e69      	subs	r1, r5, #1
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	e7f3      	b.n	8008138 <_strtol_l.constprop.0+0xd4>
 8008150:	2430      	movs	r4, #48	; 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1b1      	bne.n	80080ba <_strtol_l.constprop.0+0x56>
 8008156:	2308      	movs	r3, #8
 8008158:	e7af      	b.n	80080ba <_strtol_l.constprop.0+0x56>
 800815a:	2c30      	cmp	r4, #48	; 0x30
 800815c:	d0a5      	beq.n	80080aa <_strtol_l.constprop.0+0x46>
 800815e:	230a      	movs	r3, #10
 8008160:	e7ab      	b.n	80080ba <_strtol_l.constprop.0+0x56>
 8008162:	bf00      	nop
 8008164:	08009609 	.word	0x08009609

08008168 <_strtol_r>:
 8008168:	f7ff bf7c 	b.w	8008064 <_strtol_l.constprop.0>

0800816c <__ssputs_r>:
 800816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	688e      	ldr	r6, [r1, #8]
 8008172:	461f      	mov	r7, r3
 8008174:	42be      	cmp	r6, r7
 8008176:	680b      	ldr	r3, [r1, #0]
 8008178:	4682      	mov	sl, r0
 800817a:	460c      	mov	r4, r1
 800817c:	4690      	mov	r8, r2
 800817e:	d82c      	bhi.n	80081da <__ssputs_r+0x6e>
 8008180:	898a      	ldrh	r2, [r1, #12]
 8008182:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008186:	d026      	beq.n	80081d6 <__ssputs_r+0x6a>
 8008188:	6965      	ldr	r5, [r4, #20]
 800818a:	6909      	ldr	r1, [r1, #16]
 800818c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008190:	eba3 0901 	sub.w	r9, r3, r1
 8008194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008198:	1c7b      	adds	r3, r7, #1
 800819a:	444b      	add	r3, r9
 800819c:	106d      	asrs	r5, r5, #1
 800819e:	429d      	cmp	r5, r3
 80081a0:	bf38      	it	cc
 80081a2:	461d      	movcc	r5, r3
 80081a4:	0553      	lsls	r3, r2, #21
 80081a6:	d527      	bpl.n	80081f8 <__ssputs_r+0x8c>
 80081a8:	4629      	mov	r1, r5
 80081aa:	f7fe fc0f 	bl	80069cc <_malloc_r>
 80081ae:	4606      	mov	r6, r0
 80081b0:	b360      	cbz	r0, 800820c <__ssputs_r+0xa0>
 80081b2:	6921      	ldr	r1, [r4, #16]
 80081b4:	464a      	mov	r2, r9
 80081b6:	f000 fa1b 	bl	80085f0 <memcpy>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	6126      	str	r6, [r4, #16]
 80081c8:	6165      	str	r5, [r4, #20]
 80081ca:	444e      	add	r6, r9
 80081cc:	eba5 0509 	sub.w	r5, r5, r9
 80081d0:	6026      	str	r6, [r4, #0]
 80081d2:	60a5      	str	r5, [r4, #8]
 80081d4:	463e      	mov	r6, r7
 80081d6:	42be      	cmp	r6, r7
 80081d8:	d900      	bls.n	80081dc <__ssputs_r+0x70>
 80081da:	463e      	mov	r6, r7
 80081dc:	6820      	ldr	r0, [r4, #0]
 80081de:	4632      	mov	r2, r6
 80081e0:	4641      	mov	r1, r8
 80081e2:	f000 f9c9 	bl	8008578 <memmove>
 80081e6:	68a3      	ldr	r3, [r4, #8]
 80081e8:	1b9b      	subs	r3, r3, r6
 80081ea:	60a3      	str	r3, [r4, #8]
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	4433      	add	r3, r6
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	2000      	movs	r0, #0
 80081f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f8:	462a      	mov	r2, r5
 80081fa:	f000 fdae 	bl	8008d5a <_realloc_r>
 80081fe:	4606      	mov	r6, r0
 8008200:	2800      	cmp	r0, #0
 8008202:	d1e0      	bne.n	80081c6 <__ssputs_r+0x5a>
 8008204:	6921      	ldr	r1, [r4, #16]
 8008206:	4650      	mov	r0, sl
 8008208:	f7fe fb6c 	bl	80068e4 <_free_r>
 800820c:	230c      	movs	r3, #12
 800820e:	f8ca 3000 	str.w	r3, [sl]
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	f04f 30ff 	mov.w	r0, #4294967295
 800821e:	e7e9      	b.n	80081f4 <__ssputs_r+0x88>

08008220 <_svfiprintf_r>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	4698      	mov	r8, r3
 8008226:	898b      	ldrh	r3, [r1, #12]
 8008228:	061b      	lsls	r3, r3, #24
 800822a:	b09d      	sub	sp, #116	; 0x74
 800822c:	4607      	mov	r7, r0
 800822e:	460d      	mov	r5, r1
 8008230:	4614      	mov	r4, r2
 8008232:	d50e      	bpl.n	8008252 <_svfiprintf_r+0x32>
 8008234:	690b      	ldr	r3, [r1, #16]
 8008236:	b963      	cbnz	r3, 8008252 <_svfiprintf_r+0x32>
 8008238:	2140      	movs	r1, #64	; 0x40
 800823a:	f7fe fbc7 	bl	80069cc <_malloc_r>
 800823e:	6028      	str	r0, [r5, #0]
 8008240:	6128      	str	r0, [r5, #16]
 8008242:	b920      	cbnz	r0, 800824e <_svfiprintf_r+0x2e>
 8008244:	230c      	movs	r3, #12
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e0d0      	b.n	80083f0 <_svfiprintf_r+0x1d0>
 800824e:	2340      	movs	r3, #64	; 0x40
 8008250:	616b      	str	r3, [r5, #20]
 8008252:	2300      	movs	r3, #0
 8008254:	9309      	str	r3, [sp, #36]	; 0x24
 8008256:	2320      	movs	r3, #32
 8008258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800825c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008260:	2330      	movs	r3, #48	; 0x30
 8008262:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008408 <_svfiprintf_r+0x1e8>
 8008266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800826a:	f04f 0901 	mov.w	r9, #1
 800826e:	4623      	mov	r3, r4
 8008270:	469a      	mov	sl, r3
 8008272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008276:	b10a      	cbz	r2, 800827c <_svfiprintf_r+0x5c>
 8008278:	2a25      	cmp	r2, #37	; 0x25
 800827a:	d1f9      	bne.n	8008270 <_svfiprintf_r+0x50>
 800827c:	ebba 0b04 	subs.w	fp, sl, r4
 8008280:	d00b      	beq.n	800829a <_svfiprintf_r+0x7a>
 8008282:	465b      	mov	r3, fp
 8008284:	4622      	mov	r2, r4
 8008286:	4629      	mov	r1, r5
 8008288:	4638      	mov	r0, r7
 800828a:	f7ff ff6f 	bl	800816c <__ssputs_r>
 800828e:	3001      	adds	r0, #1
 8008290:	f000 80a9 	beq.w	80083e6 <_svfiprintf_r+0x1c6>
 8008294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008296:	445a      	add	r2, fp
 8008298:	9209      	str	r2, [sp, #36]	; 0x24
 800829a:	f89a 3000 	ldrb.w	r3, [sl]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 80a1 	beq.w	80083e6 <_svfiprintf_r+0x1c6>
 80082a4:	2300      	movs	r3, #0
 80082a6:	f04f 32ff 	mov.w	r2, #4294967295
 80082aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ae:	f10a 0a01 	add.w	sl, sl, #1
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	9307      	str	r3, [sp, #28]
 80082b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082ba:	931a      	str	r3, [sp, #104]	; 0x68
 80082bc:	4654      	mov	r4, sl
 80082be:	2205      	movs	r2, #5
 80082c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c4:	4850      	ldr	r0, [pc, #320]	; (8008408 <_svfiprintf_r+0x1e8>)
 80082c6:	f7f7 ff8b 	bl	80001e0 <memchr>
 80082ca:	9a04      	ldr	r2, [sp, #16]
 80082cc:	b9d8      	cbnz	r0, 8008306 <_svfiprintf_r+0xe6>
 80082ce:	06d0      	lsls	r0, r2, #27
 80082d0:	bf44      	itt	mi
 80082d2:	2320      	movmi	r3, #32
 80082d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082d8:	0711      	lsls	r1, r2, #28
 80082da:	bf44      	itt	mi
 80082dc:	232b      	movmi	r3, #43	; 0x2b
 80082de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e2:	f89a 3000 	ldrb.w	r3, [sl]
 80082e6:	2b2a      	cmp	r3, #42	; 0x2a
 80082e8:	d015      	beq.n	8008316 <_svfiprintf_r+0xf6>
 80082ea:	9a07      	ldr	r2, [sp, #28]
 80082ec:	4654      	mov	r4, sl
 80082ee:	2000      	movs	r0, #0
 80082f0:	f04f 0c0a 	mov.w	ip, #10
 80082f4:	4621      	mov	r1, r4
 80082f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082fa:	3b30      	subs	r3, #48	; 0x30
 80082fc:	2b09      	cmp	r3, #9
 80082fe:	d94d      	bls.n	800839c <_svfiprintf_r+0x17c>
 8008300:	b1b0      	cbz	r0, 8008330 <_svfiprintf_r+0x110>
 8008302:	9207      	str	r2, [sp, #28]
 8008304:	e014      	b.n	8008330 <_svfiprintf_r+0x110>
 8008306:	eba0 0308 	sub.w	r3, r0, r8
 800830a:	fa09 f303 	lsl.w	r3, r9, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	46a2      	mov	sl, r4
 8008314:	e7d2      	b.n	80082bc <_svfiprintf_r+0x9c>
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	1d19      	adds	r1, r3, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	9103      	str	r1, [sp, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	bfbb      	ittet	lt
 8008322:	425b      	neglt	r3, r3
 8008324:	f042 0202 	orrlt.w	r2, r2, #2
 8008328:	9307      	strge	r3, [sp, #28]
 800832a:	9307      	strlt	r3, [sp, #28]
 800832c:	bfb8      	it	lt
 800832e:	9204      	strlt	r2, [sp, #16]
 8008330:	7823      	ldrb	r3, [r4, #0]
 8008332:	2b2e      	cmp	r3, #46	; 0x2e
 8008334:	d10c      	bne.n	8008350 <_svfiprintf_r+0x130>
 8008336:	7863      	ldrb	r3, [r4, #1]
 8008338:	2b2a      	cmp	r3, #42	; 0x2a
 800833a:	d134      	bne.n	80083a6 <_svfiprintf_r+0x186>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	1d1a      	adds	r2, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	9203      	str	r2, [sp, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfb8      	it	lt
 8008348:	f04f 33ff 	movlt.w	r3, #4294967295
 800834c:	3402      	adds	r4, #2
 800834e:	9305      	str	r3, [sp, #20]
 8008350:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008418 <_svfiprintf_r+0x1f8>
 8008354:	7821      	ldrb	r1, [r4, #0]
 8008356:	2203      	movs	r2, #3
 8008358:	4650      	mov	r0, sl
 800835a:	f7f7 ff41 	bl	80001e0 <memchr>
 800835e:	b138      	cbz	r0, 8008370 <_svfiprintf_r+0x150>
 8008360:	9b04      	ldr	r3, [sp, #16]
 8008362:	eba0 000a 	sub.w	r0, r0, sl
 8008366:	2240      	movs	r2, #64	; 0x40
 8008368:	4082      	lsls	r2, r0
 800836a:	4313      	orrs	r3, r2
 800836c:	3401      	adds	r4, #1
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008374:	4825      	ldr	r0, [pc, #148]	; (800840c <_svfiprintf_r+0x1ec>)
 8008376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800837a:	2206      	movs	r2, #6
 800837c:	f7f7 ff30 	bl	80001e0 <memchr>
 8008380:	2800      	cmp	r0, #0
 8008382:	d038      	beq.n	80083f6 <_svfiprintf_r+0x1d6>
 8008384:	4b22      	ldr	r3, [pc, #136]	; (8008410 <_svfiprintf_r+0x1f0>)
 8008386:	bb1b      	cbnz	r3, 80083d0 <_svfiprintf_r+0x1b0>
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	3307      	adds	r3, #7
 800838c:	f023 0307 	bic.w	r3, r3, #7
 8008390:	3308      	adds	r3, #8
 8008392:	9303      	str	r3, [sp, #12]
 8008394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008396:	4433      	add	r3, r6
 8008398:	9309      	str	r3, [sp, #36]	; 0x24
 800839a:	e768      	b.n	800826e <_svfiprintf_r+0x4e>
 800839c:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a0:	460c      	mov	r4, r1
 80083a2:	2001      	movs	r0, #1
 80083a4:	e7a6      	b.n	80082f4 <_svfiprintf_r+0xd4>
 80083a6:	2300      	movs	r3, #0
 80083a8:	3401      	adds	r4, #1
 80083aa:	9305      	str	r3, [sp, #20]
 80083ac:	4619      	mov	r1, r3
 80083ae:	f04f 0c0a 	mov.w	ip, #10
 80083b2:	4620      	mov	r0, r4
 80083b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083b8:	3a30      	subs	r2, #48	; 0x30
 80083ba:	2a09      	cmp	r2, #9
 80083bc:	d903      	bls.n	80083c6 <_svfiprintf_r+0x1a6>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0c6      	beq.n	8008350 <_svfiprintf_r+0x130>
 80083c2:	9105      	str	r1, [sp, #20]
 80083c4:	e7c4      	b.n	8008350 <_svfiprintf_r+0x130>
 80083c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ca:	4604      	mov	r4, r0
 80083cc:	2301      	movs	r3, #1
 80083ce:	e7f0      	b.n	80083b2 <_svfiprintf_r+0x192>
 80083d0:	ab03      	add	r3, sp, #12
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	462a      	mov	r2, r5
 80083d6:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <_svfiprintf_r+0x1f4>)
 80083d8:	a904      	add	r1, sp, #16
 80083da:	4638      	mov	r0, r7
 80083dc:	f7fc fc98 	bl	8004d10 <_printf_float>
 80083e0:	1c42      	adds	r2, r0, #1
 80083e2:	4606      	mov	r6, r0
 80083e4:	d1d6      	bne.n	8008394 <_svfiprintf_r+0x174>
 80083e6:	89ab      	ldrh	r3, [r5, #12]
 80083e8:	065b      	lsls	r3, r3, #25
 80083ea:	f53f af2d 	bmi.w	8008248 <_svfiprintf_r+0x28>
 80083ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083f0:	b01d      	add	sp, #116	; 0x74
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <_svfiprintf_r+0x1f4>)
 80083fe:	a904      	add	r1, sp, #16
 8008400:	4638      	mov	r0, r7
 8008402:	f7fc ff29 	bl	8005258 <_printf_i>
 8008406:	e7eb      	b.n	80083e0 <_svfiprintf_r+0x1c0>
 8008408:	08009709 	.word	0x08009709
 800840c:	08009713 	.word	0x08009713
 8008410:	08004d11 	.word	0x08004d11
 8008414:	0800816d 	.word	0x0800816d
 8008418:	0800970f 	.word	0x0800970f

0800841c <__sflush_r>:
 800841c:	898a      	ldrh	r2, [r1, #12]
 800841e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008422:	4605      	mov	r5, r0
 8008424:	0710      	lsls	r0, r2, #28
 8008426:	460c      	mov	r4, r1
 8008428:	d458      	bmi.n	80084dc <__sflush_r+0xc0>
 800842a:	684b      	ldr	r3, [r1, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	dc05      	bgt.n	800843c <__sflush_r+0x20>
 8008430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	dc02      	bgt.n	800843c <__sflush_r+0x20>
 8008436:	2000      	movs	r0, #0
 8008438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800843c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800843e:	2e00      	cmp	r6, #0
 8008440:	d0f9      	beq.n	8008436 <__sflush_r+0x1a>
 8008442:	2300      	movs	r3, #0
 8008444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008448:	682f      	ldr	r7, [r5, #0]
 800844a:	6a21      	ldr	r1, [r4, #32]
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	d032      	beq.n	80084b6 <__sflush_r+0x9a>
 8008450:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	075a      	lsls	r2, r3, #29
 8008456:	d505      	bpl.n	8008464 <__sflush_r+0x48>
 8008458:	6863      	ldr	r3, [r4, #4]
 800845a:	1ac0      	subs	r0, r0, r3
 800845c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800845e:	b10b      	cbz	r3, 8008464 <__sflush_r+0x48>
 8008460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008462:	1ac0      	subs	r0, r0, r3
 8008464:	2300      	movs	r3, #0
 8008466:	4602      	mov	r2, r0
 8008468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800846a:	6a21      	ldr	r1, [r4, #32]
 800846c:	4628      	mov	r0, r5
 800846e:	47b0      	blx	r6
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	d106      	bne.n	8008484 <__sflush_r+0x68>
 8008476:	6829      	ldr	r1, [r5, #0]
 8008478:	291d      	cmp	r1, #29
 800847a:	d82b      	bhi.n	80084d4 <__sflush_r+0xb8>
 800847c:	4a29      	ldr	r2, [pc, #164]	; (8008524 <__sflush_r+0x108>)
 800847e:	410a      	asrs	r2, r1
 8008480:	07d6      	lsls	r6, r2, #31
 8008482:	d427      	bmi.n	80084d4 <__sflush_r+0xb8>
 8008484:	2200      	movs	r2, #0
 8008486:	6062      	str	r2, [r4, #4]
 8008488:	04d9      	lsls	r1, r3, #19
 800848a:	6922      	ldr	r2, [r4, #16]
 800848c:	6022      	str	r2, [r4, #0]
 800848e:	d504      	bpl.n	800849a <__sflush_r+0x7e>
 8008490:	1c42      	adds	r2, r0, #1
 8008492:	d101      	bne.n	8008498 <__sflush_r+0x7c>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b903      	cbnz	r3, 800849a <__sflush_r+0x7e>
 8008498:	6560      	str	r0, [r4, #84]	; 0x54
 800849a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800849c:	602f      	str	r7, [r5, #0]
 800849e:	2900      	cmp	r1, #0
 80084a0:	d0c9      	beq.n	8008436 <__sflush_r+0x1a>
 80084a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084a6:	4299      	cmp	r1, r3
 80084a8:	d002      	beq.n	80084b0 <__sflush_r+0x94>
 80084aa:	4628      	mov	r0, r5
 80084ac:	f7fe fa1a 	bl	80068e4 <_free_r>
 80084b0:	2000      	movs	r0, #0
 80084b2:	6360      	str	r0, [r4, #52]	; 0x34
 80084b4:	e7c0      	b.n	8008438 <__sflush_r+0x1c>
 80084b6:	2301      	movs	r3, #1
 80084b8:	4628      	mov	r0, r5
 80084ba:	47b0      	blx	r6
 80084bc:	1c41      	adds	r1, r0, #1
 80084be:	d1c8      	bne.n	8008452 <__sflush_r+0x36>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0c5      	beq.n	8008452 <__sflush_r+0x36>
 80084c6:	2b1d      	cmp	r3, #29
 80084c8:	d001      	beq.n	80084ce <__sflush_r+0xb2>
 80084ca:	2b16      	cmp	r3, #22
 80084cc:	d101      	bne.n	80084d2 <__sflush_r+0xb6>
 80084ce:	602f      	str	r7, [r5, #0]
 80084d0:	e7b1      	b.n	8008436 <__sflush_r+0x1a>
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	e7ad      	b.n	8008438 <__sflush_r+0x1c>
 80084dc:	690f      	ldr	r7, [r1, #16]
 80084de:	2f00      	cmp	r7, #0
 80084e0:	d0a9      	beq.n	8008436 <__sflush_r+0x1a>
 80084e2:	0793      	lsls	r3, r2, #30
 80084e4:	680e      	ldr	r6, [r1, #0]
 80084e6:	bf08      	it	eq
 80084e8:	694b      	ldreq	r3, [r1, #20]
 80084ea:	600f      	str	r7, [r1, #0]
 80084ec:	bf18      	it	ne
 80084ee:	2300      	movne	r3, #0
 80084f0:	eba6 0807 	sub.w	r8, r6, r7
 80084f4:	608b      	str	r3, [r1, #8]
 80084f6:	f1b8 0f00 	cmp.w	r8, #0
 80084fa:	dd9c      	ble.n	8008436 <__sflush_r+0x1a>
 80084fc:	6a21      	ldr	r1, [r4, #32]
 80084fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008500:	4643      	mov	r3, r8
 8008502:	463a      	mov	r2, r7
 8008504:	4628      	mov	r0, r5
 8008506:	47b0      	blx	r6
 8008508:	2800      	cmp	r0, #0
 800850a:	dc06      	bgt.n	800851a <__sflush_r+0xfe>
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	e78e      	b.n	8008438 <__sflush_r+0x1c>
 800851a:	4407      	add	r7, r0
 800851c:	eba8 0800 	sub.w	r8, r8, r0
 8008520:	e7e9      	b.n	80084f6 <__sflush_r+0xda>
 8008522:	bf00      	nop
 8008524:	dfbffffe 	.word	0xdfbffffe

08008528 <_fflush_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	690b      	ldr	r3, [r1, #16]
 800852c:	4605      	mov	r5, r0
 800852e:	460c      	mov	r4, r1
 8008530:	b913      	cbnz	r3, 8008538 <_fflush_r+0x10>
 8008532:	2500      	movs	r5, #0
 8008534:	4628      	mov	r0, r5
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	b118      	cbz	r0, 8008542 <_fflush_r+0x1a>
 800853a:	6a03      	ldr	r3, [r0, #32]
 800853c:	b90b      	cbnz	r3, 8008542 <_fflush_r+0x1a>
 800853e:	f7fd fa37 	bl	80059b0 <__sinit>
 8008542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f3      	beq.n	8008532 <_fflush_r+0xa>
 800854a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800854c:	07d0      	lsls	r0, r2, #31
 800854e:	d404      	bmi.n	800855a <_fflush_r+0x32>
 8008550:	0599      	lsls	r1, r3, #22
 8008552:	d402      	bmi.n	800855a <_fflush_r+0x32>
 8008554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008556:	f7fd fb41 	bl	8005bdc <__retarget_lock_acquire_recursive>
 800855a:	4628      	mov	r0, r5
 800855c:	4621      	mov	r1, r4
 800855e:	f7ff ff5d 	bl	800841c <__sflush_r>
 8008562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008564:	07da      	lsls	r2, r3, #31
 8008566:	4605      	mov	r5, r0
 8008568:	d4e4      	bmi.n	8008534 <_fflush_r+0xc>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	059b      	lsls	r3, r3, #22
 800856e:	d4e1      	bmi.n	8008534 <_fflush_r+0xc>
 8008570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008572:	f7fd fb34 	bl	8005bde <__retarget_lock_release_recursive>
 8008576:	e7dd      	b.n	8008534 <_fflush_r+0xc>

08008578 <memmove>:
 8008578:	4288      	cmp	r0, r1
 800857a:	b510      	push	{r4, lr}
 800857c:	eb01 0402 	add.w	r4, r1, r2
 8008580:	d902      	bls.n	8008588 <memmove+0x10>
 8008582:	4284      	cmp	r4, r0
 8008584:	4623      	mov	r3, r4
 8008586:	d807      	bhi.n	8008598 <memmove+0x20>
 8008588:	1e43      	subs	r3, r0, #1
 800858a:	42a1      	cmp	r1, r4
 800858c:	d008      	beq.n	80085a0 <memmove+0x28>
 800858e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008596:	e7f8      	b.n	800858a <memmove+0x12>
 8008598:	4402      	add	r2, r0
 800859a:	4601      	mov	r1, r0
 800859c:	428a      	cmp	r2, r1
 800859e:	d100      	bne.n	80085a2 <memmove+0x2a>
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085aa:	e7f7      	b.n	800859c <memmove+0x24>

080085ac <strncmp>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	b16a      	cbz	r2, 80085cc <strncmp+0x20>
 80085b0:	3901      	subs	r1, #1
 80085b2:	1884      	adds	r4, r0, r2
 80085b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80085bc:	429a      	cmp	r2, r3
 80085be:	d103      	bne.n	80085c8 <strncmp+0x1c>
 80085c0:	42a0      	cmp	r0, r4
 80085c2:	d001      	beq.n	80085c8 <strncmp+0x1c>
 80085c4:	2a00      	cmp	r2, #0
 80085c6:	d1f5      	bne.n	80085b4 <strncmp+0x8>
 80085c8:	1ad0      	subs	r0, r2, r3
 80085ca:	bd10      	pop	{r4, pc}
 80085cc:	4610      	mov	r0, r2
 80085ce:	e7fc      	b.n	80085ca <strncmp+0x1e>

080085d0 <_sbrk_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_sbrk_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f7f8 ff42 	bl	8001464 <_sbrk>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_sbrk_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_sbrk_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	200003d4 	.word	0x200003d4

080085f0 <memcpy>:
 80085f0:	440a      	add	r2, r1
 80085f2:	4291      	cmp	r1, r2
 80085f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085f8:	d100      	bne.n	80085fc <memcpy+0xc>
 80085fa:	4770      	bx	lr
 80085fc:	b510      	push	{r4, lr}
 80085fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008606:	4291      	cmp	r1, r2
 8008608:	d1f9      	bne.n	80085fe <memcpy+0xe>
 800860a:	bd10      	pop	{r4, pc}
 800860c:	0000      	movs	r0, r0
	...

08008610 <nan>:
 8008610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008618 <nan+0x8>
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	00000000 	.word	0x00000000
 800861c:	7ff80000 	.word	0x7ff80000

08008620 <__assert_func>:
 8008620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008622:	4614      	mov	r4, r2
 8008624:	461a      	mov	r2, r3
 8008626:	4b09      	ldr	r3, [pc, #36]	; (800864c <__assert_func+0x2c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4605      	mov	r5, r0
 800862c:	68d8      	ldr	r0, [r3, #12]
 800862e:	b14c      	cbz	r4, 8008644 <__assert_func+0x24>
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <__assert_func+0x30>)
 8008632:	9100      	str	r1, [sp, #0]
 8008634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008638:	4906      	ldr	r1, [pc, #24]	; (8008654 <__assert_func+0x34>)
 800863a:	462b      	mov	r3, r5
 800863c:	f000 fbca 	bl	8008dd4 <fiprintf>
 8008640:	f000 fbda 	bl	8008df8 <abort>
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <__assert_func+0x38>)
 8008646:	461c      	mov	r4, r3
 8008648:	e7f3      	b.n	8008632 <__assert_func+0x12>
 800864a:	bf00      	nop
 800864c:	20000064 	.word	0x20000064
 8008650:	08009722 	.word	0x08009722
 8008654:	0800972f 	.word	0x0800972f
 8008658:	0800975d 	.word	0x0800975d

0800865c <_calloc_r>:
 800865c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800865e:	fba1 2402 	umull	r2, r4, r1, r2
 8008662:	b94c      	cbnz	r4, 8008678 <_calloc_r+0x1c>
 8008664:	4611      	mov	r1, r2
 8008666:	9201      	str	r2, [sp, #4]
 8008668:	f7fe f9b0 	bl	80069cc <_malloc_r>
 800866c:	9a01      	ldr	r2, [sp, #4]
 800866e:	4605      	mov	r5, r0
 8008670:	b930      	cbnz	r0, 8008680 <_calloc_r+0x24>
 8008672:	4628      	mov	r0, r5
 8008674:	b003      	add	sp, #12
 8008676:	bd30      	pop	{r4, r5, pc}
 8008678:	220c      	movs	r2, #12
 800867a:	6002      	str	r2, [r0, #0]
 800867c:	2500      	movs	r5, #0
 800867e:	e7f8      	b.n	8008672 <_calloc_r+0x16>
 8008680:	4621      	mov	r1, r4
 8008682:	f7fd fa2e 	bl	8005ae2 <memset>
 8008686:	e7f4      	b.n	8008672 <_calloc_r+0x16>

08008688 <rshift>:
 8008688:	6903      	ldr	r3, [r0, #16]
 800868a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800868e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008692:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008696:	f100 0414 	add.w	r4, r0, #20
 800869a:	dd45      	ble.n	8008728 <rshift+0xa0>
 800869c:	f011 011f 	ands.w	r1, r1, #31
 80086a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80086a8:	d10c      	bne.n	80086c4 <rshift+0x3c>
 80086aa:	f100 0710 	add.w	r7, r0, #16
 80086ae:	4629      	mov	r1, r5
 80086b0:	42b1      	cmp	r1, r6
 80086b2:	d334      	bcc.n	800871e <rshift+0x96>
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	1eea      	subs	r2, r5, #3
 80086ba:	4296      	cmp	r6, r2
 80086bc:	bf38      	it	cc
 80086be:	2300      	movcc	r3, #0
 80086c0:	4423      	add	r3, r4
 80086c2:	e015      	b.n	80086f0 <rshift+0x68>
 80086c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80086c8:	f1c1 0820 	rsb	r8, r1, #32
 80086cc:	40cf      	lsrs	r7, r1
 80086ce:	f105 0e04 	add.w	lr, r5, #4
 80086d2:	46a1      	mov	r9, r4
 80086d4:	4576      	cmp	r6, lr
 80086d6:	46f4      	mov	ip, lr
 80086d8:	d815      	bhi.n	8008706 <rshift+0x7e>
 80086da:	1a9a      	subs	r2, r3, r2
 80086dc:	0092      	lsls	r2, r2, #2
 80086de:	3a04      	subs	r2, #4
 80086e0:	3501      	adds	r5, #1
 80086e2:	42ae      	cmp	r6, r5
 80086e4:	bf38      	it	cc
 80086e6:	2200      	movcc	r2, #0
 80086e8:	18a3      	adds	r3, r4, r2
 80086ea:	50a7      	str	r7, [r4, r2]
 80086ec:	b107      	cbz	r7, 80086f0 <rshift+0x68>
 80086ee:	3304      	adds	r3, #4
 80086f0:	1b1a      	subs	r2, r3, r4
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086f8:	bf08      	it	eq
 80086fa:	2300      	moveq	r3, #0
 80086fc:	6102      	str	r2, [r0, #16]
 80086fe:	bf08      	it	eq
 8008700:	6143      	streq	r3, [r0, #20]
 8008702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008706:	f8dc c000 	ldr.w	ip, [ip]
 800870a:	fa0c fc08 	lsl.w	ip, ip, r8
 800870e:	ea4c 0707 	orr.w	r7, ip, r7
 8008712:	f849 7b04 	str.w	r7, [r9], #4
 8008716:	f85e 7b04 	ldr.w	r7, [lr], #4
 800871a:	40cf      	lsrs	r7, r1
 800871c:	e7da      	b.n	80086d4 <rshift+0x4c>
 800871e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008722:	f847 cf04 	str.w	ip, [r7, #4]!
 8008726:	e7c3      	b.n	80086b0 <rshift+0x28>
 8008728:	4623      	mov	r3, r4
 800872a:	e7e1      	b.n	80086f0 <rshift+0x68>

0800872c <__hexdig_fun>:
 800872c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008730:	2b09      	cmp	r3, #9
 8008732:	d802      	bhi.n	800873a <__hexdig_fun+0xe>
 8008734:	3820      	subs	r0, #32
 8008736:	b2c0      	uxtb	r0, r0
 8008738:	4770      	bx	lr
 800873a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800873e:	2b05      	cmp	r3, #5
 8008740:	d801      	bhi.n	8008746 <__hexdig_fun+0x1a>
 8008742:	3847      	subs	r0, #71	; 0x47
 8008744:	e7f7      	b.n	8008736 <__hexdig_fun+0xa>
 8008746:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800874a:	2b05      	cmp	r3, #5
 800874c:	d801      	bhi.n	8008752 <__hexdig_fun+0x26>
 800874e:	3827      	subs	r0, #39	; 0x27
 8008750:	e7f1      	b.n	8008736 <__hexdig_fun+0xa>
 8008752:	2000      	movs	r0, #0
 8008754:	4770      	bx	lr
	...

08008758 <__gethex>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	4617      	mov	r7, r2
 800875e:	680a      	ldr	r2, [r1, #0]
 8008760:	b085      	sub	sp, #20
 8008762:	f102 0b02 	add.w	fp, r2, #2
 8008766:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800876a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800876e:	4681      	mov	r9, r0
 8008770:	468a      	mov	sl, r1
 8008772:	9302      	str	r3, [sp, #8]
 8008774:	32fe      	adds	r2, #254	; 0xfe
 8008776:	eb02 030b 	add.w	r3, r2, fp
 800877a:	46d8      	mov	r8, fp
 800877c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	2830      	cmp	r0, #48	; 0x30
 8008784:	d0f7      	beq.n	8008776 <__gethex+0x1e>
 8008786:	f7ff ffd1 	bl	800872c <__hexdig_fun>
 800878a:	4604      	mov	r4, r0
 800878c:	2800      	cmp	r0, #0
 800878e:	d138      	bne.n	8008802 <__gethex+0xaa>
 8008790:	49a7      	ldr	r1, [pc, #668]	; (8008a30 <__gethex+0x2d8>)
 8008792:	2201      	movs	r2, #1
 8008794:	4640      	mov	r0, r8
 8008796:	f7ff ff09 	bl	80085ac <strncmp>
 800879a:	4606      	mov	r6, r0
 800879c:	2800      	cmp	r0, #0
 800879e:	d169      	bne.n	8008874 <__gethex+0x11c>
 80087a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80087a4:	465d      	mov	r5, fp
 80087a6:	f7ff ffc1 	bl	800872c <__hexdig_fun>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d064      	beq.n	8008878 <__gethex+0x120>
 80087ae:	465a      	mov	r2, fp
 80087b0:	7810      	ldrb	r0, [r2, #0]
 80087b2:	2830      	cmp	r0, #48	; 0x30
 80087b4:	4690      	mov	r8, r2
 80087b6:	f102 0201 	add.w	r2, r2, #1
 80087ba:	d0f9      	beq.n	80087b0 <__gethex+0x58>
 80087bc:	f7ff ffb6 	bl	800872c <__hexdig_fun>
 80087c0:	2301      	movs	r3, #1
 80087c2:	fab0 f480 	clz	r4, r0
 80087c6:	0964      	lsrs	r4, r4, #5
 80087c8:	465e      	mov	r6, fp
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	4642      	mov	r2, r8
 80087ce:	4615      	mov	r5, r2
 80087d0:	3201      	adds	r2, #1
 80087d2:	7828      	ldrb	r0, [r5, #0]
 80087d4:	f7ff ffaa 	bl	800872c <__hexdig_fun>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1f8      	bne.n	80087ce <__gethex+0x76>
 80087dc:	4994      	ldr	r1, [pc, #592]	; (8008a30 <__gethex+0x2d8>)
 80087de:	2201      	movs	r2, #1
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7ff fee3 	bl	80085ac <strncmp>
 80087e6:	b978      	cbnz	r0, 8008808 <__gethex+0xb0>
 80087e8:	b946      	cbnz	r6, 80087fc <__gethex+0xa4>
 80087ea:	1c6e      	adds	r6, r5, #1
 80087ec:	4632      	mov	r2, r6
 80087ee:	4615      	mov	r5, r2
 80087f0:	3201      	adds	r2, #1
 80087f2:	7828      	ldrb	r0, [r5, #0]
 80087f4:	f7ff ff9a 	bl	800872c <__hexdig_fun>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d1f8      	bne.n	80087ee <__gethex+0x96>
 80087fc:	1b73      	subs	r3, r6, r5
 80087fe:	009e      	lsls	r6, r3, #2
 8008800:	e004      	b.n	800880c <__gethex+0xb4>
 8008802:	2400      	movs	r4, #0
 8008804:	4626      	mov	r6, r4
 8008806:	e7e1      	b.n	80087cc <__gethex+0x74>
 8008808:	2e00      	cmp	r6, #0
 800880a:	d1f7      	bne.n	80087fc <__gethex+0xa4>
 800880c:	782b      	ldrb	r3, [r5, #0]
 800880e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008812:	2b50      	cmp	r3, #80	; 0x50
 8008814:	d13d      	bne.n	8008892 <__gethex+0x13a>
 8008816:	786b      	ldrb	r3, [r5, #1]
 8008818:	2b2b      	cmp	r3, #43	; 0x2b
 800881a:	d02f      	beq.n	800887c <__gethex+0x124>
 800881c:	2b2d      	cmp	r3, #45	; 0x2d
 800881e:	d031      	beq.n	8008884 <__gethex+0x12c>
 8008820:	1c69      	adds	r1, r5, #1
 8008822:	f04f 0b00 	mov.w	fp, #0
 8008826:	7808      	ldrb	r0, [r1, #0]
 8008828:	f7ff ff80 	bl	800872c <__hexdig_fun>
 800882c:	1e42      	subs	r2, r0, #1
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	2a18      	cmp	r2, #24
 8008832:	d82e      	bhi.n	8008892 <__gethex+0x13a>
 8008834:	f1a0 0210 	sub.w	r2, r0, #16
 8008838:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800883c:	f7ff ff76 	bl	800872c <__hexdig_fun>
 8008840:	f100 3cff 	add.w	ip, r0, #4294967295
 8008844:	fa5f fc8c 	uxtb.w	ip, ip
 8008848:	f1bc 0f18 	cmp.w	ip, #24
 800884c:	d91d      	bls.n	800888a <__gethex+0x132>
 800884e:	f1bb 0f00 	cmp.w	fp, #0
 8008852:	d000      	beq.n	8008856 <__gethex+0xfe>
 8008854:	4252      	negs	r2, r2
 8008856:	4416      	add	r6, r2
 8008858:	f8ca 1000 	str.w	r1, [sl]
 800885c:	b1dc      	cbz	r4, 8008896 <__gethex+0x13e>
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	bf14      	ite	ne
 8008864:	f04f 0800 	movne.w	r8, #0
 8008868:	f04f 0806 	moveq.w	r8, #6
 800886c:	4640      	mov	r0, r8
 800886e:	b005      	add	sp, #20
 8008870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008874:	4645      	mov	r5, r8
 8008876:	4626      	mov	r6, r4
 8008878:	2401      	movs	r4, #1
 800887a:	e7c7      	b.n	800880c <__gethex+0xb4>
 800887c:	f04f 0b00 	mov.w	fp, #0
 8008880:	1ca9      	adds	r1, r5, #2
 8008882:	e7d0      	b.n	8008826 <__gethex+0xce>
 8008884:	f04f 0b01 	mov.w	fp, #1
 8008888:	e7fa      	b.n	8008880 <__gethex+0x128>
 800888a:	230a      	movs	r3, #10
 800888c:	fb03 0002 	mla	r0, r3, r2, r0
 8008890:	e7d0      	b.n	8008834 <__gethex+0xdc>
 8008892:	4629      	mov	r1, r5
 8008894:	e7e0      	b.n	8008858 <__gethex+0x100>
 8008896:	eba5 0308 	sub.w	r3, r5, r8
 800889a:	3b01      	subs	r3, #1
 800889c:	4621      	mov	r1, r4
 800889e:	2b07      	cmp	r3, #7
 80088a0:	dc0a      	bgt.n	80088b8 <__gethex+0x160>
 80088a2:	4648      	mov	r0, r9
 80088a4:	f7fe f91e 	bl	8006ae4 <_Balloc>
 80088a8:	4604      	mov	r4, r0
 80088aa:	b940      	cbnz	r0, 80088be <__gethex+0x166>
 80088ac:	4b61      	ldr	r3, [pc, #388]	; (8008a34 <__gethex+0x2dc>)
 80088ae:	4602      	mov	r2, r0
 80088b0:	21e4      	movs	r1, #228	; 0xe4
 80088b2:	4861      	ldr	r0, [pc, #388]	; (8008a38 <__gethex+0x2e0>)
 80088b4:	f7ff feb4 	bl	8008620 <__assert_func>
 80088b8:	3101      	adds	r1, #1
 80088ba:	105b      	asrs	r3, r3, #1
 80088bc:	e7ef      	b.n	800889e <__gethex+0x146>
 80088be:	f100 0a14 	add.w	sl, r0, #20
 80088c2:	2300      	movs	r3, #0
 80088c4:	495a      	ldr	r1, [pc, #360]	; (8008a30 <__gethex+0x2d8>)
 80088c6:	f8cd a004 	str.w	sl, [sp, #4]
 80088ca:	469b      	mov	fp, r3
 80088cc:	45a8      	cmp	r8, r5
 80088ce:	d342      	bcc.n	8008956 <__gethex+0x1fe>
 80088d0:	9801      	ldr	r0, [sp, #4]
 80088d2:	f840 bb04 	str.w	fp, [r0], #4
 80088d6:	eba0 000a 	sub.w	r0, r0, sl
 80088da:	1080      	asrs	r0, r0, #2
 80088dc:	6120      	str	r0, [r4, #16]
 80088de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80088e2:	4658      	mov	r0, fp
 80088e4:	f7fe f9f0 	bl	8006cc8 <__hi0bits>
 80088e8:	683d      	ldr	r5, [r7, #0]
 80088ea:	eba8 0000 	sub.w	r0, r8, r0
 80088ee:	42a8      	cmp	r0, r5
 80088f0:	dd59      	ble.n	80089a6 <__gethex+0x24e>
 80088f2:	eba0 0805 	sub.w	r8, r0, r5
 80088f6:	4641      	mov	r1, r8
 80088f8:	4620      	mov	r0, r4
 80088fa:	f7fe fd7f 	bl	80073fc <__any_on>
 80088fe:	4683      	mov	fp, r0
 8008900:	b1b8      	cbz	r0, 8008932 <__gethex+0x1da>
 8008902:	f108 33ff 	add.w	r3, r8, #4294967295
 8008906:	1159      	asrs	r1, r3, #5
 8008908:	f003 021f 	and.w	r2, r3, #31
 800890c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008910:	f04f 0b01 	mov.w	fp, #1
 8008914:	fa0b f202 	lsl.w	r2, fp, r2
 8008918:	420a      	tst	r2, r1
 800891a:	d00a      	beq.n	8008932 <__gethex+0x1da>
 800891c:	455b      	cmp	r3, fp
 800891e:	dd06      	ble.n	800892e <__gethex+0x1d6>
 8008920:	f1a8 0102 	sub.w	r1, r8, #2
 8008924:	4620      	mov	r0, r4
 8008926:	f7fe fd69 	bl	80073fc <__any_on>
 800892a:	2800      	cmp	r0, #0
 800892c:	d138      	bne.n	80089a0 <__gethex+0x248>
 800892e:	f04f 0b02 	mov.w	fp, #2
 8008932:	4641      	mov	r1, r8
 8008934:	4620      	mov	r0, r4
 8008936:	f7ff fea7 	bl	8008688 <rshift>
 800893a:	4446      	add	r6, r8
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	42b3      	cmp	r3, r6
 8008940:	da41      	bge.n	80089c6 <__gethex+0x26e>
 8008942:	4621      	mov	r1, r4
 8008944:	4648      	mov	r0, r9
 8008946:	f7fe f90d 	bl	8006b64 <_Bfree>
 800894a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800894c:	2300      	movs	r3, #0
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008954:	e78a      	b.n	800886c <__gethex+0x114>
 8008956:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800895a:	2a2e      	cmp	r2, #46	; 0x2e
 800895c:	d014      	beq.n	8008988 <__gethex+0x230>
 800895e:	2b20      	cmp	r3, #32
 8008960:	d106      	bne.n	8008970 <__gethex+0x218>
 8008962:	9b01      	ldr	r3, [sp, #4]
 8008964:	f843 bb04 	str.w	fp, [r3], #4
 8008968:	f04f 0b00 	mov.w	fp, #0
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	465b      	mov	r3, fp
 8008970:	7828      	ldrb	r0, [r5, #0]
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	f7ff feda 	bl	800872c <__hexdig_fun>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	f000 000f 	and.w	r0, r0, #15
 800897e:	4098      	lsls	r0, r3
 8008980:	ea4b 0b00 	orr.w	fp, fp, r0
 8008984:	3304      	adds	r3, #4
 8008986:	e7a1      	b.n	80088cc <__gethex+0x174>
 8008988:	45a8      	cmp	r8, r5
 800898a:	d8e8      	bhi.n	800895e <__gethex+0x206>
 800898c:	2201      	movs	r2, #1
 800898e:	4628      	mov	r0, r5
 8008990:	9303      	str	r3, [sp, #12]
 8008992:	f7ff fe0b 	bl	80085ac <strncmp>
 8008996:	4926      	ldr	r1, [pc, #152]	; (8008a30 <__gethex+0x2d8>)
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	2800      	cmp	r0, #0
 800899c:	d1df      	bne.n	800895e <__gethex+0x206>
 800899e:	e795      	b.n	80088cc <__gethex+0x174>
 80089a0:	f04f 0b03 	mov.w	fp, #3
 80089a4:	e7c5      	b.n	8008932 <__gethex+0x1da>
 80089a6:	da0b      	bge.n	80089c0 <__gethex+0x268>
 80089a8:	eba5 0800 	sub.w	r8, r5, r0
 80089ac:	4621      	mov	r1, r4
 80089ae:	4642      	mov	r2, r8
 80089b0:	4648      	mov	r0, r9
 80089b2:	f7fe faf1 	bl	8006f98 <__lshift>
 80089b6:	eba6 0608 	sub.w	r6, r6, r8
 80089ba:	4604      	mov	r4, r0
 80089bc:	f100 0a14 	add.w	sl, r0, #20
 80089c0:	f04f 0b00 	mov.w	fp, #0
 80089c4:	e7ba      	b.n	800893c <__gethex+0x1e4>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	42b3      	cmp	r3, r6
 80089ca:	dd73      	ble.n	8008ab4 <__gethex+0x35c>
 80089cc:	1b9e      	subs	r6, r3, r6
 80089ce:	42b5      	cmp	r5, r6
 80089d0:	dc34      	bgt.n	8008a3c <__gethex+0x2e4>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d023      	beq.n	8008a20 <__gethex+0x2c8>
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d025      	beq.n	8008a28 <__gethex+0x2d0>
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d115      	bne.n	8008a0c <__gethex+0x2b4>
 80089e0:	42b5      	cmp	r5, r6
 80089e2:	d113      	bne.n	8008a0c <__gethex+0x2b4>
 80089e4:	2d01      	cmp	r5, #1
 80089e6:	d10b      	bne.n	8008a00 <__gethex+0x2a8>
 80089e8:	9a02      	ldr	r2, [sp, #8]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	2301      	movs	r3, #1
 80089f0:	6123      	str	r3, [r4, #16]
 80089f2:	f8ca 3000 	str.w	r3, [sl]
 80089f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80089fc:	601c      	str	r4, [r3, #0]
 80089fe:	e735      	b.n	800886c <__gethex+0x114>
 8008a00:	1e69      	subs	r1, r5, #1
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7fe fcfa 	bl	80073fc <__any_on>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d1ed      	bne.n	80089e8 <__gethex+0x290>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4648      	mov	r0, r9
 8008a10:	f7fe f8a8 	bl	8006b64 <_Bfree>
 8008a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a16:	2300      	movs	r3, #0
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008a1e:	e725      	b.n	800886c <__gethex+0x114>
 8008a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f2      	bne.n	8008a0c <__gethex+0x2b4>
 8008a26:	e7df      	b.n	80089e8 <__gethex+0x290>
 8008a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1dc      	bne.n	80089e8 <__gethex+0x290>
 8008a2e:	e7ed      	b.n	8008a0c <__gethex+0x2b4>
 8008a30:	080095b4 	.word	0x080095b4
 8008a34:	08009449 	.word	0x08009449
 8008a38:	0800975e 	.word	0x0800975e
 8008a3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008a40:	f1bb 0f00 	cmp.w	fp, #0
 8008a44:	d133      	bne.n	8008aae <__gethex+0x356>
 8008a46:	f1b8 0f00 	cmp.w	r8, #0
 8008a4a:	d004      	beq.n	8008a56 <__gethex+0x2fe>
 8008a4c:	4641      	mov	r1, r8
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7fe fcd4 	bl	80073fc <__any_on>
 8008a54:	4683      	mov	fp, r0
 8008a56:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a60:	f008 081f 	and.w	r8, r8, #31
 8008a64:	fa03 f308 	lsl.w	r3, r3, r8
 8008a68:	4213      	tst	r3, r2
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	bf18      	it	ne
 8008a70:	f04b 0b02 	orrne.w	fp, fp, #2
 8008a74:	1bad      	subs	r5, r5, r6
 8008a76:	f7ff fe07 	bl	8008688 <rshift>
 8008a7a:	687e      	ldr	r6, [r7, #4]
 8008a7c:	f04f 0802 	mov.w	r8, #2
 8008a80:	f1bb 0f00 	cmp.w	fp, #0
 8008a84:	d04a      	beq.n	8008b1c <__gethex+0x3c4>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d016      	beq.n	8008aba <__gethex+0x362>
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d018      	beq.n	8008ac2 <__gethex+0x36a>
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d109      	bne.n	8008aa8 <__gethex+0x350>
 8008a94:	f01b 0f02 	tst.w	fp, #2
 8008a98:	d006      	beq.n	8008aa8 <__gethex+0x350>
 8008a9a:	f8da 3000 	ldr.w	r3, [sl]
 8008a9e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008aa2:	f01b 0f01 	tst.w	fp, #1
 8008aa6:	d10f      	bne.n	8008ac8 <__gethex+0x370>
 8008aa8:	f048 0810 	orr.w	r8, r8, #16
 8008aac:	e036      	b.n	8008b1c <__gethex+0x3c4>
 8008aae:	f04f 0b01 	mov.w	fp, #1
 8008ab2:	e7d0      	b.n	8008a56 <__gethex+0x2fe>
 8008ab4:	f04f 0801 	mov.w	r8, #1
 8008ab8:	e7e2      	b.n	8008a80 <__gethex+0x328>
 8008aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008abc:	f1c3 0301 	rsb	r3, r3, #1
 8008ac0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0ef      	beq.n	8008aa8 <__gethex+0x350>
 8008ac8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008acc:	f104 0214 	add.w	r2, r4, #20
 8008ad0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008ada:	2300      	movs	r3, #0
 8008adc:	4694      	mov	ip, r2
 8008ade:	f852 1b04 	ldr.w	r1, [r2], #4
 8008ae2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008ae6:	d01e      	beq.n	8008b26 <__gethex+0x3ce>
 8008ae8:	3101      	adds	r1, #1
 8008aea:	f8cc 1000 	str.w	r1, [ip]
 8008aee:	f1b8 0f02 	cmp.w	r8, #2
 8008af2:	f104 0214 	add.w	r2, r4, #20
 8008af6:	d13d      	bne.n	8008b74 <__gethex+0x41c>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	d10b      	bne.n	8008b18 <__gethex+0x3c0>
 8008b00:	1169      	asrs	r1, r5, #5
 8008b02:	2301      	movs	r3, #1
 8008b04:	f005 051f 	and.w	r5, r5, #31
 8008b08:	fa03 f505 	lsl.w	r5, r3, r5
 8008b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b10:	421d      	tst	r5, r3
 8008b12:	bf18      	it	ne
 8008b14:	f04f 0801 	movne.w	r8, #1
 8008b18:	f048 0820 	orr.w	r8, r8, #32
 8008b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b1e:	601c      	str	r4, [r3, #0]
 8008b20:	9b02      	ldr	r3, [sp, #8]
 8008b22:	601e      	str	r6, [r3, #0]
 8008b24:	e6a2      	b.n	800886c <__gethex+0x114>
 8008b26:	4290      	cmp	r0, r2
 8008b28:	f842 3c04 	str.w	r3, [r2, #-4]
 8008b2c:	d8d6      	bhi.n	8008adc <__gethex+0x384>
 8008b2e:	68a2      	ldr	r2, [r4, #8]
 8008b30:	4593      	cmp	fp, r2
 8008b32:	db17      	blt.n	8008b64 <__gethex+0x40c>
 8008b34:	6861      	ldr	r1, [r4, #4]
 8008b36:	4648      	mov	r0, r9
 8008b38:	3101      	adds	r1, #1
 8008b3a:	f7fd ffd3 	bl	8006ae4 <_Balloc>
 8008b3e:	4682      	mov	sl, r0
 8008b40:	b918      	cbnz	r0, 8008b4a <__gethex+0x3f2>
 8008b42:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <__gethex+0x458>)
 8008b44:	4602      	mov	r2, r0
 8008b46:	2184      	movs	r1, #132	; 0x84
 8008b48:	e6b3      	b.n	80088b2 <__gethex+0x15a>
 8008b4a:	6922      	ldr	r2, [r4, #16]
 8008b4c:	3202      	adds	r2, #2
 8008b4e:	f104 010c 	add.w	r1, r4, #12
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	300c      	adds	r0, #12
 8008b56:	f7ff fd4b 	bl	80085f0 <memcpy>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4648      	mov	r0, r9
 8008b5e:	f7fe f801 	bl	8006b64 <_Bfree>
 8008b62:	4654      	mov	r4, sl
 8008b64:	6922      	ldr	r2, [r4, #16]
 8008b66:	1c51      	adds	r1, r2, #1
 8008b68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b6c:	6121      	str	r1, [r4, #16]
 8008b6e:	2101      	movs	r1, #1
 8008b70:	6151      	str	r1, [r2, #20]
 8008b72:	e7bc      	b.n	8008aee <__gethex+0x396>
 8008b74:	6921      	ldr	r1, [r4, #16]
 8008b76:	4559      	cmp	r1, fp
 8008b78:	dd0b      	ble.n	8008b92 <__gethex+0x43a>
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7ff fd83 	bl	8008688 <rshift>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	3601      	adds	r6, #1
 8008b86:	42b3      	cmp	r3, r6
 8008b88:	f6ff aedb 	blt.w	8008942 <__gethex+0x1ea>
 8008b8c:	f04f 0801 	mov.w	r8, #1
 8008b90:	e7c2      	b.n	8008b18 <__gethex+0x3c0>
 8008b92:	f015 051f 	ands.w	r5, r5, #31
 8008b96:	d0f9      	beq.n	8008b8c <__gethex+0x434>
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	441a      	add	r2, r3
 8008b9c:	f1c5 0520 	rsb	r5, r5, #32
 8008ba0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008ba4:	f7fe f890 	bl	8006cc8 <__hi0bits>
 8008ba8:	42a8      	cmp	r0, r5
 8008baa:	dbe6      	blt.n	8008b7a <__gethex+0x422>
 8008bac:	e7ee      	b.n	8008b8c <__gethex+0x434>
 8008bae:	bf00      	nop
 8008bb0:	08009449 	.word	0x08009449

08008bb4 <L_shift>:
 8008bb4:	f1c2 0208 	rsb	r2, r2, #8
 8008bb8:	0092      	lsls	r2, r2, #2
 8008bba:	b570      	push	{r4, r5, r6, lr}
 8008bbc:	f1c2 0620 	rsb	r6, r2, #32
 8008bc0:	6843      	ldr	r3, [r0, #4]
 8008bc2:	6804      	ldr	r4, [r0, #0]
 8008bc4:	fa03 f506 	lsl.w	r5, r3, r6
 8008bc8:	432c      	orrs	r4, r5
 8008bca:	40d3      	lsrs	r3, r2
 8008bcc:	6004      	str	r4, [r0, #0]
 8008bce:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bd2:	4288      	cmp	r0, r1
 8008bd4:	d3f4      	bcc.n	8008bc0 <L_shift+0xc>
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}

08008bd8 <__match>:
 8008bd8:	b530      	push	{r4, r5, lr}
 8008bda:	6803      	ldr	r3, [r0, #0]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008be2:	b914      	cbnz	r4, 8008bea <__match+0x12>
 8008be4:	6003      	str	r3, [r0, #0]
 8008be6:	2001      	movs	r0, #1
 8008be8:	bd30      	pop	{r4, r5, pc}
 8008bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008bf2:	2d19      	cmp	r5, #25
 8008bf4:	bf98      	it	ls
 8008bf6:	3220      	addls	r2, #32
 8008bf8:	42a2      	cmp	r2, r4
 8008bfa:	d0f0      	beq.n	8008bde <__match+0x6>
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e7f3      	b.n	8008be8 <__match+0x10>

08008c00 <__hexnan>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	680b      	ldr	r3, [r1, #0]
 8008c06:	6801      	ldr	r1, [r0, #0]
 8008c08:	115e      	asrs	r6, r3, #5
 8008c0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c0e:	f013 031f 	ands.w	r3, r3, #31
 8008c12:	b087      	sub	sp, #28
 8008c14:	bf18      	it	ne
 8008c16:	3604      	addne	r6, #4
 8008c18:	2500      	movs	r5, #0
 8008c1a:	1f37      	subs	r7, r6, #4
 8008c1c:	4682      	mov	sl, r0
 8008c1e:	4690      	mov	r8, r2
 8008c20:	9301      	str	r3, [sp, #4]
 8008c22:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c26:	46b9      	mov	r9, r7
 8008c28:	463c      	mov	r4, r7
 8008c2a:	9502      	str	r5, [sp, #8]
 8008c2c:	46ab      	mov	fp, r5
 8008c2e:	784a      	ldrb	r2, [r1, #1]
 8008c30:	1c4b      	adds	r3, r1, #1
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	b342      	cbz	r2, 8008c88 <__hexnan+0x88>
 8008c36:	4610      	mov	r0, r2
 8008c38:	9105      	str	r1, [sp, #20]
 8008c3a:	9204      	str	r2, [sp, #16]
 8008c3c:	f7ff fd76 	bl	800872c <__hexdig_fun>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d14f      	bne.n	8008ce4 <__hexnan+0xe4>
 8008c44:	9a04      	ldr	r2, [sp, #16]
 8008c46:	9905      	ldr	r1, [sp, #20]
 8008c48:	2a20      	cmp	r2, #32
 8008c4a:	d818      	bhi.n	8008c7e <__hexnan+0x7e>
 8008c4c:	9b02      	ldr	r3, [sp, #8]
 8008c4e:	459b      	cmp	fp, r3
 8008c50:	dd13      	ble.n	8008c7a <__hexnan+0x7a>
 8008c52:	454c      	cmp	r4, r9
 8008c54:	d206      	bcs.n	8008c64 <__hexnan+0x64>
 8008c56:	2d07      	cmp	r5, #7
 8008c58:	dc04      	bgt.n	8008c64 <__hexnan+0x64>
 8008c5a:	462a      	mov	r2, r5
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f7ff ffa8 	bl	8008bb4 <L_shift>
 8008c64:	4544      	cmp	r4, r8
 8008c66:	d950      	bls.n	8008d0a <__hexnan+0x10a>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f1a4 0904 	sub.w	r9, r4, #4
 8008c6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c72:	f8cd b008 	str.w	fp, [sp, #8]
 8008c76:	464c      	mov	r4, r9
 8008c78:	461d      	mov	r5, r3
 8008c7a:	9903      	ldr	r1, [sp, #12]
 8008c7c:	e7d7      	b.n	8008c2e <__hexnan+0x2e>
 8008c7e:	2a29      	cmp	r2, #41	; 0x29
 8008c80:	d155      	bne.n	8008d2e <__hexnan+0x12e>
 8008c82:	3102      	adds	r1, #2
 8008c84:	f8ca 1000 	str.w	r1, [sl]
 8008c88:	f1bb 0f00 	cmp.w	fp, #0
 8008c8c:	d04f      	beq.n	8008d2e <__hexnan+0x12e>
 8008c8e:	454c      	cmp	r4, r9
 8008c90:	d206      	bcs.n	8008ca0 <__hexnan+0xa0>
 8008c92:	2d07      	cmp	r5, #7
 8008c94:	dc04      	bgt.n	8008ca0 <__hexnan+0xa0>
 8008c96:	462a      	mov	r2, r5
 8008c98:	4649      	mov	r1, r9
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f7ff ff8a 	bl	8008bb4 <L_shift>
 8008ca0:	4544      	cmp	r4, r8
 8008ca2:	d934      	bls.n	8008d0e <__hexnan+0x10e>
 8008ca4:	f1a8 0204 	sub.w	r2, r8, #4
 8008ca8:	4623      	mov	r3, r4
 8008caa:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cae:	f842 1f04 	str.w	r1, [r2, #4]!
 8008cb2:	429f      	cmp	r7, r3
 8008cb4:	d2f9      	bcs.n	8008caa <__hexnan+0xaa>
 8008cb6:	1b3b      	subs	r3, r7, r4
 8008cb8:	f023 0303 	bic.w	r3, r3, #3
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	3e03      	subs	r6, #3
 8008cc0:	3401      	adds	r4, #1
 8008cc2:	42a6      	cmp	r6, r4
 8008cc4:	bf38      	it	cc
 8008cc6:	2304      	movcc	r3, #4
 8008cc8:	4443      	add	r3, r8
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f843 2b04 	str.w	r2, [r3], #4
 8008cd0:	429f      	cmp	r7, r3
 8008cd2:	d2fb      	bcs.n	8008ccc <__hexnan+0xcc>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	b91b      	cbnz	r3, 8008ce0 <__hexnan+0xe0>
 8008cd8:	4547      	cmp	r7, r8
 8008cda:	d126      	bne.n	8008d2a <__hexnan+0x12a>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	2005      	movs	r0, #5
 8008ce2:	e025      	b.n	8008d30 <__hexnan+0x130>
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	2d08      	cmp	r5, #8
 8008ce8:	f10b 0b01 	add.w	fp, fp, #1
 8008cec:	dd06      	ble.n	8008cfc <__hexnan+0xfc>
 8008cee:	4544      	cmp	r4, r8
 8008cf0:	d9c3      	bls.n	8008c7a <__hexnan+0x7a>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cf8:	2501      	movs	r5, #1
 8008cfa:	3c04      	subs	r4, #4
 8008cfc:	6822      	ldr	r2, [r4, #0]
 8008cfe:	f000 000f 	and.w	r0, r0, #15
 8008d02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d06:	6020      	str	r0, [r4, #0]
 8008d08:	e7b7      	b.n	8008c7a <__hexnan+0x7a>
 8008d0a:	2508      	movs	r5, #8
 8008d0c:	e7b5      	b.n	8008c7a <__hexnan+0x7a>
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0df      	beq.n	8008cd4 <__hexnan+0xd4>
 8008d14:	f1c3 0320 	rsb	r3, r3, #32
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1c:	40da      	lsrs	r2, r3
 8008d1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d22:	4013      	ands	r3, r2
 8008d24:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d28:	e7d4      	b.n	8008cd4 <__hexnan+0xd4>
 8008d2a:	3f04      	subs	r7, #4
 8008d2c:	e7d2      	b.n	8008cd4 <__hexnan+0xd4>
 8008d2e:	2004      	movs	r0, #4
 8008d30:	b007      	add	sp, #28
 8008d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d36 <__ascii_mbtowc>:
 8008d36:	b082      	sub	sp, #8
 8008d38:	b901      	cbnz	r1, 8008d3c <__ascii_mbtowc+0x6>
 8008d3a:	a901      	add	r1, sp, #4
 8008d3c:	b142      	cbz	r2, 8008d50 <__ascii_mbtowc+0x1a>
 8008d3e:	b14b      	cbz	r3, 8008d54 <__ascii_mbtowc+0x1e>
 8008d40:	7813      	ldrb	r3, [r2, #0]
 8008d42:	600b      	str	r3, [r1, #0]
 8008d44:	7812      	ldrb	r2, [r2, #0]
 8008d46:	1e10      	subs	r0, r2, #0
 8008d48:	bf18      	it	ne
 8008d4a:	2001      	movne	r0, #1
 8008d4c:	b002      	add	sp, #8
 8008d4e:	4770      	bx	lr
 8008d50:	4610      	mov	r0, r2
 8008d52:	e7fb      	b.n	8008d4c <__ascii_mbtowc+0x16>
 8008d54:	f06f 0001 	mvn.w	r0, #1
 8008d58:	e7f8      	b.n	8008d4c <__ascii_mbtowc+0x16>

08008d5a <_realloc_r>:
 8008d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	4680      	mov	r8, r0
 8008d60:	4614      	mov	r4, r2
 8008d62:	460e      	mov	r6, r1
 8008d64:	b921      	cbnz	r1, 8008d70 <_realloc_r+0x16>
 8008d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	f7fd be2e 	b.w	80069cc <_malloc_r>
 8008d70:	b92a      	cbnz	r2, 8008d7e <_realloc_r+0x24>
 8008d72:	f7fd fdb7 	bl	80068e4 <_free_r>
 8008d76:	4625      	mov	r5, r4
 8008d78:	4628      	mov	r0, r5
 8008d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d7e:	f000 f842 	bl	8008e06 <_malloc_usable_size_r>
 8008d82:	4284      	cmp	r4, r0
 8008d84:	4607      	mov	r7, r0
 8008d86:	d802      	bhi.n	8008d8e <_realloc_r+0x34>
 8008d88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d8c:	d812      	bhi.n	8008db4 <_realloc_r+0x5a>
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4640      	mov	r0, r8
 8008d92:	f7fd fe1b 	bl	80069cc <_malloc_r>
 8008d96:	4605      	mov	r5, r0
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d0ed      	beq.n	8008d78 <_realloc_r+0x1e>
 8008d9c:	42bc      	cmp	r4, r7
 8008d9e:	4622      	mov	r2, r4
 8008da0:	4631      	mov	r1, r6
 8008da2:	bf28      	it	cs
 8008da4:	463a      	movcs	r2, r7
 8008da6:	f7ff fc23 	bl	80085f0 <memcpy>
 8008daa:	4631      	mov	r1, r6
 8008dac:	4640      	mov	r0, r8
 8008dae:	f7fd fd99 	bl	80068e4 <_free_r>
 8008db2:	e7e1      	b.n	8008d78 <_realloc_r+0x1e>
 8008db4:	4635      	mov	r5, r6
 8008db6:	e7df      	b.n	8008d78 <_realloc_r+0x1e>

08008db8 <__ascii_wctomb>:
 8008db8:	b149      	cbz	r1, 8008dce <__ascii_wctomb+0x16>
 8008dba:	2aff      	cmp	r2, #255	; 0xff
 8008dbc:	bf85      	ittet	hi
 8008dbe:	238a      	movhi	r3, #138	; 0x8a
 8008dc0:	6003      	strhi	r3, [r0, #0]
 8008dc2:	700a      	strbls	r2, [r1, #0]
 8008dc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008dc8:	bf98      	it	ls
 8008dca:	2001      	movls	r0, #1
 8008dcc:	4770      	bx	lr
 8008dce:	4608      	mov	r0, r1
 8008dd0:	4770      	bx	lr
	...

08008dd4 <fiprintf>:
 8008dd4:	b40e      	push	{r1, r2, r3}
 8008dd6:	b503      	push	{r0, r1, lr}
 8008dd8:	4601      	mov	r1, r0
 8008dda:	ab03      	add	r3, sp, #12
 8008ddc:	4805      	ldr	r0, [pc, #20]	; (8008df4 <fiprintf+0x20>)
 8008dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de2:	6800      	ldr	r0, [r0, #0]
 8008de4:	9301      	str	r3, [sp, #4]
 8008de6:	f000 f83f 	bl	8008e68 <_vfiprintf_r>
 8008dea:	b002      	add	sp, #8
 8008dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008df0:	b003      	add	sp, #12
 8008df2:	4770      	bx	lr
 8008df4:	20000064 	.word	0x20000064

08008df8 <abort>:
 8008df8:	b508      	push	{r3, lr}
 8008dfa:	2006      	movs	r0, #6
 8008dfc:	f000 fa0c 	bl	8009218 <raise>
 8008e00:	2001      	movs	r0, #1
 8008e02:	f7f8 fab7 	bl	8001374 <_exit>

08008e06 <_malloc_usable_size_r>:
 8008e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e0a:	1f18      	subs	r0, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bfbc      	itt	lt
 8008e10:	580b      	ldrlt	r3, [r1, r0]
 8008e12:	18c0      	addlt	r0, r0, r3
 8008e14:	4770      	bx	lr

08008e16 <__sfputc_r>:
 8008e16:	6893      	ldr	r3, [r2, #8]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	b410      	push	{r4}
 8008e1e:	6093      	str	r3, [r2, #8]
 8008e20:	da08      	bge.n	8008e34 <__sfputc_r+0x1e>
 8008e22:	6994      	ldr	r4, [r2, #24]
 8008e24:	42a3      	cmp	r3, r4
 8008e26:	db01      	blt.n	8008e2c <__sfputc_r+0x16>
 8008e28:	290a      	cmp	r1, #10
 8008e2a:	d103      	bne.n	8008e34 <__sfputc_r+0x1e>
 8008e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e30:	f000 b934 	b.w	800909c <__swbuf_r>
 8008e34:	6813      	ldr	r3, [r2, #0]
 8008e36:	1c58      	adds	r0, r3, #1
 8008e38:	6010      	str	r0, [r2, #0]
 8008e3a:	7019      	strb	r1, [r3, #0]
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <__sfputs_r>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	4614      	mov	r4, r2
 8008e4c:	18d5      	adds	r5, r2, r3
 8008e4e:	42ac      	cmp	r4, r5
 8008e50:	d101      	bne.n	8008e56 <__sfputs_r+0x12>
 8008e52:	2000      	movs	r0, #0
 8008e54:	e007      	b.n	8008e66 <__sfputs_r+0x22>
 8008e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5a:	463a      	mov	r2, r7
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f7ff ffda 	bl	8008e16 <__sfputc_r>
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	d1f3      	bne.n	8008e4e <__sfputs_r+0xa>
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e68 <_vfiprintf_r>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	460d      	mov	r5, r1
 8008e6e:	b09d      	sub	sp, #116	; 0x74
 8008e70:	4614      	mov	r4, r2
 8008e72:	4698      	mov	r8, r3
 8008e74:	4606      	mov	r6, r0
 8008e76:	b118      	cbz	r0, 8008e80 <_vfiprintf_r+0x18>
 8008e78:	6a03      	ldr	r3, [r0, #32]
 8008e7a:	b90b      	cbnz	r3, 8008e80 <_vfiprintf_r+0x18>
 8008e7c:	f7fc fd98 	bl	80059b0 <__sinit>
 8008e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e82:	07d9      	lsls	r1, r3, #31
 8008e84:	d405      	bmi.n	8008e92 <_vfiprintf_r+0x2a>
 8008e86:	89ab      	ldrh	r3, [r5, #12]
 8008e88:	059a      	lsls	r2, r3, #22
 8008e8a:	d402      	bmi.n	8008e92 <_vfiprintf_r+0x2a>
 8008e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e8e:	f7fc fea5 	bl	8005bdc <__retarget_lock_acquire_recursive>
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	071b      	lsls	r3, r3, #28
 8008e96:	d501      	bpl.n	8008e9c <_vfiprintf_r+0x34>
 8008e98:	692b      	ldr	r3, [r5, #16]
 8008e9a:	b99b      	cbnz	r3, 8008ec4 <_vfiprintf_r+0x5c>
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f000 f93a 	bl	8009118 <__swsetup_r>
 8008ea4:	b170      	cbz	r0, 8008ec4 <_vfiprintf_r+0x5c>
 8008ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ea8:	07dc      	lsls	r4, r3, #31
 8008eaa:	d504      	bpl.n	8008eb6 <_vfiprintf_r+0x4e>
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb0:	b01d      	add	sp, #116	; 0x74
 8008eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	0598      	lsls	r0, r3, #22
 8008eba:	d4f7      	bmi.n	8008eac <_vfiprintf_r+0x44>
 8008ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ebe:	f7fc fe8e 	bl	8005bde <__retarget_lock_release_recursive>
 8008ec2:	e7f3      	b.n	8008eac <_vfiprintf_r+0x44>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec8:	2320      	movs	r3, #32
 8008eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed2:	2330      	movs	r3, #48	; 0x30
 8008ed4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009088 <_vfiprintf_r+0x220>
 8008ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008edc:	f04f 0901 	mov.w	r9, #1
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	469a      	mov	sl, r3
 8008ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee8:	b10a      	cbz	r2, 8008eee <_vfiprintf_r+0x86>
 8008eea:	2a25      	cmp	r2, #37	; 0x25
 8008eec:	d1f9      	bne.n	8008ee2 <_vfiprintf_r+0x7a>
 8008eee:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef2:	d00b      	beq.n	8008f0c <_vfiprintf_r+0xa4>
 8008ef4:	465b      	mov	r3, fp
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff ffa2 	bl	8008e44 <__sfputs_r>
 8008f00:	3001      	adds	r0, #1
 8008f02:	f000 80a9 	beq.w	8009058 <_vfiprintf_r+0x1f0>
 8008f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f08:	445a      	add	r2, fp
 8008f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 80a1 	beq.w	8009058 <_vfiprintf_r+0x1f0>
 8008f16:	2300      	movs	r3, #0
 8008f18:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f20:	f10a 0a01 	add.w	sl, sl, #1
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	9307      	str	r3, [sp, #28]
 8008f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f2e:	4654      	mov	r4, sl
 8008f30:	2205      	movs	r2, #5
 8008f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f36:	4854      	ldr	r0, [pc, #336]	; (8009088 <_vfiprintf_r+0x220>)
 8008f38:	f7f7 f952 	bl	80001e0 <memchr>
 8008f3c:	9a04      	ldr	r2, [sp, #16]
 8008f3e:	b9d8      	cbnz	r0, 8008f78 <_vfiprintf_r+0x110>
 8008f40:	06d1      	lsls	r1, r2, #27
 8008f42:	bf44      	itt	mi
 8008f44:	2320      	movmi	r3, #32
 8008f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4a:	0713      	lsls	r3, r2, #28
 8008f4c:	bf44      	itt	mi
 8008f4e:	232b      	movmi	r3, #43	; 0x2b
 8008f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f54:	f89a 3000 	ldrb.w	r3, [sl]
 8008f58:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5a:	d015      	beq.n	8008f88 <_vfiprintf_r+0x120>
 8008f5c:	9a07      	ldr	r2, [sp, #28]
 8008f5e:	4654      	mov	r4, sl
 8008f60:	2000      	movs	r0, #0
 8008f62:	f04f 0c0a 	mov.w	ip, #10
 8008f66:	4621      	mov	r1, r4
 8008f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f6c:	3b30      	subs	r3, #48	; 0x30
 8008f6e:	2b09      	cmp	r3, #9
 8008f70:	d94d      	bls.n	800900e <_vfiprintf_r+0x1a6>
 8008f72:	b1b0      	cbz	r0, 8008fa2 <_vfiprintf_r+0x13a>
 8008f74:	9207      	str	r2, [sp, #28]
 8008f76:	e014      	b.n	8008fa2 <_vfiprintf_r+0x13a>
 8008f78:	eba0 0308 	sub.w	r3, r0, r8
 8008f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f80:	4313      	orrs	r3, r2
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	46a2      	mov	sl, r4
 8008f86:	e7d2      	b.n	8008f2e <_vfiprintf_r+0xc6>
 8008f88:	9b03      	ldr	r3, [sp, #12]
 8008f8a:	1d19      	adds	r1, r3, #4
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	9103      	str	r1, [sp, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	bfbb      	ittet	lt
 8008f94:	425b      	neglt	r3, r3
 8008f96:	f042 0202 	orrlt.w	r2, r2, #2
 8008f9a:	9307      	strge	r3, [sp, #28]
 8008f9c:	9307      	strlt	r3, [sp, #28]
 8008f9e:	bfb8      	it	lt
 8008fa0:	9204      	strlt	r2, [sp, #16]
 8008fa2:	7823      	ldrb	r3, [r4, #0]
 8008fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa6:	d10c      	bne.n	8008fc2 <_vfiprintf_r+0x15a>
 8008fa8:	7863      	ldrb	r3, [r4, #1]
 8008faa:	2b2a      	cmp	r3, #42	; 0x2a
 8008fac:	d134      	bne.n	8009018 <_vfiprintf_r+0x1b0>
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	1d1a      	adds	r2, r3, #4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	9203      	str	r2, [sp, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	bfb8      	it	lt
 8008fba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fbe:	3402      	adds	r4, #2
 8008fc0:	9305      	str	r3, [sp, #20]
 8008fc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009098 <_vfiprintf_r+0x230>
 8008fc6:	7821      	ldrb	r1, [r4, #0]
 8008fc8:	2203      	movs	r2, #3
 8008fca:	4650      	mov	r0, sl
 8008fcc:	f7f7 f908 	bl	80001e0 <memchr>
 8008fd0:	b138      	cbz	r0, 8008fe2 <_vfiprintf_r+0x17a>
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	eba0 000a 	sub.w	r0, r0, sl
 8008fd8:	2240      	movs	r2, #64	; 0x40
 8008fda:	4082      	lsls	r2, r0
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	3401      	adds	r4, #1
 8008fe0:	9304      	str	r3, [sp, #16]
 8008fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe6:	4829      	ldr	r0, [pc, #164]	; (800908c <_vfiprintf_r+0x224>)
 8008fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fec:	2206      	movs	r2, #6
 8008fee:	f7f7 f8f7 	bl	80001e0 <memchr>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d03f      	beq.n	8009076 <_vfiprintf_r+0x20e>
 8008ff6:	4b26      	ldr	r3, [pc, #152]	; (8009090 <_vfiprintf_r+0x228>)
 8008ff8:	bb1b      	cbnz	r3, 8009042 <_vfiprintf_r+0x1da>
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	3307      	adds	r3, #7
 8008ffe:	f023 0307 	bic.w	r3, r3, #7
 8009002:	3308      	adds	r3, #8
 8009004:	9303      	str	r3, [sp, #12]
 8009006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009008:	443b      	add	r3, r7
 800900a:	9309      	str	r3, [sp, #36]	; 0x24
 800900c:	e768      	b.n	8008ee0 <_vfiprintf_r+0x78>
 800900e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009012:	460c      	mov	r4, r1
 8009014:	2001      	movs	r0, #1
 8009016:	e7a6      	b.n	8008f66 <_vfiprintf_r+0xfe>
 8009018:	2300      	movs	r3, #0
 800901a:	3401      	adds	r4, #1
 800901c:	9305      	str	r3, [sp, #20]
 800901e:	4619      	mov	r1, r3
 8009020:	f04f 0c0a 	mov.w	ip, #10
 8009024:	4620      	mov	r0, r4
 8009026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800902a:	3a30      	subs	r2, #48	; 0x30
 800902c:	2a09      	cmp	r2, #9
 800902e:	d903      	bls.n	8009038 <_vfiprintf_r+0x1d0>
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0c6      	beq.n	8008fc2 <_vfiprintf_r+0x15a>
 8009034:	9105      	str	r1, [sp, #20]
 8009036:	e7c4      	b.n	8008fc2 <_vfiprintf_r+0x15a>
 8009038:	fb0c 2101 	mla	r1, ip, r1, r2
 800903c:	4604      	mov	r4, r0
 800903e:	2301      	movs	r3, #1
 8009040:	e7f0      	b.n	8009024 <_vfiprintf_r+0x1bc>
 8009042:	ab03      	add	r3, sp, #12
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	462a      	mov	r2, r5
 8009048:	4b12      	ldr	r3, [pc, #72]	; (8009094 <_vfiprintf_r+0x22c>)
 800904a:	a904      	add	r1, sp, #16
 800904c:	4630      	mov	r0, r6
 800904e:	f7fb fe5f 	bl	8004d10 <_printf_float>
 8009052:	4607      	mov	r7, r0
 8009054:	1c78      	adds	r0, r7, #1
 8009056:	d1d6      	bne.n	8009006 <_vfiprintf_r+0x19e>
 8009058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800905a:	07d9      	lsls	r1, r3, #31
 800905c:	d405      	bmi.n	800906a <_vfiprintf_r+0x202>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	059a      	lsls	r2, r3, #22
 8009062:	d402      	bmi.n	800906a <_vfiprintf_r+0x202>
 8009064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009066:	f7fc fdba 	bl	8005bde <__retarget_lock_release_recursive>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	065b      	lsls	r3, r3, #25
 800906e:	f53f af1d 	bmi.w	8008eac <_vfiprintf_r+0x44>
 8009072:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009074:	e71c      	b.n	8008eb0 <_vfiprintf_r+0x48>
 8009076:	ab03      	add	r3, sp, #12
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	462a      	mov	r2, r5
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <_vfiprintf_r+0x22c>)
 800907e:	a904      	add	r1, sp, #16
 8009080:	4630      	mov	r0, r6
 8009082:	f7fc f8e9 	bl	8005258 <_printf_i>
 8009086:	e7e4      	b.n	8009052 <_vfiprintf_r+0x1ea>
 8009088:	08009709 	.word	0x08009709
 800908c:	08009713 	.word	0x08009713
 8009090:	08004d11 	.word	0x08004d11
 8009094:	08008e45 	.word	0x08008e45
 8009098:	0800970f 	.word	0x0800970f

0800909c <__swbuf_r>:
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	460e      	mov	r6, r1
 80090a0:	4614      	mov	r4, r2
 80090a2:	4605      	mov	r5, r0
 80090a4:	b118      	cbz	r0, 80090ae <__swbuf_r+0x12>
 80090a6:	6a03      	ldr	r3, [r0, #32]
 80090a8:	b90b      	cbnz	r3, 80090ae <__swbuf_r+0x12>
 80090aa:	f7fc fc81 	bl	80059b0 <__sinit>
 80090ae:	69a3      	ldr	r3, [r4, #24]
 80090b0:	60a3      	str	r3, [r4, #8]
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	071a      	lsls	r2, r3, #28
 80090b6:	d525      	bpl.n	8009104 <__swbuf_r+0x68>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	b31b      	cbz	r3, 8009104 <__swbuf_r+0x68>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	6922      	ldr	r2, [r4, #16]
 80090c0:	1a98      	subs	r0, r3, r2
 80090c2:	6963      	ldr	r3, [r4, #20]
 80090c4:	b2f6      	uxtb	r6, r6
 80090c6:	4283      	cmp	r3, r0
 80090c8:	4637      	mov	r7, r6
 80090ca:	dc04      	bgt.n	80090d6 <__swbuf_r+0x3a>
 80090cc:	4621      	mov	r1, r4
 80090ce:	4628      	mov	r0, r5
 80090d0:	f7ff fa2a 	bl	8008528 <_fflush_r>
 80090d4:	b9e0      	cbnz	r0, 8009110 <__swbuf_r+0x74>
 80090d6:	68a3      	ldr	r3, [r4, #8]
 80090d8:	3b01      	subs	r3, #1
 80090da:	60a3      	str	r3, [r4, #8]
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	6022      	str	r2, [r4, #0]
 80090e2:	701e      	strb	r6, [r3, #0]
 80090e4:	6962      	ldr	r2, [r4, #20]
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d004      	beq.n	80090f6 <__swbuf_r+0x5a>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	07db      	lsls	r3, r3, #31
 80090f0:	d506      	bpl.n	8009100 <__swbuf_r+0x64>
 80090f2:	2e0a      	cmp	r6, #10
 80090f4:	d104      	bne.n	8009100 <__swbuf_r+0x64>
 80090f6:	4621      	mov	r1, r4
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7ff fa15 	bl	8008528 <_fflush_r>
 80090fe:	b938      	cbnz	r0, 8009110 <__swbuf_r+0x74>
 8009100:	4638      	mov	r0, r7
 8009102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009104:	4621      	mov	r1, r4
 8009106:	4628      	mov	r0, r5
 8009108:	f000 f806 	bl	8009118 <__swsetup_r>
 800910c:	2800      	cmp	r0, #0
 800910e:	d0d5      	beq.n	80090bc <__swbuf_r+0x20>
 8009110:	f04f 37ff 	mov.w	r7, #4294967295
 8009114:	e7f4      	b.n	8009100 <__swbuf_r+0x64>
	...

08009118 <__swsetup_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4b2a      	ldr	r3, [pc, #168]	; (80091c4 <__swsetup_r+0xac>)
 800911c:	4605      	mov	r5, r0
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	460c      	mov	r4, r1
 8009122:	b118      	cbz	r0, 800912c <__swsetup_r+0x14>
 8009124:	6a03      	ldr	r3, [r0, #32]
 8009126:	b90b      	cbnz	r3, 800912c <__swsetup_r+0x14>
 8009128:	f7fc fc42 	bl	80059b0 <__sinit>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009132:	0718      	lsls	r0, r3, #28
 8009134:	d422      	bmi.n	800917c <__swsetup_r+0x64>
 8009136:	06d9      	lsls	r1, r3, #27
 8009138:	d407      	bmi.n	800914a <__swsetup_r+0x32>
 800913a:	2309      	movs	r3, #9
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	e034      	b.n	80091b4 <__swsetup_r+0x9c>
 800914a:	0758      	lsls	r0, r3, #29
 800914c:	d512      	bpl.n	8009174 <__swsetup_r+0x5c>
 800914e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009150:	b141      	cbz	r1, 8009164 <__swsetup_r+0x4c>
 8009152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009156:	4299      	cmp	r1, r3
 8009158:	d002      	beq.n	8009160 <__swsetup_r+0x48>
 800915a:	4628      	mov	r0, r5
 800915c:	f7fd fbc2 	bl	80068e4 <_free_r>
 8009160:	2300      	movs	r3, #0
 8009162:	6363      	str	r3, [r4, #52]	; 0x34
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	2300      	movs	r3, #0
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	6923      	ldr	r3, [r4, #16]
 8009172:	6023      	str	r3, [r4, #0]
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f043 0308 	orr.w	r3, r3, #8
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	6923      	ldr	r3, [r4, #16]
 800917e:	b94b      	cbnz	r3, 8009194 <__swsetup_r+0x7c>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800918a:	d003      	beq.n	8009194 <__swsetup_r+0x7c>
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f884 	bl	800929c <__smakebuf_r>
 8009194:	89a0      	ldrh	r0, [r4, #12]
 8009196:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800919a:	f010 0301 	ands.w	r3, r0, #1
 800919e:	d00a      	beq.n	80091b6 <__swsetup_r+0x9e>
 80091a0:	2300      	movs	r3, #0
 80091a2:	60a3      	str	r3, [r4, #8]
 80091a4:	6963      	ldr	r3, [r4, #20]
 80091a6:	425b      	negs	r3, r3
 80091a8:	61a3      	str	r3, [r4, #24]
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	b943      	cbnz	r3, 80091c0 <__swsetup_r+0xa8>
 80091ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091b2:	d1c4      	bne.n	800913e <__swsetup_r+0x26>
 80091b4:	bd38      	pop	{r3, r4, r5, pc}
 80091b6:	0781      	lsls	r1, r0, #30
 80091b8:	bf58      	it	pl
 80091ba:	6963      	ldrpl	r3, [r4, #20]
 80091bc:	60a3      	str	r3, [r4, #8]
 80091be:	e7f4      	b.n	80091aa <__swsetup_r+0x92>
 80091c0:	2000      	movs	r0, #0
 80091c2:	e7f7      	b.n	80091b4 <__swsetup_r+0x9c>
 80091c4:	20000064 	.word	0x20000064

080091c8 <_raise_r>:
 80091c8:	291f      	cmp	r1, #31
 80091ca:	b538      	push	{r3, r4, r5, lr}
 80091cc:	4604      	mov	r4, r0
 80091ce:	460d      	mov	r5, r1
 80091d0:	d904      	bls.n	80091dc <_raise_r+0x14>
 80091d2:	2316      	movs	r3, #22
 80091d4:	6003      	str	r3, [r0, #0]
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80091de:	b112      	cbz	r2, 80091e6 <_raise_r+0x1e>
 80091e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091e4:	b94b      	cbnz	r3, 80091fa <_raise_r+0x32>
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 f830 	bl	800924c <_getpid_r>
 80091ec:	462a      	mov	r2, r5
 80091ee:	4601      	mov	r1, r0
 80091f0:	4620      	mov	r0, r4
 80091f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091f6:	f000 b817 	b.w	8009228 <_kill_r>
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d00a      	beq.n	8009214 <_raise_r+0x4c>
 80091fe:	1c59      	adds	r1, r3, #1
 8009200:	d103      	bne.n	800920a <_raise_r+0x42>
 8009202:	2316      	movs	r3, #22
 8009204:	6003      	str	r3, [r0, #0]
 8009206:	2001      	movs	r0, #1
 8009208:	e7e7      	b.n	80091da <_raise_r+0x12>
 800920a:	2400      	movs	r4, #0
 800920c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009210:	4628      	mov	r0, r5
 8009212:	4798      	blx	r3
 8009214:	2000      	movs	r0, #0
 8009216:	e7e0      	b.n	80091da <_raise_r+0x12>

08009218 <raise>:
 8009218:	4b02      	ldr	r3, [pc, #8]	; (8009224 <raise+0xc>)
 800921a:	4601      	mov	r1, r0
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	f7ff bfd3 	b.w	80091c8 <_raise_r>
 8009222:	bf00      	nop
 8009224:	20000064 	.word	0x20000064

08009228 <_kill_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d07      	ldr	r5, [pc, #28]	; (8009248 <_kill_r+0x20>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	4611      	mov	r1, r2
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	f7f8 f88d 	bl	8001354 <_kill>
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	d102      	bne.n	8009244 <_kill_r+0x1c>
 800923e:	682b      	ldr	r3, [r5, #0]
 8009240:	b103      	cbz	r3, 8009244 <_kill_r+0x1c>
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	bd38      	pop	{r3, r4, r5, pc}
 8009246:	bf00      	nop
 8009248:	200003d4 	.word	0x200003d4

0800924c <_getpid_r>:
 800924c:	f7f8 b87a 	b.w	8001344 <_getpid>

08009250 <__swhatbuf_r>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	460c      	mov	r4, r1
 8009254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009258:	2900      	cmp	r1, #0
 800925a:	b096      	sub	sp, #88	; 0x58
 800925c:	4615      	mov	r5, r2
 800925e:	461e      	mov	r6, r3
 8009260:	da0d      	bge.n	800927e <__swhatbuf_r+0x2e>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009268:	f04f 0100 	mov.w	r1, #0
 800926c:	bf0c      	ite	eq
 800926e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009272:	2340      	movne	r3, #64	; 0x40
 8009274:	2000      	movs	r0, #0
 8009276:	6031      	str	r1, [r6, #0]
 8009278:	602b      	str	r3, [r5, #0]
 800927a:	b016      	add	sp, #88	; 0x58
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	466a      	mov	r2, sp
 8009280:	f000 f848 	bl	8009314 <_fstat_r>
 8009284:	2800      	cmp	r0, #0
 8009286:	dbec      	blt.n	8009262 <__swhatbuf_r+0x12>
 8009288:	9901      	ldr	r1, [sp, #4]
 800928a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800928e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009292:	4259      	negs	r1, r3
 8009294:	4159      	adcs	r1, r3
 8009296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929a:	e7eb      	b.n	8009274 <__swhatbuf_r+0x24>

0800929c <__smakebuf_r>:
 800929c:	898b      	ldrh	r3, [r1, #12]
 800929e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092a0:	079d      	lsls	r5, r3, #30
 80092a2:	4606      	mov	r6, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	d507      	bpl.n	80092b8 <__smakebuf_r+0x1c>
 80092a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	2301      	movs	r3, #1
 80092b2:	6163      	str	r3, [r4, #20]
 80092b4:	b002      	add	sp, #8
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	ab01      	add	r3, sp, #4
 80092ba:	466a      	mov	r2, sp
 80092bc:	f7ff ffc8 	bl	8009250 <__swhatbuf_r>
 80092c0:	9900      	ldr	r1, [sp, #0]
 80092c2:	4605      	mov	r5, r0
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7fd fb81 	bl	80069cc <_malloc_r>
 80092ca:	b948      	cbnz	r0, 80092e0 <__smakebuf_r+0x44>
 80092cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d0:	059a      	lsls	r2, r3, #22
 80092d2:	d4ef      	bmi.n	80092b4 <__smakebuf_r+0x18>
 80092d4:	f023 0303 	bic.w	r3, r3, #3
 80092d8:	f043 0302 	orr.w	r3, r3, #2
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	e7e3      	b.n	80092a8 <__smakebuf_r+0xc>
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	6020      	str	r0, [r4, #0]
 80092e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	9b00      	ldr	r3, [sp, #0]
 80092ec:	6163      	str	r3, [r4, #20]
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	6120      	str	r0, [r4, #16]
 80092f2:	b15b      	cbz	r3, 800930c <__smakebuf_r+0x70>
 80092f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092f8:	4630      	mov	r0, r6
 80092fa:	f000 f81d 	bl	8009338 <_isatty_r>
 80092fe:	b128      	cbz	r0, 800930c <__smakebuf_r+0x70>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	431d      	orrs	r5, r3
 8009310:	81a5      	strh	r5, [r4, #12]
 8009312:	e7cf      	b.n	80092b4 <__smakebuf_r+0x18>

08009314 <_fstat_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d07      	ldr	r5, [pc, #28]	; (8009334 <_fstat_r+0x20>)
 8009318:	2300      	movs	r3, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	4611      	mov	r1, r2
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	f7f8 f876 	bl	8001412 <_fstat>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	d102      	bne.n	8009330 <_fstat_r+0x1c>
 800932a:	682b      	ldr	r3, [r5, #0]
 800932c:	b103      	cbz	r3, 8009330 <_fstat_r+0x1c>
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	bf00      	nop
 8009334:	200003d4 	.word	0x200003d4

08009338 <_isatty_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d06      	ldr	r5, [pc, #24]	; (8009354 <_isatty_r+0x1c>)
 800933c:	2300      	movs	r3, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7f8 f875 	bl	8001432 <_isatty>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_isatty_r+0x1a>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_isatty_r+0x1a>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	200003d4 	.word	0x200003d4

08009358 <_init>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr

08009364 <_fini>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	bf00      	nop
 8009368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936a:	bc08      	pop	{r3}
 800936c:	469e      	mov	lr, r3
 800936e:	4770      	bx	lr
