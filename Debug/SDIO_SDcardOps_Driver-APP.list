
SDIO_SDcardOps_Driver-APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800bfb0  0800bfb0  0001bfb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5e8  0800c5e8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5e8  0800c5e8  0001c5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5f0  0800c5f0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5f0  0800c5f0  0001c5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5f4  0800c5f4  0001c5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002568  200001d8  0800c7d0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002740  0800c7d0  00022740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d06c  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a9  00000000  00000000  0002d2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000937  00000000  00000000  000306c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001897c  00000000  00000000  00030ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f64  00000000  00000000  00049973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b5f0  00000000  00000000  0005a8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000463c  00000000  00000000  000e5ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000ea504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf98 	.word	0x0800bf98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800bf98 	.word	0x0800bf98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <SD_FillVariables>:
//We create a buffer that contains satellite's carrier variables. We fill it by SD_Data objects variables
char* SdDatasBuf[LineSize];



void SD_FillVariables(void){
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	b09b      	sub	sp, #108	; 0x6c
 8001006:	af12      	add	r7, sp, #72	; 0x48

    	SD_Data.Carr_Pressure = 101325.12;  // there will be "MS5611_Press" instead of "101325.12"
 8001008:	4b42      	ldr	r3, [pc, #264]	; (8001114 <SD_FillVariables+0x114>)
 800100a:	4a43      	ldr	r2, [pc, #268]	; (8001118 <SD_FillVariables+0x118>)
 800100c:	601a      	str	r2, [r3, #0]
    	SD_Data.Carr_Temperature = 32.78;
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <SD_FillVariables+0x114>)
 8001010:	4a42      	ldr	r2, [pc, #264]	; (800111c <SD_FillVariables+0x11c>)
 8001012:	60da      	str	r2, [r3, #12]
    	SD_Data.Carr_VertHeight = 1500.45;
 8001014:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <SD_FillVariables+0x114>)
 8001016:	4a42      	ldr	r2, [pc, #264]	; (8001120 <SD_FillVariables+0x120>)
 8001018:	609a      	str	r2, [r3, #8]
    	SD_Data.Carr_VertSpeed = 200.44;
 800101a:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <SD_FillVariables+0x114>)
 800101c:	4a41      	ldr	r2, [pc, #260]	; (8001124 <SD_FillVariables+0x124>)
 800101e:	605a      	str	r2, [r3, #4]

    	SD_Data.Carr_GPS_Latitude = 89.912109;
 8001020:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <SD_FillVariables+0x114>)
 8001022:	4a41      	ldr	r2, [pc, #260]	; (8001128 <SD_FillVariables+0x128>)
 8001024:	615a      	str	r2, [r3, #20]
    	SD_Data.Carr_GPS_Longitude = 89.0203478;
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <SD_FillVariables+0x114>)
 8001028:	4a40      	ldr	r2, [pc, #256]	; (800112c <SD_FillVariables+0x12c>)
 800102a:	619a      	str	r2, [r3, #24]
    	SD_Data.Carr_GPS_Altitude = 3000.1585941;
 800102c:	4b39      	ldr	r3, [pc, #228]	; (8001114 <SD_FillVariables+0x114>)
 800102e:	4a40      	ldr	r2, [pc, #256]	; (8001130 <SD_FillVariables+0x130>)
 8001030:	61da      	str	r2, [r3, #28]

    	SD_Data.Carr_Voltage = 8.42;
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <SD_FillVariables+0x114>)
 8001034:	4a3f      	ldr	r2, [pc, #252]	; (8001134 <SD_FillVariables+0x134>)
 8001036:	611a      	str	r2, [r3, #16]
    	SD_Data.Carr_PacketNO = 1256;
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <SD_FillVariables+0x114>)
 800103a:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 800103e:	841a      	strh	r2, [r3, #32]
    	SD_Data.Carr_StatusSeparation = 1;
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <SD_FillVariables+0x114>)
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    	SD_Data.Carr_SuccesSepInf = "Departure unsuccessful";
 8001048:	4b32      	ldr	r3, [pc, #200]	; (8001114 <SD_FillVariables+0x114>)
 800104a:	4a3b      	ldr	r2, [pc, #236]	; (8001138 <SD_FillVariables+0x138>)
 800104c:	625a      	str	r2, [r3, #36]	; 0x24

    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
    	    				  	  	  	  	  	  	  	  	  	  	SD_Data.Carr_PacketNO,SD_Data.Carr_GPS_Latitude,SD_Data.Carr_GPS_Longitude,
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <SD_FillVariables+0x114>)
 8001050:	8c1b      	ldrh	r3, [r3, #32]
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 8001052:	461e      	mov	r6, r3
    	    				  	  	  	  	  	  	  	  	  	  	SD_Data.Carr_PacketNO,SD_Data.Carr_GPS_Latitude,SD_Data.Carr_GPS_Longitude,
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <SD_FillVariables+0x114>)
 8001056:	695b      	ldr	r3, [r3, #20]
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa7d 	bl	8000558 <__aeabi_f2d>
 800105e:	4682      	mov	sl, r0
 8001060:	468b      	mov	fp, r1
    	    				  	  	  	  	  	  	  	  	  	  	SD_Data.Carr_PacketNO,SD_Data.Carr_GPS_Latitude,SD_Data.Carr_GPS_Longitude,
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <SD_FillVariables+0x114>)
 8001064:	699b      	ldr	r3, [r3, #24]
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa76 	bl	8000558 <__aeabi_f2d>
 800106c:	e9c7 0106 	strd	r0, r1, [r7, #24]
    	    														SD_Data.Carr_GPS_Altitude,SD_Data.Carr_Pressure,SD_Data.Carr_Temperature,
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <SD_FillVariables+0x114>)
 8001072:	69db      	ldr	r3, [r3, #28]
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa6f 	bl	8000558 <__aeabi_f2d>
 800107a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    	    														SD_Data.Carr_GPS_Altitude,SD_Data.Carr_Pressure,SD_Data.Carr_Temperature,
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <SD_FillVariables+0x114>)
 8001080:	681b      	ldr	r3, [r3, #0]
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa68 	bl	8000558 <__aeabi_f2d>
 8001088:	e9c7 0102 	strd	r0, r1, [r7, #8]
    	    														SD_Data.Carr_GPS_Altitude,SD_Data.Carr_Pressure,SD_Data.Carr_Temperature,
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <SD_FillVariables+0x114>)
 800108e:	68db      	ldr	r3, [r3, #12]
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa61 	bl	8000558 <__aeabi_f2d>
 8001096:	e9c7 0100 	strd	r0, r1, [r7]
    	    		  												SD_Data.Carr_VertHeight,SD_Data.Carr_VertSpeed,SD_Data.Carr_Voltage,
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <SD_FillVariables+0x114>)
 800109c:	689b      	ldr	r3, [r3, #8]
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa5a 	bl	8000558 <__aeabi_f2d>
 80010a4:	4680      	mov	r8, r0
 80010a6:	4689      	mov	r9, r1
    	    		  												SD_Data.Carr_VertHeight,SD_Data.Carr_VertSpeed,SD_Data.Carr_Voltage,
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <SD_FillVariables+0x114>)
 80010aa:	685b      	ldr	r3, [r3, #4]
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa53 	bl	8000558 <__aeabi_f2d>
 80010b2:	4604      	mov	r4, r0
 80010b4:	460d      	mov	r5, r1
    	    		  												SD_Data.Carr_VertHeight,SD_Data.Carr_VertSpeed,SD_Data.Carr_Voltage,
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <SD_FillVariables+0x114>)
 80010b8:	691b      	ldr	r3, [r3, #16]
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa4c 	bl	8000558 <__aeabi_f2d>
    	    		  												SD_Data.Carr_StatusSeparation,SD_Data.Carr_SuccesSepInf);
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <SD_FillVariables+0x114>)
 80010c2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    	sprintf(SdDatasBuf,"<%d, %.4f, %.4f, %.4f, %.2f, %.2f, %.2f, %.2f, %.2f, %d, %s >\n",
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <SD_FillVariables+0x114>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	9311      	str	r3, [sp, #68]	; 0x44
 80010ce:	9210      	str	r2, [sp, #64]	; 0x40
 80010d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80010d4:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 80010d8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80010dc:	ed97 7b00 	vldr	d7, [r7]
 80010e0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80010e4:	ed97 7b02 	vldr	d7, [r7, #8]
 80010e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80010ec:	ed97 7b04 	vldr	d7, [r7, #16]
 80010f0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80010f4:	ed97 7b06 	vldr	d7, [r7, #24]
 80010f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80010fc:	e9cd ab00 	strd	sl, fp, [sp]
 8001100:	4632      	mov	r2, r6
 8001102:	490e      	ldr	r1, [pc, #56]	; (800113c <SD_FillVariables+0x13c>)
 8001104:	480e      	ldr	r0, [pc, #56]	; (8001140 <SD_FillVariables+0x140>)
 8001106:	f007 faa9 	bl	800865c <siprintf>

}
 800110a:	bf00      	nop
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001114:	2000225c 	.word	0x2000225c
 8001118:	47c5e68f 	.word	0x47c5e68f
 800111c:	42031eb8 	.word	0x42031eb8
 8001120:	44bb8e66 	.word	0x44bb8e66
 8001124:	434870a4 	.word	0x434870a4
 8001128:	42b3d300 	.word	0x42b3d300
 800112c:	42b20a6b 	.word	0x42b20a6b
 8001130:	453b828a 	.word	0x453b828a
 8001134:	4106b852 	.word	0x4106b852
 8001138:	0800c03c 	.word	0x0800c03c
 800113c:	0800c054 	.word	0x0800c054
 8001140:	20002284 	.word	0x20002284

08001144 <SD_Mount>:


FRESULT SD_Mount (const TCHAR* SD_path, BYTE Mount_Op)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]

	SD_result = f_mount(&FATFS_Ob, SD_path, Mount_Op);
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	461a      	mov	r2, r3
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <SD_Mount+0x34>)
 8001158:	f005 fda2 	bl	8006ca0 <f_mount>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <SD_Mount+0x38>)
 8001162:	701a      	strb	r2, [r3, #0]

	if(SD_result != FR_OK){
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SD_Mount+0x38>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d000      	beq.n	800116e <SD_Mount+0x2a>
		/**
		 * Buzzer will be activated like biiip biip bip
		 */
		while(1);
 800116c:	e7fe      	b.n	800116c <SD_Mount+0x28>
	}
	else{

		return FR_OK;
 800116e:	2300      	movs	r3, #0

	}
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200001f4 	.word	0x200001f4
 800117c:	20002258 	.word	0x20002258

08001180 <SD_Create_Dir_File>:


FRESULT SD_Create_Dir_File(const TCHAR* SD_Dir,const TCHAR* SD_FileName,char* SD_Buffer){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]

	SD_result = f_mkdir(SD_Dir);
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f006 f9d5 	bl	800753c <f_mkdir>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <SD_Create_Dir_File+0x84>)
 8001198:	701a      	strb	r2, [r3, #0]

	if((SD_result != FR_OK)&&(SD_result != FR_EXIST)){
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <SD_Create_Dir_File+0x84>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <SD_Create_Dir_File+0x2c>
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <SD_Create_Dir_File+0x84>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d000      	beq.n	80011ac <SD_Create_Dir_File+0x2c>
		/**
		 * Buzzer will be activated like biiip biip bip
		 */
		while(1);
 80011aa:	e7fe      	b.n	80011aa <SD_Create_Dir_File+0x2a>
	}
	else{

		SD_result = f_open(&FilePage, SD_FileName, FA_CREATE_ALWAYS | FA_WRITE);
 80011ac:	220a      	movs	r2, #10
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <SD_Create_Dir_File+0x88>)
 80011b2:	f005 fdbb 	bl	8006d2c <f_open>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <SD_Create_Dir_File+0x84>)
 80011bc:	701a      	strb	r2, [r3, #0]
		SD_result = f_close(&FilePage);
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <SD_Create_Dir_File+0x88>)
 80011c0:	f006 f992 	bl	80074e8 <f_close>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <SD_Create_Dir_File+0x84>)
 80011ca:	701a      	strb	r2, [r3, #0]

		sprintf(SD_Buffer,"%s\n",DataTopFrame);
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <SD_Create_Dir_File+0x8c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	490f      	ldr	r1, [pc, #60]	; (8001210 <SD_Create_Dir_File+0x90>)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f007 fa41 	bl	800865c <siprintf>
		SD_Write(SD_Buffer,"SAT_CAR/STM32.TXT");
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <SD_Create_Dir_File+0x94>)
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f81b 	bl	8001218 <SD_Write>

		if(SD_result != FR_OK){
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <SD_Create_Dir_File+0x84>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d000      	beq.n	80011ec <SD_Create_Dir_File+0x6c>
				/**
				 * Send to ground station error message
			     */
				while(1);
 80011ea:	e7fe      	b.n	80011ea <SD_Create_Dir_File+0x6a>
			}
		SD_result = f_close(&FilePage);
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <SD_Create_Dir_File+0x88>)
 80011ee:	f006 f97b 	bl	80074e8 <f_close>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b03      	ldr	r3, [pc, #12]	; (8001204 <SD_Create_Dir_File+0x84>)
 80011f8:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80011fa:	2300      	movs	r3, #0
	}

}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20002258 	.word	0x20002258
 8001208:	20001228 	.word	0x20001228
 800120c:	20000000 	.word	0x20000000
 8001210:	0800c094 	.word	0x0800c094
 8001214:	0800c098 	.word	0x0800c098

08001218 <SD_Write>:


FRESULT SD_Write(char* SD_Buffer,const TCHAR* SD_FileName){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]

	UINT written;

	SD_result = f_open(&FilePage, SD_FileName, FA_OPEN_APPEND | FA_WRITE);
 8001222:	2232      	movs	r2, #50	; 0x32
 8001224:	6839      	ldr	r1, [r7, #0]
 8001226:	4810      	ldr	r0, [pc, #64]	; (8001268 <SD_Write+0x50>)
 8001228:	f005 fd80 	bl	8006d2c <f_open>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <SD_Write+0x54>)
 8001232:	701a      	strb	r2, [r3, #0]

	SD_result =  f_write(&FilePage,SD_Buffer,strlen(SD_Buffer),&written);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff f823 	bl	8000280 <strlen>
 800123a:	4602      	mov	r2, r0
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4809      	ldr	r0, [pc, #36]	; (8001268 <SD_Write+0x50>)
 8001244:	f005 ff3e 	bl	80070c4 <f_write>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <SD_Write+0x54>)
 800124e:	701a      	strb	r2, [r3, #0]

	SD_result = f_close(&FilePage);
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <SD_Write+0x50>)
 8001252:	f006 f949 	bl	80074e8 <f_close>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SD_Write+0x54>)
 800125c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20001228 	.word	0x20001228
 800126c:	20002258 	.word	0x20002258

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f000 fb98 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f828 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f000 f8d8 	bl	8001430 <MX_GPIO_Init>
  MX_DMA_Init();
 8001280:	f000 f8ae 	bl	80013e0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001284:	f000 f88c 	bl	80013a0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001288:	f003 fcde 	bl	8004c48 <MX_FATFS_Init>

	  //We create a buffer that contains satellite's carrier variables. We fill it by SD_Data objects variables
	  extern char SdDatasBuf[LineSize];

      //you can not write "E:" , "e:",  "e\"
      SD_Mount ("E/",0);
 800128c:	2100      	movs	r1, #0
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <main+0x4c>)
 8001290:	f7ff ff58 	bl	8001144 <SD_Mount>

     //it creates new file as names sub1, KLM, DIR
     //if you used small letter the function will reverse the name to big letters
     //"CAR_Raw ==> CAR_RAW(in the sd card module)
      SD_Create_Dir_File("SAT_CAR","SAT_CAR/STM32.TXT",SdDatasBuf);
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <main+0x50>)
 8001296:	490b      	ldr	r1, [pc, #44]	; (80012c4 <main+0x54>)
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <main+0x58>)
 800129a:	f7ff ff71 	bl	8001180 <SD_Create_Dir_File>

      /********** SD_CARD_OPS INITIALIZE PART END **********/

      //These functions will be written in the loop after all datas collected
      SD_FillVariables();
 800129e:	f7ff feaf 	bl	8001000 <SD_FillVariables>
	  SD_Write(SdDatasBuf,"SAT_CAR/STM32.TXT");
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <main+0x54>)
 80012a4:	4806      	ldr	r0, [pc, #24]	; (80012c0 <main+0x50>)
 80012a6:	f7ff ffb7 	bl	8001218 <SD_Write>
	  SD_Write(SdDatasBuf,"SAT_CAR/STM32.TXT");
 80012aa:	4906      	ldr	r1, [pc, #24]	; (80012c4 <main+0x54>)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <main+0x50>)
 80012ae:	f7ff ffb3 	bl	8001218 <SD_Write>
	  SD_Write(SdDatasBuf,"SAT_CAR/STM32.TXT");
 80012b2:	4904      	ldr	r1, [pc, #16]	; (80012c4 <main+0x54>)
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <main+0x50>)
 80012b6:	f7ff ffaf 	bl	8001218 <SD_Write>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <main+0x4a>
 80012bc:	0800c0ac 	.word	0x0800c0ac
 80012c0:	20002284 	.word	0x20002284
 80012c4:	0800c0b0 	.word	0x0800c0b0
 80012c8:	0800c0c4 	.word	0x0800c0c4

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	; 0x50
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	2230      	movs	r2, #48	; 0x30
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 fa21 	bl	8008722 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <SystemClock_Config+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <SystemClock_Config+0xcc>)
 80012fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <SystemClock_Config+0xcc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <SystemClock_Config+0xd0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <SystemClock_Config+0xd0>)
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <SystemClock_Config+0xd0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2301      	movs	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001336:	2302      	movs	r3, #2
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001340:	230f      	movs	r3, #15
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001344:	2390      	movs	r3, #144	; 0x90
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001348:	2304      	movs	r3, #4
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800134c:	2305      	movs	r3, #5
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f9f1 	bl	800273c <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001360:	f000 f8aa 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2302      	movs	r3, #2
 800136a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2101      	movs	r1, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fc53 	bl	8002c2c <HAL_RCC_ClockConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800138c:	f000 f894 	bl	80014b8 <Error_Handler>
  }
}
 8001390:	bf00      	nop
 8001392:	3750      	adds	r7, #80	; 0x50
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_SDIO_SD_Init+0x38>)
 80013a6:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <MX_SDIO_SD_Init+0x3c>)
 80013a8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_SDIO_SD_Init+0x38>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_SDIO_SD_Init+0x38>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_SDIO_SD_Init+0x38>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_SDIO_SD_Init+0x38>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <MX_SDIO_SD_Init+0x38>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <MX_SDIO_SD_Init+0x38>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20002464 	.word	0x20002464
 80013dc:	40012c00 	.word	0x40012c00

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_DMA_Init+0x4c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <MX_DMA_Init+0x4c>)
 80013f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_DMA_Init+0x4c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	203b      	movs	r0, #59	; 0x3b
 8001408:	f000 fc3f 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800140c:	203b      	movs	r0, #59	; 0x3b
 800140e:	f000 fc58 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2045      	movs	r0, #69	; 0x45
 8001418:	f000 fc37 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800141c:	2045      	movs	r0, #69	; 0x45
 800141e:	f000 fc50 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_GPIO_Init+0x84>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <MX_GPIO_Init+0x84>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_GPIO_Init+0x84>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_GPIO_Init+0x84>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <MX_GPIO_Init+0x84>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_GPIO_Init+0x84>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_GPIO_Init+0x84>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <MX_GPIO_Init+0x84>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <MX_GPIO_Init+0x84>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_GPIO_Init+0x84>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <MX_GPIO_Init+0x84>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_GPIO_Init+0x84>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>
	...

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_MspInit+0x4c>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x4c>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a70      	ldr	r2, [pc, #448]	; (80016f4 <HAL_SD_MspInit+0x1e0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	f040 80da 	bne.w	80016ec <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <HAL_SD_MspInit+0x1e4>)
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	4a6d      	ldr	r2, [pc, #436]	; (80016f8 <HAL_SD_MspInit+0x1e4>)
 8001542:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001546:	6453      	str	r3, [r2, #68]	; 0x44
 8001548:	4b6b      	ldr	r3, [pc, #428]	; (80016f8 <HAL_SD_MspInit+0x1e4>)
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b67      	ldr	r3, [pc, #412]	; (80016f8 <HAL_SD_MspInit+0x1e4>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	4a66      	ldr	r2, [pc, #408]	; (80016f8 <HAL_SD_MspInit+0x1e4>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6313      	str	r3, [r2, #48]	; 0x30
 8001564:	4b64      	ldr	r3, [pc, #400]	; (80016f8 <HAL_SD_MspInit+0x1e4>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	4b60      	ldr	r3, [pc, #384]	; (80016f8 <HAL_SD_MspInit+0x1e4>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	4a5f      	ldr	r2, [pc, #380]	; (80016f8 <HAL_SD_MspInit+0x1e4>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6313      	str	r3, [r2, #48]	; 0x30
 8001580:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <HAL_SD_MspInit+0x1e4>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800159e:	230c      	movs	r3, #12
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4854      	ldr	r0, [pc, #336]	; (80016fc <HAL_SD_MspInit+0x1e8>)
 80015aa:	f000 ff43 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015c0:	230c      	movs	r3, #12
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	484c      	ldr	r0, [pc, #304]	; (80016fc <HAL_SD_MspInit+0x1e8>)
 80015cc:	f000 ff32 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015d0:	2304      	movs	r3, #4
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015e0:	230c      	movs	r3, #12
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4845      	ldr	r0, [pc, #276]	; (8001700 <HAL_SD_MspInit+0x1ec>)
 80015ec:	f000 ff22 	bl	8002434 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80015f0:	4b44      	ldr	r3, [pc, #272]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 80015f2:	4a45      	ldr	r2, [pc, #276]	; (8001708 <HAL_SD_MspInit+0x1f4>)
 80015f4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80015f6:	4b43      	ldr	r3, [pc, #268]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 80015f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015fc:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001604:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 800160c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001610:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 8001614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001618:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 800161c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001620:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001622:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 8001624:	2220      	movs	r2, #32
 8001626:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 8001630:	2204      	movs	r2, #4
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001634:	4b33      	ldr	r3, [pc, #204]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 8001636:	2203      	movs	r2, #3
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 800163c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 8001644:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800164a:	482e      	ldr	r0, [pc, #184]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 800164c:	f000 fb54 	bl	8001cf8 <HAL_DMA_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001656:	f7ff ff2f 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
 8001660:	4a28      	ldr	r2, [pc, #160]	; (8001704 <HAL_SD_MspInit+0x1f0>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_SD_MspInit+0x1f8>)
 8001668:	4a29      	ldr	r2, [pc, #164]	; (8001710 <HAL_SD_MspInit+0x1fc>)
 800166a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_SD_MspInit+0x1f8>)
 800166e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001672:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_SD_MspInit+0x1f8>)
 8001676:	2240      	movs	r2, #64	; 0x40
 8001678:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_SD_MspInit+0x1f8>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_SD_MspInit+0x1f8>)
 8001682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001686:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_SD_MspInit+0x1f8>)
 800168a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_SD_MspInit+0x1f8>)
 8001692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001696:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_SD_MspInit+0x1f8>)
 800169a:	2220      	movs	r2, #32
 800169c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_SD_MspInit+0x1f8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_SD_MspInit+0x1f8>)
 80016a6:	2204      	movs	r2, #4
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_SD_MspInit+0x1f8>)
 80016ac:	2203      	movs	r2, #3
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_SD_MspInit+0x1f8>)
 80016b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_SD_MspInit+0x1f8>)
 80016ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80016c0:	4812      	ldr	r0, [pc, #72]	; (800170c <HAL_SD_MspInit+0x1f8>)
 80016c2:	f000 fb19 	bl	8001cf8 <HAL_DMA_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80016cc:	f7ff fef4 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_SD_MspInit+0x1f8>)
 80016d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80016d6:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_SD_MspInit+0x1f8>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	2031      	movs	r0, #49	; 0x31
 80016e2:	f000 fad2 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80016e6:	2031      	movs	r0, #49	; 0x31
 80016e8:	f000 faeb 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020800 	.word	0x40020800
 8001700:	40020c00 	.word	0x40020c00
 8001704:	200024e8 	.word	0x200024e8
 8001708:	40026458 	.word	0x40026458
 800170c:	20002548 	.word	0x20002548
 8001710:	400264a0 	.word	0x400264a0

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f974 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <SDIO_IRQHandler+0x10>)
 800176e:	f001 fe81 	bl	8003474 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20002464 	.word	0x20002464

0800177c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA2_Stream3_IRQHandler+0x10>)
 8001782:	f000 fbe1 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200024e8 	.word	0x200024e8

08001790 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <DMA2_Stream6_IRQHandler+0x10>)
 8001796:	f000 fbd7 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20002548 	.word	0x20002548

080017a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return 1;
 80017a8:	2301      	movs	r3, #1
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <_kill>:

int _kill(int pid, int sig)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017be:	f007 f803 	bl	80087c8 <__errno>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2216      	movs	r2, #22
 80017c6:	601a      	str	r2, [r3, #0]
  return -1;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_exit>:

void _exit (int status)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ffe7 	bl	80017b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017e6:	e7fe      	b.n	80017e6 <_exit+0x12>

080017e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e00a      	b.n	8001810 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fa:	f3af 8000 	nop.w
 80017fe:	4601      	mov	r1, r0
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf0      	blt.n	80017fa <_read+0x12>
  }

  return len;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e009      	b.n	8001848 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbf1      	blt.n	8001834 <_write+0x12>
  }
  return len;
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_close>:

int _close(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001882:	605a      	str	r2, [r3, #4]
  return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <_isatty>:

int _isatty(int file)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <_sbrk+0x5c>)
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <_sbrk+0x60>)
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <_sbrk+0x64>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <_sbrk+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f4:	f006 ff68 	bl	80087c8 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	220c      	movs	r2, #12
 80018fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	e009      	b.n	8001918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <_sbrk+0x64>)
 8001914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20010000 	.word	0x20010000
 8001924:	00000800 	.word	0x00000800
 8001928:	200025a8 	.word	0x200025a8
 800192c:	20002740 	.word	0x20002740

08001930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <SystemInit+0x20>)
 8001936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <SystemInit+0x20>)
 800193c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800198c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800195a:	490e      	ldr	r1, [pc, #56]	; (8001994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800195c:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001970:	4c0b      	ldr	r4, [pc, #44]	; (80019a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800197e:	f7ff ffd7 	bl	8001930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001982:	f006 ff27 	bl	80087d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001986:	f7ff fc73 	bl	8001270 <main>
  bx  lr    
 800198a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001998:	0800c5f8 	.word	0x0800c5f8
  ldr r2, =_sbss
 800199c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019a0:	20002740 	.word	0x20002740

080019a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_Init+0x40>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_Init+0x40>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_Init+0x40>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f94f 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	200f      	movs	r0, #15
 80019d8:	f000 f808 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff fd72 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f967 	bl	8001cde <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f92f 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000004 	.word	0x20000004
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	20000008 	.word	0x20000008

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x20>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x24>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_IncTick+0x24>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	200025ac 	.word	0x200025ac

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	200025ac 	.word	0x200025ac

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff ffee 	bl	8001a74 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <__NVIC_EnableIRQ+0x38>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff29 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff3e 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff31 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffa2 	bl	8001c30 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff feb6 	bl	8001a74 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e099      	b.n	8001e48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d34:	e00f      	b.n	8001d56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d36:	f7ff fe9d 	bl	8001a74 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d908      	bls.n	8001d56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e078      	b.n	8001e48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e8      	bne.n	8001d36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_DMA_Init+0x158>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d107      	bne.n	8001dc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4313      	orrs	r3, r2
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f023 0307 	bic.w	r3, r3, #7
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d117      	bne.n	8001e1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00e      	beq.n	8001e1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fa9d 	bl	800233c <DMA_CheckFifoParam>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2240      	movs	r2, #64	; 0x40
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e16:	2301      	movs	r3, #1
 8001e18:	e016      	b.n	8001e48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fa54 	bl	80022d0 <DMA_CalcBaseAndBitshift>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	223f      	movs	r2, #63	; 0x3f
 8001e32:	409a      	lsls	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	f010803f 	.word	0xf010803f

08001e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_DMA_Start_IT+0x26>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e040      	b.n	8001efc <HAL_DMA_Start_IT+0xa8>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d12f      	bne.n	8001eee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f9e6 	bl	8002274 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	223f      	movs	r2, #63	; 0x3f
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0216 	orr.w	r2, r2, #22
 8001ec2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0208 	orr.w	r2, r2, #8
 8001eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e005      	b.n	8001efa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d004      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00c      	b.n	8001f3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2205      	movs	r2, #5
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f54:	4b8e      	ldr	r3, [pc, #568]	; (8002190 <HAL_DMA_IRQHandler+0x248>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a8e      	ldr	r2, [pc, #568]	; (8002194 <HAL_DMA_IRQHandler+0x24c>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2208      	movs	r2, #8
 8001f74:	409a      	lsls	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01a      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2204      	movs	r2, #4
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2204      	movs	r2, #4
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2210      	movs	r2, #16
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d043      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03c      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2210      	movs	r2, #16
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d018      	beq.n	800208a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d024      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e01f      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
 8002088:	e016      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0208 	bic.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2220      	movs	r2, #32
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 808f 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8087 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2220      	movs	r2, #32
 80020e0:	409a      	lsls	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d136      	bne.n	8002160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0216 	bic.w	r2, r2, #22
 8002100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_DMA_IRQHandler+0x1da>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0208 	bic.w	r2, r2, #8
 8002130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	223f      	movs	r2, #63	; 0x3f
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	2b00      	cmp	r3, #0
 8002154:	d07e      	beq.n	8002254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
        }
        return;
 800215e:	e079      	b.n	8002254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01d      	beq.n	80021aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	2b00      	cmp	r3, #0
 8002182:	d031      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e02c      	b.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
 800218e:	bf00      	nop
 8002190:	20000004 	.word	0x20000004
 8002194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e01e      	b.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10f      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0210 	bic.w	r2, r2, #16
 80021c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d032      	beq.n	8002256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d022      	beq.n	8002242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2205      	movs	r2, #5
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3301      	adds	r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	429a      	cmp	r2, r3
 800221e:	d307      	bcc.n	8002230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f2      	bne.n	8002214 <HAL_DMA_IRQHandler+0x2cc>
 800222e:	e000      	b.n	8002232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
 8002252:	e000      	b.n	8002256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002254:	bf00      	nop
    }
  }
}
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002290:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	d108      	bne.n	80022b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022b2:	e007      	b.n	80022c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	3b10      	subs	r3, #16
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <DMA_CalcBaseAndBitshift+0x64>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <DMA_CalcBaseAndBitshift+0x68>)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d909      	bls.n	8002312 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	1d1a      	adds	r2, r3, #4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	; 0x58
 8002310:	e007      	b.n	8002322 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	aaaaaaab 	.word	0xaaaaaaab
 8002338:	0800c120 	.word	0x0800c120

0800233c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d11f      	bne.n	8002396 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d856      	bhi.n	800240a <DMA_CheckFifoParam+0xce>
 800235c:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <DMA_CheckFifoParam+0x28>)
 800235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002362:	bf00      	nop
 8002364:	08002375 	.word	0x08002375
 8002368:	08002387 	.word	0x08002387
 800236c:	08002375 	.word	0x08002375
 8002370:	0800240b 	.word	0x0800240b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d046      	beq.n	800240e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002384:	e043      	b.n	800240e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800238e:	d140      	bne.n	8002412 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002394:	e03d      	b.n	8002412 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239e:	d121      	bne.n	80023e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d837      	bhi.n	8002416 <DMA_CheckFifoParam+0xda>
 80023a6:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <DMA_CheckFifoParam+0x70>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	080023bd 	.word	0x080023bd
 80023b0:	080023c3 	.word	0x080023c3
 80023b4:	080023bd 	.word	0x080023bd
 80023b8:	080023d5 	.word	0x080023d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      break;
 80023c0:	e030      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d025      	beq.n	800241a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d2:	e022      	b.n	800241a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023dc:	d11f      	bne.n	800241e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023e2:	e01c      	b.n	800241e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d903      	bls.n	80023f2 <DMA_CheckFifoParam+0xb6>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d003      	beq.n	80023f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023f0:	e018      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      break;
 80023f6:	e015      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      break;
 8002408:	e00b      	b.n	8002422 <DMA_CheckFifoParam+0xe6>
      break;
 800240a:	bf00      	nop
 800240c:	e00a      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e008      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e006      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e004      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e002      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;   
 800241e:	bf00      	nop
 8002420:	e000      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
    }
  } 
  
  return status; 
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e159      	b.n	8002704 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	f040 8148 	bne.w	80026fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d005      	beq.n	8002486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	2b02      	cmp	r3, #2
 8002484:	d130      	bne.n	80024e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 0201 	and.w	r2, r3, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d017      	beq.n	8002524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d123      	bne.n	8002578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	08da      	lsrs	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0203 	and.w	r2, r3, #3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a2 	beq.w	80026fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b57      	ldr	r3, [pc, #348]	; (800271c <HAL_GPIO_Init+0x2e8>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4a56      	ldr	r2, [pc, #344]	; (800271c <HAL_GPIO_Init+0x2e8>)
 80025c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ca:	4b54      	ldr	r3, [pc, #336]	; (800271c <HAL_GPIO_Init+0x2e8>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d6:	4a52      	ldr	r2, [pc, #328]	; (8002720 <HAL_GPIO_Init+0x2ec>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a49      	ldr	r2, [pc, #292]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x202>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_GPIO_Init+0x2f4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x1fe>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a47      	ldr	r2, [pc, #284]	; (800272c <HAL_GPIO_Init+0x2f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x1fa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a46      	ldr	r2, [pc, #280]	; (8002730 <HAL_GPIO_Init+0x2fc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x1f6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a45      	ldr	r2, [pc, #276]	; (8002734 <HAL_GPIO_Init+0x300>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x1f2>
 8002622:	2304      	movs	r3, #4
 8002624:	e008      	b.n	8002638 <HAL_GPIO_Init+0x204>
 8002626:	2307      	movs	r3, #7
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x204>
 800262a:	2303      	movs	r3, #3
 800262c:	e004      	b.n	8002638 <HAL_GPIO_Init+0x204>
 800262e:	2302      	movs	r3, #2
 8002630:	e002      	b.n	8002638 <HAL_GPIO_Init+0x204>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_GPIO_Init+0x204>
 8002636:	2300      	movs	r3, #0
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	f002 0203 	and.w	r2, r2, #3
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	4093      	lsls	r3, r2
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002648:	4935      	ldr	r1, [pc, #212]	; (8002720 <HAL_GPIO_Init+0x2ec>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002656:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_GPIO_Init+0x304>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267a:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <HAL_GPIO_Init+0x304>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_GPIO_Init+0x304>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a4:	4a24      	ldr	r2, [pc, #144]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ce:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f8:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b0f      	cmp	r3, #15
 8002708:	f67f aea2 	bls.w	8002450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e267      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d075      	beq.n	8002846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275a:	4b88      	ldr	r3, [pc, #544]	; (800297c <HAL_RCC_OscConfig+0x240>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b04      	cmp	r3, #4
 8002764:	d00c      	beq.n	8002780 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002766:	4b85      	ldr	r3, [pc, #532]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800276e:	2b08      	cmp	r3, #8
 8002770:	d112      	bne.n	8002798 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002772:	4b82      	ldr	r3, [pc, #520]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800277e:	d10b      	bne.n	8002798 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	4b7e      	ldr	r3, [pc, #504]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d05b      	beq.n	8002844 <HAL_RCC_OscConfig+0x108>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d157      	bne.n	8002844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e242      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a0:	d106      	bne.n	80027b0 <HAL_RCC_OscConfig+0x74>
 80027a2:	4b76      	ldr	r3, [pc, #472]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a75      	ldr	r2, [pc, #468]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e01d      	b.n	80027ec <HAL_RCC_OscConfig+0xb0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x98>
 80027ba:	4b70      	ldr	r3, [pc, #448]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6f      	ldr	r2, [pc, #444]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b6d      	ldr	r3, [pc, #436]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6c      	ldr	r2, [pc, #432]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0xb0>
 80027d4:	4b69      	ldr	r3, [pc, #420]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a68      	ldr	r2, [pc, #416]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b66      	ldr	r3, [pc, #408]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a65      	ldr	r2, [pc, #404]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80027e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d013      	beq.n	800281c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7ff f93e 	bl	8001a74 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fc:	f7ff f93a 	bl	8001a74 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e207      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b5b      	ldr	r3, [pc, #364]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0xc0>
 800281a:	e014      	b.n	8002846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff f92a 	bl	8001a74 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff f926 	bl	8001a74 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1f3      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0xe8>
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d063      	beq.n	800291a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002852:	4b4a      	ldr	r3, [pc, #296]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002866:	2b08      	cmp	r3, #8
 8002868:	d11c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286a:	4b44      	ldr	r3, [pc, #272]	; (800297c <HAL_RCC_OscConfig+0x240>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d116      	bne.n	80028a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_RCC_OscConfig+0x152>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e1c7      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288e:	4b3b      	ldr	r3, [pc, #236]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4937      	ldr	r1, [pc, #220]	; (800297c <HAL_RCC_OscConfig+0x240>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	e03a      	b.n	800291a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ac:	4b34      	ldr	r3, [pc, #208]	; (8002980 <HAL_RCC_OscConfig+0x244>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7ff f8df 	bl	8001a74 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ba:	f7ff f8db 	bl	8001a74 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1a8      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028cc:	4b2b      	ldr	r3, [pc, #172]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4925      	ldr	r1, [pc, #148]	; (800297c <HAL_RCC_OscConfig+0x240>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]
 80028ec:	e015      	b.n	800291a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_OscConfig+0x244>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7ff f8be 	bl	8001a74 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fc:	f7ff f8ba 	bl	8001a74 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e187      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d036      	beq.n	8002994 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_RCC_OscConfig+0x248>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7ff f89e 	bl	8001a74 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293c:	f7ff f89a 	bl	8001a74 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e167      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_OscConfig+0x240>)
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x200>
 800295a:	e01b      	b.n	8002994 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCC_OscConfig+0x248>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002962:	f7ff f887 	bl	8001a74 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	e00e      	b.n	8002988 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296a:	f7ff f883 	bl	8001a74 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d907      	bls.n	8002988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e150      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
 800297c:	40023800 	.word	0x40023800
 8002980:	42470000 	.word	0x42470000
 8002984:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 800298a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ea      	bne.n	800296a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8097 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a6:	4b81      	ldr	r3, [pc, #516]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10f      	bne.n	80029d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	4b7d      	ldr	r3, [pc, #500]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a7c      	ldr	r2, [pc, #496]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b7a      	ldr	r3, [pc, #488]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ce:	2301      	movs	r3, #1
 80029d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d2:	4b77      	ldr	r3, [pc, #476]	; (8002bb0 <HAL_RCC_OscConfig+0x474>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d118      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029de:	4b74      	ldr	r3, [pc, #464]	; (8002bb0 <HAL_RCC_OscConfig+0x474>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a73      	ldr	r2, [pc, #460]	; (8002bb0 <HAL_RCC_OscConfig+0x474>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ea:	f7ff f843 	bl	8001a74 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f2:	f7ff f83f 	bl	8001a74 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e10c      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a04:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_OscConfig+0x474>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2ea>
 8002a18:	4b64      	ldr	r3, [pc, #400]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a63      	ldr	r2, [pc, #396]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
 8002a24:	e01c      	b.n	8002a60 <HAL_RCC_OscConfig+0x324>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b05      	cmp	r3, #5
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x30c>
 8002a2e:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a5e      	ldr	r2, [pc, #376]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3a:	4b5c      	ldr	r3, [pc, #368]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a5b      	ldr	r2, [pc, #364]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0x324>
 8002a48:	4b58      	ldr	r3, [pc, #352]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	4a57      	ldr	r2, [pc, #348]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	; 0x70
 8002a54:	4b55      	ldr	r3, [pc, #340]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	4a54      	ldr	r2, [pc, #336]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a5a:	f023 0304 	bic.w	r3, r3, #4
 8002a5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d015      	beq.n	8002a94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7ff f804 	bl	8001a74 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a70:	f7ff f800 	bl	8001a74 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0cb      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a86:	4b49      	ldr	r3, [pc, #292]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0ee      	beq.n	8002a70 <HAL_RCC_OscConfig+0x334>
 8002a92:	e014      	b.n	8002abe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a94:	f7fe ffee 	bl	8001a74 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe ffea 	bl	8001a74 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0b5      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab2:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1ee      	bne.n	8002a9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4b39      	ldr	r3, [pc, #228]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	4a38      	ldr	r2, [pc, #224]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ace:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80a1 	beq.w	8002c1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ada:	4b34      	ldr	r3, [pc, #208]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d05c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d141      	bne.n	8002b72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_RCC_OscConfig+0x478>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe ffbe 	bl	8001a74 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe ffba 	bl	8001a74 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e087      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	019b      	lsls	r3, r3, #6
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	3b01      	subs	r3, #1
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	491b      	ldr	r1, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x478>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe ff93 	bl	8001a74 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe ff8f 	bl	8001a74 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e05c      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x416>
 8002b70:	e054      	b.n	8002c1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_OscConfig+0x478>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe ff7c 	bl	8001a74 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe ff78 	bl	8001a74 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e045      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_OscConfig+0x470>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x444>
 8002b9e:	e03d      	b.n	8002c1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e038      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_RCC_OscConfig+0x4ec>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d028      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d121      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d11a      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d111      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	3b01      	subs	r3, #1
 8002c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800

08002c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0cc      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c40:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d90c      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b63      	ldr	r3, [pc, #396]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0b8      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d020      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c98:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca4:	4b50      	ldr	r3, [pc, #320]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	494d      	ldr	r1, [pc, #308]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d044      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d119      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e07f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cea:	4b3f      	ldr	r3, [pc, #252]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e067      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4934      	ldr	r1, [pc, #208]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe feaa 	bl	8001a74 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fe fea6 	bl	8001a74 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e04f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d20c      	bcs.n	8002d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e032      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4916      	ldr	r1, [pc, #88]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	490e      	ldr	r1, [pc, #56]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002db2:	f000 f821 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	490a      	ldr	r1, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	5ccb      	ldrb	r3, [r1, r3]
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fe0a 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023c00 	.word	0x40023c00
 8002de8:	40023800 	.word	0x40023800
 8002dec:	0800c110 	.word	0x0800c110
 8002df0:	20000004 	.word	0x20000004
 8002df4:	20000008 	.word	0x20000008

08002df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dfc:	b090      	sub	sp, #64	; 0x40
 8002dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
 8002e04:	2300      	movs	r3, #0
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e08:	2300      	movs	r3, #0
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e10:	4b59      	ldr	r3, [pc, #356]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d00d      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0x40>
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	f200 80a1 	bhi.w	8002f64 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x34>
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e2a:	e09b      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e30:	e09b      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e32:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e36:	e098      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e38:	4b4f      	ldr	r3, [pc, #316]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e42:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d028      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	099b      	lsrs	r3, r3, #6
 8002e54:	2200      	movs	r2, #0
 8002e56:	623b      	str	r3, [r7, #32]
 8002e58:	627a      	str	r2, [r7, #36]	; 0x24
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e60:	2100      	movs	r1, #0
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e64:	fb03 f201 	mul.w	r2, r3, r1
 8002e68:	2300      	movs	r3, #0
 8002e6a:	fb00 f303 	mul.w	r3, r0, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e72:	fba0 1202 	umull	r1, r2, r0, r2
 8002e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e78:	460a      	mov	r2, r1
 8002e7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e7e:	4413      	add	r3, r2
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	2200      	movs	r2, #0
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	61fa      	str	r2, [r7, #28]
 8002e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e92:	f7fd ff01 	bl	8000c98 <__aeabi_uldivmod>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e9e:	e053      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea0:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	617a      	str	r2, [r7, #20]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eb2:	f04f 0b00 	mov.w	fp, #0
 8002eb6:	4652      	mov	r2, sl
 8002eb8:	465b      	mov	r3, fp
 8002eba:	f04f 0000 	mov.w	r0, #0
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	0159      	lsls	r1, r3, #5
 8002ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec8:	0150      	lsls	r0, r2, #5
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	ebb2 080a 	subs.w	r8, r2, sl
 8002ed2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ee2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ee6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002eea:	ebb2 0408 	subs.w	r4, r2, r8
 8002eee:	eb63 0509 	sbc.w	r5, r3, r9
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	00eb      	lsls	r3, r5, #3
 8002efc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f00:	00e2      	lsls	r2, r4, #3
 8002f02:	4614      	mov	r4, r2
 8002f04:	461d      	mov	r5, r3
 8002f06:	eb14 030a 	adds.w	r3, r4, sl
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	eb45 030b 	adc.w	r3, r5, fp
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	028b      	lsls	r3, r1, #10
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f28:	4621      	mov	r1, r4
 8002f2a:	028a      	lsls	r2, r1, #10
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	2200      	movs	r2, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	60fa      	str	r2, [r7, #12]
 8002f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f3c:	f7fd feac 	bl	8000c98 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	3301      	adds	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f62:	e002      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3740      	adds	r7, #64	; 0x40
 8002f70:	46bd      	mov	sp, r7
 8002f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	00f42400 	.word	0x00f42400
 8002f80:	017d7840 	.word	0x017d7840

08002f84 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e022      	b.n	8002fdc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d105      	bne.n	8002fae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fe fab3 	bl	8001514 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f814 	bl	8002fe4 <HAL_SD_InitCard>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00a      	b.n	8002fdc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b08e      	sub	sp, #56	; 0x38
 8002fe8:	af04      	add	r7, sp, #16
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003000:	2376      	movs	r3, #118	; 0x76
 8003002:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681d      	ldr	r5, [r3, #0]
 8003008:	466c      	mov	r4, sp
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800301c:	4628      	mov	r0, r5
 800301e:	f001 f8e1 	bl	80041e4 <SDIO_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e04f      	b.n	80030d4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_SD_InitCard+0xf8>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f001 f919 	bl	8004276 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_SD_InitCard+0xf8>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800304a:	2002      	movs	r0, #2
 800304c:	f7fe fd1e 	bl	8001a8c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 ff6b 	bl	8003f2c <SD_PowerON>
 8003056:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e02e      	b.n	80030d4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fe8a 	bl	8003d90 <SD_InitCard>
 800307c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e01b      	b.n	80030d4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 f978 	bl	800439a <SDMMC_CmdBlockLength>
 80030aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00f      	beq.n	80030d2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <HAL_SD_InitCard+0xfc>)
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3728      	adds	r7, #40	; 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bdb0      	pop	{r4, r5, r7, pc}
 80030dc:	422580a0 	.word	0x422580a0
 80030e0:	004005ff 	.word	0x004005ff

080030e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08c      	sub	sp, #48	; 0x30
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d107      	bne.n	800310c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0c0      	b.n	800328e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	f040 80b9 	bne.w	800328c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	441a      	add	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	429a      	cmp	r2, r3
 800312c:	d907      	bls.n	800313e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0a7      	b.n	800328e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2203      	movs	r2, #3
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2200      	movs	r2, #0
 800314c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	4a4c      	ldr	r2, [pc, #304]	; (8003298 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a4b      	ldr	r2, [pc, #300]	; (800329c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003170:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2200      	movs	r2, #0
 8003178:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3380      	adds	r3, #128	; 0x80
 80031a8:	4619      	mov	r1, r3
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	025b      	lsls	r3, r3, #9
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	f7fe fe4f 	bl	8001e54 <HAL_DMA_Start_IT>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d017      	beq.n	80031ec <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a33      	ldr	r2, [pc, #204]	; (80032a0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e050      	b.n	800328e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d002      	beq.n	8003200 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	025b      	lsls	r3, r3, #9
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003200:	f04f 33ff 	mov.w	r3, #4294967295
 8003204:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	025b      	lsls	r3, r3, #9
 800320a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800320c:	2390      	movs	r3, #144	; 0x90
 800320e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003210:	2302      	movs	r3, #2
 8003212:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003214:	2300      	movs	r3, #0
 8003216:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f107 0210 	add.w	r2, r7, #16
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f001 f88b 	bl	8004342 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d90a      	bls.n	8003248 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2282      	movs	r2, #130	; 0x82
 8003236:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800323e:	4618      	mov	r0, r3
 8003240:	f001 f8ef 	bl	8004422 <SDMMC_CmdReadMultiBlock>
 8003244:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003246:	e009      	b.n	800325c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2281      	movs	r2, #129	; 0x81
 800324c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003254:	4618      	mov	r0, r3
 8003256:	f001 f8c2 	bl	80043de <SDMMC_CmdReadSingleBlock>
 800325a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d012      	beq.n	8003288 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e002      	b.n	800328e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	e000      	b.n	800328e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	3730      	adds	r7, #48	; 0x30
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	08003b9f 	.word	0x08003b9f
 800329c:	08003c11 	.word	0x08003c11
 80032a0:	004005ff 	.word	0x004005ff
 80032a4:	4225858c 	.word	0x4225858c

080032a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0c5      	b.n	800345c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 80be 	bne.w	800345a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	441a      	add	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d907      	bls.n	8003302 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0ac      	b.n	800345c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2203      	movs	r2, #3
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	4a4e      	ldr	r2, [pc, #312]	; (8003464 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800332c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	4a4d      	ldr	r2, [pc, #308]	; (8003468 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003334:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	2200      	movs	r2, #0
 800333c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	2b01      	cmp	r3, #1
 8003344:	d002      	beq.n	800334c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	025b      	lsls	r3, r3, #9
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d90a      	bls.n	8003368 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	22a0      	movs	r2, #160	; 0xa0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335e:	4618      	mov	r0, r3
 8003360:	f001 f8a3 	bl	80044aa <SDMMC_CmdWriteMultiBlock>
 8003364:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003366:	e009      	b.n	800337c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2290      	movs	r2, #144	; 0x90
 800336c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003374:	4618      	mov	r0, r3
 8003376:	f001 f876 	bl	8004466 <SDMMC_CmdWriteSingleBlock>
 800337a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d012      	beq.n	80033a8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a39      	ldr	r2, [pc, #228]	; (800346c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003388:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e059      	b.n	800345c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80033a8:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	2240      	movs	r2, #64	; 0x40
 80033b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3380      	adds	r3, #128	; 0x80
 80033de:	461a      	mov	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	025b      	lsls	r3, r3, #9
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	f7fe fd35 	bl	8001e54 <HAL_DMA_Start_IT>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01c      	beq.n	800342a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80033fe:	f023 0302 	bic.w	r3, r3, #2
 8003402:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e018      	b.n	800345c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	025b      	lsls	r3, r3, #9
 8003434:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003436:	2390      	movs	r3, #144	; 0x90
 8003438:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800343e:	2300      	movs	r3, #0
 8003440:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003442:	2301      	movs	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f107 0210 	add.w	r2, r7, #16
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f000 ff76 	bl	8004342 <SDIO_ConfigData>

      return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3730      	adds	r7, #48	; 0x30
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	08003b75 	.word	0x08003b75
 8003468:	08003c11 	.word	0x08003c11
 800346c:	004005ff 	.word	0x004005ff
 8003470:	4225858c 	.word	0x4225858c

08003474 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_SD_IRQHandler+0x2e>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fdfc 	bl	8004098 <SD_Read_IT>
 80034a0:	e165      	b.n	800376e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 808f 	beq.w	80035d0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80034ca:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80034ce:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d039      	beq.n	800355e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <HAL_SD_IRQHandler+0x8a>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d011      	beq.n	8003522 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fff4 	bl	80044f0 <SDMMC_CmdStopTransfer>
 8003508:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f92f 	bl	8003780 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f240 523a 	movw	r2, #1338	; 0x53a
 800352a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <HAL_SD_IRQHandler+0xda>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f001 fc12 	bl	8004d78 <HAL_SD_RxCpltCallback>
 8003554:	e10b      	b.n	800376e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f001 fc04 	bl	8004d64 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800355c:	e107      	b.n	800376e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8102 	beq.w	800376e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f000 ffb9 	bl	80044f0 <SDMMC_CmdStopTransfer>
 800357e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8f4 	bl	8003780 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 80e5 	bne.w	800376e <HAL_SD_IRQHandler+0x2fa>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 80df 	bne.w	800376e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0208 	bic.w	r2, r2, #8
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f001 fbcb 	bl	8004d64 <HAL_SD_TxCpltCallback>
}
 80035ce:	e0ce      	b.n	800376e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_SD_IRQHandler+0x17c>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fda6 	bl	800413a <SD_Write_IT>
 80035ee:	e0be      	b.n	800376e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f6:	f240 233a 	movw	r3, #570	; 0x23a
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80b6 	beq.w	800376e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	f043 0202 	orr.w	r2, r3, #2
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	f043 0208 	orr.w	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	f043 0210 	orr.w	r2, r3, #16
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	f043 0208 	orr.w	r2, r3, #8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f240 723a 	movw	r2, #1850	; 0x73a
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800369c:	f023 0302 	bic.w	r3, r3, #2
 80036a0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 ff22 	bl	80044f0 <SDMMC_CmdStopTransfer>
 80036ac:	4602      	mov	r2, r0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f855 	bl	8003780 <HAL_SD_ErrorCallback>
}
 80036d6:	e04a      	b.n	800376e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d045      	beq.n	800376e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_SD_IRQHandler+0x282>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d011      	beq.n	800371a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <HAL_SD_IRQHandler+0x304>)
 80036fc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fbfe 	bl	8001f04 <HAL_DMA_Abort_IT>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d02f      	beq.n	800376e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	4618      	mov	r0, r3
 8003714:	f000 face 	bl	8003cb4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003718:	e029      	b.n	800376e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d104      	bne.n	800372e <HAL_SD_IRQHandler+0x2ba>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d011      	beq.n	8003752 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_SD_IRQHandler+0x308>)
 8003734:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fbe2 	bl	8001f04 <HAL_DMA_Abort_IT>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d013      	beq.n	800376e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fae9 	bl	8003d22 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003750:	e00d      	b.n	800376e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f001 faf2 	bl	8004d50 <HAL_SD_AbortCallback>
}
 800376c:	e7ff      	b.n	800376e <HAL_SD_IRQHandler+0x2fa>
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	08003cb5 	.word	0x08003cb5
 800377c:	08003d23 	.word	0x08003d23

08003780 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a2:	0f9b      	lsrs	r3, r3, #30
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ae:	0e9b      	lsrs	r3, r3, #26
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c0:	0e1b      	lsrs	r3, r3, #24
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f4:	0d1b      	lsrs	r3, r3, #20
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	b2da      	uxtb	r2, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003812:	0bdb      	lsrs	r3, r3, #15
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003824:	0b9b      	lsrs	r3, r3, #14
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	b2da      	uxtb	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003836:	0b5b      	lsrs	r3, r3, #13
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003848:	0b1b      	lsrs	r3, r3, #12
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	b2da      	uxtb	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	2b00      	cmp	r3, #0
 8003862:	d163      	bne.n	800392c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003868:	009a      	lsls	r2, r3, #2
 800386a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800386e:	4013      	ands	r3, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003874:	0f92      	lsrs	r2, r2, #30
 8003876:	431a      	orrs	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003880:	0edb      	lsrs	r3, r3, #27
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	b2da      	uxtb	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003892:	0e1b      	lsrs	r3, r3, #24
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	b2da      	uxtb	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a4:	0d5b      	lsrs	r3, r3, #21
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b6:	0c9b      	lsrs	r3, r3, #18
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c8:	0bdb      	lsrs	r3, r3, #15
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	7e1b      	ldrb	r3, [r3, #24]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	3302      	adds	r3, #2
 80038ec:	2201      	movs	r2, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038f6:	fb03 f202 	mul.w	r2, r3, r2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	7a1b      	ldrb	r3, [r3, #8]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	2201      	movs	r2, #1
 800390a:	409a      	lsls	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003918:	0a52      	lsrs	r2, r2, #9
 800391a:	fb03 f202 	mul.w	r2, r3, r2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003928:	661a      	str	r2, [r3, #96]	; 0x60
 800392a:	e031      	b.n	8003990 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	2b01      	cmp	r3, #1
 8003932:	d11d      	bne.n	8003970 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003942:	0c1b      	lsrs	r3, r3, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	3301      	adds	r3, #1
 8003950:	029a      	lsls	r2, r3, #10
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003964:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	661a      	str	r2, [r3, #96]	; 0x60
 800396e:	e00f      	b.n	8003990 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_SD_GetCardCSD+0x344>)
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e09d      	b.n	8003acc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003994:	0b9b      	lsrs	r3, r3, #14
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	b2da      	uxtb	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a6:	09db      	lsrs	r3, r3, #7
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	0fdb      	lsrs	r3, r3, #31
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	0f5b      	lsrs	r3, r3, #29
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	0e9b      	lsrs	r3, r3, #26
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	0d9b      	lsrs	r3, r3, #22
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	0d5b      	lsrs	r3, r3, #21
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	0bdb      	lsrs	r3, r3, #15
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	0b9b      	lsrs	r3, r3, #14
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	0b5b      	lsrs	r3, r3, #13
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	0b1b      	lsrs	r3, r3, #12
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	0a9b      	lsrs	r3, r3, #10
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	004005ff 	.word	0x004005ff

08003adc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	4619      	mov	r1, r3
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa7e 	bl	8004048 <SD_SendStatus>
 8003b4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003b6a:	693b      	ldr	r3, [r7, #16]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	2b82      	cmp	r3, #130	; 0x82
 8003bb2:	d111      	bne.n	8003bd8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fc99 	bl	80044f0 <SDMMC_CmdStopTransfer>
 8003bbe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7ff fdd4 	bl	8003780 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0208 	bic.w	r2, r2, #8
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f001 f8b9 	bl	8004d78 <HAL_SD_RxCpltCallback>
#endif
}
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe fb1c 	bl	800225c <HAL_DMA_GetError>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d03e      	beq.n	8003ca8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d002      	beq.n	8003c46 <SD_DMAError+0x36>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d12d      	bne.n	8003ca2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a19      	ldr	r2, [pc, #100]	; (8003cb0 <SD_DMAError+0xa0>)
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003c5c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ff62 	bl	8003b34 <HAL_SD_GetCardState>
 8003c70:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b06      	cmp	r3, #6
 8003c76:	d002      	beq.n	8003c7e <SD_DMAError+0x6e>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d10a      	bne.n	8003c94 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fc34 	bl	80044f0 <SDMMC_CmdStopTransfer>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	f7ff fd6c 	bl	8003780 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	004005ff 	.word	0x004005ff

08003cb4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff ff31 	bl	8003b34 <HAL_SD_GetCardState>
 8003cd2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b06      	cmp	r3, #6
 8003ce6:	d002      	beq.n	8003cee <SD_DMATxAbort+0x3a>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d10a      	bne.n	8003d04 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fbfc 	bl	80044f0 <SDMMC_CmdStopTransfer>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d103      	bne.n	8003d14 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f001 f81f 	bl	8004d50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003d12:	e002      	b.n	8003d1a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fd33 	bl	8003780 <HAL_SD_ErrorCallback>
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f7ff fefa 	bl	8003b34 <HAL_SD_GetCardState>
 8003d40:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d002      	beq.n	8003d5c <SD_DMARxAbort+0x3a>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d10a      	bne.n	8003d72 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fbc5 	bl	80044f0 <SDMMC_CmdStopTransfer>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 ffe8 	bl	8004d50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003d80:	e002      	b.n	8003d88 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff fcfc 	bl	8003780 <HAL_SD_ErrorCallback>
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d90:	b5b0      	push	{r4, r5, r7, lr}
 8003d92:	b094      	sub	sp, #80	; 0x50
 8003d94:	af04      	add	r7, sp, #16
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fa76 	bl	8004292 <SDIO_GetPowerState>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003dac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003db0:	e0b8      	b.n	8003f24 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d02f      	beq.n	8003e1a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fc5d 	bl	800467e <SDMMC_CmdSendCID>
 8003dc4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <SD_InitCard+0x40>
    {
      return errorstate;
 8003dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dce:	e0a9      	b.n	8003f24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 faa0 	bl	800431c <SDIO_GetResponse>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2104      	movs	r1, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fa97 	bl	800431c <SDIO_GetResponse>
 8003dee:	4602      	mov	r2, r0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2108      	movs	r1, #8
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fa8e 	bl	800431c <SDIO_GetResponse>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	210c      	movs	r1, #12
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fa85 	bl	800431c <SDIO_GetResponse>
 8003e12:	4602      	mov	r2, r0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d00d      	beq.n	8003e3e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f107 020e 	add.w	r2, r7, #14
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fc63 	bl	80046f8 <SDMMC_CmdSetRelAdd>
 8003e32:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <SD_InitCard+0xae>
    {
      return errorstate;
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3c:	e072      	b.n	8003f24 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d036      	beq.n	8003eb4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003e46:	89fb      	ldrh	r3, [r7, #14]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e56:	041b      	lsls	r3, r3, #16
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f000 fc2d 	bl	80046ba <SDMMC_CmdSendCSD>
 8003e60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6a:	e05b      	b.n	8003f24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fa52 	bl	800431c <SDIO_GetResponse>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2104      	movs	r1, #4
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fa49 	bl	800431c <SDIO_GetResponse>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2108      	movs	r1, #8
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fa40 	bl	800431c <SDIO_GetResponse>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	210c      	movs	r1, #12
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fa37 	bl	800431c <SDIO_GetResponse>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2104      	movs	r1, #4
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fa2e 	bl	800431c <SDIO_GetResponse>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	0d1a      	lsrs	r2, r3, #20
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003ec8:	f107 0310 	add.w	r3, r7, #16
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fc60 	bl	8003794 <HAL_SD_GetCardCSD>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003eda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ede:	e021      	b.n	8003f24 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6819      	ldr	r1, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	2200      	movs	r2, #0
 8003eec:	461c      	mov	r4, r3
 8003eee:	4615      	mov	r5, r2
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	f000 fb1d 	bl	8004534 <SDMMC_CmdSelDesel>
 8003efa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <SD_InitCard+0x176>
  {
    return errorstate;
 8003f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f04:	e00e      	b.n	8003f24 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681d      	ldr	r5, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	466c      	mov	r4, sp
 8003f0e:	f103 0210 	add.w	r2, r3, #16
 8003f12:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f18:	3304      	adds	r3, #4
 8003f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f000 f961 	bl	80041e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3740      	adds	r7, #64	; 0x40
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bdb0      	pop	{r4, r5, r7, pc}

08003f2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fb18 	bl	800457a <SDMMC_CmdGoIdleState>
 8003f4a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	e072      	b.n	800403c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb2b 	bl	80045b6 <SDMMC_CmdOperCond>
 8003f60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fb01 	bl	800457a <SDMMC_CmdGoIdleState>
 8003f78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	e05b      	b.n	800403c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d137      	bne.n	8004002 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fb2b 	bl	80045f4 <SDMMC_CmdAppCommand>
 8003f9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02d      	beq.n	8004002 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003faa:	e047      	b.n	800403c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fb1e 	bl	80045f4 <SDMMC_CmdAppCommand>
 8003fb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <SD_PowerON+0x98>
    {
      return errorstate;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	e03b      	b.n	800403c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	491e      	ldr	r1, [pc, #120]	; (8004044 <SD_PowerON+0x118>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fb34 	bl	8004638 <SDMMC_CmdAppOperCommand>
 8003fd0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003fdc:	e02e      	b.n	800403c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 f999 	bl	800431c <SDIO_GetResponse>
 8003fea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	0fdb      	lsrs	r3, r3, #31
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <SD_PowerON+0xcc>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <SD_PowerON+0xce>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]

    count++;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004008:	4293      	cmp	r3, r2
 800400a:	d802      	bhi.n	8004012 <SD_PowerON+0xe6>
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0cc      	beq.n	8003fac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004018:	4293      	cmp	r3, r2
 800401a:	d902      	bls.n	8004022 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800401c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004020:	e00c      	b.n	800403c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
 8004032:	e002      	b.n	800403a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	c1100000 	.word	0xc1100000

08004048 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004058:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800405c:	e018      	b.n	8004090 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	041b      	lsls	r3, r3, #16
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f000 fb65 	bl	800473a <SDMMC_CmdSendStatus>
 8004070:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	e009      	b.n	8004090 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f94a 	bl	800431c <SDIO_GetResponse>
 8004088:	4602      	mov	r2, r0
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d03f      	beq.n	8004132 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	e033      	b.n	8004120 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f8bc 	bl	800423a <SDIO_ReadFIFO>
 80040c2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3301      	adds	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3301      	adds	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3b01      	subs	r3, #1
 8004102:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	0e1b      	lsrs	r3, r3, #24
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3301      	adds	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3b01      	subs	r3, #1
 8004118:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	3301      	adds	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b07      	cmp	r3, #7
 8004124:	d9c8      	bls.n	80040b8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d043      	beq.n	80041dc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e037      	b.n	80041ca <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3b01      	subs	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	021a      	lsls	r2, r3, #8
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4313      	orrs	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3b01      	subs	r3, #1
 8004182:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	041a      	lsls	r2, r3, #16
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4313      	orrs	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3b01      	subs	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	061a      	lsls	r2, r3, #24
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f107 0208 	add.w	r2, r7, #8
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f848 	bl	8004254 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3301      	adds	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b07      	cmp	r3, #7
 80041ce:	d9c4      	bls.n	800415a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80041dc:	bf00      	nop
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80041e4:	b084      	sub	sp, #16
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	f107 001c 	add.w	r0, r7, #28
 80041f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80041fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80041fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80041fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004202:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004206:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800420a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800420e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800421e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	b004      	add	sp, #16
 8004238:	4770      	bx	lr

0800423a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2203      	movs	r2, #3
 8004282:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0303 	and.w	r3, r3, #3
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80042d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80042d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80042e8:	f023 030f 	bic.w	r3, r3, #15
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	b2db      	uxtb	r3, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3314      	adds	r3, #20
 800432a:	461a      	mov	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4413      	add	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
}  
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004368:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800436e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004374:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800438c:	2300      	movs	r3, #0

}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b088      	sub	sp, #32
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80043a8:	2310      	movs	r3, #16
 80043aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043ac:	2340      	movs	r3, #64	; 0x40
 80043ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff74 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	2110      	movs	r1, #16
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f9d7 	bl	8004780 <SDMMC_GetCmdResp1>
 80043d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043d4:	69fb      	ldr	r3, [r7, #28]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b088      	sub	sp, #32
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80043ec:	2311      	movs	r3, #17
 80043ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043f0:	2340      	movs	r3, #64	; 0x40
 80043f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff52 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	2111      	movs	r1, #17
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f9b5 	bl	8004780 <SDMMC_GetCmdResp1>
 8004416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004418:	69fb      	ldr	r3, [r7, #28]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b088      	sub	sp, #32
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004430:	2312      	movs	r3, #18
 8004432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004434:	2340      	movs	r3, #64	; 0x40
 8004436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800443c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004440:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff ff30 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	2112      	movs	r1, #18
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f993 	bl	8004780 <SDMMC_GetCmdResp1>
 800445a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800445c:	69fb      	ldr	r3, [r7, #28]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b088      	sub	sp, #32
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004474:	2318      	movs	r3, #24
 8004476:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004478:	2340      	movs	r3, #64	; 0x40
 800447a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004484:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004486:	f107 0308 	add.w	r3, r7, #8
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff ff0e 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	2118      	movs	r1, #24
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f971 	bl	8004780 <SDMMC_GetCmdResp1>
 800449e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044a0:	69fb      	ldr	r3, [r7, #28]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b088      	sub	sp, #32
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80044b8:	2319      	movs	r3, #25
 80044ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044bc:	2340      	movs	r3, #64	; 0x40
 80044be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044ca:	f107 0308 	add.w	r3, r7, #8
 80044ce:	4619      	mov	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff feec 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	2119      	movs	r1, #25
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f94f 	bl	8004780 <SDMMC_GetCmdResp1>
 80044e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044e4:	69fb      	ldr	r3, [r7, #28]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80044fc:	230c      	movs	r3, #12
 80044fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004500:	2340      	movs	r3, #64	; 0x40
 8004502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800450c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff feca 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800451a:	4a05      	ldr	r2, [pc, #20]	; (8004530 <SDMMC_CmdStopTransfer+0x40>)
 800451c:	210c      	movs	r1, #12
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f92e 	bl	8004780 <SDMMC_GetCmdResp1>
 8004524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004526:	69fb      	ldr	r3, [r7, #28]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	05f5e100 	.word	0x05f5e100

08004534 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004544:	2307      	movs	r3, #7
 8004546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004548:	2340      	movs	r3, #64	; 0x40
 800454a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004554:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004556:	f107 0310 	add.w	r3, r7, #16
 800455a:	4619      	mov	r1, r3
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff fea6 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	2107      	movs	r1, #7
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f909 	bl	8004780 <SDMMC_GetCmdResp1>
 800456e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004572:	4618      	mov	r0, r3
 8004574:	3728      	adds	r7, #40	; 0x28
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b088      	sub	sp, #32
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004596:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004598:	f107 0308 	add.w	r3, r7, #8
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fe85 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb23 	bl	8004bf0 <SDMMC_GetCmdError>
 80045aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045ac:	69fb      	ldr	r3, [r7, #28]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b088      	sub	sp, #32
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80045be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80045c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80045c4:	2308      	movs	r3, #8
 80045c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045c8:	2340      	movs	r3, #64	; 0x40
 80045ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045d6:	f107 0308 	add.w	r3, r7, #8
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fe66 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fab6 	bl	8004b54 <SDMMC_GetCmdResp7>
 80045e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045ea:	69fb      	ldr	r3, [r7, #28]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004602:	2337      	movs	r3, #55	; 0x37
 8004604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004606:	2340      	movs	r3, #64	; 0x40
 8004608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800460e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004612:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004614:	f107 0308 	add.w	r3, r7, #8
 8004618:	4619      	mov	r1, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fe47 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	2137      	movs	r1, #55	; 0x37
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8aa 	bl	8004780 <SDMMC_GetCmdResp1>
 800462c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800462e:	69fb      	ldr	r3, [r7, #28]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800464e:	2329      	movs	r3, #41	; 0x29
 8004650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800465a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fe21 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f9bd 	bl	80049ec <SDMMC_GetCmdResp3>
 8004672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004674:	69fb      	ldr	r3, [r7, #28]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b088      	sub	sp, #32
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800468a:	2302      	movs	r3, #2
 800468c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800468e:	23c0      	movs	r3, #192	; 0xc0
 8004690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800469c:	f107 0308 	add.w	r3, r7, #8
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fe03 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f957 	bl	800495c <SDMMC_GetCmdResp2>
 80046ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046b0:	69fb      	ldr	r3, [r7, #28]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b088      	sub	sp, #32
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80046c8:	2309      	movs	r3, #9
 80046ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80046cc:	23c0      	movs	r3, #192	; 0xc0
 80046ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff fde4 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f938 	bl	800495c <SDMMC_GetCmdResp2>
 80046ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046ee:	69fb      	ldr	r3, [r7, #28]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004706:	2303      	movs	r3, #3
 8004708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004716:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004718:	f107 0308 	add.w	r3, r7, #8
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fdc5 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	2103      	movs	r1, #3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f99d 	bl	8004a68 <SDMMC_GetCmdResp6>
 800472e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004730:	69fb      	ldr	r3, [r7, #28]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b088      	sub	sp, #32
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004748:	230d      	movs	r3, #13
 800474a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800474c:	2340      	movs	r3, #64	; 0x40
 800474e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004758:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800475a:	f107 0308 	add.w	r3, r7, #8
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff fda4 	bl	80042ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004766:	f241 3288 	movw	r2, #5000	; 0x1388
 800476a:	210d      	movs	r1, #13
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f807 	bl	8004780 <SDMMC_GetCmdResp1>
 8004772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004774:	69fb      	ldr	r3, [r7, #28]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	460b      	mov	r3, r1
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800478e:	4b70      	ldr	r3, [pc, #448]	; (8004950 <SDMMC_GetCmdResp1+0x1d0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a70      	ldr	r2, [pc, #448]	; (8004954 <SDMMC_GetCmdResp1+0x1d4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	0a5a      	lsrs	r2, r3, #9
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	1e5a      	subs	r2, r3, #1
 80047a6:	61fa      	str	r2, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047b0:	e0c9      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ea      	bne.n	80047a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2204      	movs	r2, #4
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047de:	2304      	movs	r3, #4
 80047e0:	e0b1      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0a6      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	22c5      	movs	r2, #197	; 0xc5
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff fd7f 	bl	8004302 <SDIO_GetCommandResponse>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	7afb      	ldrb	r3, [r7, #11]
 800480a:	4293      	cmp	r3, r2
 800480c:	d001      	beq.n	8004812 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800480e:	2301      	movs	r3, #1
 8004810:	e099      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004812:	2100      	movs	r1, #0
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7ff fd81 	bl	800431c <SDIO_GetResponse>
 800481a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4b4e      	ldr	r3, [pc, #312]	; (8004958 <SDMMC_GetCmdResp1+0x1d8>)
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004826:	2300      	movs	r3, #0
 8004828:	e08d      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	da02      	bge.n	8004836 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004834:	e087      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004840:	2340      	movs	r3, #64	; 0x40
 8004842:	e080      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	e079      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800485c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004860:	e071      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800486c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004870:	e069      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800487c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004880:	e061      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800488c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004890:	e059      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800489c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a0:	e051      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80048ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048b0:	e049      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80048bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048c0:	e041      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80048cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d0:	e039      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80048dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e0:	e031      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80048ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048f0:	e029      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80048fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004900:	e021      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800490c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004910:	e019      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800491c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004920:	e011      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800492c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004930:	e009      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800493c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004940:	e001      	b.n	8004946 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000004 	.word	0x20000004
 8004954:	10624dd3 	.word	0x10624dd3
 8004958:	fdffe008 	.word	0xfdffe008

0800495c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004964:	4b1f      	ldr	r3, [pc, #124]	; (80049e4 <SDMMC_GetCmdResp2+0x88>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <SDMMC_GetCmdResp2+0x8c>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	0a5b      	lsrs	r3, r3, #9
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1e5a      	subs	r2, r3, #1
 800497e:	60fa      	str	r2, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004988:	e026      	b.n	80049d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0ef      	beq.n	800497a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ea      	bne.n	800497a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2204      	movs	r2, #4
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049b6:	2304      	movs	r3, #4
 80049b8:	e00e      	b.n	80049d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d004      	beq.n	80049d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e003      	b.n	80049d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	22c5      	movs	r2, #197	; 0xc5
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	20000004 	.word	0x20000004
 80049e8:	10624dd3 	.word	0x10624dd3

080049ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049f4:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <SDMMC_GetCmdResp3+0x74>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1a      	ldr	r2, [pc, #104]	; (8004a64 <SDMMC_GetCmdResp3+0x78>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0a5b      	lsrs	r3, r3, #9
 8004a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1e5a      	subs	r2, r3, #1
 8004a0e:	60fa      	str	r2, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a18:	e01b      	b.n	8004a52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0ef      	beq.n	8004a0a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1ea      	bne.n	8004a0a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2204      	movs	r2, #4
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a46:	2304      	movs	r3, #4
 8004a48:	e003      	b.n	8004a52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	22c5      	movs	r2, #197	; 0xc5
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000004 	.word	0x20000004
 8004a64:	10624dd3 	.word	0x10624dd3

08004a68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	460b      	mov	r3, r1
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a76:	4b35      	ldr	r3, [pc, #212]	; (8004b4c <SDMMC_GetCmdResp6+0xe4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a35      	ldr	r2, [pc, #212]	; (8004b50 <SDMMC_GetCmdResp6+0xe8>)
 8004a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a80:	0a5b      	lsrs	r3, r3, #9
 8004a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	1e5a      	subs	r2, r3, #1
 8004a90:	61fa      	str	r2, [r7, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a9a:	e052      	b.n	8004b42 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ef      	beq.n	8004a8c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1ea      	bne.n	8004a8c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d004      	beq.n	8004acc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ac8:	2304      	movs	r3, #4
 8004aca:	e03a      	b.n	8004b42 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d004      	beq.n	8004ae2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e02f      	b.n	8004b42 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff fc0d 	bl	8004302 <SDIO_GetCommandResponse>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	461a      	mov	r2, r3
 8004aec:	7afb      	ldrb	r3, [r7, #11]
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d001      	beq.n	8004af6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e025      	b.n	8004b42 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	22c5      	movs	r2, #197	; 0xc5
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004afc:	2100      	movs	r1, #0
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff fc0c 	bl	800431c <SDIO_GetResponse>
 8004b04:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	0c1b      	lsrs	r3, r3, #16
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e011      	b.n	8004b42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b2c:	e009      	b.n	8004b42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b3c:	e001      	b.n	8004b42 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000004 	.word	0x20000004
 8004b50:	10624dd3 	.word	0x10624dd3

08004b54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b5c:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <SDMMC_GetCmdResp7+0x94>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a22      	ldr	r2, [pc, #136]	; (8004bec <SDMMC_GetCmdResp7+0x98>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	0a5b      	lsrs	r3, r3, #9
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1e5a      	subs	r2, r3, #1
 8004b76:	60fa      	str	r2, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b80:	e02c      	b.n	8004bdc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0ef      	beq.n	8004b72 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ea      	bne.n	8004b72 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2204      	movs	r2, #4
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bae:	2304      	movs	r3, #4
 8004bb0:	e014      	b.n	8004bdc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d004      	beq.n	8004bc8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e009      	b.n	8004bdc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2240      	movs	r2, #64	; 0x40
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004bda:	2300      	movs	r3, #0
  
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	20000004 	.word	0x20000004
 8004bec:	10624dd3 	.word	0x10624dd3

08004bf0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <SDMMC_GetCmdError+0x50>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a11      	ldr	r2, [pc, #68]	; (8004c44 <SDMMC_GetCmdError+0x54>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	0a5b      	lsrs	r3, r3, #9
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	fb02 f303 	mul.w	r3, r2, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1e5a      	subs	r2, r3, #1
 8004c12:	60fa      	str	r2, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c1c:	e009      	b.n	8004c32 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f1      	beq.n	8004c0e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	22c5      	movs	r2, #197	; 0xc5
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000004 	.word	0x20000004
 8004c44:	10624dd3 	.word	0x10624dd3

08004c48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004c4c:	4904      	ldr	r1, [pc, #16]	; (8004c60 <MX_FATFS_Init+0x18>)
 8004c4e:	4805      	ldr	r0, [pc, #20]	; (8004c64 <MX_FATFS_Init+0x1c>)
 8004c50:	f002 fdce 	bl	80077f0 <FATFS_LinkDriver>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461a      	mov	r2, r3
 8004c58:	4b03      	ldr	r3, [pc, #12]	; (8004c68 <MX_FATFS_Init+0x20>)
 8004c5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004c5c:	bf00      	nop
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	200025b4 	.word	0x200025b4
 8004c64:	0800c128 	.word	0x0800c128
 8004c68:	200025b0 	.word	0x200025b0

08004c6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004c70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004c86:	f000 f888 	bl	8004d9a <BSP_SD_IsDetected>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d001      	beq.n	8004c94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e005      	b.n	8004ca0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004c94:	4804      	ldr	r0, [pc, #16]	; (8004ca8 <BSP_SD_Init+0x2c>)
 8004c96:	f7fe f975 	bl	8002f84 <HAL_SD_Init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20002464 	.word	0x20002464

08004cac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	68f9      	ldr	r1, [r7, #12]
 8004cc2:	4806      	ldr	r0, [pc, #24]	; (8004cdc <BSP_SD_ReadBlocks_DMA+0x30>)
 8004cc4:	f7fe fa0e 	bl	80030e4 <HAL_SD_ReadBlocks_DMA>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20002464 	.word	0x20002464

08004ce0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	68f9      	ldr	r1, [r7, #12]
 8004cf6:	4806      	ldr	r0, [pc, #24]	; (8004d10 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004cf8:	f7fe fad6 	bl	80032a8 <HAL_SD_WriteBlocks_DMA>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20002464 	.word	0x20002464

08004d14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004d18:	4805      	ldr	r0, [pc, #20]	; (8004d30 <BSP_SD_GetCardState+0x1c>)
 8004d1a:	f7fe ff0b 	bl	8003b34 <HAL_SD_GetCardState>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20002464 	.word	0x20002464

08004d34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4803      	ldr	r0, [pc, #12]	; (8004d4c <BSP_SD_GetCardInfo+0x18>)
 8004d40:	f7fe fecc 	bl	8003adc <HAL_SD_GetCardInfo>
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20002464 	.word	0x20002464

08004d50 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004d58:	f000 f818 	bl	8004d8c <BSP_SD_AbortCallback>
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004d6c:	f000 f98c 	bl	8005088 <BSP_SD_WriteCpltCallback>
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004d80:	f000 f98e 	bl	80050a0 <BSP_SD_ReadCpltCallback>
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0

}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004da0:	2301      	movs	r3, #1
 8004da2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	b2db      	uxtb	r3, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004dbc:	f7fc fe5a 	bl	8001a74 <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8004dc2:	e006      	b.n	8004dd2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004dc4:	f7ff ffa6 	bl	8004d14 <BSP_SD_GetCardState>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e009      	b.n	8004de6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8004dd2:	f7fc fe4f 	bl	8001a74 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d8f0      	bhi.n	8004dc4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <SD_CheckStatus+0x38>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004e00:	f7ff ff88 	bl	8004d14 <BSP_SD_GetCardState>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d107      	bne.n	8004e1a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <SD_CheckStatus+0x38>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <SD_CheckStatus+0x38>)
 8004e18:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004e1a:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <SD_CheckStatus+0x38>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b2db      	uxtb	r3, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	2000000d 	.word	0x2000000d

08004e2c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004e36:	f7ff ff21 	bl	8004c7c <BSP_SD_Init>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d107      	bne.n	8004e50 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff ffd4 	bl	8004df0 <SD_CheckStatus>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <SD_initialize+0x34>)
 8004e4e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <SD_initialize+0x34>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	2000000d 	.word	0x2000000d

08004e64 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ffbd 	bl	8004df0 <SD_CheckStatus>
 8004e76:	4603      	mov	r3, r0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004e94:	f247 5030 	movw	r0, #30000	; 0x7530
 8004e98:	f7ff ff8c 	bl	8004db4 <SD_CheckStatusWithTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da01      	bge.n	8004ea6 <SD_read+0x26>
  {
    return res;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	e03b      	b.n	8004f1e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	68b8      	ldr	r0, [r7, #8]
 8004eac:	f7ff fefe 	bl	8004cac <BSP_SD_ReadBlocks_DMA>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d132      	bne.n	8004f1c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <SD_read+0xa8>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004ebc:	f7fc fdda 	bl	8001a74 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004ec2:	bf00      	nop
 8004ec4:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <SD_read+0xa8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d108      	bne.n	8004ede <SD_read+0x5e>
 8004ecc:	f7fc fdd2 	bl	8001a74 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f247 522f 	movw	r2, #29999	; 0x752f
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d9f2      	bls.n	8004ec4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <SD_read+0xa8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	75fb      	strb	r3, [r7, #23]
 8004eea:	e017      	b.n	8004f1c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004eec:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <SD_read+0xa8>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004ef2:	f7fc fdbf 	bl	8001a74 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ef8:	e007      	b.n	8004f0a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004efa:	f7ff ff0b 	bl	8004d14 <BSP_SD_GetCardState>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <SD_read+0x8a>
          {
            res = RES_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004f08:	e008      	b.n	8004f1c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004f0a:	f7fc fdb3 	bl	8001a74 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	f247 522f 	movw	r2, #29999	; 0x752f
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d9ee      	bls.n	8004efa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	200025bc 	.word	0x200025bc

08004f2c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	4603      	mov	r3, r0
 8004f3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004f40:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <SD_write+0xa8>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004f46:	f247 5030 	movw	r0, #30000	; 0x7530
 8004f4a:	f7ff ff33 	bl	8004db4 <SD_CheckStatusWithTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da01      	bge.n	8004f58 <SD_write+0x2c>
  {
    return res;
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
 8004f56:	e038      	b.n	8004fca <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	68b8      	ldr	r0, [r7, #8]
 8004f5e:	f7ff febf 	bl	8004ce0 <BSP_SD_WriteBlocks_DMA>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d12f      	bne.n	8004fc8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004f68:	f7fc fd84 	bl	8001a74 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004f6e:	bf00      	nop
 8004f70:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <SD_write+0xa8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d108      	bne.n	8004f8a <SD_write+0x5e>
 8004f78:	f7fc fd7c 	bl	8001a74 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f247 522f 	movw	r2, #29999	; 0x752f
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d9f2      	bls.n	8004f70 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <SD_write+0xa8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	75fb      	strb	r3, [r7, #23]
 8004f96:	e017      	b.n	8004fc8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004f98:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <SD_write+0xa8>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004f9e:	f7fc fd69 	bl	8001a74 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004fa4:	e007      	b.n	8004fb6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004fa6:	f7ff feb5 	bl	8004d14 <BSP_SD_GetCardState>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <SD_write+0x8a>
          {
            res = RES_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8004fb4:	e008      	b.n	8004fc8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004fb6:	f7fc fd5d 	bl	8001a74 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f247 522f 	movw	r2, #29999	; 0x752f
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d9ee      	bls.n	8004fa6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	200025b8 	.word	0x200025b8

08004fd8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	603a      	str	r2, [r7, #0]
 8004fe2:	71fb      	strb	r3, [r7, #7]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004fee:	4b25      	ldr	r3, [pc, #148]	; (8005084 <SD_ioctl+0xac>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <SD_ioctl+0x28>
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e03c      	b.n	800507a <SD_ioctl+0xa2>

  switch (cmd)
 8005000:	79bb      	ldrb	r3, [r7, #6]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d834      	bhi.n	8005070 <SD_ioctl+0x98>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <SD_ioctl+0x34>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	0800501d 	.word	0x0800501d
 8005010:	08005025 	.word	0x08005025
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005057 	.word	0x08005057
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005022:	e028      	b.n	8005076 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005024:	f107 030c 	add.w	r3, r7, #12
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fe83 	bl	8004d34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800502e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800503a:	e01c      	b.n	8005076 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800503c:	f107 030c 	add.w	r3, r7, #12
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fe77 	bl	8004d34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	b29a      	uxth	r2, r3
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005054:	e00f      	b.n	8005076 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005056:	f107 030c 	add.w	r3, r7, #12
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fe6a 	bl	8004d34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	0a5a      	lsrs	r2, r3, #9
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800506e:	e002      	b.n	8005076 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005070:	2304      	movs	r3, #4
 8005072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800507a:	4618      	mov	r0, r3
 800507c:	3730      	adds	r7, #48	; 0x30
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	2000000d 	.word	0x2000000d

08005088 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <BSP_SD_WriteCpltCallback+0x14>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	200025b8 	.word	0x200025b8

080050a0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <BSP_SD_ReadCpltCallback+0x14>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	200025bc 	.word	0x200025bc

080050b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <disk_status+0x30>)
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	79fa      	ldrb	r2, [r7, #7]
 80050d0:	4905      	ldr	r1, [pc, #20]	; (80050e8 <disk_status+0x30>)
 80050d2:	440a      	add	r2, r1
 80050d4:	7a12      	ldrb	r2, [r2, #8]
 80050d6:	4610      	mov	r0, r2
 80050d8:	4798      	blx	r3
 80050da:	4603      	mov	r3, r0
 80050dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200025e8 	.word	0x200025e8

080050ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	4a0d      	ldr	r2, [pc, #52]	; (8005134 <disk_initialize+0x48>)
 80050fe:	5cd3      	ldrb	r3, [r2, r3]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d111      	bne.n	8005128 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	4a0b      	ldr	r2, [pc, #44]	; (8005134 <disk_initialize+0x48>)
 8005108:	2101      	movs	r1, #1
 800510a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <disk_initialize+0x48>)
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	79fa      	ldrb	r2, [r7, #7]
 800511a:	4906      	ldr	r1, [pc, #24]	; (8005134 <disk_initialize+0x48>)
 800511c:	440a      	add	r2, r1
 800511e:	7a12      	ldrb	r2, [r2, #8]
 8005120:	4610      	mov	r0, r2
 8005122:	4798      	blx	r3
 8005124:	4603      	mov	r3, r0
 8005126:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005128:	7bfb      	ldrb	r3, [r7, #15]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	200025e8 	.word	0x200025e8

08005138 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	4a0a      	ldr	r2, [pc, #40]	; (8005174 <disk_read+0x3c>)
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	689c      	ldr	r4, [r3, #8]
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	4a07      	ldr	r2, [pc, #28]	; (8005174 <disk_read+0x3c>)
 8005158:	4413      	add	r3, r2
 800515a:	7a18      	ldrb	r0, [r3, #8]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	47a0      	blx	r4
 8005164:	4603      	mov	r3, r0
 8005166:	75fb      	strb	r3, [r7, #23]
  return res;
 8005168:	7dfb      	ldrb	r3, [r7, #23]
}
 800516a:	4618      	mov	r0, r3
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd90      	pop	{r4, r7, pc}
 8005172:	bf00      	nop
 8005174:	200025e8 	.word	0x200025e8

08005178 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4603      	mov	r3, r0
 8005186:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <disk_write+0x3c>)
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	68dc      	ldr	r4, [r3, #12]
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <disk_write+0x3c>)
 8005198:	4413      	add	r3, r2
 800519a:	7a18      	ldrb	r0, [r3, #8]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	47a0      	blx	r4
 80051a4:	4603      	mov	r3, r0
 80051a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd90      	pop	{r4, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200025e8 	.word	0x200025e8

080051b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	603a      	str	r2, [r7, #0]
 80051c2:	71fb      	strb	r3, [r7, #7]
 80051c4:	460b      	mov	r3, r1
 80051c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <disk_ioctl+0x38>)
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	79fa      	ldrb	r2, [r7, #7]
 80051d6:	4906      	ldr	r1, [pc, #24]	; (80051f0 <disk_ioctl+0x38>)
 80051d8:	440a      	add	r2, r1
 80051da:	7a10      	ldrb	r0, [r2, #8]
 80051dc:	79b9      	ldrb	r1, [r7, #6]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	4798      	blx	r3
 80051e2:	4603      	mov	r3, r0
 80051e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	200025e8 	.word	0x200025e8

080051f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3301      	adds	r3, #1
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005204:	89fb      	ldrh	r3, [r7, #14]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	b21a      	sxth	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b21b      	sxth	r3, r3
 8005210:	4313      	orrs	r3, r2
 8005212:	b21b      	sxth	r3, r3
 8005214:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005216:	89fb      	ldrh	r3, [r7, #14]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3303      	adds	r3, #3
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	3202      	adds	r2, #2
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	3201      	adds	r2, #1
 800524a:	7812      	ldrb	r2, [r2, #0]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
	return rv;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	887a      	ldrh	r2, [r7, #2]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	887b      	ldrh	r3, [r7, #2]
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00d      	beq.n	800532e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	1c53      	adds	r3, r2, #1
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	1c59      	adds	r1, r3, #1
 800531c:	6179      	str	r1, [r7, #20]
 800531e:	7812      	ldrb	r2, [r2, #0]
 8005320:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3b01      	subs	r3, #1
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f1      	bne.n	8005312 <mem_cpy+0x1a>
	}
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800533a:	b480      	push	{r7}
 800533c:	b087      	sub	sp, #28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	617a      	str	r2, [r7, #20]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3b01      	subs	r3, #1
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f3      	bne.n	800534a <mem_set+0x10>
}
 8005362:	bf00      	nop
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005370:	b480      	push	{r7}
 8005372:	b089      	sub	sp, #36	; 0x24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	61fa      	str	r2, [r7, #28]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	4619      	mov	r1, r3
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	61ba      	str	r2, [r7, #24]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	1acb      	subs	r3, r1, r3
 800539c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <mem_cmp+0x40>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0eb      	beq.n	8005388 <mem_cmp+0x18>

	return r;
 80053b0:	697b      	ldr	r3, [r7, #20]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3724      	adds	r7, #36	; 0x24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80053c8:	e002      	b.n	80053d0 <chk_chr+0x12>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3301      	adds	r3, #1
 80053ce:	607b      	str	r3, [r7, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <chk_chr+0x26>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d1f2      	bne.n	80053ca <chk_chr+0xc>
	return *str;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	781b      	ldrb	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e029      	b.n	800545c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005408:	4a27      	ldr	r2, [pc, #156]	; (80054a8 <chk_lock+0xb4>)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	4413      	add	r3, r2
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01d      	beq.n	8005452 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005416:	4a24      	ldr	r2, [pc, #144]	; (80054a8 <chk_lock+0xb4>)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	4413      	add	r3, r2
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d116      	bne.n	8005456 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005428:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <chk_lock+0xb4>)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005438:	429a      	cmp	r2, r3
 800543a:	d10c      	bne.n	8005456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800543c:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <chk_lock+0xb4>)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	4413      	add	r3, r2
 8005444:	3308      	adds	r3, #8
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800544c:	429a      	cmp	r2, r3
 800544e:	d102      	bne.n	8005456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005450:	e007      	b.n	8005462 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005452:	2301      	movs	r3, #1
 8005454:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3301      	adds	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d9d2      	bls.n	8005408 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d109      	bne.n	800547c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <chk_lock+0x80>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d101      	bne.n	8005478 <chk_lock+0x84>
 8005474:	2300      	movs	r3, #0
 8005476:	e010      	b.n	800549a <chk_lock+0xa6>
 8005478:	2312      	movs	r3, #18
 800547a:	e00e      	b.n	800549a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d108      	bne.n	8005494 <chk_lock+0xa0>
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <chk_lock+0xb4>)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	4413      	add	r3, r2
 800548a:	330c      	adds	r3, #12
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005492:	d101      	bne.n	8005498 <chk_lock+0xa4>
 8005494:	2310      	movs	r3, #16
 8005496:	e000      	b.n	800549a <chk_lock+0xa6>
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	200025c8 	.word	0x200025c8

080054ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80054b2:	2300      	movs	r3, #0
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	e002      	b.n	80054be <enq_lock+0x12>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3301      	adds	r3, #1
 80054bc:	607b      	str	r3, [r7, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d806      	bhi.n	80054d2 <enq_lock+0x26>
 80054c4:	4a09      	ldr	r2, [pc, #36]	; (80054ec <enq_lock+0x40>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4413      	add	r3, r2
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f2      	bne.n	80054b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	200025c8 	.word	0x200025c8

080054f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	e01f      	b.n	8005540 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005500:	4a41      	ldr	r2, [pc, #260]	; (8005608 <inc_lock+0x118>)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	4413      	add	r3, r2
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d113      	bne.n	800553a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005512:	4a3d      	ldr	r2, [pc, #244]	; (8005608 <inc_lock+0x118>)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	4413      	add	r3, r2
 800551a:	3304      	adds	r3, #4
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005522:	429a      	cmp	r2, r3
 8005524:	d109      	bne.n	800553a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005526:	4a38      	ldr	r2, [pc, #224]	; (8005608 <inc_lock+0x118>)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	4413      	add	r3, r2
 800552e:	3308      	adds	r3, #8
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005536:	429a      	cmp	r2, r3
 8005538:	d006      	beq.n	8005548 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d9dc      	bls.n	8005500 <inc_lock+0x10>
 8005546:	e000      	b.n	800554a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005548:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d132      	bne.n	80055b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e002      	b.n	800555c <inc_lock+0x6c>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d806      	bhi.n	8005570 <inc_lock+0x80>
 8005562:	4a29      	ldr	r2, [pc, #164]	; (8005608 <inc_lock+0x118>)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	4413      	add	r3, r2
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1f2      	bne.n	8005556 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d101      	bne.n	800557a <inc_lock+0x8a>
 8005576:	2300      	movs	r3, #0
 8005578:	e040      	b.n	80055fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4922      	ldr	r1, [pc, #136]	; (8005608 <inc_lock+0x118>)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	440b      	add	r3, r1
 8005586:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	491e      	ldr	r1, [pc, #120]	; (8005608 <inc_lock+0x118>)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	440b      	add	r3, r1
 8005594:	3304      	adds	r3, #4
 8005596:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	491a      	ldr	r1, [pc, #104]	; (8005608 <inc_lock+0x118>)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	440b      	add	r3, r1
 80055a4:	3308      	adds	r3, #8
 80055a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80055a8:	4a17      	ldr	r2, [pc, #92]	; (8005608 <inc_lock+0x118>)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	4413      	add	r3, r2
 80055b0:	330c      	adds	r3, #12
 80055b2:	2200      	movs	r2, #0
 80055b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d009      	beq.n	80055d0 <inc_lock+0xe0>
 80055bc:	4a12      	ldr	r2, [pc, #72]	; (8005608 <inc_lock+0x118>)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	4413      	add	r3, r2
 80055c4:	330c      	adds	r3, #12
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <inc_lock+0xe0>
 80055cc:	2300      	movs	r3, #0
 80055ce:	e015      	b.n	80055fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d108      	bne.n	80055e8 <inc_lock+0xf8>
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <inc_lock+0x118>)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	4413      	add	r3, r2
 80055de:	330c      	adds	r3, #12
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	e001      	b.n	80055ec <inc_lock+0xfc>
 80055e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ec:	4906      	ldr	r1, [pc, #24]	; (8005608 <inc_lock+0x118>)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	440b      	add	r3, r1
 80055f4:	330c      	adds	r3, #12
 80055f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	200025c8 	.word	0x200025c8

0800560c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3b01      	subs	r3, #1
 8005618:	607b      	str	r3, [r7, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d825      	bhi.n	800566c <dec_lock+0x60>
		n = Files[i].ctr;
 8005620:	4a17      	ldr	r2, [pc, #92]	; (8005680 <dec_lock+0x74>)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	4413      	add	r3, r2
 8005628:	330c      	adds	r3, #12
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800562e:	89fb      	ldrh	r3, [r7, #14]
 8005630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005634:	d101      	bne.n	800563a <dec_lock+0x2e>
 8005636:	2300      	movs	r3, #0
 8005638:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800563a:	89fb      	ldrh	r3, [r7, #14]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <dec_lock+0x3a>
 8005640:	89fb      	ldrh	r3, [r7, #14]
 8005642:	3b01      	subs	r3, #1
 8005644:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005646:	4a0e      	ldr	r2, [pc, #56]	; (8005680 <dec_lock+0x74>)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	4413      	add	r3, r2
 800564e:	330c      	adds	r3, #12
 8005650:	89fa      	ldrh	r2, [r7, #14]
 8005652:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005654:	89fb      	ldrh	r3, [r7, #14]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <dec_lock+0x5a>
 800565a:	4a09      	ldr	r2, [pc, #36]	; (8005680 <dec_lock+0x74>)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	4413      	add	r3, r2
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	737b      	strb	r3, [r7, #13]
 800566a:	e001      	b.n	8005670 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800566c:	2302      	movs	r3, #2
 800566e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005670:	7b7b      	ldrb	r3, [r7, #13]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	200025c8 	.word	0x200025c8

08005684 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e010      	b.n	80056b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005692:	4a0d      	ldr	r2, [pc, #52]	; (80056c8 <clear_lock+0x44>)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4413      	add	r3, r2
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d105      	bne.n	80056ae <clear_lock+0x2a>
 80056a2:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <clear_lock+0x44>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	4413      	add	r3, r2
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d9eb      	bls.n	8005692 <clear_lock+0xe>
	}
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	200025c8 	.word	0x200025c8

080056cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	78db      	ldrb	r3, [r3, #3]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d034      	beq.n	800574a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	7858      	ldrb	r0, [r3, #1]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80056f0:	2301      	movs	r3, #1
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	f7ff fd40 	bl	8005178 <disk_write>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <sync_window+0x38>
			res = FR_DISK_ERR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
 8005702:	e022      	b.n	800574a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	1ad2      	subs	r2, r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	429a      	cmp	r2, r3
 8005718:	d217      	bcs.n	800574a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	789b      	ldrb	r3, [r3, #2]
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	e010      	b.n	8005744 <sync_window+0x78>
					wsect += fs->fsize;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4413      	add	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	7858      	ldrb	r0, [r3, #1]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005736:	2301      	movs	r3, #1
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	f7ff fd1d 	bl	8005178 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	3b01      	subs	r3, #1
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d8eb      	bhi.n	8005722 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d01b      	beq.n	80057a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ffad 	bl	80056cc <sync_window>
 8005772:	4603      	mov	r3, r0
 8005774:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d113      	bne.n	80057a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	7858      	ldrb	r0, [r3, #1]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005786:	2301      	movs	r3, #1
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	f7ff fcd5 	bl	8005138 <disk_read>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005794:	f04f 33ff 	mov.w	r3, #4294967295
 8005798:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff ff87 	bl	80056cc <sync_window>
 80057be:	4603      	mov	r3, r0
 80057c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d159      	bne.n	800587c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d149      	bne.n	8005864 <sync_fs+0xb4>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	791b      	ldrb	r3, [r3, #4]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d145      	bne.n	8005864 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	899b      	ldrh	r3, [r3, #12]
 80057e2:	461a      	mov	r2, r3
 80057e4:	2100      	movs	r1, #0
 80057e6:	f7ff fda8 	bl	800533a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3334      	adds	r3, #52	; 0x34
 80057ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fd37 	bl	800526a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3334      	adds	r3, #52	; 0x34
 8005800:	4921      	ldr	r1, [pc, #132]	; (8005888 <sync_fs+0xd8>)
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fd4c 	bl	80052a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3334      	adds	r3, #52	; 0x34
 800580c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005810:	491e      	ldr	r1, [pc, #120]	; (800588c <sync_fs+0xdc>)
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fd44 	bl	80052a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3334      	adds	r3, #52	; 0x34
 800581c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f7ff fd3a 	bl	80052a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3334      	adds	r3, #52	; 0x34
 8005830:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7ff fd30 	bl	80052a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	7858      	ldrb	r0, [r3, #1]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005858:	2301      	movs	r3, #1
 800585a:	f7ff fc8d 	bl	8005178 <disk_write>
			fs->fsi_flag = 0;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2200      	movs	r2, #0
 800586a:	2100      	movs	r1, #0
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff fca3 	bl	80051b8 <disk_ioctl>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <sync_fs+0xcc>
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	41615252 	.word	0x41615252
 800588c:	61417272 	.word	0x61417272

08005890 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	3b02      	subs	r3, #2
 800589e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	3b02      	subs	r3, #2
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d301      	bcc.n	80058b0 <clust2sect+0x20>
 80058ac:	2300      	movs	r3, #0
 80058ae:	e008      	b.n	80058c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	895b      	ldrh	r3, [r3, #10]
 80058b4:	461a      	mov	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	fb03 f202 	mul.w	r2, r3, r2
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	4413      	add	r3, r2
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b086      	sub	sp, #24
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d904      	bls.n	80058ee <get_fat+0x20>
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d302      	bcc.n	80058f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80058ee:	2301      	movs	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e0bb      	b.n	8005a6c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295
 80058f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	f000 8083 	beq.w	8005a0a <get_fat+0x13c>
 8005904:	2b03      	cmp	r3, #3
 8005906:	f300 80a7 	bgt.w	8005a58 <get_fat+0x18a>
 800590a:	2b01      	cmp	r3, #1
 800590c:	d002      	beq.n	8005914 <get_fat+0x46>
 800590e:	2b02      	cmp	r3, #2
 8005910:	d056      	beq.n	80059c0 <get_fat+0xf2>
 8005912:	e0a1      	b.n	8005a58 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	899b      	ldrh	r3, [r3, #12]
 800592a:	4619      	mov	r1, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005932:	4413      	add	r3, r2
 8005934:	4619      	mov	r1, r3
 8005936:	6938      	ldr	r0, [r7, #16]
 8005938:	f7ff ff0c 	bl	8005754 <move_window>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 808d 	bne.w	8005a5e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	60fa      	str	r2, [r7, #12]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	8992      	ldrh	r2, [r2, #12]
 800594e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005952:	fb01 f202 	mul.w	r2, r1, r2
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4413      	add	r3, r2
 800595c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005960:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	899b      	ldrh	r3, [r3, #12]
 800596a:	4619      	mov	r1, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005972:	4413      	add	r3, r2
 8005974:	4619      	mov	r1, r3
 8005976:	6938      	ldr	r0, [r7, #16]
 8005978:	f7ff feec 	bl	8005754 <move_window>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d16f      	bne.n	8005a62 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	899b      	ldrh	r3, [r3, #12]
 8005986:	461a      	mov	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	fbb3 f1f2 	udiv	r1, r3, r2
 800598e:	fb01 f202 	mul.w	r2, r1, r2
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4413      	add	r3, r2
 8005998:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	461a      	mov	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <get_fat+0xe8>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	e002      	b.n	80059bc <get_fat+0xee>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059bc:	617b      	str	r3, [r7, #20]
			break;
 80059be:	e055      	b.n	8005a6c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	899b      	ldrh	r3, [r3, #12]
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80059d4:	4413      	add	r3, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	6938      	ldr	r0, [r7, #16]
 80059da:	f7ff febb 	bl	8005754 <move_window>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d140      	bne.n	8005a66 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	8992      	ldrh	r2, [r2, #12]
 80059f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80059f6:	fb00 f202 	mul.w	r2, r0, r2
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	440b      	add	r3, r1
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff fbf8 	bl	80051f4 <ld_word>
 8005a04:	4603      	mov	r3, r0
 8005a06:	617b      	str	r3, [r7, #20]
			break;
 8005a08:	e030      	b.n	8005a6c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	899b      	ldrh	r3, [r3, #12]
 8005a12:	089b      	lsrs	r3, r3, #2
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	4619      	mov	r1, r3
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a1e:	4413      	add	r3, r2
 8005a20:	4619      	mov	r1, r3
 8005a22:	6938      	ldr	r0, [r7, #16]
 8005a24:	f7ff fe96 	bl	8005754 <move_window>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d11d      	bne.n	8005a6a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	8992      	ldrh	r2, [r2, #12]
 8005a3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a40:	fb00 f202 	mul.w	r2, r0, r2
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	440b      	add	r3, r1
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fbeb 	bl	8005224 <ld_dword>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a54:	617b      	str	r3, [r7, #20]
			break;
 8005a56:	e009      	b.n	8005a6c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e006      	b.n	8005a6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a5e:	bf00      	nop
 8005a60:	e004      	b.n	8005a6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a62:	bf00      	nop
 8005a64:	e002      	b.n	8005a6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a6a:	bf00      	nop
		}
	}

	return val;
 8005a6c:	697b      	ldr	r3, [r7, #20]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005a76:	b590      	push	{r4, r7, lr}
 8005a78:	b089      	sub	sp, #36	; 0x24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005a82:	2302      	movs	r3, #2
 8005a84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	f240 8109 	bls.w	8005ca0 <put_fat+0x22a>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	f080 8103 	bcs.w	8005ca0 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	f000 80b6 	beq.w	8005c10 <put_fat+0x19a>
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	f300 80fb 	bgt.w	8005ca0 <put_fat+0x22a>
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d003      	beq.n	8005ab6 <put_fat+0x40>
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	f000 8083 	beq.w	8005bba <put_fat+0x144>
 8005ab4:	e0f4      	b.n	8005ca0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	899b      	ldrh	r3, [r3, #12]
 8005acc:	4619      	mov	r1, r3
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ad4:	4413      	add	r3, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fe3b 	bl	8005754 <move_window>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ae2:	7ffb      	ldrb	r3, [r7, #31]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f040 80d4 	bne.w	8005c92 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	61ba      	str	r2, [r7, #24]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	8992      	ldrh	r2, [r2, #12]
 8005afa:	fbb3 f0f2 	udiv	r0, r3, r2
 8005afe:	fb00 f202 	mul.w	r2, r0, r2
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	440b      	add	r3, r1
 8005b06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <put_fat+0xb8>
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	b25b      	sxtb	r3, r3
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	b25a      	sxtb	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	b25b      	sxtb	r3, r3
 8005b26:	4313      	orrs	r3, r2
 8005b28:	b25b      	sxtb	r3, r3
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	e001      	b.n	8005b32 <put_fat+0xbc>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	899b      	ldrh	r3, [r3, #12]
 8005b44:	4619      	mov	r1, r3
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff fdff 	bl	8005754 <move_window>
 8005b56:	4603      	mov	r3, r0
 8005b58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b5a:	7ffb      	ldrb	r3, [r7, #31]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f040 809a 	bne.w	8005c96 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	899b      	ldrh	r3, [r3, #12]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b74:	fb00 f202 	mul.w	r2, r0, r2
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <put_fat+0x11a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	e00e      	b.n	8005bae <put_fat+0x138>
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b25b      	sxtb	r3, r3
 8005b96:	f023 030f 	bic.w	r3, r3, #15
 8005b9a:	b25a      	sxtb	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	0a1b      	lsrs	r3, r3, #8
 8005ba0:	b25b      	sxtb	r3, r3
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	b25b      	sxtb	r3, r3
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	70da      	strb	r2, [r3, #3]
			break;
 8005bb8:	e072      	b.n	8005ca0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	899b      	ldrh	r3, [r3, #12]
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bce:	4413      	add	r3, r2
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff fdbe 	bl	8005754 <move_window>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bdc:	7ffb      	ldrb	r3, [r7, #31]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d15b      	bne.n	8005c9a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	8992      	ldrh	r2, [r2, #12]
 8005bf0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bf4:	fb00 f202 	mul.w	r2, r0, r2
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	b292      	uxth	r2, r2
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fb31 	bl	800526a <st_word>
			fs->wflag = 1;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	70da      	strb	r2, [r3, #3]
			break;
 8005c0e:	e047      	b.n	8005ca0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	899b      	ldrh	r3, [r3, #12]
 8005c18:	089b      	lsrs	r3, r3, #2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c24:	4413      	add	r3, r2
 8005c26:	4619      	mov	r1, r3
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff fd93 	bl	8005754 <move_window>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c32:	7ffb      	ldrb	r3, [r7, #31]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d132      	bne.n	8005c9e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	8992      	ldrh	r2, [r2, #12]
 8005c4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c50:	fb00 f202 	mul.w	r2, r0, r2
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	440b      	add	r3, r1
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fae3 	bl	8005224 <ld_dword>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c64:	4323      	orrs	r3, r4
 8005c66:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	8992      	ldrh	r2, [r2, #12]
 8005c76:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c7a:	fb00 f202 	mul.w	r2, r0, r2
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	440b      	add	r3, r1
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff fb0b 	bl	80052a0 <st_dword>
			fs->wflag = 1;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	70da      	strb	r2, [r3, #3]
			break;
 8005c90:	e006      	b.n	8005ca0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005c92:	bf00      	nop
 8005c94:	e004      	b.n	8005ca0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005c9e:	bf00      	nop
		}
	}
	return res;
 8005ca0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3724      	adds	r7, #36	; 0x24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd90      	pop	{r4, r7, pc}

08005caa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b088      	sub	sp, #32
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d904      	bls.n	8005cd0 <remove_chain+0x26>
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d301      	bcc.n	8005cd4 <remove_chain+0x2a>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e04b      	b.n	8005d6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00c      	beq.n	8005cf4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005cda:	f04f 32ff 	mov.w	r2, #4294967295
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	69b8      	ldr	r0, [r7, #24]
 8005ce2:	f7ff fec8 	bl	8005a76 <put_fat>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <remove_chain+0x4a>
 8005cf0:	7ffb      	ldrb	r3, [r7, #31]
 8005cf2:	e03b      	b.n	8005d6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff fde9 	bl	80058ce <get_fat>
 8005cfc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d031      	beq.n	8005d68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <remove_chain+0x64>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e02e      	b.n	8005d6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d101      	bne.n	8005d1a <remove_chain+0x70>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e028      	b.n	8005d6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	69b8      	ldr	r0, [r7, #24]
 8005d20:	f7ff fea9 	bl	8005a76 <put_fat>
 8005d24:	4603      	mov	r3, r0
 8005d26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005d28:	7ffb      	ldrb	r3, [r7, #31]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <remove_chain+0x88>
 8005d2e:	7ffb      	ldrb	r3, [r7, #31]
 8005d30:	e01c      	b.n	8005d6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	695a      	ldr	r2, [r3, #20]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	3b02      	subs	r3, #2
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d20b      	bcs.n	8005d58 <remove_chain+0xae>
			fs->free_clst++;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	791b      	ldrb	r3, [r3, #4]
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d3c6      	bcc.n	8005cf4 <remove_chain+0x4a>
 8005d66:	e000      	b.n	8005d6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005d68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <create_chain+0x2c>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d31b      	bcc.n	8005dd8 <create_chain+0x64>
 8005da0:	2301      	movs	r3, #1
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	e018      	b.n	8005dd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fd90 	bl	80058ce <get_fat>
 8005dae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d801      	bhi.n	8005dba <create_chain+0x46>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e070      	b.n	8005e9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d101      	bne.n	8005dc6 <create_chain+0x52>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	e06a      	b.n	8005e9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d201      	bcs.n	8005dd4 <create_chain+0x60>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	e063      	b.n	8005e9c <create_chain+0x128>
		scl = clst;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d307      	bcc.n	8005dfc <create_chain+0x88>
				ncl = 2;
 8005dec:	2302      	movs	r3, #2
 8005dee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d901      	bls.n	8005dfc <create_chain+0x88>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e04f      	b.n	8005e9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005dfc:	69f9      	ldr	r1, [r7, #28]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fd65 	bl	80058ce <get_fat>
 8005e04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d003      	beq.n	8005e1a <create_chain+0xa6>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d101      	bne.n	8005e1e <create_chain+0xaa>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	e03e      	b.n	8005e9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d1da      	bne.n	8005ddc <create_chain+0x68>
 8005e26:	2300      	movs	r3, #0
 8005e28:	e038      	b.n	8005e9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005e2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	69f9      	ldr	r1, [r7, #28]
 8005e32:	6938      	ldr	r0, [r7, #16]
 8005e34:	f7ff fe1f 	bl	8005a76 <put_fat>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <create_chain+0xe2>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d006      	beq.n	8005e56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6938      	ldr	r0, [r7, #16]
 8005e4e:	f7ff fe12 	bl	8005a76 <put_fat>
 8005e52:	4603      	mov	r3, r0
 8005e54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d116      	bne.n	8005e8a <create_chain+0x116>
		fs->last_clst = ncl;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	3b02      	subs	r3, #2
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d804      	bhi.n	8005e7a <create_chain+0x106>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	1e5a      	subs	r2, r3, #1
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	791b      	ldrb	r3, [r3, #4]
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	711a      	strb	r2, [r3, #4]
 8005e88:	e007      	b.n	8005e9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d102      	bne.n	8005e96 <create_chain+0x122>
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295
 8005e94:	e000      	b.n	8005e98 <create_chain+0x124>
 8005e96:	2301      	movs	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005e9a:	69fb      	ldr	r3, [r7, #28]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	3304      	adds	r3, #4
 8005eba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	899b      	ldrh	r3, [r3, #12]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	8952      	ldrh	r2, [r2, #10]
 8005ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	613a      	str	r2, [r7, #16]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <clmt_clust+0x42>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e010      	b.n	8005f08 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d307      	bcc.n	8005efe <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005efc:	e7e9      	b.n	8005ed2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005efe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	4413      	add	r3, r2
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f2a:	d204      	bcs.n	8005f36 <dir_sdi+0x22>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005f36:	2302      	movs	r3, #2
 8005f38:	e071      	b.n	800601e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <dir_sdi+0x46>
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d902      	bls.n	8005f5a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10c      	bne.n	8005f7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	8912      	ldrh	r2, [r2, #8]
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d301      	bcc.n	8005f70 <dir_sdi+0x5c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e056      	b.n	800601e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	61da      	str	r2, [r3, #28]
 8005f78:	e02d      	b.n	8005fd6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	895b      	ldrh	r3, [r3, #10]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	899b      	ldrh	r3, [r3, #12]
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f8a:	e019      	b.n	8005fc0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6979      	ldr	r1, [r7, #20]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff fc9c 	bl	80058ce <get_fat>
 8005f96:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d101      	bne.n	8005fa4 <dir_sdi+0x90>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e03c      	b.n	800601e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d904      	bls.n	8005fb4 <dir_sdi+0xa0>
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d301      	bcc.n	8005fb8 <dir_sdi+0xa4>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e032      	b.n	800601e <dir_sdi+0x10a>
			ofs -= csz;
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d2e1      	bcs.n	8005f8c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005fc8:	6979      	ldr	r1, [r7, #20]
 8005fca:	6938      	ldr	r0, [r7, #16]
 8005fcc:	f7ff fc60 	bl	8005890 <clust2sect>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <dir_sdi+0xd4>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e01a      	b.n	800601e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	899b      	ldrh	r3, [r3, #12]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ff8:	441a      	add	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	899b      	ldrh	r3, [r3, #12]
 8006008:	461a      	mov	r2, r3
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006010:	fb00 f202 	mul.w	r2, r0, r2
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	18ca      	adds	r2, r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b086      	sub	sp, #24
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	3320      	adds	r3, #32
 800603c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <dir_next+0x28>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800604c:	d301      	bcc.n	8006052 <dir_next+0x2c>
 800604e:	2304      	movs	r3, #4
 8006050:	e0bb      	b.n	80061ca <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	899b      	ldrh	r3, [r3, #12]
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	fbb3 f1f2 	udiv	r1, r3, r2
 800605e:	fb01 f202 	mul.w	r2, r1, r2
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 809d 	bne.w	80061a4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	8912      	ldrh	r2, [r2, #8]
 8006084:	4293      	cmp	r3, r2
 8006086:	f0c0 808d 	bcc.w	80061a4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	61da      	str	r2, [r3, #28]
 8006090:	2304      	movs	r3, #4
 8006092:	e09a      	b.n	80061ca <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	899b      	ldrh	r3, [r3, #12]
 8006098:	461a      	mov	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	8952      	ldrh	r2, [r2, #10]
 80060a4:	3a01      	subs	r2, #1
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d17b      	bne.n	80061a4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f7ff fc0a 	bl	80058ce <get_fat>
 80060ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d801      	bhi.n	80060c6 <dir_next+0xa0>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e081      	b.n	80061ca <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d101      	bne.n	80060d2 <dir_next+0xac>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e07b      	b.n	80061ca <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d359      	bcc.n	8006190 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d104      	bne.n	80060ec <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	61da      	str	r2, [r3, #28]
 80060e8:	2304      	movs	r3, #4
 80060ea:	e06e      	b.n	80061ca <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f7ff fe3d 	bl	8005d74 <create_chain>
 80060fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <dir_next+0xe0>
 8006102:	2307      	movs	r3, #7
 8006104:	e061      	b.n	80061ca <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <dir_next+0xea>
 800610c:	2302      	movs	r3, #2
 800610e:	e05c      	b.n	80061ca <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d101      	bne.n	800611c <dir_next+0xf6>
 8006118:	2301      	movs	r3, #1
 800611a:	e056      	b.n	80061ca <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7ff fad5 	bl	80056cc <sync_window>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <dir_next+0x106>
 8006128:	2301      	movs	r3, #1
 800612a:	e04e      	b.n	80061ca <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	899b      	ldrh	r3, [r3, #12]
 8006136:	461a      	mov	r2, r3
 8006138:	2100      	movs	r1, #0
 800613a:	f7ff f8fe 	bl	800533a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	6979      	ldr	r1, [r7, #20]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fba3 	bl	8005890 <clust2sect>
 800614a:	4602      	mov	r2, r0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
 8006150:	e012      	b.n	8006178 <dir_next+0x152>
						fs->wflag = 1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7ff fab7 	bl	80056cc <sync_window>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <dir_next+0x142>
 8006164:	2301      	movs	r3, #1
 8006166:	e030      	b.n	80061ca <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	3301      	adds	r3, #1
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	895b      	ldrh	r3, [r3, #10]
 800617c:	461a      	mov	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	4293      	cmp	r3, r2
 8006182:	d3e6      	bcc.n	8006152 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006196:	6979      	ldr	r1, [r7, #20]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7ff fb79 	bl	8005890 <clust2sect>
 800619e:	4602      	mov	r2, r0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	899b      	ldrh	r3, [r3, #12]
 80061b4:	461a      	mov	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80061bc:	fb00 f202 	mul.w	r2, r0, r2
 80061c0:	1a9b      	subs	r3, r3, r2
 80061c2:	18ca      	adds	r2, r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b086      	sub	sp, #24
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80061e2:	2100      	movs	r1, #0
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff fe95 	bl	8005f14 <dir_sdi>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d12b      	bne.n	800624c <dir_alloc+0x7a>
		n = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4619      	mov	r1, r3
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff faa8 	bl	8005754 <move_window>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d11d      	bne.n	800624a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2be5      	cmp	r3, #229	; 0xe5
 8006216:	d004      	beq.n	8006222 <dir_alloc+0x50>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3301      	adds	r3, #1
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d102      	bne.n	8006236 <dir_alloc+0x64>
 8006230:	e00c      	b.n	800624c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006236:	2101      	movs	r1, #1
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fef4 	bl	8006026 <dir_next>
 800623e:	4603      	mov	r3, r0
 8006240:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0d7      	beq.n	80061f8 <dir_alloc+0x26>
 8006248:	e000      	b.n	800624c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800624a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d101      	bne.n	8006256 <dir_alloc+0x84>
 8006252:	2307      	movs	r3, #7
 8006254:	75fb      	strb	r3, [r7, #23]
	return res;
 8006256:	7dfb      	ldrb	r3, [r7, #23]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	331a      	adds	r3, #26
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe ffc0 	bl	80051f4 <ld_word>
 8006274:	4603      	mov	r3, r0
 8006276:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d109      	bne.n	8006294 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	3314      	adds	r3, #20
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe ffb5 	bl	80051f4 <ld_word>
 800628a:	4603      	mov	r3, r0
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006294:	68fb      	ldr	r3, [r7, #12]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	331a      	adds	r3, #26
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	b292      	uxth	r2, r2
 80062b2:	4611      	mov	r1, r2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe ffd8 	bl	800526a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d109      	bne.n	80062d6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f103 0214 	add.w	r2, r3, #20
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fe ffca 	bl	800526a <st_word>
	}
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b086      	sub	sp, #24
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80062ec:	2100      	movs	r1, #0
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff fe10 	bl	8005f14 <dir_sdi>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <dir_find+0x24>
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	e03e      	b.n	8006380 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	4619      	mov	r1, r3
 8006308:	6938      	ldr	r0, [r7, #16]
 800630a:	f7ff fa23 	bl	8005754 <move_window>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d12f      	bne.n	8006378 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <dir_find+0x4e>
 8006326:	2304      	movs	r3, #4
 8006328:	75fb      	strb	r3, [r7, #23]
 800632a:	e028      	b.n	800637e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	330b      	adds	r3, #11
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006338:	b2da      	uxtb	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	330b      	adds	r3, #11
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <dir_find+0x86>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a18      	ldr	r0, [r3, #32]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3324      	adds	r3, #36	; 0x24
 8006356:	220b      	movs	r2, #11
 8006358:	4619      	mov	r1, r3
 800635a:	f7ff f809 	bl	8005370 <mem_cmp>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006364:	2100      	movs	r1, #0
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff fe5d 	bl	8006026 <dir_next>
 800636c:	4603      	mov	r3, r0
 800636e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0c5      	beq.n	8006302 <dir_find+0x24>
 8006376:	e002      	b.n	800637e <dir_find+0xa0>
		if (res != FR_OK) break;
 8006378:	bf00      	nop
 800637a:	e000      	b.n	800637e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800637c:	bf00      	nop

	return res;
 800637e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006396:	2101      	movs	r1, #1
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff ff1a 	bl	80061d2 <dir_alloc>
 800639e:	4603      	mov	r3, r0
 80063a0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11c      	bne.n	80063e2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	4619      	mov	r1, r3
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	f7ff f9d0 	bl	8005754 <move_window>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d111      	bne.n	80063e2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	2220      	movs	r2, #32
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe ffb7 	bl	800533a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a18      	ldr	r0, [r3, #32]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3324      	adds	r3, #36	; 0x24
 80063d4:	220b      	movs	r2, #11
 80063d6:	4619      	mov	r1, r3
 80063d8:	f7fe ff8e 	bl	80052f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2201      	movs	r2, #1
 80063e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3324      	adds	r3, #36	; 0x24
 8006400:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006402:	220b      	movs	r2, #11
 8006404:	2120      	movs	r1, #32
 8006406:	68b8      	ldr	r0, [r7, #8]
 8006408:	f7fe ff97 	bl	800533a <mem_set>
	si = i = 0; ni = 8;
 800640c:	2300      	movs	r3, #0
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	2308      	movs	r3, #8
 8006416:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	61fa      	str	r2, [r7, #28]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006426:	7efb      	ldrb	r3, [r7, #27]
 8006428:	2b20      	cmp	r3, #32
 800642a:	d94e      	bls.n	80064ca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800642c:	7efb      	ldrb	r3, [r7, #27]
 800642e:	2b2f      	cmp	r3, #47	; 0x2f
 8006430:	d006      	beq.n	8006440 <create_name+0x54>
 8006432:	7efb      	ldrb	r3, [r7, #27]
 8006434:	2b5c      	cmp	r3, #92	; 0x5c
 8006436:	d110      	bne.n	800645a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006438:	e002      	b.n	8006440 <create_name+0x54>
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	3301      	adds	r3, #1
 800643e:	61fb      	str	r3, [r7, #28]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b2f      	cmp	r3, #47	; 0x2f
 800644a:	d0f6      	beq.n	800643a <create_name+0x4e>
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	4413      	add	r3, r2
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b5c      	cmp	r3, #92	; 0x5c
 8006456:	d0f0      	beq.n	800643a <create_name+0x4e>
			break;
 8006458:	e038      	b.n	80064cc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800645a:	7efb      	ldrb	r3, [r7, #27]
 800645c:	2b2e      	cmp	r3, #46	; 0x2e
 800645e:	d003      	beq.n	8006468 <create_name+0x7c>
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	429a      	cmp	r2, r3
 8006466:	d30c      	bcc.n	8006482 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2b0b      	cmp	r3, #11
 800646c:	d002      	beq.n	8006474 <create_name+0x88>
 800646e:	7efb      	ldrb	r3, [r7, #27]
 8006470:	2b2e      	cmp	r3, #46	; 0x2e
 8006472:	d001      	beq.n	8006478 <create_name+0x8c>
 8006474:	2306      	movs	r3, #6
 8006476:	e044      	b.n	8006502 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006478:	2308      	movs	r3, #8
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	230b      	movs	r3, #11
 800647e:	617b      	str	r3, [r7, #20]
			continue;
 8006480:	e022      	b.n	80064c8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006482:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006486:	2b00      	cmp	r3, #0
 8006488:	da04      	bge.n	8006494 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800648a:	7efb      	ldrb	r3, [r7, #27]
 800648c:	3b80      	subs	r3, #128	; 0x80
 800648e:	4a1f      	ldr	r2, [pc, #124]	; (800650c <create_name+0x120>)
 8006490:	5cd3      	ldrb	r3, [r2, r3]
 8006492:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006494:	7efb      	ldrb	r3, [r7, #27]
 8006496:	4619      	mov	r1, r3
 8006498:	481d      	ldr	r0, [pc, #116]	; (8006510 <create_name+0x124>)
 800649a:	f7fe ff90 	bl	80053be <chk_chr>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <create_name+0xbc>
 80064a4:	2306      	movs	r3, #6
 80064a6:	e02c      	b.n	8006502 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80064a8:	7efb      	ldrb	r3, [r7, #27]
 80064aa:	2b60      	cmp	r3, #96	; 0x60
 80064ac:	d905      	bls.n	80064ba <create_name+0xce>
 80064ae:	7efb      	ldrb	r3, [r7, #27]
 80064b0:	2b7a      	cmp	r3, #122	; 0x7a
 80064b2:	d802      	bhi.n	80064ba <create_name+0xce>
 80064b4:	7efb      	ldrb	r3, [r7, #27]
 80064b6:	3b20      	subs	r3, #32
 80064b8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	613a      	str	r2, [r7, #16]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	4413      	add	r3, r2
 80064c4:	7efa      	ldrb	r2, [r7, #27]
 80064c6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80064c8:	e7a6      	b.n	8006418 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80064ca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	441a      	add	r2, r3
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <create_name+0xf4>
 80064dc:	2306      	movs	r3, #6
 80064de:	e010      	b.n	8006502 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2be5      	cmp	r3, #229	; 0xe5
 80064e6:	d102      	bne.n	80064ee <create_name+0x102>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2205      	movs	r2, #5
 80064ec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80064ee:	7efb      	ldrb	r3, [r7, #27]
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d801      	bhi.n	80064f8 <create_name+0x10c>
 80064f4:	2204      	movs	r2, #4
 80064f6:	e000      	b.n	80064fa <create_name+0x10e>
 80064f8:	2200      	movs	r2, #0
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	330b      	adds	r3, #11
 80064fe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006500:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	0800c13c 	.word	0x0800c13c
 8006510:	0800c0cc 	.word	0x0800c0cc

08006514 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006528:	e002      	b.n	8006530 <follow_path+0x1c>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	3301      	adds	r3, #1
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b2f      	cmp	r3, #47	; 0x2f
 8006536:	d0f8      	beq.n	800652a <follow_path+0x16>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b5c      	cmp	r3, #92	; 0x5c
 800653e:	d0f4      	beq.n	800652a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2200      	movs	r2, #0
 8006544:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b1f      	cmp	r3, #31
 800654c:	d80a      	bhi.n	8006564 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2280      	movs	r2, #128	; 0x80
 8006552:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006556:	2100      	movs	r1, #0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fcdb 	bl	8005f14 <dir_sdi>
 800655e:	4603      	mov	r3, r0
 8006560:	75fb      	strb	r3, [r7, #23]
 8006562:	e048      	b.n	80065f6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006564:	463b      	mov	r3, r7
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ff3f 	bl	80063ec <create_name>
 800656e:	4603      	mov	r3, r0
 8006570:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d139      	bne.n	80065ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff feb0 	bl	80062de <dir_find>
 800657e:	4603      	mov	r3, r0
 8006580:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006588:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d12c      	bne.n	80065f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d127      	bne.n	80065f0 <follow_path+0xdc>
 80065a0:	2305      	movs	r3, #5
 80065a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80065a4:	e024      	b.n	80065f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d121      	bne.n	80065f4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	799b      	ldrb	r3, [r3, #6]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80065bc:	2305      	movs	r3, #5
 80065be:	75fb      	strb	r3, [r7, #23]
 80065c0:	e019      	b.n	80065f6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	8992      	ldrh	r2, [r2, #12]
 80065d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80065d4:	fb00 f202 	mul.w	r2, r0, r2
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	440b      	add	r3, r1
 80065dc:	4619      	mov	r1, r3
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f7ff fe3e 	bl	8006260 <ld_clust>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065ea:	e7bb      	b.n	8006564 <follow_path+0x50>
			if (res != FR_OK) break;
 80065ec:	bf00      	nop
 80065ee:	e002      	b.n	80065f6 <follow_path+0xe2>
				break;
 80065f0:	bf00      	nop
 80065f2:	e000      	b.n	80065f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065f4:	bf00      	nop
			}
		}
	}

	return res;
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
 800660c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d031      	beq.n	800667a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e002      	b.n	8006624 <get_ldnumber+0x24>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	3301      	adds	r3, #1
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b20      	cmp	r3, #32
 800662a:	d903      	bls.n	8006634 <get_ldnumber+0x34>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b3a      	cmp	r3, #58	; 0x3a
 8006632:	d1f4      	bne.n	800661e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b3a      	cmp	r3, #58	; 0x3a
 800663a:	d11c      	bne.n	8006676 <get_ldnumber+0x76>
			tp = *path;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	60fa      	str	r2, [r7, #12]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	3b30      	subs	r3, #48	; 0x30
 800664c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b09      	cmp	r3, #9
 8006652:	d80e      	bhi.n	8006672 <get_ldnumber+0x72>
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	429a      	cmp	r2, r3
 800665a:	d10a      	bne.n	8006672 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d107      	bne.n	8006672 <get_ldnumber+0x72>
					vol = (int)i;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	3301      	adds	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	e002      	b.n	800667c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006676:	2300      	movs	r3, #0
 8006678:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800667a:	693b      	ldr	r3, [r7, #16]
}
 800667c:	4618      	mov	r0, r3
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	70da      	strb	r2, [r3, #3]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff f856 	bl	8005754 <move_window>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <check_fs+0x2a>
 80066ae:	2304      	movs	r3, #4
 80066b0:	e038      	b.n	8006724 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3334      	adds	r3, #52	; 0x34
 80066b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fe fd9a 	bl	80051f4 <ld_word>
 80066c0:	4603      	mov	r3, r0
 80066c2:	461a      	mov	r2, r3
 80066c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d001      	beq.n	80066d0 <check_fs+0x48>
 80066cc:	2303      	movs	r3, #3
 80066ce:	e029      	b.n	8006724 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066d6:	2be9      	cmp	r3, #233	; 0xe9
 80066d8:	d009      	beq.n	80066ee <check_fs+0x66>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066e0:	2beb      	cmp	r3, #235	; 0xeb
 80066e2:	d11e      	bne.n	8006722 <check_fs+0x9a>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80066ea:	2b90      	cmp	r3, #144	; 0x90
 80066ec:	d119      	bne.n	8006722 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3334      	adds	r3, #52	; 0x34
 80066f2:	3336      	adds	r3, #54	; 0x36
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe fd95 	bl	8005224 <ld_dword>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006700:	4a0a      	ldr	r2, [pc, #40]	; (800672c <check_fs+0xa4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d101      	bne.n	800670a <check_fs+0x82>
 8006706:	2300      	movs	r3, #0
 8006708:	e00c      	b.n	8006724 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3334      	adds	r3, #52	; 0x34
 800670e:	3352      	adds	r3, #82	; 0x52
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe fd87 	bl	8005224 <ld_dword>
 8006716:	4603      	mov	r3, r0
 8006718:	4a05      	ldr	r2, [pc, #20]	; (8006730 <check_fs+0xa8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d101      	bne.n	8006722 <check_fs+0x9a>
 800671e:	2300      	movs	r3, #0
 8006720:	e000      	b.n	8006724 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006722:	2302      	movs	r3, #2
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	00544146 	.word	0x00544146
 8006730:	33544146 	.word	0x33544146

08006734 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b096      	sub	sp, #88	; 0x58
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff ff59 	bl	8006600 <get_ldnumber>
 800674e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006752:	2b00      	cmp	r3, #0
 8006754:	da01      	bge.n	800675a <find_volume+0x26>
 8006756:	230b      	movs	r3, #11
 8006758:	e262      	b.n	8006c20 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800675a:	4a9f      	ldr	r2, [pc, #636]	; (80069d8 <find_volume+0x2a4>)
 800675c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006762:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <find_volume+0x3a>
 800676a:	230c      	movs	r3, #12
 800676c:	e258      	b.n	8006c20 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006772:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01a      	beq.n	80067ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe fc95 	bl	80050b8 <disk_status>
 800678e:	4603      	mov	r3, r0
 8006790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10c      	bne.n	80067ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <find_volume+0x82>
 80067a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80067b2:	230a      	movs	r3, #10
 80067b4:	e234      	b.n	8006c20 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80067b6:	2300      	movs	r3, #0
 80067b8:	e232      	b.n	8006c20 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80067c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe fc8d 	bl	80050ec <disk_initialize>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80067d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80067e4:	2303      	movs	r3, #3
 80067e6:	e21b      	b.n	8006c20 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <find_volume+0xca>
 80067ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80067fa:	230a      	movs	r3, #10
 80067fc:	e210      	b.n	8006c20 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	7858      	ldrb	r0, [r3, #1]
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	330c      	adds	r3, #12
 8006806:	461a      	mov	r2, r3
 8006808:	2102      	movs	r1, #2
 800680a:	f7fe fcd5 	bl	80051b8 <disk_ioctl>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <find_volume+0xe4>
 8006814:	2301      	movs	r3, #1
 8006816:	e203      	b.n	8006c20 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	899b      	ldrh	r3, [r3, #12]
 800681c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006820:	d80d      	bhi.n	800683e <find_volume+0x10a>
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	899b      	ldrh	r3, [r3, #12]
 8006826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800682a:	d308      	bcc.n	800683e <find_volume+0x10a>
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	899b      	ldrh	r3, [r3, #12]
 8006830:	461a      	mov	r2, r3
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	899b      	ldrh	r3, [r3, #12]
 8006836:	3b01      	subs	r3, #1
 8006838:	4013      	ands	r3, r2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <find_volume+0x10e>
 800683e:	2301      	movs	r3, #1
 8006840:	e1ee      	b.n	8006c20 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006846:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800684a:	f7ff ff1d 	bl	8006688 <check_fs>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006858:	2b02      	cmp	r3, #2
 800685a:	d149      	bne.n	80068f0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800685c:	2300      	movs	r3, #0
 800685e:	643b      	str	r3, [r7, #64]	; 0x40
 8006860:	e01e      	b.n	80068a0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006870:	4413      	add	r3, r2
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	3304      	adds	r3, #4
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d006      	beq.n	800688c <find_volume+0x158>
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	3308      	adds	r3, #8
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fcce 	bl	8005224 <ld_dword>
 8006888:	4602      	mov	r2, r0
 800688a:	e000      	b.n	800688e <find_volume+0x15a>
 800688c:	2200      	movs	r2, #0
 800688e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	3358      	adds	r3, #88	; 0x58
 8006894:	443b      	add	r3, r7
 8006896:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800689a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800689c:	3301      	adds	r3, #1
 800689e:	643b      	str	r3, [r7, #64]	; 0x40
 80068a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d9dd      	bls.n	8006862 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80068a6:	2300      	movs	r3, #0
 80068a8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80068aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <find_volume+0x182>
 80068b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b2:	3b01      	subs	r3, #1
 80068b4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80068b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	3358      	adds	r3, #88	; 0x58
 80068bc:	443b      	add	r3, r7
 80068be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80068c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80068c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <find_volume+0x1a2>
 80068ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068ce:	f7ff fedb 	bl	8006688 <check_fs>
 80068d2:	4603      	mov	r3, r0
 80068d4:	e000      	b.n	80068d8 <find_volume+0x1a4>
 80068d6:	2303      	movs	r3, #3
 80068d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80068dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d905      	bls.n	80068f0 <find_volume+0x1bc>
 80068e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e6:	3301      	adds	r3, #1
 80068e8:	643b      	str	r3, [r7, #64]	; 0x40
 80068ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d9e2      	bls.n	80068b6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80068f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d101      	bne.n	80068fc <find_volume+0x1c8>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e191      	b.n	8006c20 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80068fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006900:	2b01      	cmp	r3, #1
 8006902:	d901      	bls.n	8006908 <find_volume+0x1d4>
 8006904:	230d      	movs	r3, #13
 8006906:	e18b      	b.n	8006c20 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	3334      	adds	r3, #52	; 0x34
 800690c:	330b      	adds	r3, #11
 800690e:	4618      	mov	r0, r3
 8006910:	f7fe fc70 	bl	80051f4 <ld_word>
 8006914:	4603      	mov	r3, r0
 8006916:	461a      	mov	r2, r3
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	899b      	ldrh	r3, [r3, #12]
 800691c:	429a      	cmp	r2, r3
 800691e:	d001      	beq.n	8006924 <find_volume+0x1f0>
 8006920:	230d      	movs	r3, #13
 8006922:	e17d      	b.n	8006c20 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	3334      	adds	r3, #52	; 0x34
 8006928:	3316      	adds	r3, #22
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe fc62 	bl	80051f4 <ld_word>
 8006930:	4603      	mov	r3, r0
 8006932:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <find_volume+0x214>
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	3334      	adds	r3, #52	; 0x34
 800693e:	3324      	adds	r3, #36	; 0x24
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fc6f 	bl	8005224 <ld_dword>
 8006946:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800694c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006956:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	789b      	ldrb	r3, [r3, #2]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d005      	beq.n	800696c <find_volume+0x238>
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	789b      	ldrb	r3, [r3, #2]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d001      	beq.n	800696c <find_volume+0x238>
 8006968:	230d      	movs	r3, #13
 800696a:	e159      	b.n	8006c20 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	789b      	ldrb	r3, [r3, #2]
 8006970:	461a      	mov	r2, r3
 8006972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006974:	fb02 f303 	mul.w	r3, r2, r3
 8006978:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006980:	b29a      	uxth	r2, r3
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	895b      	ldrh	r3, [r3, #10]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <find_volume+0x26c>
 800698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006990:	895b      	ldrh	r3, [r3, #10]
 8006992:	461a      	mov	r2, r3
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	895b      	ldrh	r3, [r3, #10]
 8006998:	3b01      	subs	r3, #1
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <find_volume+0x270>
 80069a0:	230d      	movs	r3, #13
 80069a2:	e13d      	b.n	8006c20 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	3334      	adds	r3, #52	; 0x34
 80069a8:	3311      	adds	r3, #17
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe fc22 	bl	80051f4 <ld_word>
 80069b0:	4603      	mov	r3, r0
 80069b2:	461a      	mov	r2, r3
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	891b      	ldrh	r3, [r3, #8]
 80069bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069be:	8992      	ldrh	r2, [r2, #12]
 80069c0:	0952      	lsrs	r2, r2, #5
 80069c2:	b292      	uxth	r2, r2
 80069c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80069c8:	fb01 f202 	mul.w	r2, r1, r2
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <find_volume+0x2a8>
 80069d4:	230d      	movs	r3, #13
 80069d6:	e123      	b.n	8006c20 <find_volume+0x4ec>
 80069d8:	200025c0 	.word	0x200025c0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	3334      	adds	r3, #52	; 0x34
 80069e0:	3313      	adds	r3, #19
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe fc06 	bl	80051f4 <ld_word>
 80069e8:	4603      	mov	r3, r0
 80069ea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80069ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <find_volume+0x2cc>
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	3334      	adds	r3, #52	; 0x34
 80069f6:	3320      	adds	r3, #32
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe fc13 	bl	8005224 <ld_dword>
 80069fe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	3334      	adds	r3, #52	; 0x34
 8006a04:	330e      	adds	r3, #14
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fbf4 	bl	80051f4 <ld_word>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006a10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <find_volume+0x2e6>
 8006a16:	230d      	movs	r3, #13
 8006a18:	e102      	b.n	8006c20 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006a1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1e:	4413      	add	r3, r2
 8006a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a22:	8911      	ldrh	r1, [r2, #8]
 8006a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a26:	8992      	ldrh	r2, [r2, #12]
 8006a28:	0952      	lsrs	r2, r2, #5
 8006a2a:	b292      	uxth	r2, r2
 8006a2c:	fbb1 f2f2 	udiv	r2, r1, r2
 8006a30:	b292      	uxth	r2, r2
 8006a32:	4413      	add	r3, r2
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d201      	bcs.n	8006a42 <find_volume+0x30e>
 8006a3e:	230d      	movs	r3, #13
 8006a40:	e0ee      	b.n	8006c20 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a4a:	8952      	ldrh	r2, [r2, #10]
 8006a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <find_volume+0x328>
 8006a58:	230d      	movs	r3, #13
 8006a5a:	e0e1      	b.n	8006c20 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d802      	bhi.n	8006a72 <find_volume+0x33e>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d802      	bhi.n	8006a82 <find_volume+0x34e>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	1c9a      	adds	r2, r3, #2
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a8e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a94:	441a      	add	r2, r3
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006a9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	441a      	add	r2, r3
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d11e      	bne.n	8006aea <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	3334      	adds	r3, #52	; 0x34
 8006ab0:	332a      	adds	r3, #42	; 0x2a
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fb9e 	bl	80051f4 <ld_word>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <find_volume+0x38e>
 8006abe:	230d      	movs	r3, #13
 8006ac0:	e0ae      	b.n	8006c20 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	891b      	ldrh	r3, [r3, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <find_volume+0x39a>
 8006aca:	230d      	movs	r3, #13
 8006acc:	e0a8      	b.n	8006c20 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	3334      	adds	r3, #52	; 0x34
 8006ad2:	332c      	adds	r3, #44	; 0x2c
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fe fba5 	bl	8005224 <ld_dword>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae8:	e01f      	b.n	8006b2a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aec:	891b      	ldrh	r3, [r3, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <find_volume+0x3c2>
 8006af2:	230d      	movs	r3, #13
 8006af4:	e094      	b.n	8006c20 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afc:	441a      	add	r2, r3
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006b02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d103      	bne.n	8006b12 <find_volume+0x3de>
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	e00a      	b.n	8006b28 <find_volume+0x3f4>
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	4613      	mov	r3, r2
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4413      	add	r3, r2
 8006b1c:	085a      	lsrs	r2, r3, #1
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006b28:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	69da      	ldr	r2, [r3, #28]
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	899b      	ldrh	r3, [r3, #12]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b36:	440b      	add	r3, r1
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b3c:	8989      	ldrh	r1, [r1, #12]
 8006b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d201      	bcs.n	8006b4a <find_volume+0x416>
 8006b46:	230d      	movs	r3, #13
 8006b48:	e06a      	b.n	8006c20 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b50:	615a      	str	r2, [r3, #20]
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	695a      	ldr	r2, [r3, #20]
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	2280      	movs	r2, #128	; 0x80
 8006b5e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d149      	bne.n	8006bfc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	3334      	adds	r3, #52	; 0x34
 8006b6c:	3330      	adds	r3, #48	; 0x30
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fb40 	bl	80051f4 <ld_word>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d140      	bne.n	8006bfc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b82:	f7fe fde7 	bl	8005754 <move_window>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d137      	bne.n	8006bfc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	2200      	movs	r2, #0
 8006b90:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	3334      	adds	r3, #52	; 0x34
 8006b96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fb2a 	bl	80051f4 <ld_word>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d127      	bne.n	8006bfc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	3334      	adds	r3, #52	; 0x34
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe fb37 	bl	8005224 <ld_dword>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	4a1b      	ldr	r2, [pc, #108]	; (8006c28 <find_volume+0x4f4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d11e      	bne.n	8006bfc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	3334      	adds	r3, #52	; 0x34
 8006bc2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fb2c 	bl	8005224 <ld_dword>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	4a17      	ldr	r2, [pc, #92]	; (8006c2c <find_volume+0x4f8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d113      	bne.n	8006bfc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	3334      	adds	r3, #52	; 0x34
 8006bd8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe fb21 	bl	8005224 <ld_dword>
 8006be2:	4602      	mov	r2, r0
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	3334      	adds	r3, #52	; 0x34
 8006bec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe fb17 	bl	8005224 <ld_dword>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006c02:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <find_volume+0x4fc>)
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <find_volume+0x4fc>)
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <find_volume+0x4fc>)
 8006c12:	881a      	ldrh	r2, [r3, #0]
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006c18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c1a:	f7fe fd33 	bl	8005684 <clear_lock>
#endif
	return FR_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3758      	adds	r7, #88	; 0x58
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	41615252 	.word	0x41615252
 8006c2c:	61417272 	.word	0x61417272
 8006c30:	200025c4 	.word	0x200025c4

08006c34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006c3e:	2309      	movs	r3, #9
 8006c40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01c      	beq.n	8006c82 <validate+0x4e>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d018      	beq.n	8006c82 <validate+0x4e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d013      	beq.n	8006c82 <validate+0x4e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	889a      	ldrh	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	88db      	ldrh	r3, [r3, #6]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d10c      	bne.n	8006c82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe fa22 	bl	80050b8 <disk_status>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <validate+0x4e>
			res = FR_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <validate+0x5a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	e000      	b.n	8006c90 <validate+0x5c>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	6013      	str	r3, [r2, #0]
	return res;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006cb2:	f107 0310 	add.w	r3, r7, #16
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fca2 	bl	8006600 <get_ldnumber>
 8006cbc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	da01      	bge.n	8006cc8 <f_mount+0x28>
 8006cc4:	230b      	movs	r3, #11
 8006cc6:	e02b      	b.n	8006d20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006cc8:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <f_mount+0x88>)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006cd8:	69b8      	ldr	r0, [r7, #24]
 8006cda:	f7fe fcd3 	bl	8005684 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	490d      	ldr	r1, [pc, #52]	; (8006d28 <f_mount+0x88>)
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <f_mount+0x66>
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d001      	beq.n	8006d0a <f_mount+0x6a>
 8006d06:	2300      	movs	r3, #0
 8006d08:	e00a      	b.n	8006d20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006d0a:	f107 010c 	add.w	r1, r7, #12
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	2200      	movs	r2, #0
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fd0d 	bl	8006734 <find_volume>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200025c0 	.word	0x200025c0

08006d2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b098      	sub	sp, #96	; 0x60
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <f_open+0x18>
 8006d40:	2309      	movs	r3, #9
 8006d42:	e1bb      	b.n	80070bc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d4c:	79fa      	ldrb	r2, [r7, #7]
 8006d4e:	f107 0110 	add.w	r1, r7, #16
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fcec 	bl	8006734 <find_volume>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 819f 	bne.w	80070aa <f_open+0x37e>
		dj.obj.fs = fs;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	f107 0314 	add.w	r3, r7, #20
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fbcb 	bl	8006514 <follow_path>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d11a      	bne.n	8006dc2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d90:	b25b      	sxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	da03      	bge.n	8006d9e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d96:	2306      	movs	r3, #6
 8006d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d9c:	e011      	b.n	8006dc2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bf14      	ite	ne
 8006da8:	2301      	movne	r3, #1
 8006daa:	2300      	moveq	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	f107 0314 	add.w	r3, r7, #20
 8006db4:	4611      	mov	r1, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fb1c 	bl	80053f4 <chk_lock>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	f003 031c 	and.w	r3, r3, #28
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d07f      	beq.n	8006ecc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006dcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d017      	beq.n	8006e04 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d10e      	bne.n	8006dfa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ddc:	f7fe fb66 	bl	80054ac <enq_lock>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d006      	beq.n	8006df4 <f_open+0xc8>
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff facc 	bl	8006388 <dir_register>
 8006df0:	4603      	mov	r3, r0
 8006df2:	e000      	b.n	8006df6 <f_open+0xca>
 8006df4:	2312      	movs	r3, #18
 8006df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	f043 0308 	orr.w	r3, r3, #8
 8006e00:	71fb      	strb	r3, [r7, #7]
 8006e02:	e010      	b.n	8006e26 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006e04:	7ebb      	ldrb	r3, [r7, #26]
 8006e06:	f003 0311 	and.w	r3, r3, #17
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <f_open+0xea>
					res = FR_DENIED;
 8006e0e:	2307      	movs	r3, #7
 8006e10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e14:	e007      	b.n	8006e26 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <f_open+0xfa>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006e26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d168      	bne.n	8006f00 <f_open+0x1d4>
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d063      	beq.n	8006f00 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006e38:	f7fd ff18 	bl	8004c6c <get_fattime>
 8006e3c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e40:	330e      	adds	r3, #14
 8006e42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe fa2b 	bl	80052a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4c:	3316      	adds	r3, #22
 8006e4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe fa25 	bl	80052a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	330b      	adds	r3, #11
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff f9fb 	bl	8006260 <ld_clust>
 8006e6a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e70:	2200      	movs	r2, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff fa13 	bl	800629e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7a:	331c      	adds	r3, #28
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fa0e 	bl	80052a0 <st_dword>
					fs->wflag = 1;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	2201      	movs	r2, #1
 8006e88:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d037      	beq.n	8006f00 <f_open+0x1d4>
						dw = fs->winsect;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006e96:	f107 0314 	add.w	r3, r7, #20
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe ff03 	bl	8005caa <remove_chain>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d126      	bne.n	8006f00 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fc4c 	bl	8005754 <move_window>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	611a      	str	r2, [r3, #16]
 8006eca:	e019      	b.n	8006f00 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d115      	bne.n	8006f00 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006ed4:	7ebb      	ldrb	r3, [r7, #26]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006ede:	2304      	movs	r3, #4
 8006ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ee4:	e00c      	b.n	8006f00 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <f_open+0x1d4>
 8006ef0:	7ebb      	ldrb	r3, [r7, #26]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <f_open+0x1d4>
						res = FR_DENIED;
 8006efa:	2307      	movs	r3, #7
 8006efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d128      	bne.n	8006f5a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f18:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	f023 0301 	bic.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f107 0314 	add.w	r3, r7, #20
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fad5 	bl	80054f0 <inc_lock>
 8006f46:	4602      	mov	r2, r0
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <f_open+0x22e>
 8006f54:	2302      	movs	r3, #2
 8006f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 80a3 	bne.w	80070aa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff f978 	bl	8006260 <ld_clust>
 8006f70:	4602      	mov	r2, r0
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f78:	331c      	adds	r3, #28
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe f952 	bl	8005224 <ld_dword>
 8006f80:	4602      	mov	r2, r0
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	88da      	ldrh	r2, [r3, #6]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	79fa      	ldrb	r2, [r7, #7]
 8006f9e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3330      	adds	r3, #48	; 0x30
 8006fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe f9bc 	bl	800533a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d06e      	beq.n	80070aa <f_open+0x37e>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d06a      	beq.n	80070aa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	895b      	ldrh	r3, [r3, #10]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	899b      	ldrh	r3, [r3, #12]
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
 8006fea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff8:	e016      	b.n	8007028 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fc65 	bl	80058ce <get_fat>
 8007004:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007008:	2b01      	cmp	r3, #1
 800700a:	d802      	bhi.n	8007012 <f_open+0x2e6>
 800700c:	2302      	movs	r3, #2
 800700e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d102      	bne.n	8007020 <f_open+0x2f4>
 800701a:	2301      	movs	r3, #1
 800701c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	657b      	str	r3, [r7, #84]	; 0x54
 8007028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800702c:	2b00      	cmp	r3, #0
 800702e:	d103      	bne.n	8007038 <f_open+0x30c>
 8007030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007034:	429a      	cmp	r2, r3
 8007036:	d8e0      	bhi.n	8006ffa <f_open+0x2ce>
				}
				fp->clust = clst;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800703c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800703e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007042:	2b00      	cmp	r3, #0
 8007044:	d131      	bne.n	80070aa <f_open+0x37e>
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	899b      	ldrh	r3, [r3, #12]
 800704a:	461a      	mov	r2, r3
 800704c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007052:	fb01 f202 	mul.w	r2, r1, r2
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d026      	beq.n	80070aa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fc15 	bl	8005890 <clust2sect>
 8007066:	6478      	str	r0, [r7, #68]	; 0x44
 8007068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <f_open+0x34a>
						res = FR_INT_ERR;
 800706e:	2302      	movs	r3, #2
 8007070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007074:	e019      	b.n	80070aa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	899b      	ldrh	r3, [r3, #12]
 800707a:	461a      	mov	r2, r3
 800707c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800707e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	7858      	ldrb	r0, [r3, #1]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	2301      	movs	r3, #1
 800709a:	f7fe f84d 	bl	8005138 <disk_read>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <f_open+0x37e>
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80070aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <f_open+0x38c>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80070b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3760      	adds	r7, #96	; 0x60
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08c      	sub	sp, #48	; 0x30
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f107 0210 	add.w	r2, r7, #16
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff fda5 	bl	8006c34 <validate>
 80070ea:	4603      	mov	r3, r0
 80070ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80070f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d107      	bne.n	8007108 <f_write+0x44>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	7d5b      	ldrb	r3, [r3, #21]
 80070fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <f_write+0x4a>
 8007108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800710c:	e16a      	b.n	80073e4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	7d1b      	ldrb	r3, [r3, #20]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <f_write+0x5a>
 800711a:	2307      	movs	r3, #7
 800711c:	e162      	b.n	80073e4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	441a      	add	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	429a      	cmp	r2, r3
 800712c:	f080 814c 	bcs.w	80073c8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	43db      	mvns	r3, r3
 8007136:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007138:	e146      	b.n	80073c8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	8992      	ldrh	r2, [r2, #12]
 8007142:	fbb3 f1f2 	udiv	r1, r3, r2
 8007146:	fb01 f202 	mul.w	r2, r1, r2
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	f040 80f1 	bne.w	8007334 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	8992      	ldrh	r2, [r2, #12]
 800715a:	fbb3 f3f2 	udiv	r3, r3, r2
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	8952      	ldrh	r2, [r2, #10]
 8007162:	3a01      	subs	r2, #1
 8007164:	4013      	ands	r3, r2
 8007166:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d143      	bne.n	80071f6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10c      	bne.n	8007190 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	2b00      	cmp	r3, #0
 8007180:	d11a      	bne.n	80071b8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fdf4 	bl	8005d74 <create_chain>
 800718c:	62b8      	str	r0, [r7, #40]	; 0x28
 800718e:	e013      	b.n	80071b8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	4619      	mov	r1, r3
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7fe fe80 	bl	8005ea4 <clmt_clust>
 80071a4:	62b8      	str	r0, [r7, #40]	; 0x28
 80071a6:	e007      	b.n	80071b8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f7fe fddf 	bl	8005d74 <create_chain>
 80071b6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 8109 	beq.w	80073d2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d104      	bne.n	80071d0 <f_write+0x10c>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2202      	movs	r2, #2
 80071ca:	755a      	strb	r2, [r3, #21]
 80071cc:	2302      	movs	r3, #2
 80071ce:	e109      	b.n	80073e4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d104      	bne.n	80071e2 <f_write+0x11e>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	755a      	strb	r2, [r3, #21]
 80071de:	2301      	movs	r3, #1
 80071e0:	e100      	b.n	80073e4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <f_write+0x132>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	7d1b      	ldrb	r3, [r3, #20]
 80071fa:	b25b      	sxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	da18      	bge.n	8007232 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	7858      	ldrb	r0, [r3, #1]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1a      	ldr	r2, [r3, #32]
 800720e:	2301      	movs	r3, #1
 8007210:	f7fd ffb2 	bl	8005178 <disk_write>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d004      	beq.n	8007224 <f_write+0x160>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	755a      	strb	r2, [r3, #21]
 8007220:	2301      	movs	r3, #1
 8007222:	e0df      	b.n	80073e4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	7d1b      	ldrb	r3, [r3, #20]
 8007228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722c:	b2da      	uxtb	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fe fb28 	bl	8005890 <clust2sect>
 8007240:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <f_write+0x18e>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2202      	movs	r2, #2
 800724c:	755a      	strb	r2, [r3, #21]
 800724e:	2302      	movs	r3, #2
 8007250:	e0c8      	b.n	80073e4 <f_write+0x320>
			sect += csect;
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	4413      	add	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	899b      	ldrh	r3, [r3, #12]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	fbb3 f3f2 	udiv	r3, r3, r2
 8007266:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d043      	beq.n	80072f6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	4413      	add	r3, r2
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	8952      	ldrh	r2, [r2, #10]
 8007278:	4293      	cmp	r3, r2
 800727a:	d905      	bls.n	8007288 <f_write+0x1c4>
					cc = fs->csize - csect;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	895b      	ldrh	r3, [r3, #10]
 8007280:	461a      	mov	r2, r3
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	7858      	ldrb	r0, [r3, #1]
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	69f9      	ldr	r1, [r7, #28]
 8007292:	f7fd ff71 	bl	8005178 <disk_write>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <f_write+0x1e2>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	755a      	strb	r2, [r3, #21]
 80072a2:	2301      	movs	r3, #1
 80072a4:	e09e      	b.n	80073e4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a1a      	ldr	r2, [r3, #32]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	6a3a      	ldr	r2, [r7, #32]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d918      	bls.n	80072e6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	8992      	ldrh	r2, [r2, #12]
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	18d1      	adds	r1, r2, r3
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	899b      	ldrh	r3, [r3, #12]
 80072d2:	461a      	mov	r2, r3
 80072d4:	f7fe f810 	bl	80052f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	7d1b      	ldrb	r3, [r3, #20]
 80072dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	899b      	ldrh	r3, [r3, #12]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80072f4:	e04b      	b.n	800738e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d016      	beq.n	800732e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	699a      	ldr	r2, [r3, #24]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007308:	429a      	cmp	r2, r3
 800730a:	d210      	bcs.n	800732e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	7858      	ldrb	r0, [r3, #1]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007316:	2301      	movs	r3, #1
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	f7fd ff0d 	bl	8005138 <disk_read>
 800731e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007320:	2b00      	cmp	r3, #0
 8007322:	d004      	beq.n	800732e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	755a      	strb	r2, [r3, #21]
 800732a:	2301      	movs	r3, #1
 800732c:	e05a      	b.n	80073e4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	899b      	ldrh	r3, [r3, #12]
 8007338:	4618      	mov	r0, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	8992      	ldrh	r2, [r2, #12]
 8007342:	fbb3 f1f2 	udiv	r1, r3, r2
 8007346:	fb01 f202 	mul.w	r2, r1, r2
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	1ac3      	subs	r3, r0, r3
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d901      	bls.n	800735c <f_write+0x298>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	8992      	ldrh	r2, [r2, #12]
 800736a:	fbb3 f0f2 	udiv	r0, r3, r2
 800736e:	fb00 f202 	mul.w	r2, r0, r2
 8007372:	1a9b      	subs	r3, r3, r2
 8007374:	440b      	add	r3, r1
 8007376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007378:	69f9      	ldr	r1, [r7, #28]
 800737a:	4618      	mov	r0, r3
 800737c:	f7fd ffbc 	bl	80052f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	7d1b      	ldrb	r3, [r3, #20]
 8007384:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007388:	b2da      	uxtb	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	4413      	add	r3, r2
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	441a      	add	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	619a      	str	r2, [r3, #24]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	bf38      	it	cc
 80073ae:	461a      	movcc	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	60da      	str	r2, [r3, #12]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	441a      	add	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f47f aeb5 	bne.w	800713a <f_write+0x76>
 80073d0:	e000      	b.n	80073d4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80073d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	7d1b      	ldrb	r3, [r3, #20]
 80073d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3730      	adds	r7, #48	; 0x30
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f107 0208 	add.w	r2, r7, #8
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fc19 	bl	8006c34 <validate>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d168      	bne.n	80074de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7d1b      	ldrb	r3, [r3, #20]
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d062      	beq.n	80074de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7d1b      	ldrb	r3, [r3, #20]
 800741c:	b25b      	sxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	da15      	bge.n	800744e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	7858      	ldrb	r0, [r3, #1]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1a      	ldr	r2, [r3, #32]
 8007430:	2301      	movs	r3, #1
 8007432:	f7fd fea1 	bl	8005178 <disk_write>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <f_sync+0x54>
 800743c:	2301      	movs	r3, #1
 800743e:	e04f      	b.n	80074e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7d1b      	ldrb	r3, [r3, #20]
 8007444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007448:	b2da      	uxtb	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800744e:	f7fd fc0d 	bl	8004c6c <get_fattime>
 8007452:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	4619      	mov	r1, r3
 800745c:	4610      	mov	r0, r2
 800745e:	f7fe f979 	bl	8005754 <move_window>
 8007462:	4603      	mov	r3, r0
 8007464:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d138      	bne.n	80074de <f_sync+0xf2>
					dir = fp->dir_ptr;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	330b      	adds	r3, #11
 8007476:	781a      	ldrb	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	330b      	adds	r3, #11
 800747c:	f042 0220 	orr.w	r2, r2, #32
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	461a      	mov	r2, r3
 800748e:	68f9      	ldr	r1, [r7, #12]
 8007490:	f7fe ff05 	bl	800629e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f103 021c 	add.w	r2, r3, #28
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	4619      	mov	r1, r3
 80074a0:	4610      	mov	r0, r2
 80074a2:	f7fd fefd 	bl	80052a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3316      	adds	r3, #22
 80074aa:	6939      	ldr	r1, [r7, #16]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fd fef7 	bl	80052a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3312      	adds	r3, #18
 80074b6:	2100      	movs	r1, #0
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fd fed6 	bl	800526a <st_word>
					fs->wflag = 1;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2201      	movs	r2, #1
 80074c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe f972 	bl	80057b0 <sync_fs>
 80074cc:	4603      	mov	r3, r0
 80074ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	7d1b      	ldrb	r3, [r3, #20]
 80074d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff ff7b 	bl	80073ec <f_sync>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d118      	bne.n	8007532 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f107 0208 	add.w	r2, r7, #8
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff fb93 	bl	8006c34 <validate>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10c      	bne.n	8007532 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe f875 	bl	800560c <dec_lock>
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b096      	sub	sp, #88	; 0x58
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007544:	f107 0108 	add.w	r1, r7, #8
 8007548:	1d3b      	adds	r3, r7, #4
 800754a:	2202      	movs	r2, #2
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff f8f1 	bl	8006734 <find_volume>
 8007552:	4603      	mov	r3, r0
 8007554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800755c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007560:	2b00      	cmp	r3, #0
 8007562:	f040 80f2 	bne.w	800774a <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe ffd0 	bl	8006514 <follow_path>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800757a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <f_mkdir+0x4c>
 8007582:	2308      	movs	r3, #8
 8007584:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8007588:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800758c:	2b04      	cmp	r3, #4
 800758e:	f040 80dc 	bne.w	800774a <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8007592:	f107 030c 	add.w	r3, r7, #12
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fbeb 	bl	8005d74 <create_chain>
 800759e:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	895b      	ldrh	r3, [r3, #10]
 80075a4:	461a      	mov	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	899b      	ldrh	r3, [r3, #12]
 80075aa:	fb02 f303 	mul.w	r3, r2, r3
 80075ae:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80075b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <f_mkdir+0x86>
 80075bc:	2307      	movs	r3, #7
 80075be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80075c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d102      	bne.n	80075ce <f_mkdir+0x92>
 80075c8:	2302      	movs	r3, #2
 80075ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80075ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d102      	bne.n	80075dc <f_mkdir+0xa0>
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80075dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <f_mkdir+0xb6>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe f870 	bl	80056cc <sync_window>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80075f2:	f7fd fb3b 	bl	8004c6c <get_fattime>
 80075f6:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80075f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d16c      	bne.n	80076da <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe f943 	bl	8005890 <clust2sect>
 800760a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	3334      	adds	r3, #52	; 0x34
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	899b      	ldrh	r3, [r3, #12]
 8007616:	461a      	mov	r2, r3
 8007618:	2100      	movs	r1, #0
 800761a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800761c:	f7fd fe8d 	bl	800533a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8007620:	220b      	movs	r2, #11
 8007622:	2120      	movs	r1, #32
 8007624:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007626:	f7fd fe88 	bl	800533a <mem_set>
					dir[DIR_Name] = '.';
 800762a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762c:	222e      	movs	r2, #46	; 0x2e
 800762e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8007630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007632:	330b      	adds	r3, #11
 8007634:	2210      	movs	r2, #16
 8007636:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8007638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763a:	3316      	adds	r3, #22
 800763c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd fe2e 	bl	80052a0 <st_dword>
					st_clust(fs, dir, dcl);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007648:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800764a:	4618      	mov	r0, r3
 800764c:	f7fe fe27 	bl	800629e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8007650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007652:	3320      	adds	r3, #32
 8007654:	2220      	movs	r2, #32
 8007656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007658:	4618      	mov	r0, r3
 800765a:	f7fd fe4d 	bl	80052f8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800765e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007660:	3321      	adds	r3, #33	; 0x21
 8007662:	222e      	movs	r2, #46	; 0x2e
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b03      	cmp	r3, #3
 8007670:	d106      	bne.n	8007680 <f_mkdir+0x144>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007678:	429a      	cmp	r2, r3
 800767a:	d101      	bne.n	8007680 <f_mkdir+0x144>
 800767c:	2300      	movs	r3, #0
 800767e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8007680:	68b8      	ldr	r0, [r7, #8]
 8007682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007684:	3320      	adds	r3, #32
 8007686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007688:	4619      	mov	r1, r3
 800768a:	f7fe fe08 	bl	800629e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	895b      	ldrh	r3, [r3, #10]
 8007692:	653b      	str	r3, [r7, #80]	; 0x50
 8007694:	e01c      	b.n	80076d0 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8007696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2201      	movs	r2, #1
 80076a4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe f80f 	bl	80056cc <sync_window>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80076b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10d      	bne.n	80076d8 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	899b      	ldrh	r3, [r3, #12]
 80076c0:	461a      	mov	r2, r3
 80076c2:	2100      	movs	r1, #0
 80076c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076c6:	f7fd fe38 	bl	800533a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80076ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076cc:	3b01      	subs	r3, #1
 80076ce:	653b      	str	r3, [r7, #80]	; 0x50
 80076d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1df      	bne.n	8007696 <f_mkdir+0x15a>
 80076d6:	e000      	b.n	80076da <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80076d8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80076da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d107      	bne.n	80076f2 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80076e2:	f107 030c 	add.w	r3, r7, #12
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fe4e 	bl	8006388 <dir_register>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80076f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d120      	bne.n	800773c <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80076fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007700:	3316      	adds	r3, #22
 8007702:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007704:	4618      	mov	r0, r3
 8007706:	f7fd fdcb 	bl	80052a0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800770e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fdc4 	bl	800629e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8007716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007718:	330b      	adds	r3, #11
 800771a:	2210      	movs	r2, #16
 800771c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2201      	movs	r2, #1
 8007722:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8007724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10e      	bne.n	800774a <f_mkdir+0x20e>
					res = sync_fs(fs);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe f83e 	bl	80057b0 <sync_fs>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800773a:	e006      	b.n	800774a <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800773c:	f107 030c 	add.w	r3, r7, #12
 8007740:	2200      	movs	r2, #0
 8007742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007744:	4618      	mov	r0, r3
 8007746:	f7fe fab0 	bl	8005caa <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800774a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800774e:	4618      	mov	r0, r3
 8007750:	3758      	adds	r7, #88	; 0x58
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800776e:	4b1f      	ldr	r3, [pc, #124]	; (80077ec <FATFS_LinkDriverEx+0x94>)
 8007770:	7a5b      	ldrb	r3, [r3, #9]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d131      	bne.n	80077dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007778:	4b1c      	ldr	r3, [pc, #112]	; (80077ec <FATFS_LinkDriverEx+0x94>)
 800777a:	7a5b      	ldrb	r3, [r3, #9]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <FATFS_LinkDriverEx+0x94>)
 8007782:	2100      	movs	r1, #0
 8007784:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007786:	4b19      	ldr	r3, [pc, #100]	; (80077ec <FATFS_LinkDriverEx+0x94>)
 8007788:	7a5b      	ldrb	r3, [r3, #9]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	4a17      	ldr	r2, [pc, #92]	; (80077ec <FATFS_LinkDriverEx+0x94>)
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007796:	4b15      	ldr	r3, [pc, #84]	; (80077ec <FATFS_LinkDriverEx+0x94>)
 8007798:	7a5b      	ldrb	r3, [r3, #9]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	4b13      	ldr	r3, [pc, #76]	; (80077ec <FATFS_LinkDriverEx+0x94>)
 80077a0:	4413      	add	r3, r2
 80077a2:	79fa      	ldrb	r2, [r7, #7]
 80077a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077a6:	4b11      	ldr	r3, [pc, #68]	; (80077ec <FATFS_LinkDriverEx+0x94>)
 80077a8:	7a5b      	ldrb	r3, [r3, #9]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	b2d1      	uxtb	r1, r2
 80077b0:	4a0e      	ldr	r2, [pc, #56]	; (80077ec <FATFS_LinkDriverEx+0x94>)
 80077b2:	7251      	strb	r1, [r2, #9]
 80077b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80077b6:	7dbb      	ldrb	r3, [r7, #22]
 80077b8:	3330      	adds	r3, #48	; 0x30
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	3301      	adds	r3, #1
 80077c4:	223a      	movs	r2, #58	; 0x3a
 80077c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	3302      	adds	r3, #2
 80077cc:	222f      	movs	r2, #47	; 0x2f
 80077ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	3303      	adds	r3, #3
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80077d8:	2300      	movs	r3, #0
 80077da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	200025e8 	.word	0x200025e8

080077f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80077fa:	2200      	movs	r2, #0
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff ffaa 	bl	8007758 <FATFS_LinkDriverEx>
 8007804:	4603      	mov	r3, r0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <__cvt>:
 800780e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007812:	ec55 4b10 	vmov	r4, r5, d0
 8007816:	2d00      	cmp	r5, #0
 8007818:	460e      	mov	r6, r1
 800781a:	4619      	mov	r1, r3
 800781c:	462b      	mov	r3, r5
 800781e:	bfbb      	ittet	lt
 8007820:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007824:	461d      	movlt	r5, r3
 8007826:	2300      	movge	r3, #0
 8007828:	232d      	movlt	r3, #45	; 0x2d
 800782a:	700b      	strb	r3, [r1, #0]
 800782c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800782e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007832:	4691      	mov	r9, r2
 8007834:	f023 0820 	bic.w	r8, r3, #32
 8007838:	bfbc      	itt	lt
 800783a:	4622      	movlt	r2, r4
 800783c:	4614      	movlt	r4, r2
 800783e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007842:	d005      	beq.n	8007850 <__cvt+0x42>
 8007844:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007848:	d100      	bne.n	800784c <__cvt+0x3e>
 800784a:	3601      	adds	r6, #1
 800784c:	2102      	movs	r1, #2
 800784e:	e000      	b.n	8007852 <__cvt+0x44>
 8007850:	2103      	movs	r1, #3
 8007852:	ab03      	add	r3, sp, #12
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	ab02      	add	r3, sp, #8
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	ec45 4b10 	vmov	d0, r4, r5
 800785e:	4653      	mov	r3, sl
 8007860:	4632      	mov	r2, r6
 8007862:	f001 f86d 	bl	8008940 <_dtoa_r>
 8007866:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800786a:	4607      	mov	r7, r0
 800786c:	d102      	bne.n	8007874 <__cvt+0x66>
 800786e:	f019 0f01 	tst.w	r9, #1
 8007872:	d022      	beq.n	80078ba <__cvt+0xac>
 8007874:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007878:	eb07 0906 	add.w	r9, r7, r6
 800787c:	d110      	bne.n	80078a0 <__cvt+0x92>
 800787e:	783b      	ldrb	r3, [r7, #0]
 8007880:	2b30      	cmp	r3, #48	; 0x30
 8007882:	d10a      	bne.n	800789a <__cvt+0x8c>
 8007884:	2200      	movs	r2, #0
 8007886:	2300      	movs	r3, #0
 8007888:	4620      	mov	r0, r4
 800788a:	4629      	mov	r1, r5
 800788c:	f7f9 f924 	bl	8000ad8 <__aeabi_dcmpeq>
 8007890:	b918      	cbnz	r0, 800789a <__cvt+0x8c>
 8007892:	f1c6 0601 	rsb	r6, r6, #1
 8007896:	f8ca 6000 	str.w	r6, [sl]
 800789a:	f8da 3000 	ldr.w	r3, [sl]
 800789e:	4499      	add	r9, r3
 80078a0:	2200      	movs	r2, #0
 80078a2:	2300      	movs	r3, #0
 80078a4:	4620      	mov	r0, r4
 80078a6:	4629      	mov	r1, r5
 80078a8:	f7f9 f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80078ac:	b108      	cbz	r0, 80078b2 <__cvt+0xa4>
 80078ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80078b2:	2230      	movs	r2, #48	; 0x30
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	454b      	cmp	r3, r9
 80078b8:	d307      	bcc.n	80078ca <__cvt+0xbc>
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078be:	1bdb      	subs	r3, r3, r7
 80078c0:	4638      	mov	r0, r7
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	b004      	add	sp, #16
 80078c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ca:	1c59      	adds	r1, r3, #1
 80078cc:	9103      	str	r1, [sp, #12]
 80078ce:	701a      	strb	r2, [r3, #0]
 80078d0:	e7f0      	b.n	80078b4 <__cvt+0xa6>

080078d2 <__exponent>:
 80078d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078d4:	4603      	mov	r3, r0
 80078d6:	2900      	cmp	r1, #0
 80078d8:	bfb8      	it	lt
 80078da:	4249      	neglt	r1, r1
 80078dc:	f803 2b02 	strb.w	r2, [r3], #2
 80078e0:	bfb4      	ite	lt
 80078e2:	222d      	movlt	r2, #45	; 0x2d
 80078e4:	222b      	movge	r2, #43	; 0x2b
 80078e6:	2909      	cmp	r1, #9
 80078e8:	7042      	strb	r2, [r0, #1]
 80078ea:	dd2a      	ble.n	8007942 <__exponent+0x70>
 80078ec:	f10d 0207 	add.w	r2, sp, #7
 80078f0:	4617      	mov	r7, r2
 80078f2:	260a      	movs	r6, #10
 80078f4:	4694      	mov	ip, r2
 80078f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80078fa:	fb06 1415 	mls	r4, r6, r5, r1
 80078fe:	3430      	adds	r4, #48	; 0x30
 8007900:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007904:	460c      	mov	r4, r1
 8007906:	2c63      	cmp	r4, #99	; 0x63
 8007908:	f102 32ff 	add.w	r2, r2, #4294967295
 800790c:	4629      	mov	r1, r5
 800790e:	dcf1      	bgt.n	80078f4 <__exponent+0x22>
 8007910:	3130      	adds	r1, #48	; 0x30
 8007912:	f1ac 0402 	sub.w	r4, ip, #2
 8007916:	f802 1c01 	strb.w	r1, [r2, #-1]
 800791a:	1c41      	adds	r1, r0, #1
 800791c:	4622      	mov	r2, r4
 800791e:	42ba      	cmp	r2, r7
 8007920:	d30a      	bcc.n	8007938 <__exponent+0x66>
 8007922:	f10d 0209 	add.w	r2, sp, #9
 8007926:	eba2 020c 	sub.w	r2, r2, ip
 800792a:	42bc      	cmp	r4, r7
 800792c:	bf88      	it	hi
 800792e:	2200      	movhi	r2, #0
 8007930:	4413      	add	r3, r2
 8007932:	1a18      	subs	r0, r3, r0
 8007934:	b003      	add	sp, #12
 8007936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007938:	f812 5b01 	ldrb.w	r5, [r2], #1
 800793c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007940:	e7ed      	b.n	800791e <__exponent+0x4c>
 8007942:	2330      	movs	r3, #48	; 0x30
 8007944:	3130      	adds	r1, #48	; 0x30
 8007946:	7083      	strb	r3, [r0, #2]
 8007948:	70c1      	strb	r1, [r0, #3]
 800794a:	1d03      	adds	r3, r0, #4
 800794c:	e7f1      	b.n	8007932 <__exponent+0x60>
	...

08007950 <_printf_float>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	ed2d 8b02 	vpush	{d8}
 8007958:	b08d      	sub	sp, #52	; 0x34
 800795a:	460c      	mov	r4, r1
 800795c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007960:	4616      	mov	r6, r2
 8007962:	461f      	mov	r7, r3
 8007964:	4605      	mov	r5, r0
 8007966:	f000 fee5 	bl	8008734 <_localeconv_r>
 800796a:	f8d0 a000 	ldr.w	sl, [r0]
 800796e:	4650      	mov	r0, sl
 8007970:	f7f8 fc86 	bl	8000280 <strlen>
 8007974:	2300      	movs	r3, #0
 8007976:	930a      	str	r3, [sp, #40]	; 0x28
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	9305      	str	r3, [sp, #20]
 800797c:	f8d8 3000 	ldr.w	r3, [r8]
 8007980:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007984:	3307      	adds	r3, #7
 8007986:	f023 0307 	bic.w	r3, r3, #7
 800798a:	f103 0208 	add.w	r2, r3, #8
 800798e:	f8c8 2000 	str.w	r2, [r8]
 8007992:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007996:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800799a:	9307      	str	r3, [sp, #28]
 800799c:	f8cd 8018 	str.w	r8, [sp, #24]
 80079a0:	ee08 0a10 	vmov	s16, r0
 80079a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80079a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ac:	4b9e      	ldr	r3, [pc, #632]	; (8007c28 <_printf_float+0x2d8>)
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295
 80079b2:	f7f9 f8c3 	bl	8000b3c <__aeabi_dcmpun>
 80079b6:	bb88      	cbnz	r0, 8007a1c <_printf_float+0xcc>
 80079b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079bc:	4b9a      	ldr	r3, [pc, #616]	; (8007c28 <_printf_float+0x2d8>)
 80079be:	f04f 32ff 	mov.w	r2, #4294967295
 80079c2:	f7f9 f89d 	bl	8000b00 <__aeabi_dcmple>
 80079c6:	bb48      	cbnz	r0, 8007a1c <_printf_float+0xcc>
 80079c8:	2200      	movs	r2, #0
 80079ca:	2300      	movs	r3, #0
 80079cc:	4640      	mov	r0, r8
 80079ce:	4649      	mov	r1, r9
 80079d0:	f7f9 f88c 	bl	8000aec <__aeabi_dcmplt>
 80079d4:	b110      	cbz	r0, 80079dc <_printf_float+0x8c>
 80079d6:	232d      	movs	r3, #45	; 0x2d
 80079d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079dc:	4a93      	ldr	r2, [pc, #588]	; (8007c2c <_printf_float+0x2dc>)
 80079de:	4b94      	ldr	r3, [pc, #592]	; (8007c30 <_printf_float+0x2e0>)
 80079e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079e4:	bf94      	ite	ls
 80079e6:	4690      	movls	r8, r2
 80079e8:	4698      	movhi	r8, r3
 80079ea:	2303      	movs	r3, #3
 80079ec:	6123      	str	r3, [r4, #16]
 80079ee:	9b05      	ldr	r3, [sp, #20]
 80079f0:	f023 0304 	bic.w	r3, r3, #4
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	f04f 0900 	mov.w	r9, #0
 80079fa:	9700      	str	r7, [sp, #0]
 80079fc:	4633      	mov	r3, r6
 80079fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a00:	4621      	mov	r1, r4
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 f9da 	bl	8007dbc <_printf_common>
 8007a08:	3001      	adds	r0, #1
 8007a0a:	f040 8090 	bne.w	8007b2e <_printf_float+0x1de>
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a12:	b00d      	add	sp, #52	; 0x34
 8007a14:	ecbd 8b02 	vpop	{d8}
 8007a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	464b      	mov	r3, r9
 8007a20:	4640      	mov	r0, r8
 8007a22:	4649      	mov	r1, r9
 8007a24:	f7f9 f88a 	bl	8000b3c <__aeabi_dcmpun>
 8007a28:	b140      	cbz	r0, 8007a3c <_printf_float+0xec>
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bfbc      	itt	lt
 8007a30:	232d      	movlt	r3, #45	; 0x2d
 8007a32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a36:	4a7f      	ldr	r2, [pc, #508]	; (8007c34 <_printf_float+0x2e4>)
 8007a38:	4b7f      	ldr	r3, [pc, #508]	; (8007c38 <_printf_float+0x2e8>)
 8007a3a:	e7d1      	b.n	80079e0 <_printf_float+0x90>
 8007a3c:	6863      	ldr	r3, [r4, #4]
 8007a3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a42:	9206      	str	r2, [sp, #24]
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	d13f      	bne.n	8007ac8 <_printf_float+0x178>
 8007a48:	2306      	movs	r3, #6
 8007a4a:	6063      	str	r3, [r4, #4]
 8007a4c:	9b05      	ldr	r3, [sp, #20]
 8007a4e:	6861      	ldr	r1, [r4, #4]
 8007a50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a54:	2300      	movs	r3, #0
 8007a56:	9303      	str	r3, [sp, #12]
 8007a58:	ab0a      	add	r3, sp, #40	; 0x28
 8007a5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a5e:	ab09      	add	r3, sp, #36	; 0x24
 8007a60:	ec49 8b10 	vmov	d0, r8, r9
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	6022      	str	r2, [r4, #0]
 8007a68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f7ff fece 	bl	800780e <__cvt>
 8007a72:	9b06      	ldr	r3, [sp, #24]
 8007a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a76:	2b47      	cmp	r3, #71	; 0x47
 8007a78:	4680      	mov	r8, r0
 8007a7a:	d108      	bne.n	8007a8e <_printf_float+0x13e>
 8007a7c:	1cc8      	adds	r0, r1, #3
 8007a7e:	db02      	blt.n	8007a86 <_printf_float+0x136>
 8007a80:	6863      	ldr	r3, [r4, #4]
 8007a82:	4299      	cmp	r1, r3
 8007a84:	dd41      	ble.n	8007b0a <_printf_float+0x1ba>
 8007a86:	f1ab 0302 	sub.w	r3, fp, #2
 8007a8a:	fa5f fb83 	uxtb.w	fp, r3
 8007a8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a92:	d820      	bhi.n	8007ad6 <_printf_float+0x186>
 8007a94:	3901      	subs	r1, #1
 8007a96:	465a      	mov	r2, fp
 8007a98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a9c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a9e:	f7ff ff18 	bl	80078d2 <__exponent>
 8007aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa4:	1813      	adds	r3, r2, r0
 8007aa6:	2a01      	cmp	r2, #1
 8007aa8:	4681      	mov	r9, r0
 8007aaa:	6123      	str	r3, [r4, #16]
 8007aac:	dc02      	bgt.n	8007ab4 <_printf_float+0x164>
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	07d2      	lsls	r2, r2, #31
 8007ab2:	d501      	bpl.n	8007ab8 <_printf_float+0x168>
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d09c      	beq.n	80079fa <_printf_float+0xaa>
 8007ac0:	232d      	movs	r3, #45	; 0x2d
 8007ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ac6:	e798      	b.n	80079fa <_printf_float+0xaa>
 8007ac8:	9a06      	ldr	r2, [sp, #24]
 8007aca:	2a47      	cmp	r2, #71	; 0x47
 8007acc:	d1be      	bne.n	8007a4c <_printf_float+0xfc>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1bc      	bne.n	8007a4c <_printf_float+0xfc>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e7b9      	b.n	8007a4a <_printf_float+0xfa>
 8007ad6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ada:	d118      	bne.n	8007b0e <_printf_float+0x1be>
 8007adc:	2900      	cmp	r1, #0
 8007ade:	6863      	ldr	r3, [r4, #4]
 8007ae0:	dd0b      	ble.n	8007afa <_printf_float+0x1aa>
 8007ae2:	6121      	str	r1, [r4, #16]
 8007ae4:	b913      	cbnz	r3, 8007aec <_printf_float+0x19c>
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	07d0      	lsls	r0, r2, #31
 8007aea:	d502      	bpl.n	8007af2 <_printf_float+0x1a2>
 8007aec:	3301      	adds	r3, #1
 8007aee:	440b      	add	r3, r1
 8007af0:	6123      	str	r3, [r4, #16]
 8007af2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007af4:	f04f 0900 	mov.w	r9, #0
 8007af8:	e7de      	b.n	8007ab8 <_printf_float+0x168>
 8007afa:	b913      	cbnz	r3, 8007b02 <_printf_float+0x1b2>
 8007afc:	6822      	ldr	r2, [r4, #0]
 8007afe:	07d2      	lsls	r2, r2, #31
 8007b00:	d501      	bpl.n	8007b06 <_printf_float+0x1b6>
 8007b02:	3302      	adds	r3, #2
 8007b04:	e7f4      	b.n	8007af0 <_printf_float+0x1a0>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e7f2      	b.n	8007af0 <_printf_float+0x1a0>
 8007b0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b10:	4299      	cmp	r1, r3
 8007b12:	db05      	blt.n	8007b20 <_printf_float+0x1d0>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	6121      	str	r1, [r4, #16]
 8007b18:	07d8      	lsls	r0, r3, #31
 8007b1a:	d5ea      	bpl.n	8007af2 <_printf_float+0x1a2>
 8007b1c:	1c4b      	adds	r3, r1, #1
 8007b1e:	e7e7      	b.n	8007af0 <_printf_float+0x1a0>
 8007b20:	2900      	cmp	r1, #0
 8007b22:	bfd4      	ite	le
 8007b24:	f1c1 0202 	rsble	r2, r1, #2
 8007b28:	2201      	movgt	r2, #1
 8007b2a:	4413      	add	r3, r2
 8007b2c:	e7e0      	b.n	8007af0 <_printf_float+0x1a0>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	055a      	lsls	r2, r3, #21
 8007b32:	d407      	bmi.n	8007b44 <_printf_float+0x1f4>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	4642      	mov	r2, r8
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d12c      	bne.n	8007b9c <_printf_float+0x24c>
 8007b42:	e764      	b.n	8007a0e <_printf_float+0xbe>
 8007b44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b48:	f240 80e0 	bls.w	8007d0c <_printf_float+0x3bc>
 8007b4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b50:	2200      	movs	r2, #0
 8007b52:	2300      	movs	r3, #0
 8007b54:	f7f8 ffc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d034      	beq.n	8007bc6 <_printf_float+0x276>
 8007b5c:	4a37      	ldr	r2, [pc, #220]	; (8007c3c <_printf_float+0x2ec>)
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f af51 	beq.w	8007a0e <_printf_float+0xbe>
 8007b6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b70:	429a      	cmp	r2, r3
 8007b72:	db02      	blt.n	8007b7a <_printf_float+0x22a>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	07d8      	lsls	r0, r3, #31
 8007b78:	d510      	bpl.n	8007b9c <_printf_float+0x24c>
 8007b7a:	ee18 3a10 	vmov	r3, s16
 8007b7e:	4652      	mov	r2, sl
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	f43f af41 	beq.w	8007a0e <_printf_float+0xbe>
 8007b8c:	f04f 0800 	mov.w	r8, #0
 8007b90:	f104 091a 	add.w	r9, r4, #26
 8007b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b96:	3b01      	subs	r3, #1
 8007b98:	4543      	cmp	r3, r8
 8007b9a:	dc09      	bgt.n	8007bb0 <_printf_float+0x260>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	079b      	lsls	r3, r3, #30
 8007ba0:	f100 8107 	bmi.w	8007db2 <_printf_float+0x462>
 8007ba4:	68e0      	ldr	r0, [r4, #12]
 8007ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba8:	4298      	cmp	r0, r3
 8007baa:	bfb8      	it	lt
 8007bac:	4618      	movlt	r0, r3
 8007bae:	e730      	b.n	8007a12 <_printf_float+0xc2>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	464a      	mov	r2, r9
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f af27 	beq.w	8007a0e <_printf_float+0xbe>
 8007bc0:	f108 0801 	add.w	r8, r8, #1
 8007bc4:	e7e6      	b.n	8007b94 <_printf_float+0x244>
 8007bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dc39      	bgt.n	8007c40 <_printf_float+0x2f0>
 8007bcc:	4a1b      	ldr	r2, [pc, #108]	; (8007c3c <_printf_float+0x2ec>)
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f43f af19 	beq.w	8007a0e <_printf_float+0xbe>
 8007bdc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007be0:	4313      	orrs	r3, r2
 8007be2:	d102      	bne.n	8007bea <_printf_float+0x29a>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	07d9      	lsls	r1, r3, #31
 8007be8:	d5d8      	bpl.n	8007b9c <_printf_float+0x24c>
 8007bea:	ee18 3a10 	vmov	r3, s16
 8007bee:	4652      	mov	r2, sl
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	47b8      	blx	r7
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f43f af09 	beq.w	8007a0e <_printf_float+0xbe>
 8007bfc:	f04f 0900 	mov.w	r9, #0
 8007c00:	f104 0a1a 	add.w	sl, r4, #26
 8007c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c06:	425b      	negs	r3, r3
 8007c08:	454b      	cmp	r3, r9
 8007c0a:	dc01      	bgt.n	8007c10 <_printf_float+0x2c0>
 8007c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0e:	e792      	b.n	8007b36 <_printf_float+0x1e6>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4652      	mov	r2, sl
 8007c14:	4631      	mov	r1, r6
 8007c16:	4628      	mov	r0, r5
 8007c18:	47b8      	blx	r7
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	f43f aef7 	beq.w	8007a0e <_printf_float+0xbe>
 8007c20:	f109 0901 	add.w	r9, r9, #1
 8007c24:	e7ee      	b.n	8007c04 <_printf_float+0x2b4>
 8007c26:	bf00      	nop
 8007c28:	7fefffff 	.word	0x7fefffff
 8007c2c:	0800c1bc 	.word	0x0800c1bc
 8007c30:	0800c1c0 	.word	0x0800c1c0
 8007c34:	0800c1c4 	.word	0x0800c1c4
 8007c38:	0800c1c8 	.word	0x0800c1c8
 8007c3c:	0800c1cc 	.word	0x0800c1cc
 8007c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c44:	429a      	cmp	r2, r3
 8007c46:	bfa8      	it	ge
 8007c48:	461a      	movge	r2, r3
 8007c4a:	2a00      	cmp	r2, #0
 8007c4c:	4691      	mov	r9, r2
 8007c4e:	dc37      	bgt.n	8007cc0 <_printf_float+0x370>
 8007c50:	f04f 0b00 	mov.w	fp, #0
 8007c54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c58:	f104 021a 	add.w	r2, r4, #26
 8007c5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	eba3 0309 	sub.w	r3, r3, r9
 8007c64:	455b      	cmp	r3, fp
 8007c66:	dc33      	bgt.n	8007cd0 <_printf_float+0x380>
 8007c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	db3b      	blt.n	8007ce8 <_printf_float+0x398>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	07da      	lsls	r2, r3, #31
 8007c74:	d438      	bmi.n	8007ce8 <_printf_float+0x398>
 8007c76:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007c7a:	eba2 0903 	sub.w	r9, r2, r3
 8007c7e:	9b05      	ldr	r3, [sp, #20]
 8007c80:	1ad2      	subs	r2, r2, r3
 8007c82:	4591      	cmp	r9, r2
 8007c84:	bfa8      	it	ge
 8007c86:	4691      	movge	r9, r2
 8007c88:	f1b9 0f00 	cmp.w	r9, #0
 8007c8c:	dc35      	bgt.n	8007cfa <_printf_float+0x3aa>
 8007c8e:	f04f 0800 	mov.w	r8, #0
 8007c92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c96:	f104 0a1a 	add.w	sl, r4, #26
 8007c9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	eba3 0309 	sub.w	r3, r3, r9
 8007ca4:	4543      	cmp	r3, r8
 8007ca6:	f77f af79 	ble.w	8007b9c <_printf_float+0x24c>
 8007caa:	2301      	movs	r3, #1
 8007cac:	4652      	mov	r2, sl
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f43f aeaa 	beq.w	8007a0e <_printf_float+0xbe>
 8007cba:	f108 0801 	add.w	r8, r8, #1
 8007cbe:	e7ec      	b.n	8007c9a <_printf_float+0x34a>
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	47b8      	blx	r7
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d1c0      	bne.n	8007c50 <_printf_float+0x300>
 8007cce:	e69e      	b.n	8007a0e <_printf_float+0xbe>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	9205      	str	r2, [sp, #20]
 8007cd8:	47b8      	blx	r7
 8007cda:	3001      	adds	r0, #1
 8007cdc:	f43f ae97 	beq.w	8007a0e <_printf_float+0xbe>
 8007ce0:	9a05      	ldr	r2, [sp, #20]
 8007ce2:	f10b 0b01 	add.w	fp, fp, #1
 8007ce6:	e7b9      	b.n	8007c5c <_printf_float+0x30c>
 8007ce8:	ee18 3a10 	vmov	r3, s16
 8007cec:	4652      	mov	r2, sl
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d1be      	bne.n	8007c76 <_printf_float+0x326>
 8007cf8:	e689      	b.n	8007a0e <_printf_float+0xbe>
 8007cfa:	9a05      	ldr	r2, [sp, #20]
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	4442      	add	r2, r8
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	d1c1      	bne.n	8007c8e <_printf_float+0x33e>
 8007d0a:	e680      	b.n	8007a0e <_printf_float+0xbe>
 8007d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d0e:	2a01      	cmp	r2, #1
 8007d10:	dc01      	bgt.n	8007d16 <_printf_float+0x3c6>
 8007d12:	07db      	lsls	r3, r3, #31
 8007d14:	d53a      	bpl.n	8007d8c <_printf_float+0x43c>
 8007d16:	2301      	movs	r3, #1
 8007d18:	4642      	mov	r2, r8
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	47b8      	blx	r7
 8007d20:	3001      	adds	r0, #1
 8007d22:	f43f ae74 	beq.w	8007a0e <_printf_float+0xbe>
 8007d26:	ee18 3a10 	vmov	r3, s16
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b8      	blx	r7
 8007d32:	3001      	adds	r0, #1
 8007d34:	f43f ae6b 	beq.w	8007a0e <_printf_float+0xbe>
 8007d38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007d44:	f7f8 fec8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d48:	b9d8      	cbnz	r0, 8007d82 <_printf_float+0x432>
 8007d4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007d4e:	f108 0201 	add.w	r2, r8, #1
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d10e      	bne.n	8007d7a <_printf_float+0x42a>
 8007d5c:	e657      	b.n	8007a0e <_printf_float+0xbe>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4652      	mov	r2, sl
 8007d62:	4631      	mov	r1, r6
 8007d64:	4628      	mov	r0, r5
 8007d66:	47b8      	blx	r7
 8007d68:	3001      	adds	r0, #1
 8007d6a:	f43f ae50 	beq.w	8007a0e <_printf_float+0xbe>
 8007d6e:	f108 0801 	add.w	r8, r8, #1
 8007d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d74:	3b01      	subs	r3, #1
 8007d76:	4543      	cmp	r3, r8
 8007d78:	dcf1      	bgt.n	8007d5e <_printf_float+0x40e>
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d80:	e6da      	b.n	8007b38 <_printf_float+0x1e8>
 8007d82:	f04f 0800 	mov.w	r8, #0
 8007d86:	f104 0a1a 	add.w	sl, r4, #26
 8007d8a:	e7f2      	b.n	8007d72 <_printf_float+0x422>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4642      	mov	r2, r8
 8007d90:	e7df      	b.n	8007d52 <_printf_float+0x402>
 8007d92:	2301      	movs	r3, #1
 8007d94:	464a      	mov	r2, r9
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b8      	blx	r7
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	f43f ae36 	beq.w	8007a0e <_printf_float+0xbe>
 8007da2:	f108 0801 	add.w	r8, r8, #1
 8007da6:	68e3      	ldr	r3, [r4, #12]
 8007da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007daa:	1a5b      	subs	r3, r3, r1
 8007dac:	4543      	cmp	r3, r8
 8007dae:	dcf0      	bgt.n	8007d92 <_printf_float+0x442>
 8007db0:	e6f8      	b.n	8007ba4 <_printf_float+0x254>
 8007db2:	f04f 0800 	mov.w	r8, #0
 8007db6:	f104 0919 	add.w	r9, r4, #25
 8007dba:	e7f4      	b.n	8007da6 <_printf_float+0x456>

08007dbc <_printf_common>:
 8007dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	4616      	mov	r6, r2
 8007dc2:	4699      	mov	r9, r3
 8007dc4:	688a      	ldr	r2, [r1, #8]
 8007dc6:	690b      	ldr	r3, [r1, #16]
 8007dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bfb8      	it	lt
 8007dd0:	4613      	movlt	r3, r2
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dd8:	4607      	mov	r7, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	b10a      	cbz	r2, 8007de2 <_printf_common+0x26>
 8007dde:	3301      	adds	r3, #1
 8007de0:	6033      	str	r3, [r6, #0]
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	0699      	lsls	r1, r3, #26
 8007de6:	bf42      	ittt	mi
 8007de8:	6833      	ldrmi	r3, [r6, #0]
 8007dea:	3302      	addmi	r3, #2
 8007dec:	6033      	strmi	r3, [r6, #0]
 8007dee:	6825      	ldr	r5, [r4, #0]
 8007df0:	f015 0506 	ands.w	r5, r5, #6
 8007df4:	d106      	bne.n	8007e04 <_printf_common+0x48>
 8007df6:	f104 0a19 	add.w	sl, r4, #25
 8007dfa:	68e3      	ldr	r3, [r4, #12]
 8007dfc:	6832      	ldr	r2, [r6, #0]
 8007dfe:	1a9b      	subs	r3, r3, r2
 8007e00:	42ab      	cmp	r3, r5
 8007e02:	dc26      	bgt.n	8007e52 <_printf_common+0x96>
 8007e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e08:	1e13      	subs	r3, r2, #0
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	bf18      	it	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	0692      	lsls	r2, r2, #26
 8007e12:	d42b      	bmi.n	8007e6c <_printf_common+0xb0>
 8007e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e18:	4649      	mov	r1, r9
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	47c0      	blx	r8
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d01e      	beq.n	8007e60 <_printf_common+0xa4>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	6922      	ldr	r2, [r4, #16]
 8007e26:	f003 0306 	and.w	r3, r3, #6
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	bf02      	ittt	eq
 8007e2e:	68e5      	ldreq	r5, [r4, #12]
 8007e30:	6833      	ldreq	r3, [r6, #0]
 8007e32:	1aed      	subeq	r5, r5, r3
 8007e34:	68a3      	ldr	r3, [r4, #8]
 8007e36:	bf0c      	ite	eq
 8007e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e3c:	2500      	movne	r5, #0
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	bfc4      	itt	gt
 8007e42:	1a9b      	subgt	r3, r3, r2
 8007e44:	18ed      	addgt	r5, r5, r3
 8007e46:	2600      	movs	r6, #0
 8007e48:	341a      	adds	r4, #26
 8007e4a:	42b5      	cmp	r5, r6
 8007e4c:	d11a      	bne.n	8007e84 <_printf_common+0xc8>
 8007e4e:	2000      	movs	r0, #0
 8007e50:	e008      	b.n	8007e64 <_printf_common+0xa8>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4652      	mov	r2, sl
 8007e56:	4649      	mov	r1, r9
 8007e58:	4638      	mov	r0, r7
 8007e5a:	47c0      	blx	r8
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d103      	bne.n	8007e68 <_printf_common+0xac>
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e68:	3501      	adds	r5, #1
 8007e6a:	e7c6      	b.n	8007dfa <_printf_common+0x3e>
 8007e6c:	18e1      	adds	r1, r4, r3
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	2030      	movs	r0, #48	; 0x30
 8007e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e76:	4422      	add	r2, r4
 8007e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e80:	3302      	adds	r3, #2
 8007e82:	e7c7      	b.n	8007e14 <_printf_common+0x58>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4622      	mov	r2, r4
 8007e88:	4649      	mov	r1, r9
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	47c0      	blx	r8
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d0e6      	beq.n	8007e60 <_printf_common+0xa4>
 8007e92:	3601      	adds	r6, #1
 8007e94:	e7d9      	b.n	8007e4a <_printf_common+0x8e>
	...

08007e98 <_printf_i>:
 8007e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	7e0f      	ldrb	r7, [r1, #24]
 8007e9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ea0:	2f78      	cmp	r7, #120	; 0x78
 8007ea2:	4691      	mov	r9, r2
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	469a      	mov	sl, r3
 8007eaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eae:	d807      	bhi.n	8007ec0 <_printf_i+0x28>
 8007eb0:	2f62      	cmp	r7, #98	; 0x62
 8007eb2:	d80a      	bhi.n	8007eca <_printf_i+0x32>
 8007eb4:	2f00      	cmp	r7, #0
 8007eb6:	f000 80d4 	beq.w	8008062 <_printf_i+0x1ca>
 8007eba:	2f58      	cmp	r7, #88	; 0x58
 8007ebc:	f000 80c0 	beq.w	8008040 <_printf_i+0x1a8>
 8007ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ec8:	e03a      	b.n	8007f40 <_printf_i+0xa8>
 8007eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ece:	2b15      	cmp	r3, #21
 8007ed0:	d8f6      	bhi.n	8007ec0 <_printf_i+0x28>
 8007ed2:	a101      	add	r1, pc, #4	; (adr r1, 8007ed8 <_printf_i+0x40>)
 8007ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ed8:	08007f31 	.word	0x08007f31
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007ec1 	.word	0x08007ec1
 8007ee4:	08007ec1 	.word	0x08007ec1
 8007ee8:	08007ec1 	.word	0x08007ec1
 8007eec:	08007ec1 	.word	0x08007ec1
 8007ef0:	08007f45 	.word	0x08007f45
 8007ef4:	08007ec1 	.word	0x08007ec1
 8007ef8:	08007ec1 	.word	0x08007ec1
 8007efc:	08007ec1 	.word	0x08007ec1
 8007f00:	08007ec1 	.word	0x08007ec1
 8007f04:	08008049 	.word	0x08008049
 8007f08:	08007f71 	.word	0x08007f71
 8007f0c:	08008003 	.word	0x08008003
 8007f10:	08007ec1 	.word	0x08007ec1
 8007f14:	08007ec1 	.word	0x08007ec1
 8007f18:	0800806b 	.word	0x0800806b
 8007f1c:	08007ec1 	.word	0x08007ec1
 8007f20:	08007f71 	.word	0x08007f71
 8007f24:	08007ec1 	.word	0x08007ec1
 8007f28:	08007ec1 	.word	0x08007ec1
 8007f2c:	0800800b 	.word	0x0800800b
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	1d1a      	adds	r2, r3, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	602a      	str	r2, [r5, #0]
 8007f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f40:	2301      	movs	r3, #1
 8007f42:	e09f      	b.n	8008084 <_printf_i+0x1ec>
 8007f44:	6820      	ldr	r0, [r4, #0]
 8007f46:	682b      	ldr	r3, [r5, #0]
 8007f48:	0607      	lsls	r7, r0, #24
 8007f4a:	f103 0104 	add.w	r1, r3, #4
 8007f4e:	6029      	str	r1, [r5, #0]
 8007f50:	d501      	bpl.n	8007f56 <_printf_i+0xbe>
 8007f52:	681e      	ldr	r6, [r3, #0]
 8007f54:	e003      	b.n	8007f5e <_printf_i+0xc6>
 8007f56:	0646      	lsls	r6, r0, #25
 8007f58:	d5fb      	bpl.n	8007f52 <_printf_i+0xba>
 8007f5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	da03      	bge.n	8007f6a <_printf_i+0xd2>
 8007f62:	232d      	movs	r3, #45	; 0x2d
 8007f64:	4276      	negs	r6, r6
 8007f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f6a:	485a      	ldr	r0, [pc, #360]	; (80080d4 <_printf_i+0x23c>)
 8007f6c:	230a      	movs	r3, #10
 8007f6e:	e012      	b.n	8007f96 <_printf_i+0xfe>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	6820      	ldr	r0, [r4, #0]
 8007f74:	1d19      	adds	r1, r3, #4
 8007f76:	6029      	str	r1, [r5, #0]
 8007f78:	0605      	lsls	r5, r0, #24
 8007f7a:	d501      	bpl.n	8007f80 <_printf_i+0xe8>
 8007f7c:	681e      	ldr	r6, [r3, #0]
 8007f7e:	e002      	b.n	8007f86 <_printf_i+0xee>
 8007f80:	0641      	lsls	r1, r0, #25
 8007f82:	d5fb      	bpl.n	8007f7c <_printf_i+0xe4>
 8007f84:	881e      	ldrh	r6, [r3, #0]
 8007f86:	4853      	ldr	r0, [pc, #332]	; (80080d4 <_printf_i+0x23c>)
 8007f88:	2f6f      	cmp	r7, #111	; 0x6f
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2308      	moveq	r3, #8
 8007f8e:	230a      	movne	r3, #10
 8007f90:	2100      	movs	r1, #0
 8007f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f96:	6865      	ldr	r5, [r4, #4]
 8007f98:	60a5      	str	r5, [r4, #8]
 8007f9a:	2d00      	cmp	r5, #0
 8007f9c:	bfa2      	ittt	ge
 8007f9e:	6821      	ldrge	r1, [r4, #0]
 8007fa0:	f021 0104 	bicge.w	r1, r1, #4
 8007fa4:	6021      	strge	r1, [r4, #0]
 8007fa6:	b90e      	cbnz	r6, 8007fac <_printf_i+0x114>
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	d04b      	beq.n	8008044 <_printf_i+0x1ac>
 8007fac:	4615      	mov	r5, r2
 8007fae:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fb2:	fb03 6711 	mls	r7, r3, r1, r6
 8007fb6:	5dc7      	ldrb	r7, [r0, r7]
 8007fb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fbc:	4637      	mov	r7, r6
 8007fbe:	42bb      	cmp	r3, r7
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	d9f4      	bls.n	8007fae <_printf_i+0x116>
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d10b      	bne.n	8007fe0 <_printf_i+0x148>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	07de      	lsls	r6, r3, #31
 8007fcc:	d508      	bpl.n	8007fe0 <_printf_i+0x148>
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	6861      	ldr	r1, [r4, #4]
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	bfde      	ittt	le
 8007fd6:	2330      	movle	r3, #48	; 0x30
 8007fd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fe0:	1b52      	subs	r2, r2, r5
 8007fe2:	6122      	str	r2, [r4, #16]
 8007fe4:	f8cd a000 	str.w	sl, [sp]
 8007fe8:	464b      	mov	r3, r9
 8007fea:	aa03      	add	r2, sp, #12
 8007fec:	4621      	mov	r1, r4
 8007fee:	4640      	mov	r0, r8
 8007ff0:	f7ff fee4 	bl	8007dbc <_printf_common>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d14a      	bne.n	800808e <_printf_i+0x1f6>
 8007ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffc:	b004      	add	sp, #16
 8007ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	f043 0320 	orr.w	r3, r3, #32
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	4833      	ldr	r0, [pc, #204]	; (80080d8 <_printf_i+0x240>)
 800800c:	2778      	movs	r7, #120	; 0x78
 800800e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	6829      	ldr	r1, [r5, #0]
 8008016:	061f      	lsls	r7, r3, #24
 8008018:	f851 6b04 	ldr.w	r6, [r1], #4
 800801c:	d402      	bmi.n	8008024 <_printf_i+0x18c>
 800801e:	065f      	lsls	r7, r3, #25
 8008020:	bf48      	it	mi
 8008022:	b2b6      	uxthmi	r6, r6
 8008024:	07df      	lsls	r7, r3, #31
 8008026:	bf48      	it	mi
 8008028:	f043 0320 	orrmi.w	r3, r3, #32
 800802c:	6029      	str	r1, [r5, #0]
 800802e:	bf48      	it	mi
 8008030:	6023      	strmi	r3, [r4, #0]
 8008032:	b91e      	cbnz	r6, 800803c <_printf_i+0x1a4>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	f023 0320 	bic.w	r3, r3, #32
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	2310      	movs	r3, #16
 800803e:	e7a7      	b.n	8007f90 <_printf_i+0xf8>
 8008040:	4824      	ldr	r0, [pc, #144]	; (80080d4 <_printf_i+0x23c>)
 8008042:	e7e4      	b.n	800800e <_printf_i+0x176>
 8008044:	4615      	mov	r5, r2
 8008046:	e7bd      	b.n	8007fc4 <_printf_i+0x12c>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	6826      	ldr	r6, [r4, #0]
 800804c:	6961      	ldr	r1, [r4, #20]
 800804e:	1d18      	adds	r0, r3, #4
 8008050:	6028      	str	r0, [r5, #0]
 8008052:	0635      	lsls	r5, r6, #24
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	d501      	bpl.n	800805c <_printf_i+0x1c4>
 8008058:	6019      	str	r1, [r3, #0]
 800805a:	e002      	b.n	8008062 <_printf_i+0x1ca>
 800805c:	0670      	lsls	r0, r6, #25
 800805e:	d5fb      	bpl.n	8008058 <_printf_i+0x1c0>
 8008060:	8019      	strh	r1, [r3, #0]
 8008062:	2300      	movs	r3, #0
 8008064:	6123      	str	r3, [r4, #16]
 8008066:	4615      	mov	r5, r2
 8008068:	e7bc      	b.n	8007fe4 <_printf_i+0x14c>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	1d1a      	adds	r2, r3, #4
 800806e:	602a      	str	r2, [r5, #0]
 8008070:	681d      	ldr	r5, [r3, #0]
 8008072:	6862      	ldr	r2, [r4, #4]
 8008074:	2100      	movs	r1, #0
 8008076:	4628      	mov	r0, r5
 8008078:	f7f8 f8b2 	bl	80001e0 <memchr>
 800807c:	b108      	cbz	r0, 8008082 <_printf_i+0x1ea>
 800807e:	1b40      	subs	r0, r0, r5
 8008080:	6060      	str	r0, [r4, #4]
 8008082:	6863      	ldr	r3, [r4, #4]
 8008084:	6123      	str	r3, [r4, #16]
 8008086:	2300      	movs	r3, #0
 8008088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800808c:	e7aa      	b.n	8007fe4 <_printf_i+0x14c>
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	462a      	mov	r2, r5
 8008092:	4649      	mov	r1, r9
 8008094:	4640      	mov	r0, r8
 8008096:	47d0      	blx	sl
 8008098:	3001      	adds	r0, #1
 800809a:	d0ad      	beq.n	8007ff8 <_printf_i+0x160>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	079b      	lsls	r3, r3, #30
 80080a0:	d413      	bmi.n	80080ca <_printf_i+0x232>
 80080a2:	68e0      	ldr	r0, [r4, #12]
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	4298      	cmp	r0, r3
 80080a8:	bfb8      	it	lt
 80080aa:	4618      	movlt	r0, r3
 80080ac:	e7a6      	b.n	8007ffc <_printf_i+0x164>
 80080ae:	2301      	movs	r3, #1
 80080b0:	4632      	mov	r2, r6
 80080b2:	4649      	mov	r1, r9
 80080b4:	4640      	mov	r0, r8
 80080b6:	47d0      	blx	sl
 80080b8:	3001      	adds	r0, #1
 80080ba:	d09d      	beq.n	8007ff8 <_printf_i+0x160>
 80080bc:	3501      	adds	r5, #1
 80080be:	68e3      	ldr	r3, [r4, #12]
 80080c0:	9903      	ldr	r1, [sp, #12]
 80080c2:	1a5b      	subs	r3, r3, r1
 80080c4:	42ab      	cmp	r3, r5
 80080c6:	dcf2      	bgt.n	80080ae <_printf_i+0x216>
 80080c8:	e7eb      	b.n	80080a2 <_printf_i+0x20a>
 80080ca:	2500      	movs	r5, #0
 80080cc:	f104 0619 	add.w	r6, r4, #25
 80080d0:	e7f5      	b.n	80080be <_printf_i+0x226>
 80080d2:	bf00      	nop
 80080d4:	0800c1ce 	.word	0x0800c1ce
 80080d8:	0800c1df 	.word	0x0800c1df

080080dc <_scanf_float>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	b087      	sub	sp, #28
 80080e2:	4617      	mov	r7, r2
 80080e4:	9303      	str	r3, [sp, #12]
 80080e6:	688b      	ldr	r3, [r1, #8]
 80080e8:	1e5a      	subs	r2, r3, #1
 80080ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80080ee:	bf83      	ittte	hi
 80080f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80080f4:	195b      	addhi	r3, r3, r5
 80080f6:	9302      	strhi	r3, [sp, #8]
 80080f8:	2300      	movls	r3, #0
 80080fa:	bf86      	itte	hi
 80080fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008100:	608b      	strhi	r3, [r1, #8]
 8008102:	9302      	strls	r3, [sp, #8]
 8008104:	680b      	ldr	r3, [r1, #0]
 8008106:	468b      	mov	fp, r1
 8008108:	2500      	movs	r5, #0
 800810a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800810e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008112:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008116:	4680      	mov	r8, r0
 8008118:	460c      	mov	r4, r1
 800811a:	465e      	mov	r6, fp
 800811c:	46aa      	mov	sl, r5
 800811e:	46a9      	mov	r9, r5
 8008120:	9501      	str	r5, [sp, #4]
 8008122:	68a2      	ldr	r2, [r4, #8]
 8008124:	b152      	cbz	r2, 800813c <_scanf_float+0x60>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b4e      	cmp	r3, #78	; 0x4e
 800812c:	d864      	bhi.n	80081f8 <_scanf_float+0x11c>
 800812e:	2b40      	cmp	r3, #64	; 0x40
 8008130:	d83c      	bhi.n	80081ac <_scanf_float+0xd0>
 8008132:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008136:	b2c8      	uxtb	r0, r1
 8008138:	280e      	cmp	r0, #14
 800813a:	d93a      	bls.n	80081b2 <_scanf_float+0xd6>
 800813c:	f1b9 0f00 	cmp.w	r9, #0
 8008140:	d003      	beq.n	800814a <_scanf_float+0x6e>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800814e:	f1ba 0f01 	cmp.w	sl, #1
 8008152:	f200 8113 	bhi.w	800837c <_scanf_float+0x2a0>
 8008156:	455e      	cmp	r6, fp
 8008158:	f200 8105 	bhi.w	8008366 <_scanf_float+0x28a>
 800815c:	2501      	movs	r5, #1
 800815e:	4628      	mov	r0, r5
 8008160:	b007      	add	sp, #28
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800816a:	2a0d      	cmp	r2, #13
 800816c:	d8e6      	bhi.n	800813c <_scanf_float+0x60>
 800816e:	a101      	add	r1, pc, #4	; (adr r1, 8008174 <_scanf_float+0x98>)
 8008170:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008174:	080082b3 	.word	0x080082b3
 8008178:	0800813d 	.word	0x0800813d
 800817c:	0800813d 	.word	0x0800813d
 8008180:	0800813d 	.word	0x0800813d
 8008184:	08008313 	.word	0x08008313
 8008188:	080082eb 	.word	0x080082eb
 800818c:	0800813d 	.word	0x0800813d
 8008190:	0800813d 	.word	0x0800813d
 8008194:	080082c1 	.word	0x080082c1
 8008198:	0800813d 	.word	0x0800813d
 800819c:	0800813d 	.word	0x0800813d
 80081a0:	0800813d 	.word	0x0800813d
 80081a4:	0800813d 	.word	0x0800813d
 80081a8:	08008279 	.word	0x08008279
 80081ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80081b0:	e7db      	b.n	800816a <_scanf_float+0x8e>
 80081b2:	290e      	cmp	r1, #14
 80081b4:	d8c2      	bhi.n	800813c <_scanf_float+0x60>
 80081b6:	a001      	add	r0, pc, #4	; (adr r0, 80081bc <_scanf_float+0xe0>)
 80081b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80081bc:	0800826b 	.word	0x0800826b
 80081c0:	0800813d 	.word	0x0800813d
 80081c4:	0800826b 	.word	0x0800826b
 80081c8:	080082ff 	.word	0x080082ff
 80081cc:	0800813d 	.word	0x0800813d
 80081d0:	08008219 	.word	0x08008219
 80081d4:	08008255 	.word	0x08008255
 80081d8:	08008255 	.word	0x08008255
 80081dc:	08008255 	.word	0x08008255
 80081e0:	08008255 	.word	0x08008255
 80081e4:	08008255 	.word	0x08008255
 80081e8:	08008255 	.word	0x08008255
 80081ec:	08008255 	.word	0x08008255
 80081f0:	08008255 	.word	0x08008255
 80081f4:	08008255 	.word	0x08008255
 80081f8:	2b6e      	cmp	r3, #110	; 0x6e
 80081fa:	d809      	bhi.n	8008210 <_scanf_float+0x134>
 80081fc:	2b60      	cmp	r3, #96	; 0x60
 80081fe:	d8b2      	bhi.n	8008166 <_scanf_float+0x8a>
 8008200:	2b54      	cmp	r3, #84	; 0x54
 8008202:	d077      	beq.n	80082f4 <_scanf_float+0x218>
 8008204:	2b59      	cmp	r3, #89	; 0x59
 8008206:	d199      	bne.n	800813c <_scanf_float+0x60>
 8008208:	2d07      	cmp	r5, #7
 800820a:	d197      	bne.n	800813c <_scanf_float+0x60>
 800820c:	2508      	movs	r5, #8
 800820e:	e029      	b.n	8008264 <_scanf_float+0x188>
 8008210:	2b74      	cmp	r3, #116	; 0x74
 8008212:	d06f      	beq.n	80082f4 <_scanf_float+0x218>
 8008214:	2b79      	cmp	r3, #121	; 0x79
 8008216:	e7f6      	b.n	8008206 <_scanf_float+0x12a>
 8008218:	6821      	ldr	r1, [r4, #0]
 800821a:	05c8      	lsls	r0, r1, #23
 800821c:	d51a      	bpl.n	8008254 <_scanf_float+0x178>
 800821e:	9b02      	ldr	r3, [sp, #8]
 8008220:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008224:	6021      	str	r1, [r4, #0]
 8008226:	f109 0901 	add.w	r9, r9, #1
 800822a:	b11b      	cbz	r3, 8008234 <_scanf_float+0x158>
 800822c:	3b01      	subs	r3, #1
 800822e:	3201      	adds	r2, #1
 8008230:	9302      	str	r3, [sp, #8]
 8008232:	60a2      	str	r2, [r4, #8]
 8008234:	68a3      	ldr	r3, [r4, #8]
 8008236:	3b01      	subs	r3, #1
 8008238:	60a3      	str	r3, [r4, #8]
 800823a:	6923      	ldr	r3, [r4, #16]
 800823c:	3301      	adds	r3, #1
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3b01      	subs	r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	607b      	str	r3, [r7, #4]
 8008248:	f340 8084 	ble.w	8008354 <_scanf_float+0x278>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	3301      	adds	r3, #1
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	e766      	b.n	8008122 <_scanf_float+0x46>
 8008254:	eb1a 0f05 	cmn.w	sl, r5
 8008258:	f47f af70 	bne.w	800813c <_scanf_float+0x60>
 800825c:	6822      	ldr	r2, [r4, #0]
 800825e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008262:	6022      	str	r2, [r4, #0]
 8008264:	f806 3b01 	strb.w	r3, [r6], #1
 8008268:	e7e4      	b.n	8008234 <_scanf_float+0x158>
 800826a:	6822      	ldr	r2, [r4, #0]
 800826c:	0610      	lsls	r0, r2, #24
 800826e:	f57f af65 	bpl.w	800813c <_scanf_float+0x60>
 8008272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008276:	e7f4      	b.n	8008262 <_scanf_float+0x186>
 8008278:	f1ba 0f00 	cmp.w	sl, #0
 800827c:	d10e      	bne.n	800829c <_scanf_float+0x1c0>
 800827e:	f1b9 0f00 	cmp.w	r9, #0
 8008282:	d10e      	bne.n	80082a2 <_scanf_float+0x1c6>
 8008284:	6822      	ldr	r2, [r4, #0]
 8008286:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800828a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800828e:	d108      	bne.n	80082a2 <_scanf_float+0x1c6>
 8008290:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	f04f 0a01 	mov.w	sl, #1
 800829a:	e7e3      	b.n	8008264 <_scanf_float+0x188>
 800829c:	f1ba 0f02 	cmp.w	sl, #2
 80082a0:	d055      	beq.n	800834e <_scanf_float+0x272>
 80082a2:	2d01      	cmp	r5, #1
 80082a4:	d002      	beq.n	80082ac <_scanf_float+0x1d0>
 80082a6:	2d04      	cmp	r5, #4
 80082a8:	f47f af48 	bne.w	800813c <_scanf_float+0x60>
 80082ac:	3501      	adds	r5, #1
 80082ae:	b2ed      	uxtb	r5, r5
 80082b0:	e7d8      	b.n	8008264 <_scanf_float+0x188>
 80082b2:	f1ba 0f01 	cmp.w	sl, #1
 80082b6:	f47f af41 	bne.w	800813c <_scanf_float+0x60>
 80082ba:	f04f 0a02 	mov.w	sl, #2
 80082be:	e7d1      	b.n	8008264 <_scanf_float+0x188>
 80082c0:	b97d      	cbnz	r5, 80082e2 <_scanf_float+0x206>
 80082c2:	f1b9 0f00 	cmp.w	r9, #0
 80082c6:	f47f af3c 	bne.w	8008142 <_scanf_float+0x66>
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80082d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082d4:	f47f af39 	bne.w	800814a <_scanf_float+0x6e>
 80082d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082dc:	6022      	str	r2, [r4, #0]
 80082de:	2501      	movs	r5, #1
 80082e0:	e7c0      	b.n	8008264 <_scanf_float+0x188>
 80082e2:	2d03      	cmp	r5, #3
 80082e4:	d0e2      	beq.n	80082ac <_scanf_float+0x1d0>
 80082e6:	2d05      	cmp	r5, #5
 80082e8:	e7de      	b.n	80082a8 <_scanf_float+0x1cc>
 80082ea:	2d02      	cmp	r5, #2
 80082ec:	f47f af26 	bne.w	800813c <_scanf_float+0x60>
 80082f0:	2503      	movs	r5, #3
 80082f2:	e7b7      	b.n	8008264 <_scanf_float+0x188>
 80082f4:	2d06      	cmp	r5, #6
 80082f6:	f47f af21 	bne.w	800813c <_scanf_float+0x60>
 80082fa:	2507      	movs	r5, #7
 80082fc:	e7b2      	b.n	8008264 <_scanf_float+0x188>
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	0591      	lsls	r1, r2, #22
 8008302:	f57f af1b 	bpl.w	800813c <_scanf_float+0x60>
 8008306:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800830a:	6022      	str	r2, [r4, #0]
 800830c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008310:	e7a8      	b.n	8008264 <_scanf_float+0x188>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008318:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800831c:	d006      	beq.n	800832c <_scanf_float+0x250>
 800831e:	0550      	lsls	r0, r2, #21
 8008320:	f57f af0c 	bpl.w	800813c <_scanf_float+0x60>
 8008324:	f1b9 0f00 	cmp.w	r9, #0
 8008328:	f43f af0f 	beq.w	800814a <_scanf_float+0x6e>
 800832c:	0591      	lsls	r1, r2, #22
 800832e:	bf58      	it	pl
 8008330:	9901      	ldrpl	r1, [sp, #4]
 8008332:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008336:	bf58      	it	pl
 8008338:	eba9 0101 	subpl.w	r1, r9, r1
 800833c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008340:	bf58      	it	pl
 8008342:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008346:	6022      	str	r2, [r4, #0]
 8008348:	f04f 0900 	mov.w	r9, #0
 800834c:	e78a      	b.n	8008264 <_scanf_float+0x188>
 800834e:	f04f 0a03 	mov.w	sl, #3
 8008352:	e787      	b.n	8008264 <_scanf_float+0x188>
 8008354:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008358:	4639      	mov	r1, r7
 800835a:	4640      	mov	r0, r8
 800835c:	4798      	blx	r3
 800835e:	2800      	cmp	r0, #0
 8008360:	f43f aedf 	beq.w	8008122 <_scanf_float+0x46>
 8008364:	e6ea      	b.n	800813c <_scanf_float+0x60>
 8008366:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800836a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800836e:	463a      	mov	r2, r7
 8008370:	4640      	mov	r0, r8
 8008372:	4798      	blx	r3
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	3b01      	subs	r3, #1
 8008378:	6123      	str	r3, [r4, #16]
 800837a:	e6ec      	b.n	8008156 <_scanf_float+0x7a>
 800837c:	1e6b      	subs	r3, r5, #1
 800837e:	2b06      	cmp	r3, #6
 8008380:	d825      	bhi.n	80083ce <_scanf_float+0x2f2>
 8008382:	2d02      	cmp	r5, #2
 8008384:	d836      	bhi.n	80083f4 <_scanf_float+0x318>
 8008386:	455e      	cmp	r6, fp
 8008388:	f67f aee8 	bls.w	800815c <_scanf_float+0x80>
 800838c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008390:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008394:	463a      	mov	r2, r7
 8008396:	4640      	mov	r0, r8
 8008398:	4798      	blx	r3
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	3b01      	subs	r3, #1
 800839e:	6123      	str	r3, [r4, #16]
 80083a0:	e7f1      	b.n	8008386 <_scanf_float+0x2aa>
 80083a2:	9802      	ldr	r0, [sp, #8]
 80083a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80083ac:	9002      	str	r0, [sp, #8]
 80083ae:	463a      	mov	r2, r7
 80083b0:	4640      	mov	r0, r8
 80083b2:	4798      	blx	r3
 80083b4:	6923      	ldr	r3, [r4, #16]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083be:	fa5f fa8a 	uxtb.w	sl, sl
 80083c2:	f1ba 0f02 	cmp.w	sl, #2
 80083c6:	d1ec      	bne.n	80083a2 <_scanf_float+0x2c6>
 80083c8:	3d03      	subs	r5, #3
 80083ca:	b2ed      	uxtb	r5, r5
 80083cc:	1b76      	subs	r6, r6, r5
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	05da      	lsls	r2, r3, #23
 80083d2:	d52f      	bpl.n	8008434 <_scanf_float+0x358>
 80083d4:	055b      	lsls	r3, r3, #21
 80083d6:	d510      	bpl.n	80083fa <_scanf_float+0x31e>
 80083d8:	455e      	cmp	r6, fp
 80083da:	f67f aebf 	bls.w	800815c <_scanf_float+0x80>
 80083de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083e6:	463a      	mov	r2, r7
 80083e8:	4640      	mov	r0, r8
 80083ea:	4798      	blx	r3
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	6123      	str	r3, [r4, #16]
 80083f2:	e7f1      	b.n	80083d8 <_scanf_float+0x2fc>
 80083f4:	46aa      	mov	sl, r5
 80083f6:	9602      	str	r6, [sp, #8]
 80083f8:	e7df      	b.n	80083ba <_scanf_float+0x2de>
 80083fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	2965      	cmp	r1, #101	; 0x65
 8008402:	f103 33ff 	add.w	r3, r3, #4294967295
 8008406:	f106 35ff 	add.w	r5, r6, #4294967295
 800840a:	6123      	str	r3, [r4, #16]
 800840c:	d00c      	beq.n	8008428 <_scanf_float+0x34c>
 800840e:	2945      	cmp	r1, #69	; 0x45
 8008410:	d00a      	beq.n	8008428 <_scanf_float+0x34c>
 8008412:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008416:	463a      	mov	r2, r7
 8008418:	4640      	mov	r0, r8
 800841a:	4798      	blx	r3
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008422:	3b01      	subs	r3, #1
 8008424:	1eb5      	subs	r5, r6, #2
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800842c:	463a      	mov	r2, r7
 800842e:	4640      	mov	r0, r8
 8008430:	4798      	blx	r3
 8008432:	462e      	mov	r6, r5
 8008434:	6825      	ldr	r5, [r4, #0]
 8008436:	f015 0510 	ands.w	r5, r5, #16
 800843a:	d158      	bne.n	80084ee <_scanf_float+0x412>
 800843c:	7035      	strb	r5, [r6, #0]
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008448:	d11c      	bne.n	8008484 <_scanf_float+0x3a8>
 800844a:	9b01      	ldr	r3, [sp, #4]
 800844c:	454b      	cmp	r3, r9
 800844e:	eba3 0209 	sub.w	r2, r3, r9
 8008452:	d124      	bne.n	800849e <_scanf_float+0x3c2>
 8008454:	2200      	movs	r2, #0
 8008456:	4659      	mov	r1, fp
 8008458:	4640      	mov	r0, r8
 800845a:	f002 fc1d 	bl	800ac98 <_strtod_r>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	6821      	ldr	r1, [r4, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f011 0f02 	tst.w	r1, #2
 8008468:	ec57 6b10 	vmov	r6, r7, d0
 800846c:	f103 0204 	add.w	r2, r3, #4
 8008470:	d020      	beq.n	80084b4 <_scanf_float+0x3d8>
 8008472:	9903      	ldr	r1, [sp, #12]
 8008474:	600a      	str	r2, [r1, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	e9c3 6700 	strd	r6, r7, [r3]
 800847c:	68e3      	ldr	r3, [r4, #12]
 800847e:	3301      	adds	r3, #1
 8008480:	60e3      	str	r3, [r4, #12]
 8008482:	e66c      	b.n	800815e <_scanf_float+0x82>
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0e4      	beq.n	8008454 <_scanf_float+0x378>
 800848a:	9905      	ldr	r1, [sp, #20]
 800848c:	230a      	movs	r3, #10
 800848e:	462a      	mov	r2, r5
 8008490:	3101      	adds	r1, #1
 8008492:	4640      	mov	r0, r8
 8008494:	f002 fc88 	bl	800ada8 <_strtol_r>
 8008498:	9b04      	ldr	r3, [sp, #16]
 800849a:	9e05      	ldr	r6, [sp, #20]
 800849c:	1ac2      	subs	r2, r0, r3
 800849e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80084a2:	429e      	cmp	r6, r3
 80084a4:	bf28      	it	cs
 80084a6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80084aa:	4912      	ldr	r1, [pc, #72]	; (80084f4 <_scanf_float+0x418>)
 80084ac:	4630      	mov	r0, r6
 80084ae:	f000 f8d5 	bl	800865c <siprintf>
 80084b2:	e7cf      	b.n	8008454 <_scanf_float+0x378>
 80084b4:	f011 0f04 	tst.w	r1, #4
 80084b8:	9903      	ldr	r1, [sp, #12]
 80084ba:	600a      	str	r2, [r1, #0]
 80084bc:	d1db      	bne.n	8008476 <_scanf_float+0x39a>
 80084be:	f8d3 8000 	ldr.w	r8, [r3]
 80084c2:	ee10 2a10 	vmov	r2, s0
 80084c6:	ee10 0a10 	vmov	r0, s0
 80084ca:	463b      	mov	r3, r7
 80084cc:	4639      	mov	r1, r7
 80084ce:	f7f8 fb35 	bl	8000b3c <__aeabi_dcmpun>
 80084d2:	b128      	cbz	r0, 80084e0 <_scanf_float+0x404>
 80084d4:	4808      	ldr	r0, [pc, #32]	; (80084f8 <_scanf_float+0x41c>)
 80084d6:	f000 f9a3 	bl	8008820 <nanf>
 80084da:	ed88 0a00 	vstr	s0, [r8]
 80084de:	e7cd      	b.n	800847c <_scanf_float+0x3a0>
 80084e0:	4630      	mov	r0, r6
 80084e2:	4639      	mov	r1, r7
 80084e4:	f7f8 fb88 	bl	8000bf8 <__aeabi_d2f>
 80084e8:	f8c8 0000 	str.w	r0, [r8]
 80084ec:	e7c6      	b.n	800847c <_scanf_float+0x3a0>
 80084ee:	2500      	movs	r5, #0
 80084f0:	e635      	b.n	800815e <_scanf_float+0x82>
 80084f2:	bf00      	nop
 80084f4:	0800c1f0 	.word	0x0800c1f0
 80084f8:	0800c585 	.word	0x0800c585

080084fc <std>:
 80084fc:	2300      	movs	r3, #0
 80084fe:	b510      	push	{r4, lr}
 8008500:	4604      	mov	r4, r0
 8008502:	e9c0 3300 	strd	r3, r3, [r0]
 8008506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800850a:	6083      	str	r3, [r0, #8]
 800850c:	8181      	strh	r1, [r0, #12]
 800850e:	6643      	str	r3, [r0, #100]	; 0x64
 8008510:	81c2      	strh	r2, [r0, #14]
 8008512:	6183      	str	r3, [r0, #24]
 8008514:	4619      	mov	r1, r3
 8008516:	2208      	movs	r2, #8
 8008518:	305c      	adds	r0, #92	; 0x5c
 800851a:	f000 f902 	bl	8008722 <memset>
 800851e:	4b05      	ldr	r3, [pc, #20]	; (8008534 <std+0x38>)
 8008520:	6263      	str	r3, [r4, #36]	; 0x24
 8008522:	4b05      	ldr	r3, [pc, #20]	; (8008538 <std+0x3c>)
 8008524:	62a3      	str	r3, [r4, #40]	; 0x28
 8008526:	4b05      	ldr	r3, [pc, #20]	; (800853c <std+0x40>)
 8008528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800852a:	4b05      	ldr	r3, [pc, #20]	; (8008540 <std+0x44>)
 800852c:	6224      	str	r4, [r4, #32]
 800852e:	6323      	str	r3, [r4, #48]	; 0x30
 8008530:	bd10      	pop	{r4, pc}
 8008532:	bf00      	nop
 8008534:	0800869d 	.word	0x0800869d
 8008538:	080086bf 	.word	0x080086bf
 800853c:	080086f7 	.word	0x080086f7
 8008540:	0800871b 	.word	0x0800871b

08008544 <stdio_exit_handler>:
 8008544:	4a02      	ldr	r2, [pc, #8]	; (8008550 <stdio_exit_handler+0xc>)
 8008546:	4903      	ldr	r1, [pc, #12]	; (8008554 <stdio_exit_handler+0x10>)
 8008548:	4803      	ldr	r0, [pc, #12]	; (8008558 <stdio_exit_handler+0x14>)
 800854a:	f000 b869 	b.w	8008620 <_fwalk_sglue>
 800854e:	bf00      	nop
 8008550:	20000010 	.word	0x20000010
 8008554:	0800b169 	.word	0x0800b169
 8008558:	2000001c 	.word	0x2000001c

0800855c <cleanup_stdio>:
 800855c:	6841      	ldr	r1, [r0, #4]
 800855e:	4b0c      	ldr	r3, [pc, #48]	; (8008590 <cleanup_stdio+0x34>)
 8008560:	4299      	cmp	r1, r3
 8008562:	b510      	push	{r4, lr}
 8008564:	4604      	mov	r4, r0
 8008566:	d001      	beq.n	800856c <cleanup_stdio+0x10>
 8008568:	f002 fdfe 	bl	800b168 <_fflush_r>
 800856c:	68a1      	ldr	r1, [r4, #8]
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <cleanup_stdio+0x38>)
 8008570:	4299      	cmp	r1, r3
 8008572:	d002      	beq.n	800857a <cleanup_stdio+0x1e>
 8008574:	4620      	mov	r0, r4
 8008576:	f002 fdf7 	bl	800b168 <_fflush_r>
 800857a:	68e1      	ldr	r1, [r4, #12]
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <cleanup_stdio+0x3c>)
 800857e:	4299      	cmp	r1, r3
 8008580:	d004      	beq.n	800858c <cleanup_stdio+0x30>
 8008582:	4620      	mov	r0, r4
 8008584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008588:	f002 bdee 	b.w	800b168 <_fflush_r>
 800858c:	bd10      	pop	{r4, pc}
 800858e:	bf00      	nop
 8008590:	200025f4 	.word	0x200025f4
 8008594:	2000265c 	.word	0x2000265c
 8008598:	200026c4 	.word	0x200026c4

0800859c <global_stdio_init.part.0>:
 800859c:	b510      	push	{r4, lr}
 800859e:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <global_stdio_init.part.0+0x30>)
 80085a0:	4c0b      	ldr	r4, [pc, #44]	; (80085d0 <global_stdio_init.part.0+0x34>)
 80085a2:	4a0c      	ldr	r2, [pc, #48]	; (80085d4 <global_stdio_init.part.0+0x38>)
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	4620      	mov	r0, r4
 80085a8:	2200      	movs	r2, #0
 80085aa:	2104      	movs	r1, #4
 80085ac:	f7ff ffa6 	bl	80084fc <std>
 80085b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80085b4:	2201      	movs	r2, #1
 80085b6:	2109      	movs	r1, #9
 80085b8:	f7ff ffa0 	bl	80084fc <std>
 80085bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80085c0:	2202      	movs	r2, #2
 80085c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c6:	2112      	movs	r1, #18
 80085c8:	f7ff bf98 	b.w	80084fc <std>
 80085cc:	2000272c 	.word	0x2000272c
 80085d0:	200025f4 	.word	0x200025f4
 80085d4:	08008545 	.word	0x08008545

080085d8 <__sfp_lock_acquire>:
 80085d8:	4801      	ldr	r0, [pc, #4]	; (80085e0 <__sfp_lock_acquire+0x8>)
 80085da:	f000 b91f 	b.w	800881c <__retarget_lock_acquire_recursive>
 80085de:	bf00      	nop
 80085e0:	20002735 	.word	0x20002735

080085e4 <__sfp_lock_release>:
 80085e4:	4801      	ldr	r0, [pc, #4]	; (80085ec <__sfp_lock_release+0x8>)
 80085e6:	f000 b91a 	b.w	800881e <__retarget_lock_release_recursive>
 80085ea:	bf00      	nop
 80085ec:	20002735 	.word	0x20002735

080085f0 <__sinit>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4604      	mov	r4, r0
 80085f4:	f7ff fff0 	bl	80085d8 <__sfp_lock_acquire>
 80085f8:	6a23      	ldr	r3, [r4, #32]
 80085fa:	b11b      	cbz	r3, 8008604 <__sinit+0x14>
 80085fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008600:	f7ff bff0 	b.w	80085e4 <__sfp_lock_release>
 8008604:	4b04      	ldr	r3, [pc, #16]	; (8008618 <__sinit+0x28>)
 8008606:	6223      	str	r3, [r4, #32]
 8008608:	4b04      	ldr	r3, [pc, #16]	; (800861c <__sinit+0x2c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1f5      	bne.n	80085fc <__sinit+0xc>
 8008610:	f7ff ffc4 	bl	800859c <global_stdio_init.part.0>
 8008614:	e7f2      	b.n	80085fc <__sinit+0xc>
 8008616:	bf00      	nop
 8008618:	0800855d 	.word	0x0800855d
 800861c:	2000272c 	.word	0x2000272c

08008620 <_fwalk_sglue>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	4607      	mov	r7, r0
 8008626:	4688      	mov	r8, r1
 8008628:	4614      	mov	r4, r2
 800862a:	2600      	movs	r6, #0
 800862c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008630:	f1b9 0901 	subs.w	r9, r9, #1
 8008634:	d505      	bpl.n	8008642 <_fwalk_sglue+0x22>
 8008636:	6824      	ldr	r4, [r4, #0]
 8008638:	2c00      	cmp	r4, #0
 800863a:	d1f7      	bne.n	800862c <_fwalk_sglue+0xc>
 800863c:	4630      	mov	r0, r6
 800863e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008642:	89ab      	ldrh	r3, [r5, #12]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d907      	bls.n	8008658 <_fwalk_sglue+0x38>
 8008648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800864c:	3301      	adds	r3, #1
 800864e:	d003      	beq.n	8008658 <_fwalk_sglue+0x38>
 8008650:	4629      	mov	r1, r5
 8008652:	4638      	mov	r0, r7
 8008654:	47c0      	blx	r8
 8008656:	4306      	orrs	r6, r0
 8008658:	3568      	adds	r5, #104	; 0x68
 800865a:	e7e9      	b.n	8008630 <_fwalk_sglue+0x10>

0800865c <siprintf>:
 800865c:	b40e      	push	{r1, r2, r3}
 800865e:	b500      	push	{lr}
 8008660:	b09c      	sub	sp, #112	; 0x70
 8008662:	ab1d      	add	r3, sp, #116	; 0x74
 8008664:	9002      	str	r0, [sp, #8]
 8008666:	9006      	str	r0, [sp, #24]
 8008668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800866c:	4809      	ldr	r0, [pc, #36]	; (8008694 <siprintf+0x38>)
 800866e:	9107      	str	r1, [sp, #28]
 8008670:	9104      	str	r1, [sp, #16]
 8008672:	4909      	ldr	r1, [pc, #36]	; (8008698 <siprintf+0x3c>)
 8008674:	f853 2b04 	ldr.w	r2, [r3], #4
 8008678:	9105      	str	r1, [sp, #20]
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	a902      	add	r1, sp, #8
 8008680:	f002 fbee 	bl	800ae60 <_svfiprintf_r>
 8008684:	9b02      	ldr	r3, [sp, #8]
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	b01c      	add	sp, #112	; 0x70
 800868c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008690:	b003      	add	sp, #12
 8008692:	4770      	bx	lr
 8008694:	20000068 	.word	0x20000068
 8008698:	ffff0208 	.word	0xffff0208

0800869c <__sread>:
 800869c:	b510      	push	{r4, lr}
 800869e:	460c      	mov	r4, r1
 80086a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a4:	f000 f86c 	bl	8008780 <_read_r>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	bfab      	itete	ge
 80086ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086ae:	89a3      	ldrhlt	r3, [r4, #12]
 80086b0:	181b      	addge	r3, r3, r0
 80086b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086b6:	bfac      	ite	ge
 80086b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80086ba:	81a3      	strhlt	r3, [r4, #12]
 80086bc:	bd10      	pop	{r4, pc}

080086be <__swrite>:
 80086be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c2:	461f      	mov	r7, r3
 80086c4:	898b      	ldrh	r3, [r1, #12]
 80086c6:	05db      	lsls	r3, r3, #23
 80086c8:	4605      	mov	r5, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	4616      	mov	r6, r2
 80086ce:	d505      	bpl.n	80086dc <__swrite+0x1e>
 80086d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d4:	2302      	movs	r3, #2
 80086d6:	2200      	movs	r2, #0
 80086d8:	f000 f840 	bl	800875c <_lseek_r>
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	4632      	mov	r2, r6
 80086ea:	463b      	mov	r3, r7
 80086ec:	4628      	mov	r0, r5
 80086ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f2:	f000 b857 	b.w	80087a4 <_write_r>

080086f6 <__sseek>:
 80086f6:	b510      	push	{r4, lr}
 80086f8:	460c      	mov	r4, r1
 80086fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fe:	f000 f82d 	bl	800875c <_lseek_r>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	bf15      	itete	ne
 8008708:	6560      	strne	r0, [r4, #84]	; 0x54
 800870a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800870e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008712:	81a3      	strheq	r3, [r4, #12]
 8008714:	bf18      	it	ne
 8008716:	81a3      	strhne	r3, [r4, #12]
 8008718:	bd10      	pop	{r4, pc}

0800871a <__sclose>:
 800871a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871e:	f000 b80d 	b.w	800873c <_close_r>

08008722 <memset>:
 8008722:	4402      	add	r2, r0
 8008724:	4603      	mov	r3, r0
 8008726:	4293      	cmp	r3, r2
 8008728:	d100      	bne.n	800872c <memset+0xa>
 800872a:	4770      	bx	lr
 800872c:	f803 1b01 	strb.w	r1, [r3], #1
 8008730:	e7f9      	b.n	8008726 <memset+0x4>
	...

08008734 <_localeconv_r>:
 8008734:	4800      	ldr	r0, [pc, #0]	; (8008738 <_localeconv_r+0x4>)
 8008736:	4770      	bx	lr
 8008738:	2000015c 	.word	0x2000015c

0800873c <_close_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d06      	ldr	r5, [pc, #24]	; (8008758 <_close_r+0x1c>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	602b      	str	r3, [r5, #0]
 8008748:	f7f9 f887 	bl	800185a <_close>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_close_r+0x1a>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_close_r+0x1a>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20002730 	.word	0x20002730

0800875c <_lseek_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4d07      	ldr	r5, [pc, #28]	; (800877c <_lseek_r+0x20>)
 8008760:	4604      	mov	r4, r0
 8008762:	4608      	mov	r0, r1
 8008764:	4611      	mov	r1, r2
 8008766:	2200      	movs	r2, #0
 8008768:	602a      	str	r2, [r5, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	f7f9 f89c 	bl	80018a8 <_lseek>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_lseek_r+0x1e>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_lseek_r+0x1e>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	20002730 	.word	0x20002730

08008780 <_read_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d07      	ldr	r5, [pc, #28]	; (80087a0 <_read_r+0x20>)
 8008784:	4604      	mov	r4, r0
 8008786:	4608      	mov	r0, r1
 8008788:	4611      	mov	r1, r2
 800878a:	2200      	movs	r2, #0
 800878c:	602a      	str	r2, [r5, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f7f9 f82a 	bl	80017e8 <_read>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_read_r+0x1e>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_read_r+0x1e>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20002730 	.word	0x20002730

080087a4 <_write_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d07      	ldr	r5, [pc, #28]	; (80087c4 <_write_r+0x20>)
 80087a8:	4604      	mov	r4, r0
 80087aa:	4608      	mov	r0, r1
 80087ac:	4611      	mov	r1, r2
 80087ae:	2200      	movs	r2, #0
 80087b0:	602a      	str	r2, [r5, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f7f9 f835 	bl	8001822 <_write>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_write_r+0x1e>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_write_r+0x1e>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	20002730 	.word	0x20002730

080087c8 <__errno>:
 80087c8:	4b01      	ldr	r3, [pc, #4]	; (80087d0 <__errno+0x8>)
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20000068 	.word	0x20000068

080087d4 <__libc_init_array>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	4d0d      	ldr	r5, [pc, #52]	; (800880c <__libc_init_array+0x38>)
 80087d8:	4c0d      	ldr	r4, [pc, #52]	; (8008810 <__libc_init_array+0x3c>)
 80087da:	1b64      	subs	r4, r4, r5
 80087dc:	10a4      	asrs	r4, r4, #2
 80087de:	2600      	movs	r6, #0
 80087e0:	42a6      	cmp	r6, r4
 80087e2:	d109      	bne.n	80087f8 <__libc_init_array+0x24>
 80087e4:	4d0b      	ldr	r5, [pc, #44]	; (8008814 <__libc_init_array+0x40>)
 80087e6:	4c0c      	ldr	r4, [pc, #48]	; (8008818 <__libc_init_array+0x44>)
 80087e8:	f003 fbd6 	bl	800bf98 <_init>
 80087ec:	1b64      	subs	r4, r4, r5
 80087ee:	10a4      	asrs	r4, r4, #2
 80087f0:	2600      	movs	r6, #0
 80087f2:	42a6      	cmp	r6, r4
 80087f4:	d105      	bne.n	8008802 <__libc_init_array+0x2e>
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fc:	4798      	blx	r3
 80087fe:	3601      	adds	r6, #1
 8008800:	e7ee      	b.n	80087e0 <__libc_init_array+0xc>
 8008802:	f855 3b04 	ldr.w	r3, [r5], #4
 8008806:	4798      	blx	r3
 8008808:	3601      	adds	r6, #1
 800880a:	e7f2      	b.n	80087f2 <__libc_init_array+0x1e>
 800880c:	0800c5f0 	.word	0x0800c5f0
 8008810:	0800c5f0 	.word	0x0800c5f0
 8008814:	0800c5f0 	.word	0x0800c5f0
 8008818:	0800c5f4 	.word	0x0800c5f4

0800881c <__retarget_lock_acquire_recursive>:
 800881c:	4770      	bx	lr

0800881e <__retarget_lock_release_recursive>:
 800881e:	4770      	bx	lr

08008820 <nanf>:
 8008820:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008828 <nanf+0x8>
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	7fc00000 	.word	0x7fc00000

0800882c <quorem>:
 800882c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	6903      	ldr	r3, [r0, #16]
 8008832:	690c      	ldr	r4, [r1, #16]
 8008834:	42a3      	cmp	r3, r4
 8008836:	4607      	mov	r7, r0
 8008838:	db7e      	blt.n	8008938 <quorem+0x10c>
 800883a:	3c01      	subs	r4, #1
 800883c:	f101 0814 	add.w	r8, r1, #20
 8008840:	f100 0514 	add.w	r5, r0, #20
 8008844:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800884e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008852:	3301      	adds	r3, #1
 8008854:	429a      	cmp	r2, r3
 8008856:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800885a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800885e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008862:	d331      	bcc.n	80088c8 <quorem+0x9c>
 8008864:	f04f 0e00 	mov.w	lr, #0
 8008868:	4640      	mov	r0, r8
 800886a:	46ac      	mov	ip, r5
 800886c:	46f2      	mov	sl, lr
 800886e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008872:	b293      	uxth	r3, r2
 8008874:	fb06 e303 	mla	r3, r6, r3, lr
 8008878:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800887c:	0c1a      	lsrs	r2, r3, #16
 800887e:	b29b      	uxth	r3, r3
 8008880:	ebaa 0303 	sub.w	r3, sl, r3
 8008884:	f8dc a000 	ldr.w	sl, [ip]
 8008888:	fa13 f38a 	uxtah	r3, r3, sl
 800888c:	fb06 220e 	mla	r2, r6, lr, r2
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	9b00      	ldr	r3, [sp, #0]
 8008894:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008898:	b292      	uxth	r2, r2
 800889a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800889e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80088a6:	4581      	cmp	r9, r0
 80088a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ac:	f84c 3b04 	str.w	r3, [ip], #4
 80088b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088b4:	d2db      	bcs.n	800886e <quorem+0x42>
 80088b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80088ba:	b92b      	cbnz	r3, 80088c8 <quorem+0x9c>
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	3b04      	subs	r3, #4
 80088c0:	429d      	cmp	r5, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	d32c      	bcc.n	8008920 <quorem+0xf4>
 80088c6:	613c      	str	r4, [r7, #16]
 80088c8:	4638      	mov	r0, r7
 80088ca:	f001 f9f1 	bl	8009cb0 <__mcmp>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	db22      	blt.n	8008918 <quorem+0xec>
 80088d2:	3601      	adds	r6, #1
 80088d4:	4629      	mov	r1, r5
 80088d6:	2000      	movs	r0, #0
 80088d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80088dc:	f8d1 c000 	ldr.w	ip, [r1]
 80088e0:	b293      	uxth	r3, r2
 80088e2:	1ac3      	subs	r3, r0, r3
 80088e4:	0c12      	lsrs	r2, r2, #16
 80088e6:	fa13 f38c 	uxtah	r3, r3, ip
 80088ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80088ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088f8:	45c1      	cmp	r9, r8
 80088fa:	f841 3b04 	str.w	r3, [r1], #4
 80088fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008902:	d2e9      	bcs.n	80088d8 <quorem+0xac>
 8008904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008908:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800890c:	b922      	cbnz	r2, 8008918 <quorem+0xec>
 800890e:	3b04      	subs	r3, #4
 8008910:	429d      	cmp	r5, r3
 8008912:	461a      	mov	r2, r3
 8008914:	d30a      	bcc.n	800892c <quorem+0x100>
 8008916:	613c      	str	r4, [r7, #16]
 8008918:	4630      	mov	r0, r6
 800891a:	b003      	add	sp, #12
 800891c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	3b04      	subs	r3, #4
 8008924:	2a00      	cmp	r2, #0
 8008926:	d1ce      	bne.n	80088c6 <quorem+0x9a>
 8008928:	3c01      	subs	r4, #1
 800892a:	e7c9      	b.n	80088c0 <quorem+0x94>
 800892c:	6812      	ldr	r2, [r2, #0]
 800892e:	3b04      	subs	r3, #4
 8008930:	2a00      	cmp	r2, #0
 8008932:	d1f0      	bne.n	8008916 <quorem+0xea>
 8008934:	3c01      	subs	r4, #1
 8008936:	e7eb      	b.n	8008910 <quorem+0xe4>
 8008938:	2000      	movs	r0, #0
 800893a:	e7ee      	b.n	800891a <quorem+0xee>
 800893c:	0000      	movs	r0, r0
	...

08008940 <_dtoa_r>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	ed2d 8b04 	vpush	{d8-d9}
 8008948:	69c5      	ldr	r5, [r0, #28]
 800894a:	b093      	sub	sp, #76	; 0x4c
 800894c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008950:	ec57 6b10 	vmov	r6, r7, d0
 8008954:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008958:	9107      	str	r1, [sp, #28]
 800895a:	4604      	mov	r4, r0
 800895c:	920a      	str	r2, [sp, #40]	; 0x28
 800895e:	930d      	str	r3, [sp, #52]	; 0x34
 8008960:	b975      	cbnz	r5, 8008980 <_dtoa_r+0x40>
 8008962:	2010      	movs	r0, #16
 8008964:	f000 fe2a 	bl	80095bc <malloc>
 8008968:	4602      	mov	r2, r0
 800896a:	61e0      	str	r0, [r4, #28]
 800896c:	b920      	cbnz	r0, 8008978 <_dtoa_r+0x38>
 800896e:	4bae      	ldr	r3, [pc, #696]	; (8008c28 <_dtoa_r+0x2e8>)
 8008970:	21ef      	movs	r1, #239	; 0xef
 8008972:	48ae      	ldr	r0, [pc, #696]	; (8008c2c <_dtoa_r+0x2ec>)
 8008974:	f002 fc74 	bl	800b260 <__assert_func>
 8008978:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800897c:	6005      	str	r5, [r0, #0]
 800897e:	60c5      	str	r5, [r0, #12]
 8008980:	69e3      	ldr	r3, [r4, #28]
 8008982:	6819      	ldr	r1, [r3, #0]
 8008984:	b151      	cbz	r1, 800899c <_dtoa_r+0x5c>
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	604a      	str	r2, [r1, #4]
 800898a:	2301      	movs	r3, #1
 800898c:	4093      	lsls	r3, r2
 800898e:	608b      	str	r3, [r1, #8]
 8008990:	4620      	mov	r0, r4
 8008992:	f000 ff07 	bl	80097a4 <_Bfree>
 8008996:	69e3      	ldr	r3, [r4, #28]
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	1e3b      	subs	r3, r7, #0
 800899e:	bfbb      	ittet	lt
 80089a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089a4:	9303      	strlt	r3, [sp, #12]
 80089a6:	2300      	movge	r3, #0
 80089a8:	2201      	movlt	r2, #1
 80089aa:	bfac      	ite	ge
 80089ac:	f8c8 3000 	strge.w	r3, [r8]
 80089b0:	f8c8 2000 	strlt.w	r2, [r8]
 80089b4:	4b9e      	ldr	r3, [pc, #632]	; (8008c30 <_dtoa_r+0x2f0>)
 80089b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80089ba:	ea33 0308 	bics.w	r3, r3, r8
 80089be:	d11b      	bne.n	80089f8 <_dtoa_r+0xb8>
 80089c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80089cc:	4333      	orrs	r3, r6
 80089ce:	f000 8593 	beq.w	80094f8 <_dtoa_r+0xbb8>
 80089d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089d4:	b963      	cbnz	r3, 80089f0 <_dtoa_r+0xb0>
 80089d6:	4b97      	ldr	r3, [pc, #604]	; (8008c34 <_dtoa_r+0x2f4>)
 80089d8:	e027      	b.n	8008a2a <_dtoa_r+0xea>
 80089da:	4b97      	ldr	r3, [pc, #604]	; (8008c38 <_dtoa_r+0x2f8>)
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	3308      	adds	r3, #8
 80089e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	9800      	ldr	r0, [sp, #0]
 80089e6:	b013      	add	sp, #76	; 0x4c
 80089e8:	ecbd 8b04 	vpop	{d8-d9}
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	4b90      	ldr	r3, [pc, #576]	; (8008c34 <_dtoa_r+0x2f4>)
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	3303      	adds	r3, #3
 80089f6:	e7f3      	b.n	80089e0 <_dtoa_r+0xa0>
 80089f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089fc:	2200      	movs	r2, #0
 80089fe:	ec51 0b17 	vmov	r0, r1, d7
 8008a02:	eeb0 8a47 	vmov.f32	s16, s14
 8008a06:	eef0 8a67 	vmov.f32	s17, s15
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f7f8 f864 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a10:	4681      	mov	r9, r0
 8008a12:	b160      	cbz	r0, 8008a2e <_dtoa_r+0xee>
 8008a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a16:	2301      	movs	r3, #1
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8568 	beq.w	80094f2 <_dtoa_r+0xbb2>
 8008a22:	4b86      	ldr	r3, [pc, #536]	; (8008c3c <_dtoa_r+0x2fc>)
 8008a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	e7da      	b.n	80089e4 <_dtoa_r+0xa4>
 8008a2e:	aa10      	add	r2, sp, #64	; 0x40
 8008a30:	a911      	add	r1, sp, #68	; 0x44
 8008a32:	4620      	mov	r0, r4
 8008a34:	eeb0 0a48 	vmov.f32	s0, s16
 8008a38:	eef0 0a68 	vmov.f32	s1, s17
 8008a3c:	f001 fa4e 	bl	8009edc <__d2b>
 8008a40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a44:	4682      	mov	sl, r0
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	d07f      	beq.n	8008b4a <_dtoa_r+0x20a>
 8008a4a:	ee18 3a90 	vmov	r3, s17
 8008a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008a56:	ec51 0b18 	vmov	r0, r1, d8
 8008a5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a66:	4619      	mov	r1, r3
 8008a68:	2200      	movs	r2, #0
 8008a6a:	4b75      	ldr	r3, [pc, #468]	; (8008c40 <_dtoa_r+0x300>)
 8008a6c:	f7f7 fc14 	bl	8000298 <__aeabi_dsub>
 8008a70:	a367      	add	r3, pc, #412	; (adr r3, 8008c10 <_dtoa_r+0x2d0>)
 8008a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a76:	f7f7 fdc7 	bl	8000608 <__aeabi_dmul>
 8008a7a:	a367      	add	r3, pc, #412	; (adr r3, 8008c18 <_dtoa_r+0x2d8>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fc0c 	bl	800029c <__adddf3>
 8008a84:	4606      	mov	r6, r0
 8008a86:	4628      	mov	r0, r5
 8008a88:	460f      	mov	r7, r1
 8008a8a:	f7f7 fd53 	bl	8000534 <__aeabi_i2d>
 8008a8e:	a364      	add	r3, pc, #400	; (adr r3, 8008c20 <_dtoa_r+0x2e0>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fdb8 	bl	8000608 <__aeabi_dmul>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	f7f7 fbfc 	bl	800029c <__adddf3>
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	f7f8 f85e 	bl	8000b68 <__aeabi_d2iz>
 8008aac:	2200      	movs	r2, #0
 8008aae:	4683      	mov	fp, r0
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	f7f8 f819 	bl	8000aec <__aeabi_dcmplt>
 8008aba:	b148      	cbz	r0, 8008ad0 <_dtoa_r+0x190>
 8008abc:	4658      	mov	r0, fp
 8008abe:	f7f7 fd39 	bl	8000534 <__aeabi_i2d>
 8008ac2:	4632      	mov	r2, r6
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	f7f8 f807 	bl	8000ad8 <__aeabi_dcmpeq>
 8008aca:	b908      	cbnz	r0, 8008ad0 <_dtoa_r+0x190>
 8008acc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ad0:	f1bb 0f16 	cmp.w	fp, #22
 8008ad4:	d857      	bhi.n	8008b86 <_dtoa_r+0x246>
 8008ad6:	4b5b      	ldr	r3, [pc, #364]	; (8008c44 <_dtoa_r+0x304>)
 8008ad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	ec51 0b18 	vmov	r0, r1, d8
 8008ae4:	f7f8 f802 	bl	8000aec <__aeabi_dcmplt>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d04e      	beq.n	8008b8a <_dtoa_r+0x24a>
 8008aec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008af0:	2300      	movs	r3, #0
 8008af2:	930c      	str	r3, [sp, #48]	; 0x30
 8008af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008af6:	1b5b      	subs	r3, r3, r5
 8008af8:	1e5a      	subs	r2, r3, #1
 8008afa:	bf45      	ittet	mi
 8008afc:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b00:	9305      	strmi	r3, [sp, #20]
 8008b02:	2300      	movpl	r3, #0
 8008b04:	2300      	movmi	r3, #0
 8008b06:	9206      	str	r2, [sp, #24]
 8008b08:	bf54      	ite	pl
 8008b0a:	9305      	strpl	r3, [sp, #20]
 8008b0c:	9306      	strmi	r3, [sp, #24]
 8008b0e:	f1bb 0f00 	cmp.w	fp, #0
 8008b12:	db3c      	blt.n	8008b8e <_dtoa_r+0x24e>
 8008b14:	9b06      	ldr	r3, [sp, #24]
 8008b16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008b1a:	445b      	add	r3, fp
 8008b1c:	9306      	str	r3, [sp, #24]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	9b07      	ldr	r3, [sp, #28]
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d868      	bhi.n	8008bfa <_dtoa_r+0x2ba>
 8008b28:	2b05      	cmp	r3, #5
 8008b2a:	bfc4      	itt	gt
 8008b2c:	3b04      	subgt	r3, #4
 8008b2e:	9307      	strgt	r3, [sp, #28]
 8008b30:	9b07      	ldr	r3, [sp, #28]
 8008b32:	f1a3 0302 	sub.w	r3, r3, #2
 8008b36:	bfcc      	ite	gt
 8008b38:	2500      	movgt	r5, #0
 8008b3a:	2501      	movle	r5, #1
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	f200 8085 	bhi.w	8008c4c <_dtoa_r+0x30c>
 8008b42:	e8df f003 	tbb	[pc, r3]
 8008b46:	3b2e      	.short	0x3b2e
 8008b48:	5839      	.short	0x5839
 8008b4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b4e:	441d      	add	r5, r3
 8008b50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	bfc1      	itttt	gt
 8008b58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008b64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008b68:	bfd6      	itet	le
 8008b6a:	f1c3 0320 	rsble	r3, r3, #32
 8008b6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b72:	fa06 f003 	lslle.w	r0, r6, r3
 8008b76:	f7f7 fccd 	bl	8000514 <__aeabi_ui2d>
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008b80:	3d01      	subs	r5, #1
 8008b82:	920e      	str	r2, [sp, #56]	; 0x38
 8008b84:	e76f      	b.n	8008a66 <_dtoa_r+0x126>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e7b3      	b.n	8008af2 <_dtoa_r+0x1b2>
 8008b8a:	900c      	str	r0, [sp, #48]	; 0x30
 8008b8c:	e7b2      	b.n	8008af4 <_dtoa_r+0x1b4>
 8008b8e:	9b05      	ldr	r3, [sp, #20]
 8008b90:	eba3 030b 	sub.w	r3, r3, fp
 8008b94:	9305      	str	r3, [sp, #20]
 8008b96:	f1cb 0300 	rsb	r3, fp, #0
 8008b9a:	9308      	str	r3, [sp, #32]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba0:	e7bf      	b.n	8008b22 <_dtoa_r+0x1e2>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dc52      	bgt.n	8008c52 <_dtoa_r+0x312>
 8008bac:	2301      	movs	r3, #1
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8008bb6:	e00b      	b.n	8008bd0 <_dtoa_r+0x290>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e7f3      	b.n	8008ba4 <_dtoa_r+0x264>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc2:	445b      	add	r3, fp
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	9304      	str	r3, [sp, #16]
 8008bcc:	bfb8      	it	lt
 8008bce:	2301      	movlt	r3, #1
 8008bd0:	69e0      	ldr	r0, [r4, #28]
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	f102 0614 	add.w	r6, r2, #20
 8008bda:	429e      	cmp	r6, r3
 8008bdc:	d93d      	bls.n	8008c5a <_dtoa_r+0x31a>
 8008bde:	6041      	str	r1, [r0, #4]
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 fd9f 	bl	8009724 <_Balloc>
 8008be6:	9000      	str	r0, [sp, #0]
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d139      	bne.n	8008c60 <_dtoa_r+0x320>
 8008bec:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <_dtoa_r+0x308>)
 8008bee:	4602      	mov	r2, r0
 8008bf0:	f240 11af 	movw	r1, #431	; 0x1af
 8008bf4:	e6bd      	b.n	8008972 <_dtoa_r+0x32>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e7e1      	b.n	8008bbe <_dtoa_r+0x27e>
 8008bfa:	2501      	movs	r5, #1
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9307      	str	r3, [sp, #28]
 8008c00:	9509      	str	r5, [sp, #36]	; 0x24
 8008c02:	f04f 33ff 	mov.w	r3, #4294967295
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2312      	movs	r3, #18
 8008c0e:	e7d1      	b.n	8008bb4 <_dtoa_r+0x274>
 8008c10:	636f4361 	.word	0x636f4361
 8008c14:	3fd287a7 	.word	0x3fd287a7
 8008c18:	8b60c8b3 	.word	0x8b60c8b3
 8008c1c:	3fc68a28 	.word	0x3fc68a28
 8008c20:	509f79fb 	.word	0x509f79fb
 8008c24:	3fd34413 	.word	0x3fd34413
 8008c28:	0800c202 	.word	0x0800c202
 8008c2c:	0800c219 	.word	0x0800c219
 8008c30:	7ff00000 	.word	0x7ff00000
 8008c34:	0800c1fe 	.word	0x0800c1fe
 8008c38:	0800c1f5 	.word	0x0800c1f5
 8008c3c:	0800c1cd 	.word	0x0800c1cd
 8008c40:	3ff80000 	.word	0x3ff80000
 8008c44:	0800c308 	.word	0x0800c308
 8008c48:	0800c271 	.word	0x0800c271
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c50:	e7d7      	b.n	8008c02 <_dtoa_r+0x2c2>
 8008c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	9304      	str	r3, [sp, #16]
 8008c58:	e7ba      	b.n	8008bd0 <_dtoa_r+0x290>
 8008c5a:	3101      	adds	r1, #1
 8008c5c:	0052      	lsls	r2, r2, #1
 8008c5e:	e7ba      	b.n	8008bd6 <_dtoa_r+0x296>
 8008c60:	69e3      	ldr	r3, [r4, #28]
 8008c62:	9a00      	ldr	r2, [sp, #0]
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	2b0e      	cmp	r3, #14
 8008c6a:	f200 80a8 	bhi.w	8008dbe <_dtoa_r+0x47e>
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	f000 80a5 	beq.w	8008dbe <_dtoa_r+0x47e>
 8008c74:	f1bb 0f00 	cmp.w	fp, #0
 8008c78:	dd38      	ble.n	8008cec <_dtoa_r+0x3ac>
 8008c7a:	4bc0      	ldr	r3, [pc, #768]	; (8008f7c <_dtoa_r+0x63c>)
 8008c7c:	f00b 020f 	and.w	r2, fp, #15
 8008c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008c88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008c90:	d019      	beq.n	8008cc6 <_dtoa_r+0x386>
 8008c92:	4bbb      	ldr	r3, [pc, #748]	; (8008f80 <_dtoa_r+0x640>)
 8008c94:	ec51 0b18 	vmov	r0, r1, d8
 8008c98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c9c:	f7f7 fdde 	bl	800085c <__aeabi_ddiv>
 8008ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ca4:	f008 080f 	and.w	r8, r8, #15
 8008ca8:	2503      	movs	r5, #3
 8008caa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008f80 <_dtoa_r+0x640>
 8008cae:	f1b8 0f00 	cmp.w	r8, #0
 8008cb2:	d10a      	bne.n	8008cca <_dtoa_r+0x38a>
 8008cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb8:	4632      	mov	r2, r6
 8008cba:	463b      	mov	r3, r7
 8008cbc:	f7f7 fdce 	bl	800085c <__aeabi_ddiv>
 8008cc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc4:	e02b      	b.n	8008d1e <_dtoa_r+0x3de>
 8008cc6:	2502      	movs	r5, #2
 8008cc8:	e7ef      	b.n	8008caa <_dtoa_r+0x36a>
 8008cca:	f018 0f01 	tst.w	r8, #1
 8008cce:	d008      	beq.n	8008ce2 <_dtoa_r+0x3a2>
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008cd8:	f7f7 fc96 	bl	8000608 <__aeabi_dmul>
 8008cdc:	3501      	adds	r5, #1
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ce6:	f109 0908 	add.w	r9, r9, #8
 8008cea:	e7e0      	b.n	8008cae <_dtoa_r+0x36e>
 8008cec:	f000 809f 	beq.w	8008e2e <_dtoa_r+0x4ee>
 8008cf0:	f1cb 0600 	rsb	r6, fp, #0
 8008cf4:	4ba1      	ldr	r3, [pc, #644]	; (8008f7c <_dtoa_r+0x63c>)
 8008cf6:	4fa2      	ldr	r7, [pc, #648]	; (8008f80 <_dtoa_r+0x640>)
 8008cf8:	f006 020f 	and.w	r2, r6, #15
 8008cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	ec51 0b18 	vmov	r0, r1, d8
 8008d08:	f7f7 fc7e 	bl	8000608 <__aeabi_dmul>
 8008d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d10:	1136      	asrs	r6, r6, #4
 8008d12:	2300      	movs	r3, #0
 8008d14:	2502      	movs	r5, #2
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	d17e      	bne.n	8008e18 <_dtoa_r+0x4d8>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1d0      	bne.n	8008cc0 <_dtoa_r+0x380>
 8008d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8084 	beq.w	8008e32 <_dtoa_r+0x4f2>
 8008d2a:	4b96      	ldr	r3, [pc, #600]	; (8008f84 <_dtoa_r+0x644>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 fedb 	bl	8000aec <__aeabi_dcmplt>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d07b      	beq.n	8008e32 <_dtoa_r+0x4f2>
 8008d3a:	9b04      	ldr	r3, [sp, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d078      	beq.n	8008e32 <_dtoa_r+0x4f2>
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dd39      	ble.n	8008dba <_dtoa_r+0x47a>
 8008d46:	4b90      	ldr	r3, [pc, #576]	; (8008f88 <_dtoa_r+0x648>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fc5b 	bl	8000608 <__aeabi_dmul>
 8008d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d56:	9e01      	ldr	r6, [sp, #4]
 8008d58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008d5c:	3501      	adds	r5, #1
 8008d5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d62:	4628      	mov	r0, r5
 8008d64:	f7f7 fbe6 	bl	8000534 <__aeabi_i2d>
 8008d68:	4642      	mov	r2, r8
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	f7f7 fc4c 	bl	8000608 <__aeabi_dmul>
 8008d70:	4b86      	ldr	r3, [pc, #536]	; (8008f8c <_dtoa_r+0x64c>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	f7f7 fa92 	bl	800029c <__adddf3>
 8008d78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	d158      	bne.n	8008e38 <_dtoa_r+0x4f8>
 8008d86:	4b82      	ldr	r3, [pc, #520]	; (8008f90 <_dtoa_r+0x650>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f7f7 fa83 	bl	8000298 <__aeabi_dsub>
 8008d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d96:	4680      	mov	r8, r0
 8008d98:	4689      	mov	r9, r1
 8008d9a:	f7f7 fec5 	bl	8000b28 <__aeabi_dcmpgt>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	f040 8296 	bne.w	80092d0 <_dtoa_r+0x990>
 8008da4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008da8:	4640      	mov	r0, r8
 8008daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dae:	4649      	mov	r1, r9
 8008db0:	f7f7 fe9c 	bl	8000aec <__aeabi_dcmplt>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	f040 8289 	bne.w	80092cc <_dtoa_r+0x98c>
 8008dba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f2c0 814e 	blt.w	8009062 <_dtoa_r+0x722>
 8008dc6:	f1bb 0f0e 	cmp.w	fp, #14
 8008dca:	f300 814a 	bgt.w	8009062 <_dtoa_r+0x722>
 8008dce:	4b6b      	ldr	r3, [pc, #428]	; (8008f7c <_dtoa_r+0x63c>)
 8008dd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f280 80dc 	bge.w	8008f98 <_dtoa_r+0x658>
 8008de0:	9b04      	ldr	r3, [sp, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f300 80d8 	bgt.w	8008f98 <_dtoa_r+0x658>
 8008de8:	f040 826f 	bne.w	80092ca <_dtoa_r+0x98a>
 8008dec:	4b68      	ldr	r3, [pc, #416]	; (8008f90 <_dtoa_r+0x650>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	4640      	mov	r0, r8
 8008df2:	4649      	mov	r1, r9
 8008df4:	f7f7 fc08 	bl	8000608 <__aeabi_dmul>
 8008df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dfc:	f7f7 fe8a 	bl	8000b14 <__aeabi_dcmpge>
 8008e00:	9e04      	ldr	r6, [sp, #16]
 8008e02:	4637      	mov	r7, r6
 8008e04:	2800      	cmp	r0, #0
 8008e06:	f040 8245 	bne.w	8009294 <_dtoa_r+0x954>
 8008e0a:	9d00      	ldr	r5, [sp, #0]
 8008e0c:	2331      	movs	r3, #49	; 0x31
 8008e0e:	f805 3b01 	strb.w	r3, [r5], #1
 8008e12:	f10b 0b01 	add.w	fp, fp, #1
 8008e16:	e241      	b.n	800929c <_dtoa_r+0x95c>
 8008e18:	07f2      	lsls	r2, r6, #31
 8008e1a:	d505      	bpl.n	8008e28 <_dtoa_r+0x4e8>
 8008e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e20:	f7f7 fbf2 	bl	8000608 <__aeabi_dmul>
 8008e24:	3501      	adds	r5, #1
 8008e26:	2301      	movs	r3, #1
 8008e28:	1076      	asrs	r6, r6, #1
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	e773      	b.n	8008d16 <_dtoa_r+0x3d6>
 8008e2e:	2502      	movs	r5, #2
 8008e30:	e775      	b.n	8008d1e <_dtoa_r+0x3de>
 8008e32:	9e04      	ldr	r6, [sp, #16]
 8008e34:	465f      	mov	r7, fp
 8008e36:	e792      	b.n	8008d5e <_dtoa_r+0x41e>
 8008e38:	9900      	ldr	r1, [sp, #0]
 8008e3a:	4b50      	ldr	r3, [pc, #320]	; (8008f7c <_dtoa_r+0x63c>)
 8008e3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e40:	4431      	add	r1, r6
 8008e42:	9102      	str	r1, [sp, #8]
 8008e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e46:	eeb0 9a47 	vmov.f32	s18, s14
 8008e4a:	eef0 9a67 	vmov.f32	s19, s15
 8008e4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e56:	2900      	cmp	r1, #0
 8008e58:	d044      	beq.n	8008ee4 <_dtoa_r+0x5a4>
 8008e5a:	494e      	ldr	r1, [pc, #312]	; (8008f94 <_dtoa_r+0x654>)
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f7f7 fcfd 	bl	800085c <__aeabi_ddiv>
 8008e62:	ec53 2b19 	vmov	r2, r3, d9
 8008e66:	f7f7 fa17 	bl	8000298 <__aeabi_dsub>
 8008e6a:	9d00      	ldr	r5, [sp, #0]
 8008e6c:	ec41 0b19 	vmov	d9, r0, r1
 8008e70:	4649      	mov	r1, r9
 8008e72:	4640      	mov	r0, r8
 8008e74:	f7f7 fe78 	bl	8000b68 <__aeabi_d2iz>
 8008e78:	4606      	mov	r6, r0
 8008e7a:	f7f7 fb5b 	bl	8000534 <__aeabi_i2d>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4640      	mov	r0, r8
 8008e84:	4649      	mov	r1, r9
 8008e86:	f7f7 fa07 	bl	8000298 <__aeabi_dsub>
 8008e8a:	3630      	adds	r6, #48	; 0x30
 8008e8c:	f805 6b01 	strb.w	r6, [r5], #1
 8008e90:	ec53 2b19 	vmov	r2, r3, d9
 8008e94:	4680      	mov	r8, r0
 8008e96:	4689      	mov	r9, r1
 8008e98:	f7f7 fe28 	bl	8000aec <__aeabi_dcmplt>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d164      	bne.n	8008f6a <_dtoa_r+0x62a>
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	4937      	ldr	r1, [pc, #220]	; (8008f84 <_dtoa_r+0x644>)
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f7f7 f9f6 	bl	8000298 <__aeabi_dsub>
 8008eac:	ec53 2b19 	vmov	r2, r3, d9
 8008eb0:	f7f7 fe1c 	bl	8000aec <__aeabi_dcmplt>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f040 80b6 	bne.w	8009026 <_dtoa_r+0x6e6>
 8008eba:	9b02      	ldr	r3, [sp, #8]
 8008ebc:	429d      	cmp	r5, r3
 8008ebe:	f43f af7c 	beq.w	8008dba <_dtoa_r+0x47a>
 8008ec2:	4b31      	ldr	r3, [pc, #196]	; (8008f88 <_dtoa_r+0x648>)
 8008ec4:	ec51 0b19 	vmov	r0, r1, d9
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f7f7 fb9d 	bl	8000608 <__aeabi_dmul>
 8008ece:	4b2e      	ldr	r3, [pc, #184]	; (8008f88 <_dtoa_r+0x648>)
 8008ed0:	ec41 0b19 	vmov	d9, r0, r1
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 fb95 	bl	8000608 <__aeabi_dmul>
 8008ede:	4680      	mov	r8, r0
 8008ee0:	4689      	mov	r9, r1
 8008ee2:	e7c5      	b.n	8008e70 <_dtoa_r+0x530>
 8008ee4:	ec51 0b17 	vmov	r0, r1, d7
 8008ee8:	f7f7 fb8e 	bl	8000608 <__aeabi_dmul>
 8008eec:	9b02      	ldr	r3, [sp, #8]
 8008eee:	9d00      	ldr	r5, [sp, #0]
 8008ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ef2:	ec41 0b19 	vmov	d9, r0, r1
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4640      	mov	r0, r8
 8008efa:	f7f7 fe35 	bl	8000b68 <__aeabi_d2iz>
 8008efe:	4606      	mov	r6, r0
 8008f00:	f7f7 fb18 	bl	8000534 <__aeabi_i2d>
 8008f04:	3630      	adds	r6, #48	; 0x30
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	f7f7 f9c3 	bl	8000298 <__aeabi_dsub>
 8008f12:	f805 6b01 	strb.w	r6, [r5], #1
 8008f16:	9b02      	ldr	r3, [sp, #8]
 8008f18:	429d      	cmp	r5, r3
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	4689      	mov	r9, r1
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	d124      	bne.n	8008f6e <_dtoa_r+0x62e>
 8008f24:	4b1b      	ldr	r3, [pc, #108]	; (8008f94 <_dtoa_r+0x654>)
 8008f26:	ec51 0b19 	vmov	r0, r1, d9
 8008f2a:	f7f7 f9b7 	bl	800029c <__adddf3>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f7f7 fdf7 	bl	8000b28 <__aeabi_dcmpgt>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d173      	bne.n	8009026 <_dtoa_r+0x6e6>
 8008f3e:	ec53 2b19 	vmov	r2, r3, d9
 8008f42:	4914      	ldr	r1, [pc, #80]	; (8008f94 <_dtoa_r+0x654>)
 8008f44:	2000      	movs	r0, #0
 8008f46:	f7f7 f9a7 	bl	8000298 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 fdcb 	bl	8000aec <__aeabi_dcmplt>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f43f af2f 	beq.w	8008dba <_dtoa_r+0x47a>
 8008f5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f5e:	1e6b      	subs	r3, r5, #1
 8008f60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f66:	2b30      	cmp	r3, #48	; 0x30
 8008f68:	d0f8      	beq.n	8008f5c <_dtoa_r+0x61c>
 8008f6a:	46bb      	mov	fp, r7
 8008f6c:	e04a      	b.n	8009004 <_dtoa_r+0x6c4>
 8008f6e:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <_dtoa_r+0x648>)
 8008f70:	f7f7 fb4a 	bl	8000608 <__aeabi_dmul>
 8008f74:	4680      	mov	r8, r0
 8008f76:	4689      	mov	r9, r1
 8008f78:	e7bd      	b.n	8008ef6 <_dtoa_r+0x5b6>
 8008f7a:	bf00      	nop
 8008f7c:	0800c308 	.word	0x0800c308
 8008f80:	0800c2e0 	.word	0x0800c2e0
 8008f84:	3ff00000 	.word	0x3ff00000
 8008f88:	40240000 	.word	0x40240000
 8008f8c:	401c0000 	.word	0x401c0000
 8008f90:	40140000 	.word	0x40140000
 8008f94:	3fe00000 	.word	0x3fe00000
 8008f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f9c:	9d00      	ldr	r5, [sp, #0]
 8008f9e:	4642      	mov	r2, r8
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	f7f7 fc59 	bl	800085c <__aeabi_ddiv>
 8008faa:	f7f7 fddd 	bl	8000b68 <__aeabi_d2iz>
 8008fae:	9001      	str	r0, [sp, #4]
 8008fb0:	f7f7 fac0 	bl	8000534 <__aeabi_i2d>
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	f7f7 fb26 	bl	8000608 <__aeabi_dmul>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 f968 	bl	8000298 <__aeabi_dsub>
 8008fc8:	9e01      	ldr	r6, [sp, #4]
 8008fca:	9f04      	ldr	r7, [sp, #16]
 8008fcc:	3630      	adds	r6, #48	; 0x30
 8008fce:	f805 6b01 	strb.w	r6, [r5], #1
 8008fd2:	9e00      	ldr	r6, [sp, #0]
 8008fd4:	1bae      	subs	r6, r5, r6
 8008fd6:	42b7      	cmp	r7, r6
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	d134      	bne.n	8009048 <_dtoa_r+0x708>
 8008fde:	f7f7 f95d 	bl	800029c <__adddf3>
 8008fe2:	4642      	mov	r2, r8
 8008fe4:	464b      	mov	r3, r9
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460f      	mov	r7, r1
 8008fea:	f7f7 fd9d 	bl	8000b28 <__aeabi_dcmpgt>
 8008fee:	b9c8      	cbnz	r0, 8009024 <_dtoa_r+0x6e4>
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	464b      	mov	r3, r9
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ffc:	b110      	cbz	r0, 8009004 <_dtoa_r+0x6c4>
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	07db      	lsls	r3, r3, #31
 8009002:	d40f      	bmi.n	8009024 <_dtoa_r+0x6e4>
 8009004:	4651      	mov	r1, sl
 8009006:	4620      	mov	r0, r4
 8009008:	f000 fbcc 	bl	80097a4 <_Bfree>
 800900c:	2300      	movs	r3, #0
 800900e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009010:	702b      	strb	r3, [r5, #0]
 8009012:	f10b 0301 	add.w	r3, fp, #1
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800901a:	2b00      	cmp	r3, #0
 800901c:	f43f ace2 	beq.w	80089e4 <_dtoa_r+0xa4>
 8009020:	601d      	str	r5, [r3, #0]
 8009022:	e4df      	b.n	80089e4 <_dtoa_r+0xa4>
 8009024:	465f      	mov	r7, fp
 8009026:	462b      	mov	r3, r5
 8009028:	461d      	mov	r5, r3
 800902a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800902e:	2a39      	cmp	r2, #57	; 0x39
 8009030:	d106      	bne.n	8009040 <_dtoa_r+0x700>
 8009032:	9a00      	ldr	r2, [sp, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d1f7      	bne.n	8009028 <_dtoa_r+0x6e8>
 8009038:	9900      	ldr	r1, [sp, #0]
 800903a:	2230      	movs	r2, #48	; 0x30
 800903c:	3701      	adds	r7, #1
 800903e:	700a      	strb	r2, [r1, #0]
 8009040:	781a      	ldrb	r2, [r3, #0]
 8009042:	3201      	adds	r2, #1
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	e790      	b.n	8008f6a <_dtoa_r+0x62a>
 8009048:	4ba3      	ldr	r3, [pc, #652]	; (80092d8 <_dtoa_r+0x998>)
 800904a:	2200      	movs	r2, #0
 800904c:	f7f7 fadc 	bl	8000608 <__aeabi_dmul>
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	4606      	mov	r6, r0
 8009056:	460f      	mov	r7, r1
 8009058:	f7f7 fd3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800905c:	2800      	cmp	r0, #0
 800905e:	d09e      	beq.n	8008f9e <_dtoa_r+0x65e>
 8009060:	e7d0      	b.n	8009004 <_dtoa_r+0x6c4>
 8009062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009064:	2a00      	cmp	r2, #0
 8009066:	f000 80ca 	beq.w	80091fe <_dtoa_r+0x8be>
 800906a:	9a07      	ldr	r2, [sp, #28]
 800906c:	2a01      	cmp	r2, #1
 800906e:	f300 80ad 	bgt.w	80091cc <_dtoa_r+0x88c>
 8009072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009074:	2a00      	cmp	r2, #0
 8009076:	f000 80a5 	beq.w	80091c4 <_dtoa_r+0x884>
 800907a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800907e:	9e08      	ldr	r6, [sp, #32]
 8009080:	9d05      	ldr	r5, [sp, #20]
 8009082:	9a05      	ldr	r2, [sp, #20]
 8009084:	441a      	add	r2, r3
 8009086:	9205      	str	r2, [sp, #20]
 8009088:	9a06      	ldr	r2, [sp, #24]
 800908a:	2101      	movs	r1, #1
 800908c:	441a      	add	r2, r3
 800908e:	4620      	mov	r0, r4
 8009090:	9206      	str	r2, [sp, #24]
 8009092:	f000 fc87 	bl	80099a4 <__i2b>
 8009096:	4607      	mov	r7, r0
 8009098:	b165      	cbz	r5, 80090b4 <_dtoa_r+0x774>
 800909a:	9b06      	ldr	r3, [sp, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd09      	ble.n	80090b4 <_dtoa_r+0x774>
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	9a05      	ldr	r2, [sp, #20]
 80090a4:	bfa8      	it	ge
 80090a6:	462b      	movge	r3, r5
 80090a8:	1ad2      	subs	r2, r2, r3
 80090aa:	9205      	str	r2, [sp, #20]
 80090ac:	9a06      	ldr	r2, [sp, #24]
 80090ae:	1aed      	subs	r5, r5, r3
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	9306      	str	r3, [sp, #24]
 80090b4:	9b08      	ldr	r3, [sp, #32]
 80090b6:	b1f3      	cbz	r3, 80090f6 <_dtoa_r+0x7b6>
 80090b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 80a3 	beq.w	8009206 <_dtoa_r+0x8c6>
 80090c0:	2e00      	cmp	r6, #0
 80090c2:	dd10      	ble.n	80090e6 <_dtoa_r+0x7a6>
 80090c4:	4639      	mov	r1, r7
 80090c6:	4632      	mov	r2, r6
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fd2b 	bl	8009b24 <__pow5mult>
 80090ce:	4652      	mov	r2, sl
 80090d0:	4601      	mov	r1, r0
 80090d2:	4607      	mov	r7, r0
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 fc7b 	bl	80099d0 <__multiply>
 80090da:	4651      	mov	r1, sl
 80090dc:	4680      	mov	r8, r0
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 fb60 	bl	80097a4 <_Bfree>
 80090e4:	46c2      	mov	sl, r8
 80090e6:	9b08      	ldr	r3, [sp, #32]
 80090e8:	1b9a      	subs	r2, r3, r6
 80090ea:	d004      	beq.n	80090f6 <_dtoa_r+0x7b6>
 80090ec:	4651      	mov	r1, sl
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fd18 	bl	8009b24 <__pow5mult>
 80090f4:	4682      	mov	sl, r0
 80090f6:	2101      	movs	r1, #1
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 fc53 	bl	80099a4 <__i2b>
 80090fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009100:	2b00      	cmp	r3, #0
 8009102:	4606      	mov	r6, r0
 8009104:	f340 8081 	ble.w	800920a <_dtoa_r+0x8ca>
 8009108:	461a      	mov	r2, r3
 800910a:	4601      	mov	r1, r0
 800910c:	4620      	mov	r0, r4
 800910e:	f000 fd09 	bl	8009b24 <__pow5mult>
 8009112:	9b07      	ldr	r3, [sp, #28]
 8009114:	2b01      	cmp	r3, #1
 8009116:	4606      	mov	r6, r0
 8009118:	dd7a      	ble.n	8009210 <_dtoa_r+0x8d0>
 800911a:	f04f 0800 	mov.w	r8, #0
 800911e:	6933      	ldr	r3, [r6, #16]
 8009120:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009124:	6918      	ldr	r0, [r3, #16]
 8009126:	f000 fbef 	bl	8009908 <__hi0bits>
 800912a:	f1c0 0020 	rsb	r0, r0, #32
 800912e:	9b06      	ldr	r3, [sp, #24]
 8009130:	4418      	add	r0, r3
 8009132:	f010 001f 	ands.w	r0, r0, #31
 8009136:	f000 8094 	beq.w	8009262 <_dtoa_r+0x922>
 800913a:	f1c0 0320 	rsb	r3, r0, #32
 800913e:	2b04      	cmp	r3, #4
 8009140:	f340 8085 	ble.w	800924e <_dtoa_r+0x90e>
 8009144:	9b05      	ldr	r3, [sp, #20]
 8009146:	f1c0 001c 	rsb	r0, r0, #28
 800914a:	4403      	add	r3, r0
 800914c:	9305      	str	r3, [sp, #20]
 800914e:	9b06      	ldr	r3, [sp, #24]
 8009150:	4403      	add	r3, r0
 8009152:	4405      	add	r5, r0
 8009154:	9306      	str	r3, [sp, #24]
 8009156:	9b05      	ldr	r3, [sp, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	dd05      	ble.n	8009168 <_dtoa_r+0x828>
 800915c:	4651      	mov	r1, sl
 800915e:	461a      	mov	r2, r3
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fd39 	bl	8009bd8 <__lshift>
 8009166:	4682      	mov	sl, r0
 8009168:	9b06      	ldr	r3, [sp, #24]
 800916a:	2b00      	cmp	r3, #0
 800916c:	dd05      	ble.n	800917a <_dtoa_r+0x83a>
 800916e:	4631      	mov	r1, r6
 8009170:	461a      	mov	r2, r3
 8009172:	4620      	mov	r0, r4
 8009174:	f000 fd30 	bl	8009bd8 <__lshift>
 8009178:	4606      	mov	r6, r0
 800917a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800917c:	2b00      	cmp	r3, #0
 800917e:	d072      	beq.n	8009266 <_dtoa_r+0x926>
 8009180:	4631      	mov	r1, r6
 8009182:	4650      	mov	r0, sl
 8009184:	f000 fd94 	bl	8009cb0 <__mcmp>
 8009188:	2800      	cmp	r0, #0
 800918a:	da6c      	bge.n	8009266 <_dtoa_r+0x926>
 800918c:	2300      	movs	r3, #0
 800918e:	4651      	mov	r1, sl
 8009190:	220a      	movs	r2, #10
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fb28 	bl	80097e8 <__multadd>
 8009198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800919e:	4682      	mov	sl, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 81b0 	beq.w	8009506 <_dtoa_r+0xbc6>
 80091a6:	2300      	movs	r3, #0
 80091a8:	4639      	mov	r1, r7
 80091aa:	220a      	movs	r2, #10
 80091ac:	4620      	mov	r0, r4
 80091ae:	f000 fb1b 	bl	80097e8 <__multadd>
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	4607      	mov	r7, r0
 80091b8:	f300 8096 	bgt.w	80092e8 <_dtoa_r+0x9a8>
 80091bc:	9b07      	ldr	r3, [sp, #28]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	dc59      	bgt.n	8009276 <_dtoa_r+0x936>
 80091c2:	e091      	b.n	80092e8 <_dtoa_r+0x9a8>
 80091c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091ca:	e758      	b.n	800907e <_dtoa_r+0x73e>
 80091cc:	9b04      	ldr	r3, [sp, #16]
 80091ce:	1e5e      	subs	r6, r3, #1
 80091d0:	9b08      	ldr	r3, [sp, #32]
 80091d2:	42b3      	cmp	r3, r6
 80091d4:	bfbf      	itttt	lt
 80091d6:	9b08      	ldrlt	r3, [sp, #32]
 80091d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80091da:	9608      	strlt	r6, [sp, #32]
 80091dc:	1af3      	sublt	r3, r6, r3
 80091de:	bfb4      	ite	lt
 80091e0:	18d2      	addlt	r2, r2, r3
 80091e2:	1b9e      	subge	r6, r3, r6
 80091e4:	9b04      	ldr	r3, [sp, #16]
 80091e6:	bfbc      	itt	lt
 80091e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80091ea:	2600      	movlt	r6, #0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfb7      	itett	lt
 80091f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80091f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80091f8:	1a9d      	sublt	r5, r3, r2
 80091fa:	2300      	movlt	r3, #0
 80091fc:	e741      	b.n	8009082 <_dtoa_r+0x742>
 80091fe:	9e08      	ldr	r6, [sp, #32]
 8009200:	9d05      	ldr	r5, [sp, #20]
 8009202:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009204:	e748      	b.n	8009098 <_dtoa_r+0x758>
 8009206:	9a08      	ldr	r2, [sp, #32]
 8009208:	e770      	b.n	80090ec <_dtoa_r+0x7ac>
 800920a:	9b07      	ldr	r3, [sp, #28]
 800920c:	2b01      	cmp	r3, #1
 800920e:	dc19      	bgt.n	8009244 <_dtoa_r+0x904>
 8009210:	9b02      	ldr	r3, [sp, #8]
 8009212:	b9bb      	cbnz	r3, 8009244 <_dtoa_r+0x904>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800921a:	b99b      	cbnz	r3, 8009244 <_dtoa_r+0x904>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009222:	0d1b      	lsrs	r3, r3, #20
 8009224:	051b      	lsls	r3, r3, #20
 8009226:	b183      	cbz	r3, 800924a <_dtoa_r+0x90a>
 8009228:	9b05      	ldr	r3, [sp, #20]
 800922a:	3301      	adds	r3, #1
 800922c:	9305      	str	r3, [sp, #20]
 800922e:	9b06      	ldr	r3, [sp, #24]
 8009230:	3301      	adds	r3, #1
 8009232:	9306      	str	r3, [sp, #24]
 8009234:	f04f 0801 	mov.w	r8, #1
 8009238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800923a:	2b00      	cmp	r3, #0
 800923c:	f47f af6f 	bne.w	800911e <_dtoa_r+0x7de>
 8009240:	2001      	movs	r0, #1
 8009242:	e774      	b.n	800912e <_dtoa_r+0x7ee>
 8009244:	f04f 0800 	mov.w	r8, #0
 8009248:	e7f6      	b.n	8009238 <_dtoa_r+0x8f8>
 800924a:	4698      	mov	r8, r3
 800924c:	e7f4      	b.n	8009238 <_dtoa_r+0x8f8>
 800924e:	d082      	beq.n	8009156 <_dtoa_r+0x816>
 8009250:	9a05      	ldr	r2, [sp, #20]
 8009252:	331c      	adds	r3, #28
 8009254:	441a      	add	r2, r3
 8009256:	9205      	str	r2, [sp, #20]
 8009258:	9a06      	ldr	r2, [sp, #24]
 800925a:	441a      	add	r2, r3
 800925c:	441d      	add	r5, r3
 800925e:	9206      	str	r2, [sp, #24]
 8009260:	e779      	b.n	8009156 <_dtoa_r+0x816>
 8009262:	4603      	mov	r3, r0
 8009264:	e7f4      	b.n	8009250 <_dtoa_r+0x910>
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	dc37      	bgt.n	80092dc <_dtoa_r+0x99c>
 800926c:	9b07      	ldr	r3, [sp, #28]
 800926e:	2b02      	cmp	r3, #2
 8009270:	dd34      	ble.n	80092dc <_dtoa_r+0x99c>
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	b963      	cbnz	r3, 8009294 <_dtoa_r+0x954>
 800927a:	4631      	mov	r1, r6
 800927c:	2205      	movs	r2, #5
 800927e:	4620      	mov	r0, r4
 8009280:	f000 fab2 	bl	80097e8 <__multadd>
 8009284:	4601      	mov	r1, r0
 8009286:	4606      	mov	r6, r0
 8009288:	4650      	mov	r0, sl
 800928a:	f000 fd11 	bl	8009cb0 <__mcmp>
 800928e:	2800      	cmp	r0, #0
 8009290:	f73f adbb 	bgt.w	8008e0a <_dtoa_r+0x4ca>
 8009294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009296:	9d00      	ldr	r5, [sp, #0]
 8009298:	ea6f 0b03 	mvn.w	fp, r3
 800929c:	f04f 0800 	mov.w	r8, #0
 80092a0:	4631      	mov	r1, r6
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 fa7e 	bl	80097a4 <_Bfree>
 80092a8:	2f00      	cmp	r7, #0
 80092aa:	f43f aeab 	beq.w	8009004 <_dtoa_r+0x6c4>
 80092ae:	f1b8 0f00 	cmp.w	r8, #0
 80092b2:	d005      	beq.n	80092c0 <_dtoa_r+0x980>
 80092b4:	45b8      	cmp	r8, r7
 80092b6:	d003      	beq.n	80092c0 <_dtoa_r+0x980>
 80092b8:	4641      	mov	r1, r8
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fa72 	bl	80097a4 <_Bfree>
 80092c0:	4639      	mov	r1, r7
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 fa6e 	bl	80097a4 <_Bfree>
 80092c8:	e69c      	b.n	8009004 <_dtoa_r+0x6c4>
 80092ca:	2600      	movs	r6, #0
 80092cc:	4637      	mov	r7, r6
 80092ce:	e7e1      	b.n	8009294 <_dtoa_r+0x954>
 80092d0:	46bb      	mov	fp, r7
 80092d2:	4637      	mov	r7, r6
 80092d4:	e599      	b.n	8008e0a <_dtoa_r+0x4ca>
 80092d6:	bf00      	nop
 80092d8:	40240000 	.word	0x40240000
 80092dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 80c8 	beq.w	8009474 <_dtoa_r+0xb34>
 80092e4:	9b04      	ldr	r3, [sp, #16]
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	2d00      	cmp	r5, #0
 80092ea:	dd05      	ble.n	80092f8 <_dtoa_r+0x9b8>
 80092ec:	4639      	mov	r1, r7
 80092ee:	462a      	mov	r2, r5
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 fc71 	bl	8009bd8 <__lshift>
 80092f6:	4607      	mov	r7, r0
 80092f8:	f1b8 0f00 	cmp.w	r8, #0
 80092fc:	d05b      	beq.n	80093b6 <_dtoa_r+0xa76>
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4620      	mov	r0, r4
 8009302:	f000 fa0f 	bl	8009724 <_Balloc>
 8009306:	4605      	mov	r5, r0
 8009308:	b928      	cbnz	r0, 8009316 <_dtoa_r+0x9d6>
 800930a:	4b83      	ldr	r3, [pc, #524]	; (8009518 <_dtoa_r+0xbd8>)
 800930c:	4602      	mov	r2, r0
 800930e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009312:	f7ff bb2e 	b.w	8008972 <_dtoa_r+0x32>
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	3202      	adds	r2, #2
 800931a:	0092      	lsls	r2, r2, #2
 800931c:	f107 010c 	add.w	r1, r7, #12
 8009320:	300c      	adds	r0, #12
 8009322:	f001 ff85 	bl	800b230 <memcpy>
 8009326:	2201      	movs	r2, #1
 8009328:	4629      	mov	r1, r5
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fc54 	bl	8009bd8 <__lshift>
 8009330:	9b00      	ldr	r3, [sp, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800933a:	4413      	add	r3, r2
 800933c:	9308      	str	r3, [sp, #32]
 800933e:	9b02      	ldr	r3, [sp, #8]
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	46b8      	mov	r8, r7
 8009346:	9306      	str	r3, [sp, #24]
 8009348:	4607      	mov	r7, r0
 800934a:	9b04      	ldr	r3, [sp, #16]
 800934c:	4631      	mov	r1, r6
 800934e:	3b01      	subs	r3, #1
 8009350:	4650      	mov	r0, sl
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	f7ff fa6a 	bl	800882c <quorem>
 8009358:	4641      	mov	r1, r8
 800935a:	9002      	str	r0, [sp, #8]
 800935c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009360:	4650      	mov	r0, sl
 8009362:	f000 fca5 	bl	8009cb0 <__mcmp>
 8009366:	463a      	mov	r2, r7
 8009368:	9005      	str	r0, [sp, #20]
 800936a:	4631      	mov	r1, r6
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fcbb 	bl	8009ce8 <__mdiff>
 8009372:	68c2      	ldr	r2, [r0, #12]
 8009374:	4605      	mov	r5, r0
 8009376:	bb02      	cbnz	r2, 80093ba <_dtoa_r+0xa7a>
 8009378:	4601      	mov	r1, r0
 800937a:	4650      	mov	r0, sl
 800937c:	f000 fc98 	bl	8009cb0 <__mcmp>
 8009380:	4602      	mov	r2, r0
 8009382:	4629      	mov	r1, r5
 8009384:	4620      	mov	r0, r4
 8009386:	9209      	str	r2, [sp, #36]	; 0x24
 8009388:	f000 fa0c 	bl	80097a4 <_Bfree>
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009390:	9d04      	ldr	r5, [sp, #16]
 8009392:	ea43 0102 	orr.w	r1, r3, r2
 8009396:	9b06      	ldr	r3, [sp, #24]
 8009398:	4319      	orrs	r1, r3
 800939a:	d110      	bne.n	80093be <_dtoa_r+0xa7e>
 800939c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093a0:	d029      	beq.n	80093f6 <_dtoa_r+0xab6>
 80093a2:	9b05      	ldr	r3, [sp, #20]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	dd02      	ble.n	80093ae <_dtoa_r+0xa6e>
 80093a8:	9b02      	ldr	r3, [sp, #8]
 80093aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	f883 9000 	strb.w	r9, [r3]
 80093b4:	e774      	b.n	80092a0 <_dtoa_r+0x960>
 80093b6:	4638      	mov	r0, r7
 80093b8:	e7ba      	b.n	8009330 <_dtoa_r+0x9f0>
 80093ba:	2201      	movs	r2, #1
 80093bc:	e7e1      	b.n	8009382 <_dtoa_r+0xa42>
 80093be:	9b05      	ldr	r3, [sp, #20]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db04      	blt.n	80093ce <_dtoa_r+0xa8e>
 80093c4:	9907      	ldr	r1, [sp, #28]
 80093c6:	430b      	orrs	r3, r1
 80093c8:	9906      	ldr	r1, [sp, #24]
 80093ca:	430b      	orrs	r3, r1
 80093cc:	d120      	bne.n	8009410 <_dtoa_r+0xad0>
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	dded      	ble.n	80093ae <_dtoa_r+0xa6e>
 80093d2:	4651      	mov	r1, sl
 80093d4:	2201      	movs	r2, #1
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 fbfe 	bl	8009bd8 <__lshift>
 80093dc:	4631      	mov	r1, r6
 80093de:	4682      	mov	sl, r0
 80093e0:	f000 fc66 	bl	8009cb0 <__mcmp>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	dc03      	bgt.n	80093f0 <_dtoa_r+0xab0>
 80093e8:	d1e1      	bne.n	80093ae <_dtoa_r+0xa6e>
 80093ea:	f019 0f01 	tst.w	r9, #1
 80093ee:	d0de      	beq.n	80093ae <_dtoa_r+0xa6e>
 80093f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093f4:	d1d8      	bne.n	80093a8 <_dtoa_r+0xa68>
 80093f6:	9a01      	ldr	r2, [sp, #4]
 80093f8:	2339      	movs	r3, #57	; 0x39
 80093fa:	7013      	strb	r3, [r2, #0]
 80093fc:	462b      	mov	r3, r5
 80093fe:	461d      	mov	r5, r3
 8009400:	3b01      	subs	r3, #1
 8009402:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009406:	2a39      	cmp	r2, #57	; 0x39
 8009408:	d06c      	beq.n	80094e4 <_dtoa_r+0xba4>
 800940a:	3201      	adds	r2, #1
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	e747      	b.n	80092a0 <_dtoa_r+0x960>
 8009410:	2a00      	cmp	r2, #0
 8009412:	dd07      	ble.n	8009424 <_dtoa_r+0xae4>
 8009414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009418:	d0ed      	beq.n	80093f6 <_dtoa_r+0xab6>
 800941a:	9a01      	ldr	r2, [sp, #4]
 800941c:	f109 0301 	add.w	r3, r9, #1
 8009420:	7013      	strb	r3, [r2, #0]
 8009422:	e73d      	b.n	80092a0 <_dtoa_r+0x960>
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	9a08      	ldr	r2, [sp, #32]
 8009428:	f803 9c01 	strb.w	r9, [r3, #-1]
 800942c:	4293      	cmp	r3, r2
 800942e:	d043      	beq.n	80094b8 <_dtoa_r+0xb78>
 8009430:	4651      	mov	r1, sl
 8009432:	2300      	movs	r3, #0
 8009434:	220a      	movs	r2, #10
 8009436:	4620      	mov	r0, r4
 8009438:	f000 f9d6 	bl	80097e8 <__multadd>
 800943c:	45b8      	cmp	r8, r7
 800943e:	4682      	mov	sl, r0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	f04f 020a 	mov.w	r2, #10
 8009448:	4641      	mov	r1, r8
 800944a:	4620      	mov	r0, r4
 800944c:	d107      	bne.n	800945e <_dtoa_r+0xb1e>
 800944e:	f000 f9cb 	bl	80097e8 <__multadd>
 8009452:	4680      	mov	r8, r0
 8009454:	4607      	mov	r7, r0
 8009456:	9b04      	ldr	r3, [sp, #16]
 8009458:	3301      	adds	r3, #1
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	e775      	b.n	800934a <_dtoa_r+0xa0a>
 800945e:	f000 f9c3 	bl	80097e8 <__multadd>
 8009462:	4639      	mov	r1, r7
 8009464:	4680      	mov	r8, r0
 8009466:	2300      	movs	r3, #0
 8009468:	220a      	movs	r2, #10
 800946a:	4620      	mov	r0, r4
 800946c:	f000 f9bc 	bl	80097e8 <__multadd>
 8009470:	4607      	mov	r7, r0
 8009472:	e7f0      	b.n	8009456 <_dtoa_r+0xb16>
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	9301      	str	r3, [sp, #4]
 8009478:	9d00      	ldr	r5, [sp, #0]
 800947a:	4631      	mov	r1, r6
 800947c:	4650      	mov	r0, sl
 800947e:	f7ff f9d5 	bl	800882c <quorem>
 8009482:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009486:	9b00      	ldr	r3, [sp, #0]
 8009488:	f805 9b01 	strb.w	r9, [r5], #1
 800948c:	1aea      	subs	r2, r5, r3
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	4293      	cmp	r3, r2
 8009492:	dd07      	ble.n	80094a4 <_dtoa_r+0xb64>
 8009494:	4651      	mov	r1, sl
 8009496:	2300      	movs	r3, #0
 8009498:	220a      	movs	r2, #10
 800949a:	4620      	mov	r0, r4
 800949c:	f000 f9a4 	bl	80097e8 <__multadd>
 80094a0:	4682      	mov	sl, r0
 80094a2:	e7ea      	b.n	800947a <_dtoa_r+0xb3a>
 80094a4:	9b01      	ldr	r3, [sp, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bfc8      	it	gt
 80094aa:	461d      	movgt	r5, r3
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	bfd8      	it	le
 80094b0:	2501      	movle	r5, #1
 80094b2:	441d      	add	r5, r3
 80094b4:	f04f 0800 	mov.w	r8, #0
 80094b8:	4651      	mov	r1, sl
 80094ba:	2201      	movs	r2, #1
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fb8b 	bl	8009bd8 <__lshift>
 80094c2:	4631      	mov	r1, r6
 80094c4:	4682      	mov	sl, r0
 80094c6:	f000 fbf3 	bl	8009cb0 <__mcmp>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	dc96      	bgt.n	80093fc <_dtoa_r+0xabc>
 80094ce:	d102      	bne.n	80094d6 <_dtoa_r+0xb96>
 80094d0:	f019 0f01 	tst.w	r9, #1
 80094d4:	d192      	bne.n	80093fc <_dtoa_r+0xabc>
 80094d6:	462b      	mov	r3, r5
 80094d8:	461d      	mov	r5, r3
 80094da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094de:	2a30      	cmp	r2, #48	; 0x30
 80094e0:	d0fa      	beq.n	80094d8 <_dtoa_r+0xb98>
 80094e2:	e6dd      	b.n	80092a0 <_dtoa_r+0x960>
 80094e4:	9a00      	ldr	r2, [sp, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d189      	bne.n	80093fe <_dtoa_r+0xabe>
 80094ea:	f10b 0b01 	add.w	fp, fp, #1
 80094ee:	2331      	movs	r3, #49	; 0x31
 80094f0:	e796      	b.n	8009420 <_dtoa_r+0xae0>
 80094f2:	4b0a      	ldr	r3, [pc, #40]	; (800951c <_dtoa_r+0xbdc>)
 80094f4:	f7ff ba99 	b.w	8008a2a <_dtoa_r+0xea>
 80094f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f47f aa6d 	bne.w	80089da <_dtoa_r+0x9a>
 8009500:	4b07      	ldr	r3, [pc, #28]	; (8009520 <_dtoa_r+0xbe0>)
 8009502:	f7ff ba92 	b.w	8008a2a <_dtoa_r+0xea>
 8009506:	9b01      	ldr	r3, [sp, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	dcb5      	bgt.n	8009478 <_dtoa_r+0xb38>
 800950c:	9b07      	ldr	r3, [sp, #28]
 800950e:	2b02      	cmp	r3, #2
 8009510:	f73f aeb1 	bgt.w	8009276 <_dtoa_r+0x936>
 8009514:	e7b0      	b.n	8009478 <_dtoa_r+0xb38>
 8009516:	bf00      	nop
 8009518:	0800c271 	.word	0x0800c271
 800951c:	0800c1cc 	.word	0x0800c1cc
 8009520:	0800c1f5 	.word	0x0800c1f5

08009524 <_free_r>:
 8009524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009526:	2900      	cmp	r1, #0
 8009528:	d044      	beq.n	80095b4 <_free_r+0x90>
 800952a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800952e:	9001      	str	r0, [sp, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	f1a1 0404 	sub.w	r4, r1, #4
 8009536:	bfb8      	it	lt
 8009538:	18e4      	addlt	r4, r4, r3
 800953a:	f000 f8e7 	bl	800970c <__malloc_lock>
 800953e:	4a1e      	ldr	r2, [pc, #120]	; (80095b8 <_free_r+0x94>)
 8009540:	9801      	ldr	r0, [sp, #4]
 8009542:	6813      	ldr	r3, [r2, #0]
 8009544:	b933      	cbnz	r3, 8009554 <_free_r+0x30>
 8009546:	6063      	str	r3, [r4, #4]
 8009548:	6014      	str	r4, [r2, #0]
 800954a:	b003      	add	sp, #12
 800954c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009550:	f000 b8e2 	b.w	8009718 <__malloc_unlock>
 8009554:	42a3      	cmp	r3, r4
 8009556:	d908      	bls.n	800956a <_free_r+0x46>
 8009558:	6825      	ldr	r5, [r4, #0]
 800955a:	1961      	adds	r1, r4, r5
 800955c:	428b      	cmp	r3, r1
 800955e:	bf01      	itttt	eq
 8009560:	6819      	ldreq	r1, [r3, #0]
 8009562:	685b      	ldreq	r3, [r3, #4]
 8009564:	1949      	addeq	r1, r1, r5
 8009566:	6021      	streq	r1, [r4, #0]
 8009568:	e7ed      	b.n	8009546 <_free_r+0x22>
 800956a:	461a      	mov	r2, r3
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	b10b      	cbz	r3, 8009574 <_free_r+0x50>
 8009570:	42a3      	cmp	r3, r4
 8009572:	d9fa      	bls.n	800956a <_free_r+0x46>
 8009574:	6811      	ldr	r1, [r2, #0]
 8009576:	1855      	adds	r5, r2, r1
 8009578:	42a5      	cmp	r5, r4
 800957a:	d10b      	bne.n	8009594 <_free_r+0x70>
 800957c:	6824      	ldr	r4, [r4, #0]
 800957e:	4421      	add	r1, r4
 8009580:	1854      	adds	r4, r2, r1
 8009582:	42a3      	cmp	r3, r4
 8009584:	6011      	str	r1, [r2, #0]
 8009586:	d1e0      	bne.n	800954a <_free_r+0x26>
 8009588:	681c      	ldr	r4, [r3, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	6053      	str	r3, [r2, #4]
 800958e:	440c      	add	r4, r1
 8009590:	6014      	str	r4, [r2, #0]
 8009592:	e7da      	b.n	800954a <_free_r+0x26>
 8009594:	d902      	bls.n	800959c <_free_r+0x78>
 8009596:	230c      	movs	r3, #12
 8009598:	6003      	str	r3, [r0, #0]
 800959a:	e7d6      	b.n	800954a <_free_r+0x26>
 800959c:	6825      	ldr	r5, [r4, #0]
 800959e:	1961      	adds	r1, r4, r5
 80095a0:	428b      	cmp	r3, r1
 80095a2:	bf04      	itt	eq
 80095a4:	6819      	ldreq	r1, [r3, #0]
 80095a6:	685b      	ldreq	r3, [r3, #4]
 80095a8:	6063      	str	r3, [r4, #4]
 80095aa:	bf04      	itt	eq
 80095ac:	1949      	addeq	r1, r1, r5
 80095ae:	6021      	streq	r1, [r4, #0]
 80095b0:	6054      	str	r4, [r2, #4]
 80095b2:	e7ca      	b.n	800954a <_free_r+0x26>
 80095b4:	b003      	add	sp, #12
 80095b6:	bd30      	pop	{r4, r5, pc}
 80095b8:	20002738 	.word	0x20002738

080095bc <malloc>:
 80095bc:	4b02      	ldr	r3, [pc, #8]	; (80095c8 <malloc+0xc>)
 80095be:	4601      	mov	r1, r0
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	f000 b823 	b.w	800960c <_malloc_r>
 80095c6:	bf00      	nop
 80095c8:	20000068 	.word	0x20000068

080095cc <sbrk_aligned>:
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	4e0e      	ldr	r6, [pc, #56]	; (8009608 <sbrk_aligned+0x3c>)
 80095d0:	460c      	mov	r4, r1
 80095d2:	6831      	ldr	r1, [r6, #0]
 80095d4:	4605      	mov	r5, r0
 80095d6:	b911      	cbnz	r1, 80095de <sbrk_aligned+0x12>
 80095d8:	f001 fe1a 	bl	800b210 <_sbrk_r>
 80095dc:	6030      	str	r0, [r6, #0]
 80095de:	4621      	mov	r1, r4
 80095e0:	4628      	mov	r0, r5
 80095e2:	f001 fe15 	bl	800b210 <_sbrk_r>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d00a      	beq.n	8009600 <sbrk_aligned+0x34>
 80095ea:	1cc4      	adds	r4, r0, #3
 80095ec:	f024 0403 	bic.w	r4, r4, #3
 80095f0:	42a0      	cmp	r0, r4
 80095f2:	d007      	beq.n	8009604 <sbrk_aligned+0x38>
 80095f4:	1a21      	subs	r1, r4, r0
 80095f6:	4628      	mov	r0, r5
 80095f8:	f001 fe0a 	bl	800b210 <_sbrk_r>
 80095fc:	3001      	adds	r0, #1
 80095fe:	d101      	bne.n	8009604 <sbrk_aligned+0x38>
 8009600:	f04f 34ff 	mov.w	r4, #4294967295
 8009604:	4620      	mov	r0, r4
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	2000273c 	.word	0x2000273c

0800960c <_malloc_r>:
 800960c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009610:	1ccd      	adds	r5, r1, #3
 8009612:	f025 0503 	bic.w	r5, r5, #3
 8009616:	3508      	adds	r5, #8
 8009618:	2d0c      	cmp	r5, #12
 800961a:	bf38      	it	cc
 800961c:	250c      	movcc	r5, #12
 800961e:	2d00      	cmp	r5, #0
 8009620:	4607      	mov	r7, r0
 8009622:	db01      	blt.n	8009628 <_malloc_r+0x1c>
 8009624:	42a9      	cmp	r1, r5
 8009626:	d905      	bls.n	8009634 <_malloc_r+0x28>
 8009628:	230c      	movs	r3, #12
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	2600      	movs	r6, #0
 800962e:	4630      	mov	r0, r6
 8009630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009634:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009708 <_malloc_r+0xfc>
 8009638:	f000 f868 	bl	800970c <__malloc_lock>
 800963c:	f8d8 3000 	ldr.w	r3, [r8]
 8009640:	461c      	mov	r4, r3
 8009642:	bb5c      	cbnz	r4, 800969c <_malloc_r+0x90>
 8009644:	4629      	mov	r1, r5
 8009646:	4638      	mov	r0, r7
 8009648:	f7ff ffc0 	bl	80095cc <sbrk_aligned>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	4604      	mov	r4, r0
 8009650:	d155      	bne.n	80096fe <_malloc_r+0xf2>
 8009652:	f8d8 4000 	ldr.w	r4, [r8]
 8009656:	4626      	mov	r6, r4
 8009658:	2e00      	cmp	r6, #0
 800965a:	d145      	bne.n	80096e8 <_malloc_r+0xdc>
 800965c:	2c00      	cmp	r4, #0
 800965e:	d048      	beq.n	80096f2 <_malloc_r+0xe6>
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	4631      	mov	r1, r6
 8009664:	4638      	mov	r0, r7
 8009666:	eb04 0903 	add.w	r9, r4, r3
 800966a:	f001 fdd1 	bl	800b210 <_sbrk_r>
 800966e:	4581      	cmp	r9, r0
 8009670:	d13f      	bne.n	80096f2 <_malloc_r+0xe6>
 8009672:	6821      	ldr	r1, [r4, #0]
 8009674:	1a6d      	subs	r5, r5, r1
 8009676:	4629      	mov	r1, r5
 8009678:	4638      	mov	r0, r7
 800967a:	f7ff ffa7 	bl	80095cc <sbrk_aligned>
 800967e:	3001      	adds	r0, #1
 8009680:	d037      	beq.n	80096f2 <_malloc_r+0xe6>
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	442b      	add	r3, r5
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	f8d8 3000 	ldr.w	r3, [r8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d038      	beq.n	8009702 <_malloc_r+0xf6>
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	42a2      	cmp	r2, r4
 8009694:	d12b      	bne.n	80096ee <_malloc_r+0xe2>
 8009696:	2200      	movs	r2, #0
 8009698:	605a      	str	r2, [r3, #4]
 800969a:	e00f      	b.n	80096bc <_malloc_r+0xb0>
 800969c:	6822      	ldr	r2, [r4, #0]
 800969e:	1b52      	subs	r2, r2, r5
 80096a0:	d41f      	bmi.n	80096e2 <_malloc_r+0xd6>
 80096a2:	2a0b      	cmp	r2, #11
 80096a4:	d917      	bls.n	80096d6 <_malloc_r+0xca>
 80096a6:	1961      	adds	r1, r4, r5
 80096a8:	42a3      	cmp	r3, r4
 80096aa:	6025      	str	r5, [r4, #0]
 80096ac:	bf18      	it	ne
 80096ae:	6059      	strne	r1, [r3, #4]
 80096b0:	6863      	ldr	r3, [r4, #4]
 80096b2:	bf08      	it	eq
 80096b4:	f8c8 1000 	streq.w	r1, [r8]
 80096b8:	5162      	str	r2, [r4, r5]
 80096ba:	604b      	str	r3, [r1, #4]
 80096bc:	4638      	mov	r0, r7
 80096be:	f104 060b 	add.w	r6, r4, #11
 80096c2:	f000 f829 	bl	8009718 <__malloc_unlock>
 80096c6:	f026 0607 	bic.w	r6, r6, #7
 80096ca:	1d23      	adds	r3, r4, #4
 80096cc:	1af2      	subs	r2, r6, r3
 80096ce:	d0ae      	beq.n	800962e <_malloc_r+0x22>
 80096d0:	1b9b      	subs	r3, r3, r6
 80096d2:	50a3      	str	r3, [r4, r2]
 80096d4:	e7ab      	b.n	800962e <_malloc_r+0x22>
 80096d6:	42a3      	cmp	r3, r4
 80096d8:	6862      	ldr	r2, [r4, #4]
 80096da:	d1dd      	bne.n	8009698 <_malloc_r+0x8c>
 80096dc:	f8c8 2000 	str.w	r2, [r8]
 80096e0:	e7ec      	b.n	80096bc <_malloc_r+0xb0>
 80096e2:	4623      	mov	r3, r4
 80096e4:	6864      	ldr	r4, [r4, #4]
 80096e6:	e7ac      	b.n	8009642 <_malloc_r+0x36>
 80096e8:	4634      	mov	r4, r6
 80096ea:	6876      	ldr	r6, [r6, #4]
 80096ec:	e7b4      	b.n	8009658 <_malloc_r+0x4c>
 80096ee:	4613      	mov	r3, r2
 80096f0:	e7cc      	b.n	800968c <_malloc_r+0x80>
 80096f2:	230c      	movs	r3, #12
 80096f4:	603b      	str	r3, [r7, #0]
 80096f6:	4638      	mov	r0, r7
 80096f8:	f000 f80e 	bl	8009718 <__malloc_unlock>
 80096fc:	e797      	b.n	800962e <_malloc_r+0x22>
 80096fe:	6025      	str	r5, [r4, #0]
 8009700:	e7dc      	b.n	80096bc <_malloc_r+0xb0>
 8009702:	605b      	str	r3, [r3, #4]
 8009704:	deff      	udf	#255	; 0xff
 8009706:	bf00      	nop
 8009708:	20002738 	.word	0x20002738

0800970c <__malloc_lock>:
 800970c:	4801      	ldr	r0, [pc, #4]	; (8009714 <__malloc_lock+0x8>)
 800970e:	f7ff b885 	b.w	800881c <__retarget_lock_acquire_recursive>
 8009712:	bf00      	nop
 8009714:	20002734 	.word	0x20002734

08009718 <__malloc_unlock>:
 8009718:	4801      	ldr	r0, [pc, #4]	; (8009720 <__malloc_unlock+0x8>)
 800971a:	f7ff b880 	b.w	800881e <__retarget_lock_release_recursive>
 800971e:	bf00      	nop
 8009720:	20002734 	.word	0x20002734

08009724 <_Balloc>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	69c6      	ldr	r6, [r0, #28]
 8009728:	4604      	mov	r4, r0
 800972a:	460d      	mov	r5, r1
 800972c:	b976      	cbnz	r6, 800974c <_Balloc+0x28>
 800972e:	2010      	movs	r0, #16
 8009730:	f7ff ff44 	bl	80095bc <malloc>
 8009734:	4602      	mov	r2, r0
 8009736:	61e0      	str	r0, [r4, #28]
 8009738:	b920      	cbnz	r0, 8009744 <_Balloc+0x20>
 800973a:	4b18      	ldr	r3, [pc, #96]	; (800979c <_Balloc+0x78>)
 800973c:	4818      	ldr	r0, [pc, #96]	; (80097a0 <_Balloc+0x7c>)
 800973e:	216b      	movs	r1, #107	; 0x6b
 8009740:	f001 fd8e 	bl	800b260 <__assert_func>
 8009744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009748:	6006      	str	r6, [r0, #0]
 800974a:	60c6      	str	r6, [r0, #12]
 800974c:	69e6      	ldr	r6, [r4, #28]
 800974e:	68f3      	ldr	r3, [r6, #12]
 8009750:	b183      	cbz	r3, 8009774 <_Balloc+0x50>
 8009752:	69e3      	ldr	r3, [r4, #28]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800975a:	b9b8      	cbnz	r0, 800978c <_Balloc+0x68>
 800975c:	2101      	movs	r1, #1
 800975e:	fa01 f605 	lsl.w	r6, r1, r5
 8009762:	1d72      	adds	r2, r6, #5
 8009764:	0092      	lsls	r2, r2, #2
 8009766:	4620      	mov	r0, r4
 8009768:	f001 fd98 	bl	800b29c <_calloc_r>
 800976c:	b160      	cbz	r0, 8009788 <_Balloc+0x64>
 800976e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009772:	e00e      	b.n	8009792 <_Balloc+0x6e>
 8009774:	2221      	movs	r2, #33	; 0x21
 8009776:	2104      	movs	r1, #4
 8009778:	4620      	mov	r0, r4
 800977a:	f001 fd8f 	bl	800b29c <_calloc_r>
 800977e:	69e3      	ldr	r3, [r4, #28]
 8009780:	60f0      	str	r0, [r6, #12]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e4      	bne.n	8009752 <_Balloc+0x2e>
 8009788:	2000      	movs	r0, #0
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	6802      	ldr	r2, [r0, #0]
 800978e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009792:	2300      	movs	r3, #0
 8009794:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009798:	e7f7      	b.n	800978a <_Balloc+0x66>
 800979a:	bf00      	nop
 800979c:	0800c202 	.word	0x0800c202
 80097a0:	0800c282 	.word	0x0800c282

080097a4 <_Bfree>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	69c6      	ldr	r6, [r0, #28]
 80097a8:	4605      	mov	r5, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	b976      	cbnz	r6, 80097cc <_Bfree+0x28>
 80097ae:	2010      	movs	r0, #16
 80097b0:	f7ff ff04 	bl	80095bc <malloc>
 80097b4:	4602      	mov	r2, r0
 80097b6:	61e8      	str	r0, [r5, #28]
 80097b8:	b920      	cbnz	r0, 80097c4 <_Bfree+0x20>
 80097ba:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <_Bfree+0x3c>)
 80097bc:	4809      	ldr	r0, [pc, #36]	; (80097e4 <_Bfree+0x40>)
 80097be:	218f      	movs	r1, #143	; 0x8f
 80097c0:	f001 fd4e 	bl	800b260 <__assert_func>
 80097c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097c8:	6006      	str	r6, [r0, #0]
 80097ca:	60c6      	str	r6, [r0, #12]
 80097cc:	b13c      	cbz	r4, 80097de <_Bfree+0x3a>
 80097ce:	69eb      	ldr	r3, [r5, #28]
 80097d0:	6862      	ldr	r2, [r4, #4]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097d8:	6021      	str	r1, [r4, #0]
 80097da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097de:	bd70      	pop	{r4, r5, r6, pc}
 80097e0:	0800c202 	.word	0x0800c202
 80097e4:	0800c282 	.word	0x0800c282

080097e8 <__multadd>:
 80097e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ec:	690d      	ldr	r5, [r1, #16]
 80097ee:	4607      	mov	r7, r0
 80097f0:	460c      	mov	r4, r1
 80097f2:	461e      	mov	r6, r3
 80097f4:	f101 0c14 	add.w	ip, r1, #20
 80097f8:	2000      	movs	r0, #0
 80097fa:	f8dc 3000 	ldr.w	r3, [ip]
 80097fe:	b299      	uxth	r1, r3
 8009800:	fb02 6101 	mla	r1, r2, r1, r6
 8009804:	0c1e      	lsrs	r6, r3, #16
 8009806:	0c0b      	lsrs	r3, r1, #16
 8009808:	fb02 3306 	mla	r3, r2, r6, r3
 800980c:	b289      	uxth	r1, r1
 800980e:	3001      	adds	r0, #1
 8009810:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009814:	4285      	cmp	r5, r0
 8009816:	f84c 1b04 	str.w	r1, [ip], #4
 800981a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800981e:	dcec      	bgt.n	80097fa <__multadd+0x12>
 8009820:	b30e      	cbz	r6, 8009866 <__multadd+0x7e>
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	42ab      	cmp	r3, r5
 8009826:	dc19      	bgt.n	800985c <__multadd+0x74>
 8009828:	6861      	ldr	r1, [r4, #4]
 800982a:	4638      	mov	r0, r7
 800982c:	3101      	adds	r1, #1
 800982e:	f7ff ff79 	bl	8009724 <_Balloc>
 8009832:	4680      	mov	r8, r0
 8009834:	b928      	cbnz	r0, 8009842 <__multadd+0x5a>
 8009836:	4602      	mov	r2, r0
 8009838:	4b0c      	ldr	r3, [pc, #48]	; (800986c <__multadd+0x84>)
 800983a:	480d      	ldr	r0, [pc, #52]	; (8009870 <__multadd+0x88>)
 800983c:	21ba      	movs	r1, #186	; 0xba
 800983e:	f001 fd0f 	bl	800b260 <__assert_func>
 8009842:	6922      	ldr	r2, [r4, #16]
 8009844:	3202      	adds	r2, #2
 8009846:	f104 010c 	add.w	r1, r4, #12
 800984a:	0092      	lsls	r2, r2, #2
 800984c:	300c      	adds	r0, #12
 800984e:	f001 fcef 	bl	800b230 <memcpy>
 8009852:	4621      	mov	r1, r4
 8009854:	4638      	mov	r0, r7
 8009856:	f7ff ffa5 	bl	80097a4 <_Bfree>
 800985a:	4644      	mov	r4, r8
 800985c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009860:	3501      	adds	r5, #1
 8009862:	615e      	str	r6, [r3, #20]
 8009864:	6125      	str	r5, [r4, #16]
 8009866:	4620      	mov	r0, r4
 8009868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986c:	0800c271 	.word	0x0800c271
 8009870:	0800c282 	.word	0x0800c282

08009874 <__s2b>:
 8009874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009878:	460c      	mov	r4, r1
 800987a:	4615      	mov	r5, r2
 800987c:	461f      	mov	r7, r3
 800987e:	2209      	movs	r2, #9
 8009880:	3308      	adds	r3, #8
 8009882:	4606      	mov	r6, r0
 8009884:	fb93 f3f2 	sdiv	r3, r3, r2
 8009888:	2100      	movs	r1, #0
 800988a:	2201      	movs	r2, #1
 800988c:	429a      	cmp	r2, r3
 800988e:	db09      	blt.n	80098a4 <__s2b+0x30>
 8009890:	4630      	mov	r0, r6
 8009892:	f7ff ff47 	bl	8009724 <_Balloc>
 8009896:	b940      	cbnz	r0, 80098aa <__s2b+0x36>
 8009898:	4602      	mov	r2, r0
 800989a:	4b19      	ldr	r3, [pc, #100]	; (8009900 <__s2b+0x8c>)
 800989c:	4819      	ldr	r0, [pc, #100]	; (8009904 <__s2b+0x90>)
 800989e:	21d3      	movs	r1, #211	; 0xd3
 80098a0:	f001 fcde 	bl	800b260 <__assert_func>
 80098a4:	0052      	lsls	r2, r2, #1
 80098a6:	3101      	adds	r1, #1
 80098a8:	e7f0      	b.n	800988c <__s2b+0x18>
 80098aa:	9b08      	ldr	r3, [sp, #32]
 80098ac:	6143      	str	r3, [r0, #20]
 80098ae:	2d09      	cmp	r5, #9
 80098b0:	f04f 0301 	mov.w	r3, #1
 80098b4:	6103      	str	r3, [r0, #16]
 80098b6:	dd16      	ble.n	80098e6 <__s2b+0x72>
 80098b8:	f104 0909 	add.w	r9, r4, #9
 80098bc:	46c8      	mov	r8, r9
 80098be:	442c      	add	r4, r5
 80098c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098c4:	4601      	mov	r1, r0
 80098c6:	3b30      	subs	r3, #48	; 0x30
 80098c8:	220a      	movs	r2, #10
 80098ca:	4630      	mov	r0, r6
 80098cc:	f7ff ff8c 	bl	80097e8 <__multadd>
 80098d0:	45a0      	cmp	r8, r4
 80098d2:	d1f5      	bne.n	80098c0 <__s2b+0x4c>
 80098d4:	f1a5 0408 	sub.w	r4, r5, #8
 80098d8:	444c      	add	r4, r9
 80098da:	1b2d      	subs	r5, r5, r4
 80098dc:	1963      	adds	r3, r4, r5
 80098de:	42bb      	cmp	r3, r7
 80098e0:	db04      	blt.n	80098ec <__s2b+0x78>
 80098e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e6:	340a      	adds	r4, #10
 80098e8:	2509      	movs	r5, #9
 80098ea:	e7f6      	b.n	80098da <__s2b+0x66>
 80098ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098f0:	4601      	mov	r1, r0
 80098f2:	3b30      	subs	r3, #48	; 0x30
 80098f4:	220a      	movs	r2, #10
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ff76 	bl	80097e8 <__multadd>
 80098fc:	e7ee      	b.n	80098dc <__s2b+0x68>
 80098fe:	bf00      	nop
 8009900:	0800c271 	.word	0x0800c271
 8009904:	0800c282 	.word	0x0800c282

08009908 <__hi0bits>:
 8009908:	0c03      	lsrs	r3, r0, #16
 800990a:	041b      	lsls	r3, r3, #16
 800990c:	b9d3      	cbnz	r3, 8009944 <__hi0bits+0x3c>
 800990e:	0400      	lsls	r0, r0, #16
 8009910:	2310      	movs	r3, #16
 8009912:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009916:	bf04      	itt	eq
 8009918:	0200      	lsleq	r0, r0, #8
 800991a:	3308      	addeq	r3, #8
 800991c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009920:	bf04      	itt	eq
 8009922:	0100      	lsleq	r0, r0, #4
 8009924:	3304      	addeq	r3, #4
 8009926:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800992a:	bf04      	itt	eq
 800992c:	0080      	lsleq	r0, r0, #2
 800992e:	3302      	addeq	r3, #2
 8009930:	2800      	cmp	r0, #0
 8009932:	db05      	blt.n	8009940 <__hi0bits+0x38>
 8009934:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009938:	f103 0301 	add.w	r3, r3, #1
 800993c:	bf08      	it	eq
 800993e:	2320      	moveq	r3, #32
 8009940:	4618      	mov	r0, r3
 8009942:	4770      	bx	lr
 8009944:	2300      	movs	r3, #0
 8009946:	e7e4      	b.n	8009912 <__hi0bits+0xa>

08009948 <__lo0bits>:
 8009948:	6803      	ldr	r3, [r0, #0]
 800994a:	f013 0207 	ands.w	r2, r3, #7
 800994e:	d00c      	beq.n	800996a <__lo0bits+0x22>
 8009950:	07d9      	lsls	r1, r3, #31
 8009952:	d422      	bmi.n	800999a <__lo0bits+0x52>
 8009954:	079a      	lsls	r2, r3, #30
 8009956:	bf49      	itett	mi
 8009958:	085b      	lsrmi	r3, r3, #1
 800995a:	089b      	lsrpl	r3, r3, #2
 800995c:	6003      	strmi	r3, [r0, #0]
 800995e:	2201      	movmi	r2, #1
 8009960:	bf5c      	itt	pl
 8009962:	6003      	strpl	r3, [r0, #0]
 8009964:	2202      	movpl	r2, #2
 8009966:	4610      	mov	r0, r2
 8009968:	4770      	bx	lr
 800996a:	b299      	uxth	r1, r3
 800996c:	b909      	cbnz	r1, 8009972 <__lo0bits+0x2a>
 800996e:	0c1b      	lsrs	r3, r3, #16
 8009970:	2210      	movs	r2, #16
 8009972:	b2d9      	uxtb	r1, r3
 8009974:	b909      	cbnz	r1, 800997a <__lo0bits+0x32>
 8009976:	3208      	adds	r2, #8
 8009978:	0a1b      	lsrs	r3, r3, #8
 800997a:	0719      	lsls	r1, r3, #28
 800997c:	bf04      	itt	eq
 800997e:	091b      	lsreq	r3, r3, #4
 8009980:	3204      	addeq	r2, #4
 8009982:	0799      	lsls	r1, r3, #30
 8009984:	bf04      	itt	eq
 8009986:	089b      	lsreq	r3, r3, #2
 8009988:	3202      	addeq	r2, #2
 800998a:	07d9      	lsls	r1, r3, #31
 800998c:	d403      	bmi.n	8009996 <__lo0bits+0x4e>
 800998e:	085b      	lsrs	r3, r3, #1
 8009990:	f102 0201 	add.w	r2, r2, #1
 8009994:	d003      	beq.n	800999e <__lo0bits+0x56>
 8009996:	6003      	str	r3, [r0, #0]
 8009998:	e7e5      	b.n	8009966 <__lo0bits+0x1e>
 800999a:	2200      	movs	r2, #0
 800999c:	e7e3      	b.n	8009966 <__lo0bits+0x1e>
 800999e:	2220      	movs	r2, #32
 80099a0:	e7e1      	b.n	8009966 <__lo0bits+0x1e>
	...

080099a4 <__i2b>:
 80099a4:	b510      	push	{r4, lr}
 80099a6:	460c      	mov	r4, r1
 80099a8:	2101      	movs	r1, #1
 80099aa:	f7ff febb 	bl	8009724 <_Balloc>
 80099ae:	4602      	mov	r2, r0
 80099b0:	b928      	cbnz	r0, 80099be <__i2b+0x1a>
 80099b2:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <__i2b+0x24>)
 80099b4:	4805      	ldr	r0, [pc, #20]	; (80099cc <__i2b+0x28>)
 80099b6:	f240 1145 	movw	r1, #325	; 0x145
 80099ba:	f001 fc51 	bl	800b260 <__assert_func>
 80099be:	2301      	movs	r3, #1
 80099c0:	6144      	str	r4, [r0, #20]
 80099c2:	6103      	str	r3, [r0, #16]
 80099c4:	bd10      	pop	{r4, pc}
 80099c6:	bf00      	nop
 80099c8:	0800c271 	.word	0x0800c271
 80099cc:	0800c282 	.word	0x0800c282

080099d0 <__multiply>:
 80099d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	4691      	mov	r9, r2
 80099d6:	690a      	ldr	r2, [r1, #16]
 80099d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099dc:	429a      	cmp	r2, r3
 80099de:	bfb8      	it	lt
 80099e0:	460b      	movlt	r3, r1
 80099e2:	460c      	mov	r4, r1
 80099e4:	bfbc      	itt	lt
 80099e6:	464c      	movlt	r4, r9
 80099e8:	4699      	movlt	r9, r3
 80099ea:	6927      	ldr	r7, [r4, #16]
 80099ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80099f0:	68a3      	ldr	r3, [r4, #8]
 80099f2:	6861      	ldr	r1, [r4, #4]
 80099f4:	eb07 060a 	add.w	r6, r7, sl
 80099f8:	42b3      	cmp	r3, r6
 80099fa:	b085      	sub	sp, #20
 80099fc:	bfb8      	it	lt
 80099fe:	3101      	addlt	r1, #1
 8009a00:	f7ff fe90 	bl	8009724 <_Balloc>
 8009a04:	b930      	cbnz	r0, 8009a14 <__multiply+0x44>
 8009a06:	4602      	mov	r2, r0
 8009a08:	4b44      	ldr	r3, [pc, #272]	; (8009b1c <__multiply+0x14c>)
 8009a0a:	4845      	ldr	r0, [pc, #276]	; (8009b20 <__multiply+0x150>)
 8009a0c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009a10:	f001 fc26 	bl	800b260 <__assert_func>
 8009a14:	f100 0514 	add.w	r5, r0, #20
 8009a18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a1c:	462b      	mov	r3, r5
 8009a1e:	2200      	movs	r2, #0
 8009a20:	4543      	cmp	r3, r8
 8009a22:	d321      	bcc.n	8009a68 <__multiply+0x98>
 8009a24:	f104 0314 	add.w	r3, r4, #20
 8009a28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a2c:	f109 0314 	add.w	r3, r9, #20
 8009a30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a34:	9202      	str	r2, [sp, #8]
 8009a36:	1b3a      	subs	r2, r7, r4
 8009a38:	3a15      	subs	r2, #21
 8009a3a:	f022 0203 	bic.w	r2, r2, #3
 8009a3e:	3204      	adds	r2, #4
 8009a40:	f104 0115 	add.w	r1, r4, #21
 8009a44:	428f      	cmp	r7, r1
 8009a46:	bf38      	it	cc
 8009a48:	2204      	movcc	r2, #4
 8009a4a:	9201      	str	r2, [sp, #4]
 8009a4c:	9a02      	ldr	r2, [sp, #8]
 8009a4e:	9303      	str	r3, [sp, #12]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d80c      	bhi.n	8009a6e <__multiply+0x9e>
 8009a54:	2e00      	cmp	r6, #0
 8009a56:	dd03      	ble.n	8009a60 <__multiply+0x90>
 8009a58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d05b      	beq.n	8009b18 <__multiply+0x148>
 8009a60:	6106      	str	r6, [r0, #16]
 8009a62:	b005      	add	sp, #20
 8009a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a68:	f843 2b04 	str.w	r2, [r3], #4
 8009a6c:	e7d8      	b.n	8009a20 <__multiply+0x50>
 8009a6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a72:	f1ba 0f00 	cmp.w	sl, #0
 8009a76:	d024      	beq.n	8009ac2 <__multiply+0xf2>
 8009a78:	f104 0e14 	add.w	lr, r4, #20
 8009a7c:	46a9      	mov	r9, r5
 8009a7e:	f04f 0c00 	mov.w	ip, #0
 8009a82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a86:	f8d9 1000 	ldr.w	r1, [r9]
 8009a8a:	fa1f fb82 	uxth.w	fp, r2
 8009a8e:	b289      	uxth	r1, r1
 8009a90:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009a98:	f8d9 2000 	ldr.w	r2, [r9]
 8009a9c:	4461      	add	r1, ip
 8009a9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009aa2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009aa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009aaa:	b289      	uxth	r1, r1
 8009aac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ab0:	4577      	cmp	r7, lr
 8009ab2:	f849 1b04 	str.w	r1, [r9], #4
 8009ab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009aba:	d8e2      	bhi.n	8009a82 <__multiply+0xb2>
 8009abc:	9a01      	ldr	r2, [sp, #4]
 8009abe:	f845 c002 	str.w	ip, [r5, r2]
 8009ac2:	9a03      	ldr	r2, [sp, #12]
 8009ac4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ac8:	3304      	adds	r3, #4
 8009aca:	f1b9 0f00 	cmp.w	r9, #0
 8009ace:	d021      	beq.n	8009b14 <__multiply+0x144>
 8009ad0:	6829      	ldr	r1, [r5, #0]
 8009ad2:	f104 0c14 	add.w	ip, r4, #20
 8009ad6:	46ae      	mov	lr, r5
 8009ad8:	f04f 0a00 	mov.w	sl, #0
 8009adc:	f8bc b000 	ldrh.w	fp, [ip]
 8009ae0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ae4:	fb09 220b 	mla	r2, r9, fp, r2
 8009ae8:	4452      	add	r2, sl
 8009aea:	b289      	uxth	r1, r1
 8009aec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009af0:	f84e 1b04 	str.w	r1, [lr], #4
 8009af4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009af8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009afc:	f8be 1000 	ldrh.w	r1, [lr]
 8009b00:	fb09 110a 	mla	r1, r9, sl, r1
 8009b04:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009b08:	4567      	cmp	r7, ip
 8009b0a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b0e:	d8e5      	bhi.n	8009adc <__multiply+0x10c>
 8009b10:	9a01      	ldr	r2, [sp, #4]
 8009b12:	50a9      	str	r1, [r5, r2]
 8009b14:	3504      	adds	r5, #4
 8009b16:	e799      	b.n	8009a4c <__multiply+0x7c>
 8009b18:	3e01      	subs	r6, #1
 8009b1a:	e79b      	b.n	8009a54 <__multiply+0x84>
 8009b1c:	0800c271 	.word	0x0800c271
 8009b20:	0800c282 	.word	0x0800c282

08009b24 <__pow5mult>:
 8009b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b28:	4615      	mov	r5, r2
 8009b2a:	f012 0203 	ands.w	r2, r2, #3
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	d007      	beq.n	8009b44 <__pow5mult+0x20>
 8009b34:	4c25      	ldr	r4, [pc, #148]	; (8009bcc <__pow5mult+0xa8>)
 8009b36:	3a01      	subs	r2, #1
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b3e:	f7ff fe53 	bl	80097e8 <__multadd>
 8009b42:	4607      	mov	r7, r0
 8009b44:	10ad      	asrs	r5, r5, #2
 8009b46:	d03d      	beq.n	8009bc4 <__pow5mult+0xa0>
 8009b48:	69f4      	ldr	r4, [r6, #28]
 8009b4a:	b97c      	cbnz	r4, 8009b6c <__pow5mult+0x48>
 8009b4c:	2010      	movs	r0, #16
 8009b4e:	f7ff fd35 	bl	80095bc <malloc>
 8009b52:	4602      	mov	r2, r0
 8009b54:	61f0      	str	r0, [r6, #28]
 8009b56:	b928      	cbnz	r0, 8009b64 <__pow5mult+0x40>
 8009b58:	4b1d      	ldr	r3, [pc, #116]	; (8009bd0 <__pow5mult+0xac>)
 8009b5a:	481e      	ldr	r0, [pc, #120]	; (8009bd4 <__pow5mult+0xb0>)
 8009b5c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009b60:	f001 fb7e 	bl	800b260 <__assert_func>
 8009b64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b68:	6004      	str	r4, [r0, #0]
 8009b6a:	60c4      	str	r4, [r0, #12]
 8009b6c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009b70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b74:	b94c      	cbnz	r4, 8009b8a <__pow5mult+0x66>
 8009b76:	f240 2171 	movw	r1, #625	; 0x271
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f7ff ff12 	bl	80099a4 <__i2b>
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b86:	4604      	mov	r4, r0
 8009b88:	6003      	str	r3, [r0, #0]
 8009b8a:	f04f 0900 	mov.w	r9, #0
 8009b8e:	07eb      	lsls	r3, r5, #31
 8009b90:	d50a      	bpl.n	8009ba8 <__pow5mult+0x84>
 8009b92:	4639      	mov	r1, r7
 8009b94:	4622      	mov	r2, r4
 8009b96:	4630      	mov	r0, r6
 8009b98:	f7ff ff1a 	bl	80099d0 <__multiply>
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7ff fdff 	bl	80097a4 <_Bfree>
 8009ba6:	4647      	mov	r7, r8
 8009ba8:	106d      	asrs	r5, r5, #1
 8009baa:	d00b      	beq.n	8009bc4 <__pow5mult+0xa0>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	b938      	cbnz	r0, 8009bc0 <__pow5mult+0x9c>
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7ff ff0b 	bl	80099d0 <__multiply>
 8009bba:	6020      	str	r0, [r4, #0]
 8009bbc:	f8c0 9000 	str.w	r9, [r0]
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	e7e4      	b.n	8009b8e <__pow5mult+0x6a>
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bca:	bf00      	nop
 8009bcc:	0800c3d0 	.word	0x0800c3d0
 8009bd0:	0800c202 	.word	0x0800c202
 8009bd4:	0800c282 	.word	0x0800c282

08009bd8 <__lshift>:
 8009bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bdc:	460c      	mov	r4, r1
 8009bde:	6849      	ldr	r1, [r1, #4]
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009be6:	68a3      	ldr	r3, [r4, #8]
 8009be8:	4607      	mov	r7, r0
 8009bea:	4691      	mov	r9, r2
 8009bec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bf0:	f108 0601 	add.w	r6, r8, #1
 8009bf4:	42b3      	cmp	r3, r6
 8009bf6:	db0b      	blt.n	8009c10 <__lshift+0x38>
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	f7ff fd93 	bl	8009724 <_Balloc>
 8009bfe:	4605      	mov	r5, r0
 8009c00:	b948      	cbnz	r0, 8009c16 <__lshift+0x3e>
 8009c02:	4602      	mov	r2, r0
 8009c04:	4b28      	ldr	r3, [pc, #160]	; (8009ca8 <__lshift+0xd0>)
 8009c06:	4829      	ldr	r0, [pc, #164]	; (8009cac <__lshift+0xd4>)
 8009c08:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009c0c:	f001 fb28 	bl	800b260 <__assert_func>
 8009c10:	3101      	adds	r1, #1
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	e7ee      	b.n	8009bf4 <__lshift+0x1c>
 8009c16:	2300      	movs	r3, #0
 8009c18:	f100 0114 	add.w	r1, r0, #20
 8009c1c:	f100 0210 	add.w	r2, r0, #16
 8009c20:	4618      	mov	r0, r3
 8009c22:	4553      	cmp	r3, sl
 8009c24:	db33      	blt.n	8009c8e <__lshift+0xb6>
 8009c26:	6920      	ldr	r0, [r4, #16]
 8009c28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c2c:	f104 0314 	add.w	r3, r4, #20
 8009c30:	f019 091f 	ands.w	r9, r9, #31
 8009c34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c3c:	d02b      	beq.n	8009c96 <__lshift+0xbe>
 8009c3e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c42:	468a      	mov	sl, r1
 8009c44:	2200      	movs	r2, #0
 8009c46:	6818      	ldr	r0, [r3, #0]
 8009c48:	fa00 f009 	lsl.w	r0, r0, r9
 8009c4c:	4310      	orrs	r0, r2
 8009c4e:	f84a 0b04 	str.w	r0, [sl], #4
 8009c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c56:	459c      	cmp	ip, r3
 8009c58:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c5c:	d8f3      	bhi.n	8009c46 <__lshift+0x6e>
 8009c5e:	ebac 0304 	sub.w	r3, ip, r4
 8009c62:	3b15      	subs	r3, #21
 8009c64:	f023 0303 	bic.w	r3, r3, #3
 8009c68:	3304      	adds	r3, #4
 8009c6a:	f104 0015 	add.w	r0, r4, #21
 8009c6e:	4584      	cmp	ip, r0
 8009c70:	bf38      	it	cc
 8009c72:	2304      	movcc	r3, #4
 8009c74:	50ca      	str	r2, [r1, r3]
 8009c76:	b10a      	cbz	r2, 8009c7c <__lshift+0xa4>
 8009c78:	f108 0602 	add.w	r6, r8, #2
 8009c7c:	3e01      	subs	r6, #1
 8009c7e:	4638      	mov	r0, r7
 8009c80:	612e      	str	r6, [r5, #16]
 8009c82:	4621      	mov	r1, r4
 8009c84:	f7ff fd8e 	bl	80097a4 <_Bfree>
 8009c88:	4628      	mov	r0, r5
 8009c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c92:	3301      	adds	r3, #1
 8009c94:	e7c5      	b.n	8009c22 <__lshift+0x4a>
 8009c96:	3904      	subs	r1, #4
 8009c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ca0:	459c      	cmp	ip, r3
 8009ca2:	d8f9      	bhi.n	8009c98 <__lshift+0xc0>
 8009ca4:	e7ea      	b.n	8009c7c <__lshift+0xa4>
 8009ca6:	bf00      	nop
 8009ca8:	0800c271 	.word	0x0800c271
 8009cac:	0800c282 	.word	0x0800c282

08009cb0 <__mcmp>:
 8009cb0:	b530      	push	{r4, r5, lr}
 8009cb2:	6902      	ldr	r2, [r0, #16]
 8009cb4:	690c      	ldr	r4, [r1, #16]
 8009cb6:	1b12      	subs	r2, r2, r4
 8009cb8:	d10e      	bne.n	8009cd8 <__mcmp+0x28>
 8009cba:	f100 0314 	add.w	r3, r0, #20
 8009cbe:	3114      	adds	r1, #20
 8009cc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009cc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009cc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ccc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cd0:	42a5      	cmp	r5, r4
 8009cd2:	d003      	beq.n	8009cdc <__mcmp+0x2c>
 8009cd4:	d305      	bcc.n	8009ce2 <__mcmp+0x32>
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	4610      	mov	r0, r2
 8009cda:	bd30      	pop	{r4, r5, pc}
 8009cdc:	4283      	cmp	r3, r0
 8009cde:	d3f3      	bcc.n	8009cc8 <__mcmp+0x18>
 8009ce0:	e7fa      	b.n	8009cd8 <__mcmp+0x28>
 8009ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce6:	e7f7      	b.n	8009cd8 <__mcmp+0x28>

08009ce8 <__mdiff>:
 8009ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	460c      	mov	r4, r1
 8009cee:	4606      	mov	r6, r0
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	4690      	mov	r8, r2
 8009cf6:	f7ff ffdb 	bl	8009cb0 <__mcmp>
 8009cfa:	1e05      	subs	r5, r0, #0
 8009cfc:	d110      	bne.n	8009d20 <__mdiff+0x38>
 8009cfe:	4629      	mov	r1, r5
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7ff fd0f 	bl	8009724 <_Balloc>
 8009d06:	b930      	cbnz	r0, 8009d16 <__mdiff+0x2e>
 8009d08:	4b3a      	ldr	r3, [pc, #232]	; (8009df4 <__mdiff+0x10c>)
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	f240 2137 	movw	r1, #567	; 0x237
 8009d10:	4839      	ldr	r0, [pc, #228]	; (8009df8 <__mdiff+0x110>)
 8009d12:	f001 faa5 	bl	800b260 <__assert_func>
 8009d16:	2301      	movs	r3, #1
 8009d18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d20:	bfa4      	itt	ge
 8009d22:	4643      	movge	r3, r8
 8009d24:	46a0      	movge	r8, r4
 8009d26:	4630      	mov	r0, r6
 8009d28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d2c:	bfa6      	itte	ge
 8009d2e:	461c      	movge	r4, r3
 8009d30:	2500      	movge	r5, #0
 8009d32:	2501      	movlt	r5, #1
 8009d34:	f7ff fcf6 	bl	8009724 <_Balloc>
 8009d38:	b920      	cbnz	r0, 8009d44 <__mdiff+0x5c>
 8009d3a:	4b2e      	ldr	r3, [pc, #184]	; (8009df4 <__mdiff+0x10c>)
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	f240 2145 	movw	r1, #581	; 0x245
 8009d42:	e7e5      	b.n	8009d10 <__mdiff+0x28>
 8009d44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d48:	6926      	ldr	r6, [r4, #16]
 8009d4a:	60c5      	str	r5, [r0, #12]
 8009d4c:	f104 0914 	add.w	r9, r4, #20
 8009d50:	f108 0514 	add.w	r5, r8, #20
 8009d54:	f100 0e14 	add.w	lr, r0, #20
 8009d58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009d5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d60:	f108 0210 	add.w	r2, r8, #16
 8009d64:	46f2      	mov	sl, lr
 8009d66:	2100      	movs	r1, #0
 8009d68:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d70:	fa11 f88b 	uxtah	r8, r1, fp
 8009d74:	b299      	uxth	r1, r3
 8009d76:	0c1b      	lsrs	r3, r3, #16
 8009d78:	eba8 0801 	sub.w	r8, r8, r1
 8009d7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d80:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d84:	fa1f f888 	uxth.w	r8, r8
 8009d88:	1419      	asrs	r1, r3, #16
 8009d8a:	454e      	cmp	r6, r9
 8009d8c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d90:	f84a 3b04 	str.w	r3, [sl], #4
 8009d94:	d8e8      	bhi.n	8009d68 <__mdiff+0x80>
 8009d96:	1b33      	subs	r3, r6, r4
 8009d98:	3b15      	subs	r3, #21
 8009d9a:	f023 0303 	bic.w	r3, r3, #3
 8009d9e:	3304      	adds	r3, #4
 8009da0:	3415      	adds	r4, #21
 8009da2:	42a6      	cmp	r6, r4
 8009da4:	bf38      	it	cc
 8009da6:	2304      	movcc	r3, #4
 8009da8:	441d      	add	r5, r3
 8009daa:	4473      	add	r3, lr
 8009dac:	469e      	mov	lr, r3
 8009dae:	462e      	mov	r6, r5
 8009db0:	4566      	cmp	r6, ip
 8009db2:	d30e      	bcc.n	8009dd2 <__mdiff+0xea>
 8009db4:	f10c 0203 	add.w	r2, ip, #3
 8009db8:	1b52      	subs	r2, r2, r5
 8009dba:	f022 0203 	bic.w	r2, r2, #3
 8009dbe:	3d03      	subs	r5, #3
 8009dc0:	45ac      	cmp	ip, r5
 8009dc2:	bf38      	it	cc
 8009dc4:	2200      	movcc	r2, #0
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009dcc:	b17a      	cbz	r2, 8009dee <__mdiff+0x106>
 8009dce:	6107      	str	r7, [r0, #16]
 8009dd0:	e7a4      	b.n	8009d1c <__mdiff+0x34>
 8009dd2:	f856 8b04 	ldr.w	r8, [r6], #4
 8009dd6:	fa11 f288 	uxtah	r2, r1, r8
 8009dda:	1414      	asrs	r4, r2, #16
 8009ddc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009de0:	b292      	uxth	r2, r2
 8009de2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009de6:	f84e 2b04 	str.w	r2, [lr], #4
 8009dea:	1421      	asrs	r1, r4, #16
 8009dec:	e7e0      	b.n	8009db0 <__mdiff+0xc8>
 8009dee:	3f01      	subs	r7, #1
 8009df0:	e7ea      	b.n	8009dc8 <__mdiff+0xe0>
 8009df2:	bf00      	nop
 8009df4:	0800c271 	.word	0x0800c271
 8009df8:	0800c282 	.word	0x0800c282

08009dfc <__ulp>:
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	ed8d 0b00 	vstr	d0, [sp]
 8009e02:	9a01      	ldr	r2, [sp, #4]
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <__ulp+0x48>)
 8009e06:	4013      	ands	r3, r2
 8009e08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dc08      	bgt.n	8009e22 <__ulp+0x26>
 8009e10:	425b      	negs	r3, r3
 8009e12:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009e16:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e1a:	da04      	bge.n	8009e26 <__ulp+0x2a>
 8009e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e20:	4113      	asrs	r3, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	e008      	b.n	8009e38 <__ulp+0x3c>
 8009e26:	f1a2 0314 	sub.w	r3, r2, #20
 8009e2a:	2b1e      	cmp	r3, #30
 8009e2c:	bfda      	itte	le
 8009e2e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009e32:	40da      	lsrle	r2, r3
 8009e34:	2201      	movgt	r2, #1
 8009e36:	2300      	movs	r3, #0
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	ec41 0b10 	vmov	d0, r0, r1
 8009e40:	b002      	add	sp, #8
 8009e42:	4770      	bx	lr
 8009e44:	7ff00000 	.word	0x7ff00000

08009e48 <__b2d>:
 8009e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	6906      	ldr	r6, [r0, #16]
 8009e4e:	f100 0814 	add.w	r8, r0, #20
 8009e52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009e56:	1f37      	subs	r7, r6, #4
 8009e58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f7ff fd53 	bl	8009908 <__hi0bits>
 8009e62:	f1c0 0320 	rsb	r3, r0, #32
 8009e66:	280a      	cmp	r0, #10
 8009e68:	600b      	str	r3, [r1, #0]
 8009e6a:	491b      	ldr	r1, [pc, #108]	; (8009ed8 <__b2d+0x90>)
 8009e6c:	dc15      	bgt.n	8009e9a <__b2d+0x52>
 8009e6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e72:	fa22 f30c 	lsr.w	r3, r2, ip
 8009e76:	45b8      	cmp	r8, r7
 8009e78:	ea43 0501 	orr.w	r5, r3, r1
 8009e7c:	bf34      	ite	cc
 8009e7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e82:	2300      	movcs	r3, #0
 8009e84:	3015      	adds	r0, #21
 8009e86:	fa02 f000 	lsl.w	r0, r2, r0
 8009e8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009e8e:	4303      	orrs	r3, r0
 8009e90:	461c      	mov	r4, r3
 8009e92:	ec45 4b10 	vmov	d0, r4, r5
 8009e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e9a:	45b8      	cmp	r8, r7
 8009e9c:	bf3a      	itte	cc
 8009e9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ea2:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ea6:	2300      	movcs	r3, #0
 8009ea8:	380b      	subs	r0, #11
 8009eaa:	d012      	beq.n	8009ed2 <__b2d+0x8a>
 8009eac:	f1c0 0120 	rsb	r1, r0, #32
 8009eb0:	fa23 f401 	lsr.w	r4, r3, r1
 8009eb4:	4082      	lsls	r2, r0
 8009eb6:	4322      	orrs	r2, r4
 8009eb8:	4547      	cmp	r7, r8
 8009eba:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009ebe:	bf8c      	ite	hi
 8009ec0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009ec4:	2200      	movls	r2, #0
 8009ec6:	4083      	lsls	r3, r0
 8009ec8:	40ca      	lsrs	r2, r1
 8009eca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	e7de      	b.n	8009e90 <__b2d+0x48>
 8009ed2:	ea42 0501 	orr.w	r5, r2, r1
 8009ed6:	e7db      	b.n	8009e90 <__b2d+0x48>
 8009ed8:	3ff00000 	.word	0x3ff00000

08009edc <__d2b>:
 8009edc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ee0:	460f      	mov	r7, r1
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	ec59 8b10 	vmov	r8, r9, d0
 8009ee8:	4616      	mov	r6, r2
 8009eea:	f7ff fc1b 	bl	8009724 <_Balloc>
 8009eee:	4604      	mov	r4, r0
 8009ef0:	b930      	cbnz	r0, 8009f00 <__d2b+0x24>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <__d2b+0xac>)
 8009ef6:	4825      	ldr	r0, [pc, #148]	; (8009f8c <__d2b+0xb0>)
 8009ef8:	f240 310f 	movw	r1, #783	; 0x30f
 8009efc:	f001 f9b0 	bl	800b260 <__assert_func>
 8009f00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f08:	bb2d      	cbnz	r5, 8009f56 <__d2b+0x7a>
 8009f0a:	9301      	str	r3, [sp, #4]
 8009f0c:	f1b8 0300 	subs.w	r3, r8, #0
 8009f10:	d026      	beq.n	8009f60 <__d2b+0x84>
 8009f12:	4668      	mov	r0, sp
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	f7ff fd17 	bl	8009948 <__lo0bits>
 8009f1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f1e:	b1e8      	cbz	r0, 8009f5c <__d2b+0x80>
 8009f20:	f1c0 0320 	rsb	r3, r0, #32
 8009f24:	fa02 f303 	lsl.w	r3, r2, r3
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	40c2      	lsrs	r2, r0
 8009f2c:	6163      	str	r3, [r4, #20]
 8009f2e:	9201      	str	r2, [sp, #4]
 8009f30:	9b01      	ldr	r3, [sp, #4]
 8009f32:	61a3      	str	r3, [r4, #24]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	bf14      	ite	ne
 8009f38:	2202      	movne	r2, #2
 8009f3a:	2201      	moveq	r2, #1
 8009f3c:	6122      	str	r2, [r4, #16]
 8009f3e:	b1bd      	cbz	r5, 8009f70 <__d2b+0x94>
 8009f40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f44:	4405      	add	r5, r0
 8009f46:	603d      	str	r5, [r7, #0]
 8009f48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f4c:	6030      	str	r0, [r6, #0]
 8009f4e:	4620      	mov	r0, r4
 8009f50:	b003      	add	sp, #12
 8009f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f5a:	e7d6      	b.n	8009f0a <__d2b+0x2e>
 8009f5c:	6161      	str	r1, [r4, #20]
 8009f5e:	e7e7      	b.n	8009f30 <__d2b+0x54>
 8009f60:	a801      	add	r0, sp, #4
 8009f62:	f7ff fcf1 	bl	8009948 <__lo0bits>
 8009f66:	9b01      	ldr	r3, [sp, #4]
 8009f68:	6163      	str	r3, [r4, #20]
 8009f6a:	3020      	adds	r0, #32
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	e7e5      	b.n	8009f3c <__d2b+0x60>
 8009f70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f78:	6038      	str	r0, [r7, #0]
 8009f7a:	6918      	ldr	r0, [r3, #16]
 8009f7c:	f7ff fcc4 	bl	8009908 <__hi0bits>
 8009f80:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f84:	e7e2      	b.n	8009f4c <__d2b+0x70>
 8009f86:	bf00      	nop
 8009f88:	0800c271 	.word	0x0800c271
 8009f8c:	0800c282 	.word	0x0800c282

08009f90 <__ratio>:
 8009f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	4688      	mov	r8, r1
 8009f96:	4669      	mov	r1, sp
 8009f98:	4681      	mov	r9, r0
 8009f9a:	f7ff ff55 	bl	8009e48 <__b2d>
 8009f9e:	a901      	add	r1, sp, #4
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	ec55 4b10 	vmov	r4, r5, d0
 8009fa6:	f7ff ff4f 	bl	8009e48 <__b2d>
 8009faa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fb2:	eba3 0c02 	sub.w	ip, r3, r2
 8009fb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fba:	1a9b      	subs	r3, r3, r2
 8009fbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009fc0:	ec51 0b10 	vmov	r0, r1, d0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bfd6      	itet	le
 8009fc8:	460a      	movle	r2, r1
 8009fca:	462a      	movgt	r2, r5
 8009fcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	462f      	mov	r7, r5
 8009fd4:	bfd4      	ite	le
 8009fd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009fda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009fde:	4620      	mov	r0, r4
 8009fe0:	ee10 2a10 	vmov	r2, s0
 8009fe4:	465b      	mov	r3, fp
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	f7f6 fc38 	bl	800085c <__aeabi_ddiv>
 8009fec:	ec41 0b10 	vmov	d0, r0, r1
 8009ff0:	b003      	add	sp, #12
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ff6 <__copybits>:
 8009ff6:	3901      	subs	r1, #1
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	1149      	asrs	r1, r1, #5
 8009ffc:	6914      	ldr	r4, [r2, #16]
 8009ffe:	3101      	adds	r1, #1
 800a000:	f102 0314 	add.w	r3, r2, #20
 800a004:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a008:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a00c:	1f05      	subs	r5, r0, #4
 800a00e:	42a3      	cmp	r3, r4
 800a010:	d30c      	bcc.n	800a02c <__copybits+0x36>
 800a012:	1aa3      	subs	r3, r4, r2
 800a014:	3b11      	subs	r3, #17
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	3211      	adds	r2, #17
 800a01c:	42a2      	cmp	r2, r4
 800a01e:	bf88      	it	hi
 800a020:	2300      	movhi	r3, #0
 800a022:	4418      	add	r0, r3
 800a024:	2300      	movs	r3, #0
 800a026:	4288      	cmp	r0, r1
 800a028:	d305      	bcc.n	800a036 <__copybits+0x40>
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a030:	f845 6f04 	str.w	r6, [r5, #4]!
 800a034:	e7eb      	b.n	800a00e <__copybits+0x18>
 800a036:	f840 3b04 	str.w	r3, [r0], #4
 800a03a:	e7f4      	b.n	800a026 <__copybits+0x30>

0800a03c <__any_on>:
 800a03c:	f100 0214 	add.w	r2, r0, #20
 800a040:	6900      	ldr	r0, [r0, #16]
 800a042:	114b      	asrs	r3, r1, #5
 800a044:	4298      	cmp	r0, r3
 800a046:	b510      	push	{r4, lr}
 800a048:	db11      	blt.n	800a06e <__any_on+0x32>
 800a04a:	dd0a      	ble.n	800a062 <__any_on+0x26>
 800a04c:	f011 011f 	ands.w	r1, r1, #31
 800a050:	d007      	beq.n	800a062 <__any_on+0x26>
 800a052:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a056:	fa24 f001 	lsr.w	r0, r4, r1
 800a05a:	fa00 f101 	lsl.w	r1, r0, r1
 800a05e:	428c      	cmp	r4, r1
 800a060:	d10b      	bne.n	800a07a <__any_on+0x3e>
 800a062:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a066:	4293      	cmp	r3, r2
 800a068:	d803      	bhi.n	800a072 <__any_on+0x36>
 800a06a:	2000      	movs	r0, #0
 800a06c:	bd10      	pop	{r4, pc}
 800a06e:	4603      	mov	r3, r0
 800a070:	e7f7      	b.n	800a062 <__any_on+0x26>
 800a072:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a076:	2900      	cmp	r1, #0
 800a078:	d0f5      	beq.n	800a066 <__any_on+0x2a>
 800a07a:	2001      	movs	r0, #1
 800a07c:	e7f6      	b.n	800a06c <__any_on+0x30>

0800a07e <sulp>:
 800a07e:	b570      	push	{r4, r5, r6, lr}
 800a080:	4604      	mov	r4, r0
 800a082:	460d      	mov	r5, r1
 800a084:	ec45 4b10 	vmov	d0, r4, r5
 800a088:	4616      	mov	r6, r2
 800a08a:	f7ff feb7 	bl	8009dfc <__ulp>
 800a08e:	ec51 0b10 	vmov	r0, r1, d0
 800a092:	b17e      	cbz	r6, 800a0b4 <sulp+0x36>
 800a094:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a098:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dd09      	ble.n	800a0b4 <sulp+0x36>
 800a0a0:	051b      	lsls	r3, r3, #20
 800a0a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a0a6:	2400      	movs	r4, #0
 800a0a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a0ac:	4622      	mov	r2, r4
 800a0ae:	462b      	mov	r3, r5
 800a0b0:	f7f6 faaa 	bl	8000608 <__aeabi_dmul>
 800a0b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0b8 <_strtod_l>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	ed2d 8b02 	vpush	{d8}
 800a0c0:	b09b      	sub	sp, #108	; 0x6c
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	9213      	str	r2, [sp, #76]	; 0x4c
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	9216      	str	r2, [sp, #88]	; 0x58
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	f04f 0800 	mov.w	r8, #0
 800a0d0:	f04f 0900 	mov.w	r9, #0
 800a0d4:	460a      	mov	r2, r1
 800a0d6:	9215      	str	r2, [sp, #84]	; 0x54
 800a0d8:	7811      	ldrb	r1, [r2, #0]
 800a0da:	292b      	cmp	r1, #43	; 0x2b
 800a0dc:	d04c      	beq.n	800a178 <_strtod_l+0xc0>
 800a0de:	d83a      	bhi.n	800a156 <_strtod_l+0x9e>
 800a0e0:	290d      	cmp	r1, #13
 800a0e2:	d834      	bhi.n	800a14e <_strtod_l+0x96>
 800a0e4:	2908      	cmp	r1, #8
 800a0e6:	d834      	bhi.n	800a152 <_strtod_l+0x9a>
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	d03d      	beq.n	800a168 <_strtod_l+0xb0>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	920a      	str	r2, [sp, #40]	; 0x28
 800a0f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a0f2:	7832      	ldrb	r2, [r6, #0]
 800a0f4:	2a30      	cmp	r2, #48	; 0x30
 800a0f6:	f040 80b4 	bne.w	800a262 <_strtod_l+0x1aa>
 800a0fa:	7872      	ldrb	r2, [r6, #1]
 800a0fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a100:	2a58      	cmp	r2, #88	; 0x58
 800a102:	d170      	bne.n	800a1e6 <_strtod_l+0x12e>
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	ab16      	add	r3, sp, #88	; 0x58
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4a8e      	ldr	r2, [pc, #568]	; (800a348 <_strtod_l+0x290>)
 800a110:	ab17      	add	r3, sp, #92	; 0x5c
 800a112:	a915      	add	r1, sp, #84	; 0x54
 800a114:	4620      	mov	r0, r4
 800a116:	f001 f93f 	bl	800b398 <__gethex>
 800a11a:	f010 070f 	ands.w	r7, r0, #15
 800a11e:	4605      	mov	r5, r0
 800a120:	d005      	beq.n	800a12e <_strtod_l+0x76>
 800a122:	2f06      	cmp	r7, #6
 800a124:	d12a      	bne.n	800a17c <_strtod_l+0xc4>
 800a126:	3601      	adds	r6, #1
 800a128:	2300      	movs	r3, #0
 800a12a:	9615      	str	r6, [sp, #84]	; 0x54
 800a12c:	930a      	str	r3, [sp, #40]	; 0x28
 800a12e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a130:	2b00      	cmp	r3, #0
 800a132:	f040 857f 	bne.w	800ac34 <_strtod_l+0xb7c>
 800a136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a138:	b1db      	cbz	r3, 800a172 <_strtod_l+0xba>
 800a13a:	4642      	mov	r2, r8
 800a13c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a140:	ec43 2b10 	vmov	d0, r2, r3
 800a144:	b01b      	add	sp, #108	; 0x6c
 800a146:	ecbd 8b02 	vpop	{d8}
 800a14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14e:	2920      	cmp	r1, #32
 800a150:	d1cc      	bne.n	800a0ec <_strtod_l+0x34>
 800a152:	3201      	adds	r2, #1
 800a154:	e7bf      	b.n	800a0d6 <_strtod_l+0x1e>
 800a156:	292d      	cmp	r1, #45	; 0x2d
 800a158:	d1c8      	bne.n	800a0ec <_strtod_l+0x34>
 800a15a:	2101      	movs	r1, #1
 800a15c:	910a      	str	r1, [sp, #40]	; 0x28
 800a15e:	1c51      	adds	r1, r2, #1
 800a160:	9115      	str	r1, [sp, #84]	; 0x54
 800a162:	7852      	ldrb	r2, [r2, #1]
 800a164:	2a00      	cmp	r2, #0
 800a166:	d1c3      	bne.n	800a0f0 <_strtod_l+0x38>
 800a168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a16a:	9515      	str	r5, [sp, #84]	; 0x54
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f040 855f 	bne.w	800ac30 <_strtod_l+0xb78>
 800a172:	4642      	mov	r2, r8
 800a174:	464b      	mov	r3, r9
 800a176:	e7e3      	b.n	800a140 <_strtod_l+0x88>
 800a178:	2100      	movs	r1, #0
 800a17a:	e7ef      	b.n	800a15c <_strtod_l+0xa4>
 800a17c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a17e:	b13a      	cbz	r2, 800a190 <_strtod_l+0xd8>
 800a180:	2135      	movs	r1, #53	; 0x35
 800a182:	a818      	add	r0, sp, #96	; 0x60
 800a184:	f7ff ff37 	bl	8009ff6 <__copybits>
 800a188:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a18a:	4620      	mov	r0, r4
 800a18c:	f7ff fb0a 	bl	80097a4 <_Bfree>
 800a190:	3f01      	subs	r7, #1
 800a192:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a194:	2f04      	cmp	r7, #4
 800a196:	d806      	bhi.n	800a1a6 <_strtod_l+0xee>
 800a198:	e8df f007 	tbb	[pc, r7]
 800a19c:	201d0314 	.word	0x201d0314
 800a1a0:	14          	.byte	0x14
 800a1a1:	00          	.byte	0x00
 800a1a2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a1a6:	05e9      	lsls	r1, r5, #23
 800a1a8:	bf48      	it	mi
 800a1aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a1ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1b2:	0d1b      	lsrs	r3, r3, #20
 800a1b4:	051b      	lsls	r3, r3, #20
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1b9      	bne.n	800a12e <_strtod_l+0x76>
 800a1ba:	f7fe fb05 	bl	80087c8 <__errno>
 800a1be:	2322      	movs	r3, #34	; 0x22
 800a1c0:	6003      	str	r3, [r0, #0]
 800a1c2:	e7b4      	b.n	800a12e <_strtod_l+0x76>
 800a1c4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a1c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a1cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a1d4:	e7e7      	b.n	800a1a6 <_strtod_l+0xee>
 800a1d6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a350 <_strtod_l+0x298>
 800a1da:	e7e4      	b.n	800a1a6 <_strtod_l+0xee>
 800a1dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a1e0:	f04f 38ff 	mov.w	r8, #4294967295
 800a1e4:	e7df      	b.n	800a1a6 <_strtod_l+0xee>
 800a1e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	9215      	str	r2, [sp, #84]	; 0x54
 800a1ec:	785b      	ldrb	r3, [r3, #1]
 800a1ee:	2b30      	cmp	r3, #48	; 0x30
 800a1f0:	d0f9      	beq.n	800a1e6 <_strtod_l+0x12e>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d09b      	beq.n	800a12e <_strtod_l+0x76>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	f04f 0a00 	mov.w	sl, #0
 800a1fc:	9304      	str	r3, [sp, #16]
 800a1fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a200:	930b      	str	r3, [sp, #44]	; 0x2c
 800a202:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a206:	46d3      	mov	fp, sl
 800a208:	220a      	movs	r2, #10
 800a20a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a20c:	7806      	ldrb	r6, [r0, #0]
 800a20e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a212:	b2d9      	uxtb	r1, r3
 800a214:	2909      	cmp	r1, #9
 800a216:	d926      	bls.n	800a266 <_strtod_l+0x1ae>
 800a218:	494c      	ldr	r1, [pc, #304]	; (800a34c <_strtod_l+0x294>)
 800a21a:	2201      	movs	r2, #1
 800a21c:	f000 ffe6 	bl	800b1ec <strncmp>
 800a220:	2800      	cmp	r0, #0
 800a222:	d030      	beq.n	800a286 <_strtod_l+0x1ce>
 800a224:	2000      	movs	r0, #0
 800a226:	4632      	mov	r2, r6
 800a228:	9005      	str	r0, [sp, #20]
 800a22a:	465e      	mov	r6, fp
 800a22c:	4603      	mov	r3, r0
 800a22e:	2a65      	cmp	r2, #101	; 0x65
 800a230:	d001      	beq.n	800a236 <_strtod_l+0x17e>
 800a232:	2a45      	cmp	r2, #69	; 0x45
 800a234:	d113      	bne.n	800a25e <_strtod_l+0x1a6>
 800a236:	b91e      	cbnz	r6, 800a240 <_strtod_l+0x188>
 800a238:	9a04      	ldr	r2, [sp, #16]
 800a23a:	4302      	orrs	r2, r0
 800a23c:	d094      	beq.n	800a168 <_strtod_l+0xb0>
 800a23e:	2600      	movs	r6, #0
 800a240:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a242:	1c6a      	adds	r2, r5, #1
 800a244:	9215      	str	r2, [sp, #84]	; 0x54
 800a246:	786a      	ldrb	r2, [r5, #1]
 800a248:	2a2b      	cmp	r2, #43	; 0x2b
 800a24a:	d074      	beq.n	800a336 <_strtod_l+0x27e>
 800a24c:	2a2d      	cmp	r2, #45	; 0x2d
 800a24e:	d078      	beq.n	800a342 <_strtod_l+0x28a>
 800a250:	f04f 0c00 	mov.w	ip, #0
 800a254:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a258:	2909      	cmp	r1, #9
 800a25a:	d97f      	bls.n	800a35c <_strtod_l+0x2a4>
 800a25c:	9515      	str	r5, [sp, #84]	; 0x54
 800a25e:	2700      	movs	r7, #0
 800a260:	e09e      	b.n	800a3a0 <_strtod_l+0x2e8>
 800a262:	2300      	movs	r3, #0
 800a264:	e7c8      	b.n	800a1f8 <_strtod_l+0x140>
 800a266:	f1bb 0f08 	cmp.w	fp, #8
 800a26a:	bfd8      	it	le
 800a26c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a26e:	f100 0001 	add.w	r0, r0, #1
 800a272:	bfda      	itte	le
 800a274:	fb02 3301 	mlale	r3, r2, r1, r3
 800a278:	9309      	strle	r3, [sp, #36]	; 0x24
 800a27a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a27e:	f10b 0b01 	add.w	fp, fp, #1
 800a282:	9015      	str	r0, [sp, #84]	; 0x54
 800a284:	e7c1      	b.n	800a20a <_strtod_l+0x152>
 800a286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	9215      	str	r2, [sp, #84]	; 0x54
 800a28c:	785a      	ldrb	r2, [r3, #1]
 800a28e:	f1bb 0f00 	cmp.w	fp, #0
 800a292:	d037      	beq.n	800a304 <_strtod_l+0x24c>
 800a294:	9005      	str	r0, [sp, #20]
 800a296:	465e      	mov	r6, fp
 800a298:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a29c:	2b09      	cmp	r3, #9
 800a29e:	d912      	bls.n	800a2c6 <_strtod_l+0x20e>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e7c4      	b.n	800a22e <_strtod_l+0x176>
 800a2a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	9215      	str	r2, [sp, #84]	; 0x54
 800a2aa:	785a      	ldrb	r2, [r3, #1]
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	2a30      	cmp	r2, #48	; 0x30
 800a2b0:	d0f8      	beq.n	800a2a4 <_strtod_l+0x1ec>
 800a2b2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a2b6:	2b08      	cmp	r3, #8
 800a2b8:	f200 84c1 	bhi.w	800ac3e <_strtod_l+0xb86>
 800a2bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2be:	9005      	str	r0, [sp, #20]
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	3a30      	subs	r2, #48	; 0x30
 800a2c8:	f100 0301 	add.w	r3, r0, #1
 800a2cc:	d014      	beq.n	800a2f8 <_strtod_l+0x240>
 800a2ce:	9905      	ldr	r1, [sp, #20]
 800a2d0:	4419      	add	r1, r3
 800a2d2:	9105      	str	r1, [sp, #20]
 800a2d4:	4633      	mov	r3, r6
 800a2d6:	eb00 0c06 	add.w	ip, r0, r6
 800a2da:	210a      	movs	r1, #10
 800a2dc:	4563      	cmp	r3, ip
 800a2de:	d113      	bne.n	800a308 <_strtod_l+0x250>
 800a2e0:	1833      	adds	r3, r6, r0
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	f106 0601 	add.w	r6, r6, #1
 800a2e8:	4406      	add	r6, r0
 800a2ea:	dc1a      	bgt.n	800a322 <_strtod_l+0x26a>
 800a2ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2ee:	230a      	movs	r3, #10
 800a2f0:	fb03 2301 	mla	r3, r3, r1, r2
 800a2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a2fa:	1c51      	adds	r1, r2, #1
 800a2fc:	9115      	str	r1, [sp, #84]	; 0x54
 800a2fe:	7852      	ldrb	r2, [r2, #1]
 800a300:	4618      	mov	r0, r3
 800a302:	e7c9      	b.n	800a298 <_strtod_l+0x1e0>
 800a304:	4658      	mov	r0, fp
 800a306:	e7d2      	b.n	800a2ae <_strtod_l+0x1f6>
 800a308:	2b08      	cmp	r3, #8
 800a30a:	f103 0301 	add.w	r3, r3, #1
 800a30e:	dc03      	bgt.n	800a318 <_strtod_l+0x260>
 800a310:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a312:	434f      	muls	r7, r1
 800a314:	9709      	str	r7, [sp, #36]	; 0x24
 800a316:	e7e1      	b.n	800a2dc <_strtod_l+0x224>
 800a318:	2b10      	cmp	r3, #16
 800a31a:	bfd8      	it	le
 800a31c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a320:	e7dc      	b.n	800a2dc <_strtod_l+0x224>
 800a322:	2e10      	cmp	r6, #16
 800a324:	bfdc      	itt	le
 800a326:	230a      	movle	r3, #10
 800a328:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a32c:	e7e3      	b.n	800a2f6 <_strtod_l+0x23e>
 800a32e:	2300      	movs	r3, #0
 800a330:	9305      	str	r3, [sp, #20]
 800a332:	2301      	movs	r3, #1
 800a334:	e780      	b.n	800a238 <_strtod_l+0x180>
 800a336:	f04f 0c00 	mov.w	ip, #0
 800a33a:	1caa      	adds	r2, r5, #2
 800a33c:	9215      	str	r2, [sp, #84]	; 0x54
 800a33e:	78aa      	ldrb	r2, [r5, #2]
 800a340:	e788      	b.n	800a254 <_strtod_l+0x19c>
 800a342:	f04f 0c01 	mov.w	ip, #1
 800a346:	e7f8      	b.n	800a33a <_strtod_l+0x282>
 800a348:	0800c3e0 	.word	0x0800c3e0
 800a34c:	0800c3dc 	.word	0x0800c3dc
 800a350:	7ff00000 	.word	0x7ff00000
 800a354:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a356:	1c51      	adds	r1, r2, #1
 800a358:	9115      	str	r1, [sp, #84]	; 0x54
 800a35a:	7852      	ldrb	r2, [r2, #1]
 800a35c:	2a30      	cmp	r2, #48	; 0x30
 800a35e:	d0f9      	beq.n	800a354 <_strtod_l+0x29c>
 800a360:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a364:	2908      	cmp	r1, #8
 800a366:	f63f af7a 	bhi.w	800a25e <_strtod_l+0x1a6>
 800a36a:	3a30      	subs	r2, #48	; 0x30
 800a36c:	9208      	str	r2, [sp, #32]
 800a36e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a370:	920c      	str	r2, [sp, #48]	; 0x30
 800a372:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a374:	1c57      	adds	r7, r2, #1
 800a376:	9715      	str	r7, [sp, #84]	; 0x54
 800a378:	7852      	ldrb	r2, [r2, #1]
 800a37a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a37e:	f1be 0f09 	cmp.w	lr, #9
 800a382:	d938      	bls.n	800a3f6 <_strtod_l+0x33e>
 800a384:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a386:	1a7f      	subs	r7, r7, r1
 800a388:	2f08      	cmp	r7, #8
 800a38a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a38e:	dc03      	bgt.n	800a398 <_strtod_l+0x2e0>
 800a390:	9908      	ldr	r1, [sp, #32]
 800a392:	428f      	cmp	r7, r1
 800a394:	bfa8      	it	ge
 800a396:	460f      	movge	r7, r1
 800a398:	f1bc 0f00 	cmp.w	ip, #0
 800a39c:	d000      	beq.n	800a3a0 <_strtod_l+0x2e8>
 800a39e:	427f      	negs	r7, r7
 800a3a0:	2e00      	cmp	r6, #0
 800a3a2:	d14f      	bne.n	800a444 <_strtod_l+0x38c>
 800a3a4:	9904      	ldr	r1, [sp, #16]
 800a3a6:	4301      	orrs	r1, r0
 800a3a8:	f47f aec1 	bne.w	800a12e <_strtod_l+0x76>
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f47f aedb 	bne.w	800a168 <_strtod_l+0xb0>
 800a3b2:	2a69      	cmp	r2, #105	; 0x69
 800a3b4:	d029      	beq.n	800a40a <_strtod_l+0x352>
 800a3b6:	dc26      	bgt.n	800a406 <_strtod_l+0x34e>
 800a3b8:	2a49      	cmp	r2, #73	; 0x49
 800a3ba:	d026      	beq.n	800a40a <_strtod_l+0x352>
 800a3bc:	2a4e      	cmp	r2, #78	; 0x4e
 800a3be:	f47f aed3 	bne.w	800a168 <_strtod_l+0xb0>
 800a3c2:	499b      	ldr	r1, [pc, #620]	; (800a630 <_strtod_l+0x578>)
 800a3c4:	a815      	add	r0, sp, #84	; 0x54
 800a3c6:	f001 fa27 	bl	800b818 <__match>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	f43f aecc 	beq.w	800a168 <_strtod_l+0xb0>
 800a3d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b28      	cmp	r3, #40	; 0x28
 800a3d6:	d12f      	bne.n	800a438 <_strtod_l+0x380>
 800a3d8:	4996      	ldr	r1, [pc, #600]	; (800a634 <_strtod_l+0x57c>)
 800a3da:	aa18      	add	r2, sp, #96	; 0x60
 800a3dc:	a815      	add	r0, sp, #84	; 0x54
 800a3de:	f001 fa2f 	bl	800b840 <__hexnan>
 800a3e2:	2805      	cmp	r0, #5
 800a3e4:	d128      	bne.n	800a438 <_strtod_l+0x380>
 800a3e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a3ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a3f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a3f4:	e69b      	b.n	800a12e <_strtod_l+0x76>
 800a3f6:	9f08      	ldr	r7, [sp, #32]
 800a3f8:	210a      	movs	r1, #10
 800a3fa:	fb01 2107 	mla	r1, r1, r7, r2
 800a3fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a402:	9208      	str	r2, [sp, #32]
 800a404:	e7b5      	b.n	800a372 <_strtod_l+0x2ba>
 800a406:	2a6e      	cmp	r2, #110	; 0x6e
 800a408:	e7d9      	b.n	800a3be <_strtod_l+0x306>
 800a40a:	498b      	ldr	r1, [pc, #556]	; (800a638 <_strtod_l+0x580>)
 800a40c:	a815      	add	r0, sp, #84	; 0x54
 800a40e:	f001 fa03 	bl	800b818 <__match>
 800a412:	2800      	cmp	r0, #0
 800a414:	f43f aea8 	beq.w	800a168 <_strtod_l+0xb0>
 800a418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a41a:	4988      	ldr	r1, [pc, #544]	; (800a63c <_strtod_l+0x584>)
 800a41c:	3b01      	subs	r3, #1
 800a41e:	a815      	add	r0, sp, #84	; 0x54
 800a420:	9315      	str	r3, [sp, #84]	; 0x54
 800a422:	f001 f9f9 	bl	800b818 <__match>
 800a426:	b910      	cbnz	r0, 800a42e <_strtod_l+0x376>
 800a428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a42a:	3301      	adds	r3, #1
 800a42c:	9315      	str	r3, [sp, #84]	; 0x54
 800a42e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a64c <_strtod_l+0x594>
 800a432:	f04f 0800 	mov.w	r8, #0
 800a436:	e67a      	b.n	800a12e <_strtod_l+0x76>
 800a438:	4881      	ldr	r0, [pc, #516]	; (800a640 <_strtod_l+0x588>)
 800a43a:	f000 ff09 	bl	800b250 <nan>
 800a43e:	ec59 8b10 	vmov	r8, r9, d0
 800a442:	e674      	b.n	800a12e <_strtod_l+0x76>
 800a444:	9b05      	ldr	r3, [sp, #20]
 800a446:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a448:	1afb      	subs	r3, r7, r3
 800a44a:	f1bb 0f00 	cmp.w	fp, #0
 800a44e:	bf08      	it	eq
 800a450:	46b3      	moveq	fp, r6
 800a452:	2e10      	cmp	r6, #16
 800a454:	9308      	str	r3, [sp, #32]
 800a456:	4635      	mov	r5, r6
 800a458:	bfa8      	it	ge
 800a45a:	2510      	movge	r5, #16
 800a45c:	f7f6 f85a 	bl	8000514 <__aeabi_ui2d>
 800a460:	2e09      	cmp	r6, #9
 800a462:	4680      	mov	r8, r0
 800a464:	4689      	mov	r9, r1
 800a466:	dd13      	ble.n	800a490 <_strtod_l+0x3d8>
 800a468:	4b76      	ldr	r3, [pc, #472]	; (800a644 <_strtod_l+0x58c>)
 800a46a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a46e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a472:	f7f6 f8c9 	bl	8000608 <__aeabi_dmul>
 800a476:	4680      	mov	r8, r0
 800a478:	4650      	mov	r0, sl
 800a47a:	4689      	mov	r9, r1
 800a47c:	f7f6 f84a 	bl	8000514 <__aeabi_ui2d>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4640      	mov	r0, r8
 800a486:	4649      	mov	r1, r9
 800a488:	f7f5 ff08 	bl	800029c <__adddf3>
 800a48c:	4680      	mov	r8, r0
 800a48e:	4689      	mov	r9, r1
 800a490:	2e0f      	cmp	r6, #15
 800a492:	dc38      	bgt.n	800a506 <_strtod_l+0x44e>
 800a494:	9b08      	ldr	r3, [sp, #32]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f43f ae49 	beq.w	800a12e <_strtod_l+0x76>
 800a49c:	dd24      	ble.n	800a4e8 <_strtod_l+0x430>
 800a49e:	2b16      	cmp	r3, #22
 800a4a0:	dc0b      	bgt.n	800a4ba <_strtod_l+0x402>
 800a4a2:	4968      	ldr	r1, [pc, #416]	; (800a644 <_strtod_l+0x58c>)
 800a4a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4ac:	4642      	mov	r2, r8
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	f7f6 f8aa 	bl	8000608 <__aeabi_dmul>
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	4689      	mov	r9, r1
 800a4b8:	e639      	b.n	800a12e <_strtod_l+0x76>
 800a4ba:	9a08      	ldr	r2, [sp, #32]
 800a4bc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	db20      	blt.n	800a506 <_strtod_l+0x44e>
 800a4c4:	4c5f      	ldr	r4, [pc, #380]	; (800a644 <_strtod_l+0x58c>)
 800a4c6:	f1c6 060f 	rsb	r6, r6, #15
 800a4ca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a4ce:	4642      	mov	r2, r8
 800a4d0:	464b      	mov	r3, r9
 800a4d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4d6:	f7f6 f897 	bl	8000608 <__aeabi_dmul>
 800a4da:	9b08      	ldr	r3, [sp, #32]
 800a4dc:	1b9e      	subs	r6, r3, r6
 800a4de:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a4e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a4e6:	e7e3      	b.n	800a4b0 <_strtod_l+0x3f8>
 800a4e8:	9b08      	ldr	r3, [sp, #32]
 800a4ea:	3316      	adds	r3, #22
 800a4ec:	db0b      	blt.n	800a506 <_strtod_l+0x44e>
 800a4ee:	9b05      	ldr	r3, [sp, #20]
 800a4f0:	1bdf      	subs	r7, r3, r7
 800a4f2:	4b54      	ldr	r3, [pc, #336]	; (800a644 <_strtod_l+0x58c>)
 800a4f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4fc:	4640      	mov	r0, r8
 800a4fe:	4649      	mov	r1, r9
 800a500:	f7f6 f9ac 	bl	800085c <__aeabi_ddiv>
 800a504:	e7d6      	b.n	800a4b4 <_strtod_l+0x3fc>
 800a506:	9b08      	ldr	r3, [sp, #32]
 800a508:	1b75      	subs	r5, r6, r5
 800a50a:	441d      	add	r5, r3
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	dd70      	ble.n	800a5f2 <_strtod_l+0x53a>
 800a510:	f015 030f 	ands.w	r3, r5, #15
 800a514:	d00a      	beq.n	800a52c <_strtod_l+0x474>
 800a516:	494b      	ldr	r1, [pc, #300]	; (800a644 <_strtod_l+0x58c>)
 800a518:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a51c:	4642      	mov	r2, r8
 800a51e:	464b      	mov	r3, r9
 800a520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a524:	f7f6 f870 	bl	8000608 <__aeabi_dmul>
 800a528:	4680      	mov	r8, r0
 800a52a:	4689      	mov	r9, r1
 800a52c:	f035 050f 	bics.w	r5, r5, #15
 800a530:	d04d      	beq.n	800a5ce <_strtod_l+0x516>
 800a532:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a536:	dd22      	ble.n	800a57e <_strtod_l+0x4c6>
 800a538:	2500      	movs	r5, #0
 800a53a:	46ab      	mov	fp, r5
 800a53c:	9509      	str	r5, [sp, #36]	; 0x24
 800a53e:	9505      	str	r5, [sp, #20]
 800a540:	2322      	movs	r3, #34	; 0x22
 800a542:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a64c <_strtod_l+0x594>
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	f04f 0800 	mov.w	r8, #0
 800a54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f43f aded 	beq.w	800a12e <_strtod_l+0x76>
 800a554:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a556:	4620      	mov	r0, r4
 800a558:	f7ff f924 	bl	80097a4 <_Bfree>
 800a55c:	9905      	ldr	r1, [sp, #20]
 800a55e:	4620      	mov	r0, r4
 800a560:	f7ff f920 	bl	80097a4 <_Bfree>
 800a564:	4659      	mov	r1, fp
 800a566:	4620      	mov	r0, r4
 800a568:	f7ff f91c 	bl	80097a4 <_Bfree>
 800a56c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a56e:	4620      	mov	r0, r4
 800a570:	f7ff f918 	bl	80097a4 <_Bfree>
 800a574:	4629      	mov	r1, r5
 800a576:	4620      	mov	r0, r4
 800a578:	f7ff f914 	bl	80097a4 <_Bfree>
 800a57c:	e5d7      	b.n	800a12e <_strtod_l+0x76>
 800a57e:	4b32      	ldr	r3, [pc, #200]	; (800a648 <_strtod_l+0x590>)
 800a580:	9304      	str	r3, [sp, #16]
 800a582:	2300      	movs	r3, #0
 800a584:	112d      	asrs	r5, r5, #4
 800a586:	4640      	mov	r0, r8
 800a588:	4649      	mov	r1, r9
 800a58a:	469a      	mov	sl, r3
 800a58c:	2d01      	cmp	r5, #1
 800a58e:	dc21      	bgt.n	800a5d4 <_strtod_l+0x51c>
 800a590:	b10b      	cbz	r3, 800a596 <_strtod_l+0x4de>
 800a592:	4680      	mov	r8, r0
 800a594:	4689      	mov	r9, r1
 800a596:	492c      	ldr	r1, [pc, #176]	; (800a648 <_strtod_l+0x590>)
 800a598:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a59c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a5a0:	4642      	mov	r2, r8
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a8:	f7f6 f82e 	bl	8000608 <__aeabi_dmul>
 800a5ac:	4b27      	ldr	r3, [pc, #156]	; (800a64c <_strtod_l+0x594>)
 800a5ae:	460a      	mov	r2, r1
 800a5b0:	400b      	ands	r3, r1
 800a5b2:	4927      	ldr	r1, [pc, #156]	; (800a650 <_strtod_l+0x598>)
 800a5b4:	428b      	cmp	r3, r1
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	d8be      	bhi.n	800a538 <_strtod_l+0x480>
 800a5ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a5be:	428b      	cmp	r3, r1
 800a5c0:	bf86      	itte	hi
 800a5c2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a654 <_strtod_l+0x59c>
 800a5c6:	f04f 38ff 	movhi.w	r8, #4294967295
 800a5ca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	e07b      	b.n	800a6cc <_strtod_l+0x614>
 800a5d4:	07ea      	lsls	r2, r5, #31
 800a5d6:	d505      	bpl.n	800a5e4 <_strtod_l+0x52c>
 800a5d8:	9b04      	ldr	r3, [sp, #16]
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f6 f813 	bl	8000608 <__aeabi_dmul>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	9a04      	ldr	r2, [sp, #16]
 800a5e6:	3208      	adds	r2, #8
 800a5e8:	f10a 0a01 	add.w	sl, sl, #1
 800a5ec:	106d      	asrs	r5, r5, #1
 800a5ee:	9204      	str	r2, [sp, #16]
 800a5f0:	e7cc      	b.n	800a58c <_strtod_l+0x4d4>
 800a5f2:	d0ec      	beq.n	800a5ce <_strtod_l+0x516>
 800a5f4:	426d      	negs	r5, r5
 800a5f6:	f015 020f 	ands.w	r2, r5, #15
 800a5fa:	d00a      	beq.n	800a612 <_strtod_l+0x55a>
 800a5fc:	4b11      	ldr	r3, [pc, #68]	; (800a644 <_strtod_l+0x58c>)
 800a5fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a602:	4640      	mov	r0, r8
 800a604:	4649      	mov	r1, r9
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	f7f6 f927 	bl	800085c <__aeabi_ddiv>
 800a60e:	4680      	mov	r8, r0
 800a610:	4689      	mov	r9, r1
 800a612:	112d      	asrs	r5, r5, #4
 800a614:	d0db      	beq.n	800a5ce <_strtod_l+0x516>
 800a616:	2d1f      	cmp	r5, #31
 800a618:	dd1e      	ble.n	800a658 <_strtod_l+0x5a0>
 800a61a:	2500      	movs	r5, #0
 800a61c:	46ab      	mov	fp, r5
 800a61e:	9509      	str	r5, [sp, #36]	; 0x24
 800a620:	9505      	str	r5, [sp, #20]
 800a622:	2322      	movs	r3, #34	; 0x22
 800a624:	f04f 0800 	mov.w	r8, #0
 800a628:	f04f 0900 	mov.w	r9, #0
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	e78d      	b.n	800a54c <_strtod_l+0x494>
 800a630:	0800c1c9 	.word	0x0800c1c9
 800a634:	0800c3f4 	.word	0x0800c3f4
 800a638:	0800c1c1 	.word	0x0800c1c1
 800a63c:	0800c1f8 	.word	0x0800c1f8
 800a640:	0800c585 	.word	0x0800c585
 800a644:	0800c308 	.word	0x0800c308
 800a648:	0800c2e0 	.word	0x0800c2e0
 800a64c:	7ff00000 	.word	0x7ff00000
 800a650:	7ca00000 	.word	0x7ca00000
 800a654:	7fefffff 	.word	0x7fefffff
 800a658:	f015 0310 	ands.w	r3, r5, #16
 800a65c:	bf18      	it	ne
 800a65e:	236a      	movne	r3, #106	; 0x6a
 800a660:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800aa04 <_strtod_l+0x94c>
 800a664:	9304      	str	r3, [sp, #16]
 800a666:	4640      	mov	r0, r8
 800a668:	4649      	mov	r1, r9
 800a66a:	2300      	movs	r3, #0
 800a66c:	07ea      	lsls	r2, r5, #31
 800a66e:	d504      	bpl.n	800a67a <_strtod_l+0x5c2>
 800a670:	e9da 2300 	ldrd	r2, r3, [sl]
 800a674:	f7f5 ffc8 	bl	8000608 <__aeabi_dmul>
 800a678:	2301      	movs	r3, #1
 800a67a:	106d      	asrs	r5, r5, #1
 800a67c:	f10a 0a08 	add.w	sl, sl, #8
 800a680:	d1f4      	bne.n	800a66c <_strtod_l+0x5b4>
 800a682:	b10b      	cbz	r3, 800a688 <_strtod_l+0x5d0>
 800a684:	4680      	mov	r8, r0
 800a686:	4689      	mov	r9, r1
 800a688:	9b04      	ldr	r3, [sp, #16]
 800a68a:	b1bb      	cbz	r3, 800a6bc <_strtod_l+0x604>
 800a68c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a690:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a694:	2b00      	cmp	r3, #0
 800a696:	4649      	mov	r1, r9
 800a698:	dd10      	ble.n	800a6bc <_strtod_l+0x604>
 800a69a:	2b1f      	cmp	r3, #31
 800a69c:	f340 811e 	ble.w	800a8dc <_strtod_l+0x824>
 800a6a0:	2b34      	cmp	r3, #52	; 0x34
 800a6a2:	bfde      	ittt	le
 800a6a4:	f04f 33ff 	movle.w	r3, #4294967295
 800a6a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a6ac:	4093      	lslle	r3, r2
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	bfcc      	ite	gt
 800a6b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a6b8:	ea03 0901 	andle.w	r9, r3, r1
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2300      	movs	r3, #0
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	f7f6 fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d1a6      	bne.n	800a61a <_strtod_l+0x562>
 800a6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6d2:	4633      	mov	r3, r6
 800a6d4:	465a      	mov	r2, fp
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f7ff f8cc 	bl	8009874 <__s2b>
 800a6dc:	9009      	str	r0, [sp, #36]	; 0x24
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f43f af2a 	beq.w	800a538 <_strtod_l+0x480>
 800a6e4:	9a08      	ldr	r2, [sp, #32]
 800a6e6:	9b05      	ldr	r3, [sp, #20]
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	eba3 0307 	sub.w	r3, r3, r7
 800a6ee:	bfa8      	it	ge
 800a6f0:	2300      	movge	r3, #0
 800a6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f4:	2500      	movs	r5, #0
 800a6f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a6fa:	9312      	str	r3, [sp, #72]	; 0x48
 800a6fc:	46ab      	mov	fp, r5
 800a6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a700:	4620      	mov	r0, r4
 800a702:	6859      	ldr	r1, [r3, #4]
 800a704:	f7ff f80e 	bl	8009724 <_Balloc>
 800a708:	9005      	str	r0, [sp, #20]
 800a70a:	2800      	cmp	r0, #0
 800a70c:	f43f af18 	beq.w	800a540 <_strtod_l+0x488>
 800a710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a712:	691a      	ldr	r2, [r3, #16]
 800a714:	3202      	adds	r2, #2
 800a716:	f103 010c 	add.w	r1, r3, #12
 800a71a:	0092      	lsls	r2, r2, #2
 800a71c:	300c      	adds	r0, #12
 800a71e:	f000 fd87 	bl	800b230 <memcpy>
 800a722:	ec49 8b10 	vmov	d0, r8, r9
 800a726:	aa18      	add	r2, sp, #96	; 0x60
 800a728:	a917      	add	r1, sp, #92	; 0x5c
 800a72a:	4620      	mov	r0, r4
 800a72c:	f7ff fbd6 	bl	8009edc <__d2b>
 800a730:	ec49 8b18 	vmov	d8, r8, r9
 800a734:	9016      	str	r0, [sp, #88]	; 0x58
 800a736:	2800      	cmp	r0, #0
 800a738:	f43f af02 	beq.w	800a540 <_strtod_l+0x488>
 800a73c:	2101      	movs	r1, #1
 800a73e:	4620      	mov	r0, r4
 800a740:	f7ff f930 	bl	80099a4 <__i2b>
 800a744:	4683      	mov	fp, r0
 800a746:	2800      	cmp	r0, #0
 800a748:	f43f aefa 	beq.w	800a540 <_strtod_l+0x488>
 800a74c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a74e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a750:	2e00      	cmp	r6, #0
 800a752:	bfab      	itete	ge
 800a754:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a756:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a758:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a75a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a75e:	bfac      	ite	ge
 800a760:	eb06 0a03 	addge.w	sl, r6, r3
 800a764:	1b9f      	sublt	r7, r3, r6
 800a766:	9b04      	ldr	r3, [sp, #16]
 800a768:	1af6      	subs	r6, r6, r3
 800a76a:	4416      	add	r6, r2
 800a76c:	4ba0      	ldr	r3, [pc, #640]	; (800a9f0 <_strtod_l+0x938>)
 800a76e:	3e01      	subs	r6, #1
 800a770:	429e      	cmp	r6, r3
 800a772:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a776:	f280 80c4 	bge.w	800a902 <_strtod_l+0x84a>
 800a77a:	1b9b      	subs	r3, r3, r6
 800a77c:	2b1f      	cmp	r3, #31
 800a77e:	eba2 0203 	sub.w	r2, r2, r3
 800a782:	f04f 0101 	mov.w	r1, #1
 800a786:	f300 80b0 	bgt.w	800a8ea <_strtod_l+0x832>
 800a78a:	fa01 f303 	lsl.w	r3, r1, r3
 800a78e:	930e      	str	r3, [sp, #56]	; 0x38
 800a790:	2300      	movs	r3, #0
 800a792:	930d      	str	r3, [sp, #52]	; 0x34
 800a794:	eb0a 0602 	add.w	r6, sl, r2
 800a798:	9b04      	ldr	r3, [sp, #16]
 800a79a:	45b2      	cmp	sl, r6
 800a79c:	4417      	add	r7, r2
 800a79e:	441f      	add	r7, r3
 800a7a0:	4653      	mov	r3, sl
 800a7a2:	bfa8      	it	ge
 800a7a4:	4633      	movge	r3, r6
 800a7a6:	42bb      	cmp	r3, r7
 800a7a8:	bfa8      	it	ge
 800a7aa:	463b      	movge	r3, r7
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bfc2      	ittt	gt
 800a7b0:	1af6      	subgt	r6, r6, r3
 800a7b2:	1aff      	subgt	r7, r7, r3
 800a7b4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a7b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	dd17      	ble.n	800a7ee <_strtod_l+0x736>
 800a7be:	4659      	mov	r1, fp
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7ff f9ae 	bl	8009b24 <__pow5mult>
 800a7c8:	4683      	mov	fp, r0
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	f43f aeb8 	beq.w	800a540 <_strtod_l+0x488>
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7ff f8fb 	bl	80099d0 <__multiply>
 800a7da:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	f43f aeaf 	beq.w	800a540 <_strtod_l+0x488>
 800a7e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f7fe ffdd 	bl	80097a4 <_Bfree>
 800a7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ec:	9316      	str	r3, [sp, #88]	; 0x58
 800a7ee:	2e00      	cmp	r6, #0
 800a7f0:	f300 808c 	bgt.w	800a90c <_strtod_l+0x854>
 800a7f4:	9b08      	ldr	r3, [sp, #32]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dd08      	ble.n	800a80c <_strtod_l+0x754>
 800a7fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7fc:	9905      	ldr	r1, [sp, #20]
 800a7fe:	4620      	mov	r0, r4
 800a800:	f7ff f990 	bl	8009b24 <__pow5mult>
 800a804:	9005      	str	r0, [sp, #20]
 800a806:	2800      	cmp	r0, #0
 800a808:	f43f ae9a 	beq.w	800a540 <_strtod_l+0x488>
 800a80c:	2f00      	cmp	r7, #0
 800a80e:	dd08      	ble.n	800a822 <_strtod_l+0x76a>
 800a810:	9905      	ldr	r1, [sp, #20]
 800a812:	463a      	mov	r2, r7
 800a814:	4620      	mov	r0, r4
 800a816:	f7ff f9df 	bl	8009bd8 <__lshift>
 800a81a:	9005      	str	r0, [sp, #20]
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f43f ae8f 	beq.w	800a540 <_strtod_l+0x488>
 800a822:	f1ba 0f00 	cmp.w	sl, #0
 800a826:	dd08      	ble.n	800a83a <_strtod_l+0x782>
 800a828:	4659      	mov	r1, fp
 800a82a:	4652      	mov	r2, sl
 800a82c:	4620      	mov	r0, r4
 800a82e:	f7ff f9d3 	bl	8009bd8 <__lshift>
 800a832:	4683      	mov	fp, r0
 800a834:	2800      	cmp	r0, #0
 800a836:	f43f ae83 	beq.w	800a540 <_strtod_l+0x488>
 800a83a:	9a05      	ldr	r2, [sp, #20]
 800a83c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a83e:	4620      	mov	r0, r4
 800a840:	f7ff fa52 	bl	8009ce8 <__mdiff>
 800a844:	4605      	mov	r5, r0
 800a846:	2800      	cmp	r0, #0
 800a848:	f43f ae7a 	beq.w	800a540 <_strtod_l+0x488>
 800a84c:	68c3      	ldr	r3, [r0, #12]
 800a84e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a850:	2300      	movs	r3, #0
 800a852:	60c3      	str	r3, [r0, #12]
 800a854:	4659      	mov	r1, fp
 800a856:	f7ff fa2b 	bl	8009cb0 <__mcmp>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	da60      	bge.n	800a920 <_strtod_l+0x868>
 800a85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a860:	ea53 0308 	orrs.w	r3, r3, r8
 800a864:	f040 8084 	bne.w	800a970 <_strtod_l+0x8b8>
 800a868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d17f      	bne.n	800a970 <_strtod_l+0x8b8>
 800a870:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a874:	0d1b      	lsrs	r3, r3, #20
 800a876:	051b      	lsls	r3, r3, #20
 800a878:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a87c:	d978      	bls.n	800a970 <_strtod_l+0x8b8>
 800a87e:	696b      	ldr	r3, [r5, #20]
 800a880:	b913      	cbnz	r3, 800a888 <_strtod_l+0x7d0>
 800a882:	692b      	ldr	r3, [r5, #16]
 800a884:	2b01      	cmp	r3, #1
 800a886:	dd73      	ble.n	800a970 <_strtod_l+0x8b8>
 800a888:	4629      	mov	r1, r5
 800a88a:	2201      	movs	r2, #1
 800a88c:	4620      	mov	r0, r4
 800a88e:	f7ff f9a3 	bl	8009bd8 <__lshift>
 800a892:	4659      	mov	r1, fp
 800a894:	4605      	mov	r5, r0
 800a896:	f7ff fa0b 	bl	8009cb0 <__mcmp>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	dd68      	ble.n	800a970 <_strtod_l+0x8b8>
 800a89e:	9904      	ldr	r1, [sp, #16]
 800a8a0:	4a54      	ldr	r2, [pc, #336]	; (800a9f4 <_strtod_l+0x93c>)
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	2900      	cmp	r1, #0
 800a8a6:	f000 8084 	beq.w	800a9b2 <_strtod_l+0x8fa>
 800a8aa:	ea02 0109 	and.w	r1, r2, r9
 800a8ae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a8b2:	dc7e      	bgt.n	800a9b2 <_strtod_l+0x8fa>
 800a8b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a8b8:	f77f aeb3 	ble.w	800a622 <_strtod_l+0x56a>
 800a8bc:	4b4e      	ldr	r3, [pc, #312]	; (800a9f8 <_strtod_l+0x940>)
 800a8be:	4640      	mov	r0, r8
 800a8c0:	4649      	mov	r1, r9
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f7f5 fea0 	bl	8000608 <__aeabi_dmul>
 800a8c8:	4b4a      	ldr	r3, [pc, #296]	; (800a9f4 <_strtod_l+0x93c>)
 800a8ca:	400b      	ands	r3, r1
 800a8cc:	4680      	mov	r8, r0
 800a8ce:	4689      	mov	r9, r1
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f47f ae3f 	bne.w	800a554 <_strtod_l+0x49c>
 800a8d6:	2322      	movs	r3, #34	; 0x22
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	e63b      	b.n	800a554 <_strtod_l+0x49c>
 800a8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e4:	ea03 0808 	and.w	r8, r3, r8
 800a8e8:	e6e8      	b.n	800a6bc <_strtod_l+0x604>
 800a8ea:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a8ee:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a8f2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a8f6:	36e2      	adds	r6, #226	; 0xe2
 800a8f8:	fa01 f306 	lsl.w	r3, r1, r6
 800a8fc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a900:	e748      	b.n	800a794 <_strtod_l+0x6dc>
 800a902:	2100      	movs	r1, #0
 800a904:	2301      	movs	r3, #1
 800a906:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a90a:	e743      	b.n	800a794 <_strtod_l+0x6dc>
 800a90c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a90e:	4632      	mov	r2, r6
 800a910:	4620      	mov	r0, r4
 800a912:	f7ff f961 	bl	8009bd8 <__lshift>
 800a916:	9016      	str	r0, [sp, #88]	; 0x58
 800a918:	2800      	cmp	r0, #0
 800a91a:	f47f af6b 	bne.w	800a7f4 <_strtod_l+0x73c>
 800a91e:	e60f      	b.n	800a540 <_strtod_l+0x488>
 800a920:	46ca      	mov	sl, r9
 800a922:	d171      	bne.n	800aa08 <_strtod_l+0x950>
 800a924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a926:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a92a:	b352      	cbz	r2, 800a982 <_strtod_l+0x8ca>
 800a92c:	4a33      	ldr	r2, [pc, #204]	; (800a9fc <_strtod_l+0x944>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d12a      	bne.n	800a988 <_strtod_l+0x8d0>
 800a932:	9b04      	ldr	r3, [sp, #16]
 800a934:	4641      	mov	r1, r8
 800a936:	b1fb      	cbz	r3, 800a978 <_strtod_l+0x8c0>
 800a938:	4b2e      	ldr	r3, [pc, #184]	; (800a9f4 <_strtod_l+0x93c>)
 800a93a:	ea09 0303 	and.w	r3, r9, r3
 800a93e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a942:	f04f 32ff 	mov.w	r2, #4294967295
 800a946:	d81a      	bhi.n	800a97e <_strtod_l+0x8c6>
 800a948:	0d1b      	lsrs	r3, r3, #20
 800a94a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a94e:	fa02 f303 	lsl.w	r3, r2, r3
 800a952:	4299      	cmp	r1, r3
 800a954:	d118      	bne.n	800a988 <_strtod_l+0x8d0>
 800a956:	4b2a      	ldr	r3, [pc, #168]	; (800aa00 <_strtod_l+0x948>)
 800a958:	459a      	cmp	sl, r3
 800a95a:	d102      	bne.n	800a962 <_strtod_l+0x8aa>
 800a95c:	3101      	adds	r1, #1
 800a95e:	f43f adef 	beq.w	800a540 <_strtod_l+0x488>
 800a962:	4b24      	ldr	r3, [pc, #144]	; (800a9f4 <_strtod_l+0x93c>)
 800a964:	ea0a 0303 	and.w	r3, sl, r3
 800a968:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a96c:	f04f 0800 	mov.w	r8, #0
 800a970:	9b04      	ldr	r3, [sp, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1a2      	bne.n	800a8bc <_strtod_l+0x804>
 800a976:	e5ed      	b.n	800a554 <_strtod_l+0x49c>
 800a978:	f04f 33ff 	mov.w	r3, #4294967295
 800a97c:	e7e9      	b.n	800a952 <_strtod_l+0x89a>
 800a97e:	4613      	mov	r3, r2
 800a980:	e7e7      	b.n	800a952 <_strtod_l+0x89a>
 800a982:	ea53 0308 	orrs.w	r3, r3, r8
 800a986:	d08a      	beq.n	800a89e <_strtod_l+0x7e6>
 800a988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a98a:	b1e3      	cbz	r3, 800a9c6 <_strtod_l+0x90e>
 800a98c:	ea13 0f0a 	tst.w	r3, sl
 800a990:	d0ee      	beq.n	800a970 <_strtod_l+0x8b8>
 800a992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a994:	9a04      	ldr	r2, [sp, #16]
 800a996:	4640      	mov	r0, r8
 800a998:	4649      	mov	r1, r9
 800a99a:	b1c3      	cbz	r3, 800a9ce <_strtod_l+0x916>
 800a99c:	f7ff fb6f 	bl	800a07e <sulp>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	ec51 0b18 	vmov	r0, r1, d8
 800a9a8:	f7f5 fc78 	bl	800029c <__adddf3>
 800a9ac:	4680      	mov	r8, r0
 800a9ae:	4689      	mov	r9, r1
 800a9b0:	e7de      	b.n	800a970 <_strtod_l+0x8b8>
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a9b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a9bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a9c0:	f04f 38ff 	mov.w	r8, #4294967295
 800a9c4:	e7d4      	b.n	800a970 <_strtod_l+0x8b8>
 800a9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9c8:	ea13 0f08 	tst.w	r3, r8
 800a9cc:	e7e0      	b.n	800a990 <_strtod_l+0x8d8>
 800a9ce:	f7ff fb56 	bl	800a07e <sulp>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	ec51 0b18 	vmov	r0, r1, d8
 800a9da:	f7f5 fc5d 	bl	8000298 <__aeabi_dsub>
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	4689      	mov	r9, r1
 800a9e6:	f7f6 f877 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d0c0      	beq.n	800a970 <_strtod_l+0x8b8>
 800a9ee:	e618      	b.n	800a622 <_strtod_l+0x56a>
 800a9f0:	fffffc02 	.word	0xfffffc02
 800a9f4:	7ff00000 	.word	0x7ff00000
 800a9f8:	39500000 	.word	0x39500000
 800a9fc:	000fffff 	.word	0x000fffff
 800aa00:	7fefffff 	.word	0x7fefffff
 800aa04:	0800c408 	.word	0x0800c408
 800aa08:	4659      	mov	r1, fp
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f7ff fac0 	bl	8009f90 <__ratio>
 800aa10:	ec57 6b10 	vmov	r6, r7, d0
 800aa14:	ee10 0a10 	vmov	r0, s0
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa1e:	4639      	mov	r1, r7
 800aa20:	f7f6 f86e 	bl	8000b00 <__aeabi_dcmple>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d071      	beq.n	800ab0c <_strtod_l+0xa54>
 800aa28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d17c      	bne.n	800ab28 <_strtod_l+0xa70>
 800aa2e:	f1b8 0f00 	cmp.w	r8, #0
 800aa32:	d15a      	bne.n	800aaea <_strtod_l+0xa32>
 800aa34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d15d      	bne.n	800aaf8 <_strtod_l+0xa40>
 800aa3c:	4b90      	ldr	r3, [pc, #576]	; (800ac80 <_strtod_l+0xbc8>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	4630      	mov	r0, r6
 800aa42:	4639      	mov	r1, r7
 800aa44:	f7f6 f852 	bl	8000aec <__aeabi_dcmplt>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d15c      	bne.n	800ab06 <_strtod_l+0xa4e>
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	4639      	mov	r1, r7
 800aa50:	4b8c      	ldr	r3, [pc, #560]	; (800ac84 <_strtod_l+0xbcc>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	f7f5 fdd8 	bl	8000608 <__aeabi_dmul>
 800aa58:	4606      	mov	r6, r0
 800aa5a:	460f      	mov	r7, r1
 800aa5c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aa60:	9606      	str	r6, [sp, #24]
 800aa62:	9307      	str	r3, [sp, #28]
 800aa64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aa6c:	4b86      	ldr	r3, [pc, #536]	; (800ac88 <_strtod_l+0xbd0>)
 800aa6e:	ea0a 0303 	and.w	r3, sl, r3
 800aa72:	930d      	str	r3, [sp, #52]	; 0x34
 800aa74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa76:	4b85      	ldr	r3, [pc, #532]	; (800ac8c <_strtod_l+0xbd4>)
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	f040 8090 	bne.w	800ab9e <_strtod_l+0xae6>
 800aa7e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800aa82:	ec49 8b10 	vmov	d0, r8, r9
 800aa86:	f7ff f9b9 	bl	8009dfc <__ulp>
 800aa8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa8e:	ec51 0b10 	vmov	r0, r1, d0
 800aa92:	f7f5 fdb9 	bl	8000608 <__aeabi_dmul>
 800aa96:	4642      	mov	r2, r8
 800aa98:	464b      	mov	r3, r9
 800aa9a:	f7f5 fbff 	bl	800029c <__adddf3>
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	4979      	ldr	r1, [pc, #484]	; (800ac88 <_strtod_l+0xbd0>)
 800aaa2:	4a7b      	ldr	r2, [pc, #492]	; (800ac90 <_strtod_l+0xbd8>)
 800aaa4:	4019      	ands	r1, r3
 800aaa6:	4291      	cmp	r1, r2
 800aaa8:	4680      	mov	r8, r0
 800aaaa:	d944      	bls.n	800ab36 <_strtod_l+0xa7e>
 800aaac:	ee18 2a90 	vmov	r2, s17
 800aab0:	4b78      	ldr	r3, [pc, #480]	; (800ac94 <_strtod_l+0xbdc>)
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d104      	bne.n	800aac0 <_strtod_l+0xa08>
 800aab6:	ee18 3a10 	vmov	r3, s16
 800aaba:	3301      	adds	r3, #1
 800aabc:	f43f ad40 	beq.w	800a540 <_strtod_l+0x488>
 800aac0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ac94 <_strtod_l+0xbdc>
 800aac4:	f04f 38ff 	mov.w	r8, #4294967295
 800aac8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aaca:	4620      	mov	r0, r4
 800aacc:	f7fe fe6a 	bl	80097a4 <_Bfree>
 800aad0:	9905      	ldr	r1, [sp, #20]
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7fe fe66 	bl	80097a4 <_Bfree>
 800aad8:	4659      	mov	r1, fp
 800aada:	4620      	mov	r0, r4
 800aadc:	f7fe fe62 	bl	80097a4 <_Bfree>
 800aae0:	4629      	mov	r1, r5
 800aae2:	4620      	mov	r0, r4
 800aae4:	f7fe fe5e 	bl	80097a4 <_Bfree>
 800aae8:	e609      	b.n	800a6fe <_strtod_l+0x646>
 800aaea:	f1b8 0f01 	cmp.w	r8, #1
 800aaee:	d103      	bne.n	800aaf8 <_strtod_l+0xa40>
 800aaf0:	f1b9 0f00 	cmp.w	r9, #0
 800aaf4:	f43f ad95 	beq.w	800a622 <_strtod_l+0x56a>
 800aaf8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ac50 <_strtod_l+0xb98>
 800aafc:	4f60      	ldr	r7, [pc, #384]	; (800ac80 <_strtod_l+0xbc8>)
 800aafe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab02:	2600      	movs	r6, #0
 800ab04:	e7ae      	b.n	800aa64 <_strtod_l+0x9ac>
 800ab06:	4f5f      	ldr	r7, [pc, #380]	; (800ac84 <_strtod_l+0xbcc>)
 800ab08:	2600      	movs	r6, #0
 800ab0a:	e7a7      	b.n	800aa5c <_strtod_l+0x9a4>
 800ab0c:	4b5d      	ldr	r3, [pc, #372]	; (800ac84 <_strtod_l+0xbcc>)
 800ab0e:	4630      	mov	r0, r6
 800ab10:	4639      	mov	r1, r7
 800ab12:	2200      	movs	r2, #0
 800ab14:	f7f5 fd78 	bl	8000608 <__aeabi_dmul>
 800ab18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d09c      	beq.n	800aa5c <_strtod_l+0x9a4>
 800ab22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab26:	e79d      	b.n	800aa64 <_strtod_l+0x9ac>
 800ab28:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ac58 <_strtod_l+0xba0>
 800ab2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab30:	ec57 6b17 	vmov	r6, r7, d7
 800ab34:	e796      	b.n	800aa64 <_strtod_l+0x9ac>
 800ab36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ab3a:	9b04      	ldr	r3, [sp, #16]
 800ab3c:	46ca      	mov	sl, r9
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1c2      	bne.n	800aac8 <_strtod_l+0xa10>
 800ab42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab48:	0d1b      	lsrs	r3, r3, #20
 800ab4a:	051b      	lsls	r3, r3, #20
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d1bb      	bne.n	800aac8 <_strtod_l+0xa10>
 800ab50:	4630      	mov	r0, r6
 800ab52:	4639      	mov	r1, r7
 800ab54:	f7f6 f8b8 	bl	8000cc8 <__aeabi_d2lz>
 800ab58:	f7f5 fd28 	bl	80005ac <__aeabi_l2d>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	4630      	mov	r0, r6
 800ab62:	4639      	mov	r1, r7
 800ab64:	f7f5 fb98 	bl	8000298 <__aeabi_dsub>
 800ab68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab6e:	ea43 0308 	orr.w	r3, r3, r8
 800ab72:	4313      	orrs	r3, r2
 800ab74:	4606      	mov	r6, r0
 800ab76:	460f      	mov	r7, r1
 800ab78:	d054      	beq.n	800ac24 <_strtod_l+0xb6c>
 800ab7a:	a339      	add	r3, pc, #228	; (adr r3, 800ac60 <_strtod_l+0xba8>)
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	f7f5 ffb4 	bl	8000aec <__aeabi_dcmplt>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	f47f ace5 	bne.w	800a554 <_strtod_l+0x49c>
 800ab8a:	a337      	add	r3, pc, #220	; (adr r3, 800ac68 <_strtod_l+0xbb0>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	4630      	mov	r0, r6
 800ab92:	4639      	mov	r1, r7
 800ab94:	f7f5 ffc8 	bl	8000b28 <__aeabi_dcmpgt>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d095      	beq.n	800aac8 <_strtod_l+0xa10>
 800ab9c:	e4da      	b.n	800a554 <_strtod_l+0x49c>
 800ab9e:	9b04      	ldr	r3, [sp, #16]
 800aba0:	b333      	cbz	r3, 800abf0 <_strtod_l+0xb38>
 800aba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aba4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aba8:	d822      	bhi.n	800abf0 <_strtod_l+0xb38>
 800abaa:	a331      	add	r3, pc, #196	; (adr r3, 800ac70 <_strtod_l+0xbb8>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	4630      	mov	r0, r6
 800abb2:	4639      	mov	r1, r7
 800abb4:	f7f5 ffa4 	bl	8000b00 <__aeabi_dcmple>
 800abb8:	b1a0      	cbz	r0, 800abe4 <_strtod_l+0xb2c>
 800abba:	4639      	mov	r1, r7
 800abbc:	4630      	mov	r0, r6
 800abbe:	f7f5 fffb 	bl	8000bb8 <__aeabi_d2uiz>
 800abc2:	2801      	cmp	r0, #1
 800abc4:	bf38      	it	cc
 800abc6:	2001      	movcc	r0, #1
 800abc8:	f7f5 fca4 	bl	8000514 <__aeabi_ui2d>
 800abcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abce:	4606      	mov	r6, r0
 800abd0:	460f      	mov	r7, r1
 800abd2:	bb23      	cbnz	r3, 800ac1e <_strtod_l+0xb66>
 800abd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abd8:	9010      	str	r0, [sp, #64]	; 0x40
 800abda:	9311      	str	r3, [sp, #68]	; 0x44
 800abdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abe0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800abe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abe8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800abec:	1a9b      	subs	r3, r3, r2
 800abee:	930f      	str	r3, [sp, #60]	; 0x3c
 800abf0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800abf4:	eeb0 0a48 	vmov.f32	s0, s16
 800abf8:	eef0 0a68 	vmov.f32	s1, s17
 800abfc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ac00:	f7ff f8fc 	bl	8009dfc <__ulp>
 800ac04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ac08:	ec53 2b10 	vmov	r2, r3, d0
 800ac0c:	f7f5 fcfc 	bl	8000608 <__aeabi_dmul>
 800ac10:	ec53 2b18 	vmov	r2, r3, d8
 800ac14:	f7f5 fb42 	bl	800029c <__adddf3>
 800ac18:	4680      	mov	r8, r0
 800ac1a:	4689      	mov	r9, r1
 800ac1c:	e78d      	b.n	800ab3a <_strtod_l+0xa82>
 800ac1e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ac22:	e7db      	b.n	800abdc <_strtod_l+0xb24>
 800ac24:	a314      	add	r3, pc, #80	; (adr r3, 800ac78 <_strtod_l+0xbc0>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	f7f5 ff5f 	bl	8000aec <__aeabi_dcmplt>
 800ac2e:	e7b3      	b.n	800ab98 <_strtod_l+0xae0>
 800ac30:	2300      	movs	r3, #0
 800ac32:	930a      	str	r3, [sp, #40]	; 0x28
 800ac34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac38:	6013      	str	r3, [r2, #0]
 800ac3a:	f7ff ba7c 	b.w	800a136 <_strtod_l+0x7e>
 800ac3e:	2a65      	cmp	r2, #101	; 0x65
 800ac40:	f43f ab75 	beq.w	800a32e <_strtod_l+0x276>
 800ac44:	2a45      	cmp	r2, #69	; 0x45
 800ac46:	f43f ab72 	beq.w	800a32e <_strtod_l+0x276>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	f7ff bbaa 	b.w	800a3a4 <_strtod_l+0x2ec>
 800ac50:	00000000 	.word	0x00000000
 800ac54:	bff00000 	.word	0xbff00000
 800ac58:	00000000 	.word	0x00000000
 800ac5c:	3ff00000 	.word	0x3ff00000
 800ac60:	94a03595 	.word	0x94a03595
 800ac64:	3fdfffff 	.word	0x3fdfffff
 800ac68:	35afe535 	.word	0x35afe535
 800ac6c:	3fe00000 	.word	0x3fe00000
 800ac70:	ffc00000 	.word	0xffc00000
 800ac74:	41dfffff 	.word	0x41dfffff
 800ac78:	94a03595 	.word	0x94a03595
 800ac7c:	3fcfffff 	.word	0x3fcfffff
 800ac80:	3ff00000 	.word	0x3ff00000
 800ac84:	3fe00000 	.word	0x3fe00000
 800ac88:	7ff00000 	.word	0x7ff00000
 800ac8c:	7fe00000 	.word	0x7fe00000
 800ac90:	7c9fffff 	.word	0x7c9fffff
 800ac94:	7fefffff 	.word	0x7fefffff

0800ac98 <_strtod_r>:
 800ac98:	4b01      	ldr	r3, [pc, #4]	; (800aca0 <_strtod_r+0x8>)
 800ac9a:	f7ff ba0d 	b.w	800a0b8 <_strtod_l>
 800ac9e:	bf00      	nop
 800aca0:	2000006c 	.word	0x2000006c

0800aca4 <_strtol_l.constprop.0>:
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acaa:	d001      	beq.n	800acb0 <_strtol_l.constprop.0+0xc>
 800acac:	2b24      	cmp	r3, #36	; 0x24
 800acae:	d906      	bls.n	800acbe <_strtol_l.constprop.0+0x1a>
 800acb0:	f7fd fd8a 	bl	80087c8 <__errno>
 800acb4:	2316      	movs	r3, #22
 800acb6:	6003      	str	r3, [r0, #0]
 800acb8:	2000      	movs	r0, #0
 800acba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ada4 <_strtol_l.constprop.0+0x100>
 800acc2:	460d      	mov	r5, r1
 800acc4:	462e      	mov	r6, r5
 800acc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800acce:	f017 0708 	ands.w	r7, r7, #8
 800acd2:	d1f7      	bne.n	800acc4 <_strtol_l.constprop.0+0x20>
 800acd4:	2c2d      	cmp	r4, #45	; 0x2d
 800acd6:	d132      	bne.n	800ad3e <_strtol_l.constprop.0+0x9a>
 800acd8:	782c      	ldrb	r4, [r5, #0]
 800acda:	2701      	movs	r7, #1
 800acdc:	1cb5      	adds	r5, r6, #2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d05b      	beq.n	800ad9a <_strtol_l.constprop.0+0xf6>
 800ace2:	2b10      	cmp	r3, #16
 800ace4:	d109      	bne.n	800acfa <_strtol_l.constprop.0+0x56>
 800ace6:	2c30      	cmp	r4, #48	; 0x30
 800ace8:	d107      	bne.n	800acfa <_strtol_l.constprop.0+0x56>
 800acea:	782c      	ldrb	r4, [r5, #0]
 800acec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800acf0:	2c58      	cmp	r4, #88	; 0x58
 800acf2:	d14d      	bne.n	800ad90 <_strtol_l.constprop.0+0xec>
 800acf4:	786c      	ldrb	r4, [r5, #1]
 800acf6:	2310      	movs	r3, #16
 800acf8:	3502      	adds	r5, #2
 800acfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800acfe:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad02:	f04f 0e00 	mov.w	lr, #0
 800ad06:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad0a:	4676      	mov	r6, lr
 800ad0c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ad14:	f1bc 0f09 	cmp.w	ip, #9
 800ad18:	d816      	bhi.n	800ad48 <_strtol_l.constprop.0+0xa4>
 800ad1a:	4664      	mov	r4, ip
 800ad1c:	42a3      	cmp	r3, r4
 800ad1e:	dd24      	ble.n	800ad6a <_strtol_l.constprop.0+0xc6>
 800ad20:	f1be 3fff 	cmp.w	lr, #4294967295
 800ad24:	d008      	beq.n	800ad38 <_strtol_l.constprop.0+0x94>
 800ad26:	45b1      	cmp	r9, r6
 800ad28:	d31c      	bcc.n	800ad64 <_strtol_l.constprop.0+0xc0>
 800ad2a:	d101      	bne.n	800ad30 <_strtol_l.constprop.0+0x8c>
 800ad2c:	45a2      	cmp	sl, r4
 800ad2e:	db19      	blt.n	800ad64 <_strtol_l.constprop.0+0xc0>
 800ad30:	fb06 4603 	mla	r6, r6, r3, r4
 800ad34:	f04f 0e01 	mov.w	lr, #1
 800ad38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad3c:	e7e8      	b.n	800ad10 <_strtol_l.constprop.0+0x6c>
 800ad3e:	2c2b      	cmp	r4, #43	; 0x2b
 800ad40:	bf04      	itt	eq
 800ad42:	782c      	ldrbeq	r4, [r5, #0]
 800ad44:	1cb5      	addeq	r5, r6, #2
 800ad46:	e7ca      	b.n	800acde <_strtol_l.constprop.0+0x3a>
 800ad48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ad4c:	f1bc 0f19 	cmp.w	ip, #25
 800ad50:	d801      	bhi.n	800ad56 <_strtol_l.constprop.0+0xb2>
 800ad52:	3c37      	subs	r4, #55	; 0x37
 800ad54:	e7e2      	b.n	800ad1c <_strtol_l.constprop.0+0x78>
 800ad56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ad5a:	f1bc 0f19 	cmp.w	ip, #25
 800ad5e:	d804      	bhi.n	800ad6a <_strtol_l.constprop.0+0xc6>
 800ad60:	3c57      	subs	r4, #87	; 0x57
 800ad62:	e7db      	b.n	800ad1c <_strtol_l.constprop.0+0x78>
 800ad64:	f04f 3eff 	mov.w	lr, #4294967295
 800ad68:	e7e6      	b.n	800ad38 <_strtol_l.constprop.0+0x94>
 800ad6a:	f1be 3fff 	cmp.w	lr, #4294967295
 800ad6e:	d105      	bne.n	800ad7c <_strtol_l.constprop.0+0xd8>
 800ad70:	2322      	movs	r3, #34	; 0x22
 800ad72:	6003      	str	r3, [r0, #0]
 800ad74:	4646      	mov	r6, r8
 800ad76:	b942      	cbnz	r2, 800ad8a <_strtol_l.constprop.0+0xe6>
 800ad78:	4630      	mov	r0, r6
 800ad7a:	e79e      	b.n	800acba <_strtol_l.constprop.0+0x16>
 800ad7c:	b107      	cbz	r7, 800ad80 <_strtol_l.constprop.0+0xdc>
 800ad7e:	4276      	negs	r6, r6
 800ad80:	2a00      	cmp	r2, #0
 800ad82:	d0f9      	beq.n	800ad78 <_strtol_l.constprop.0+0xd4>
 800ad84:	f1be 0f00 	cmp.w	lr, #0
 800ad88:	d000      	beq.n	800ad8c <_strtol_l.constprop.0+0xe8>
 800ad8a:	1e69      	subs	r1, r5, #1
 800ad8c:	6011      	str	r1, [r2, #0]
 800ad8e:	e7f3      	b.n	800ad78 <_strtol_l.constprop.0+0xd4>
 800ad90:	2430      	movs	r4, #48	; 0x30
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1b1      	bne.n	800acfa <_strtol_l.constprop.0+0x56>
 800ad96:	2308      	movs	r3, #8
 800ad98:	e7af      	b.n	800acfa <_strtol_l.constprop.0+0x56>
 800ad9a:	2c30      	cmp	r4, #48	; 0x30
 800ad9c:	d0a5      	beq.n	800acea <_strtol_l.constprop.0+0x46>
 800ad9e:	230a      	movs	r3, #10
 800ada0:	e7ab      	b.n	800acfa <_strtol_l.constprop.0+0x56>
 800ada2:	bf00      	nop
 800ada4:	0800c431 	.word	0x0800c431

0800ada8 <_strtol_r>:
 800ada8:	f7ff bf7c 	b.w	800aca4 <_strtol_l.constprop.0>

0800adac <__ssputs_r>:
 800adac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb0:	688e      	ldr	r6, [r1, #8]
 800adb2:	461f      	mov	r7, r3
 800adb4:	42be      	cmp	r6, r7
 800adb6:	680b      	ldr	r3, [r1, #0]
 800adb8:	4682      	mov	sl, r0
 800adba:	460c      	mov	r4, r1
 800adbc:	4690      	mov	r8, r2
 800adbe:	d82c      	bhi.n	800ae1a <__ssputs_r+0x6e>
 800adc0:	898a      	ldrh	r2, [r1, #12]
 800adc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adc6:	d026      	beq.n	800ae16 <__ssputs_r+0x6a>
 800adc8:	6965      	ldr	r5, [r4, #20]
 800adca:	6909      	ldr	r1, [r1, #16]
 800adcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800add0:	eba3 0901 	sub.w	r9, r3, r1
 800add4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800add8:	1c7b      	adds	r3, r7, #1
 800adda:	444b      	add	r3, r9
 800addc:	106d      	asrs	r5, r5, #1
 800adde:	429d      	cmp	r5, r3
 800ade0:	bf38      	it	cc
 800ade2:	461d      	movcc	r5, r3
 800ade4:	0553      	lsls	r3, r2, #21
 800ade6:	d527      	bpl.n	800ae38 <__ssputs_r+0x8c>
 800ade8:	4629      	mov	r1, r5
 800adea:	f7fe fc0f 	bl	800960c <_malloc_r>
 800adee:	4606      	mov	r6, r0
 800adf0:	b360      	cbz	r0, 800ae4c <__ssputs_r+0xa0>
 800adf2:	6921      	ldr	r1, [r4, #16]
 800adf4:	464a      	mov	r2, r9
 800adf6:	f000 fa1b 	bl	800b230 <memcpy>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae04:	81a3      	strh	r3, [r4, #12]
 800ae06:	6126      	str	r6, [r4, #16]
 800ae08:	6165      	str	r5, [r4, #20]
 800ae0a:	444e      	add	r6, r9
 800ae0c:	eba5 0509 	sub.w	r5, r5, r9
 800ae10:	6026      	str	r6, [r4, #0]
 800ae12:	60a5      	str	r5, [r4, #8]
 800ae14:	463e      	mov	r6, r7
 800ae16:	42be      	cmp	r6, r7
 800ae18:	d900      	bls.n	800ae1c <__ssputs_r+0x70>
 800ae1a:	463e      	mov	r6, r7
 800ae1c:	6820      	ldr	r0, [r4, #0]
 800ae1e:	4632      	mov	r2, r6
 800ae20:	4641      	mov	r1, r8
 800ae22:	f000 f9c9 	bl	800b1b8 <memmove>
 800ae26:	68a3      	ldr	r3, [r4, #8]
 800ae28:	1b9b      	subs	r3, r3, r6
 800ae2a:	60a3      	str	r3, [r4, #8]
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	4433      	add	r3, r6
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	2000      	movs	r0, #0
 800ae34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae38:	462a      	mov	r2, r5
 800ae3a:	f000 fdae 	bl	800b99a <_realloc_r>
 800ae3e:	4606      	mov	r6, r0
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d1e0      	bne.n	800ae06 <__ssputs_r+0x5a>
 800ae44:	6921      	ldr	r1, [r4, #16]
 800ae46:	4650      	mov	r0, sl
 800ae48:	f7fe fb6c 	bl	8009524 <_free_r>
 800ae4c:	230c      	movs	r3, #12
 800ae4e:	f8ca 3000 	str.w	r3, [sl]
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae58:	81a3      	strh	r3, [r4, #12]
 800ae5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5e:	e7e9      	b.n	800ae34 <__ssputs_r+0x88>

0800ae60 <_svfiprintf_r>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	4698      	mov	r8, r3
 800ae66:	898b      	ldrh	r3, [r1, #12]
 800ae68:	061b      	lsls	r3, r3, #24
 800ae6a:	b09d      	sub	sp, #116	; 0x74
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	460d      	mov	r5, r1
 800ae70:	4614      	mov	r4, r2
 800ae72:	d50e      	bpl.n	800ae92 <_svfiprintf_r+0x32>
 800ae74:	690b      	ldr	r3, [r1, #16]
 800ae76:	b963      	cbnz	r3, 800ae92 <_svfiprintf_r+0x32>
 800ae78:	2140      	movs	r1, #64	; 0x40
 800ae7a:	f7fe fbc7 	bl	800960c <_malloc_r>
 800ae7e:	6028      	str	r0, [r5, #0]
 800ae80:	6128      	str	r0, [r5, #16]
 800ae82:	b920      	cbnz	r0, 800ae8e <_svfiprintf_r+0x2e>
 800ae84:	230c      	movs	r3, #12
 800ae86:	603b      	str	r3, [r7, #0]
 800ae88:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8c:	e0d0      	b.n	800b030 <_svfiprintf_r+0x1d0>
 800ae8e:	2340      	movs	r3, #64	; 0x40
 800ae90:	616b      	str	r3, [r5, #20]
 800ae92:	2300      	movs	r3, #0
 800ae94:	9309      	str	r3, [sp, #36]	; 0x24
 800ae96:	2320      	movs	r3, #32
 800ae98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aea0:	2330      	movs	r3, #48	; 0x30
 800aea2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b048 <_svfiprintf_r+0x1e8>
 800aea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeaa:	f04f 0901 	mov.w	r9, #1
 800aeae:	4623      	mov	r3, r4
 800aeb0:	469a      	mov	sl, r3
 800aeb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeb6:	b10a      	cbz	r2, 800aebc <_svfiprintf_r+0x5c>
 800aeb8:	2a25      	cmp	r2, #37	; 0x25
 800aeba:	d1f9      	bne.n	800aeb0 <_svfiprintf_r+0x50>
 800aebc:	ebba 0b04 	subs.w	fp, sl, r4
 800aec0:	d00b      	beq.n	800aeda <_svfiprintf_r+0x7a>
 800aec2:	465b      	mov	r3, fp
 800aec4:	4622      	mov	r2, r4
 800aec6:	4629      	mov	r1, r5
 800aec8:	4638      	mov	r0, r7
 800aeca:	f7ff ff6f 	bl	800adac <__ssputs_r>
 800aece:	3001      	adds	r0, #1
 800aed0:	f000 80a9 	beq.w	800b026 <_svfiprintf_r+0x1c6>
 800aed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed6:	445a      	add	r2, fp
 800aed8:	9209      	str	r2, [sp, #36]	; 0x24
 800aeda:	f89a 3000 	ldrb.w	r3, [sl]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 80a1 	beq.w	800b026 <_svfiprintf_r+0x1c6>
 800aee4:	2300      	movs	r3, #0
 800aee6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeee:	f10a 0a01 	add.w	sl, sl, #1
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	9307      	str	r3, [sp, #28]
 800aef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aefa:	931a      	str	r3, [sp, #104]	; 0x68
 800aefc:	4654      	mov	r4, sl
 800aefe:	2205      	movs	r2, #5
 800af00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af04:	4850      	ldr	r0, [pc, #320]	; (800b048 <_svfiprintf_r+0x1e8>)
 800af06:	f7f5 f96b 	bl	80001e0 <memchr>
 800af0a:	9a04      	ldr	r2, [sp, #16]
 800af0c:	b9d8      	cbnz	r0, 800af46 <_svfiprintf_r+0xe6>
 800af0e:	06d0      	lsls	r0, r2, #27
 800af10:	bf44      	itt	mi
 800af12:	2320      	movmi	r3, #32
 800af14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af18:	0711      	lsls	r1, r2, #28
 800af1a:	bf44      	itt	mi
 800af1c:	232b      	movmi	r3, #43	; 0x2b
 800af1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af22:	f89a 3000 	ldrb.w	r3, [sl]
 800af26:	2b2a      	cmp	r3, #42	; 0x2a
 800af28:	d015      	beq.n	800af56 <_svfiprintf_r+0xf6>
 800af2a:	9a07      	ldr	r2, [sp, #28]
 800af2c:	4654      	mov	r4, sl
 800af2e:	2000      	movs	r0, #0
 800af30:	f04f 0c0a 	mov.w	ip, #10
 800af34:	4621      	mov	r1, r4
 800af36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af3a:	3b30      	subs	r3, #48	; 0x30
 800af3c:	2b09      	cmp	r3, #9
 800af3e:	d94d      	bls.n	800afdc <_svfiprintf_r+0x17c>
 800af40:	b1b0      	cbz	r0, 800af70 <_svfiprintf_r+0x110>
 800af42:	9207      	str	r2, [sp, #28]
 800af44:	e014      	b.n	800af70 <_svfiprintf_r+0x110>
 800af46:	eba0 0308 	sub.w	r3, r0, r8
 800af4a:	fa09 f303 	lsl.w	r3, r9, r3
 800af4e:	4313      	orrs	r3, r2
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	46a2      	mov	sl, r4
 800af54:	e7d2      	b.n	800aefc <_svfiprintf_r+0x9c>
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	1d19      	adds	r1, r3, #4
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	9103      	str	r1, [sp, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	bfbb      	ittet	lt
 800af62:	425b      	neglt	r3, r3
 800af64:	f042 0202 	orrlt.w	r2, r2, #2
 800af68:	9307      	strge	r3, [sp, #28]
 800af6a:	9307      	strlt	r3, [sp, #28]
 800af6c:	bfb8      	it	lt
 800af6e:	9204      	strlt	r2, [sp, #16]
 800af70:	7823      	ldrb	r3, [r4, #0]
 800af72:	2b2e      	cmp	r3, #46	; 0x2e
 800af74:	d10c      	bne.n	800af90 <_svfiprintf_r+0x130>
 800af76:	7863      	ldrb	r3, [r4, #1]
 800af78:	2b2a      	cmp	r3, #42	; 0x2a
 800af7a:	d134      	bne.n	800afe6 <_svfiprintf_r+0x186>
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	1d1a      	adds	r2, r3, #4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	9203      	str	r2, [sp, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	bfb8      	it	lt
 800af88:	f04f 33ff 	movlt.w	r3, #4294967295
 800af8c:	3402      	adds	r4, #2
 800af8e:	9305      	str	r3, [sp, #20]
 800af90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b058 <_svfiprintf_r+0x1f8>
 800af94:	7821      	ldrb	r1, [r4, #0]
 800af96:	2203      	movs	r2, #3
 800af98:	4650      	mov	r0, sl
 800af9a:	f7f5 f921 	bl	80001e0 <memchr>
 800af9e:	b138      	cbz	r0, 800afb0 <_svfiprintf_r+0x150>
 800afa0:	9b04      	ldr	r3, [sp, #16]
 800afa2:	eba0 000a 	sub.w	r0, r0, sl
 800afa6:	2240      	movs	r2, #64	; 0x40
 800afa8:	4082      	lsls	r2, r0
 800afaa:	4313      	orrs	r3, r2
 800afac:	3401      	adds	r4, #1
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb4:	4825      	ldr	r0, [pc, #148]	; (800b04c <_svfiprintf_r+0x1ec>)
 800afb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afba:	2206      	movs	r2, #6
 800afbc:	f7f5 f910 	bl	80001e0 <memchr>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d038      	beq.n	800b036 <_svfiprintf_r+0x1d6>
 800afc4:	4b22      	ldr	r3, [pc, #136]	; (800b050 <_svfiprintf_r+0x1f0>)
 800afc6:	bb1b      	cbnz	r3, 800b010 <_svfiprintf_r+0x1b0>
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	3307      	adds	r3, #7
 800afcc:	f023 0307 	bic.w	r3, r3, #7
 800afd0:	3308      	adds	r3, #8
 800afd2:	9303      	str	r3, [sp, #12]
 800afd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd6:	4433      	add	r3, r6
 800afd8:	9309      	str	r3, [sp, #36]	; 0x24
 800afda:	e768      	b.n	800aeae <_svfiprintf_r+0x4e>
 800afdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800afe0:	460c      	mov	r4, r1
 800afe2:	2001      	movs	r0, #1
 800afe4:	e7a6      	b.n	800af34 <_svfiprintf_r+0xd4>
 800afe6:	2300      	movs	r3, #0
 800afe8:	3401      	adds	r4, #1
 800afea:	9305      	str	r3, [sp, #20]
 800afec:	4619      	mov	r1, r3
 800afee:	f04f 0c0a 	mov.w	ip, #10
 800aff2:	4620      	mov	r0, r4
 800aff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff8:	3a30      	subs	r2, #48	; 0x30
 800affa:	2a09      	cmp	r2, #9
 800affc:	d903      	bls.n	800b006 <_svfiprintf_r+0x1a6>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0c6      	beq.n	800af90 <_svfiprintf_r+0x130>
 800b002:	9105      	str	r1, [sp, #20]
 800b004:	e7c4      	b.n	800af90 <_svfiprintf_r+0x130>
 800b006:	fb0c 2101 	mla	r1, ip, r1, r2
 800b00a:	4604      	mov	r4, r0
 800b00c:	2301      	movs	r3, #1
 800b00e:	e7f0      	b.n	800aff2 <_svfiprintf_r+0x192>
 800b010:	ab03      	add	r3, sp, #12
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	462a      	mov	r2, r5
 800b016:	4b0f      	ldr	r3, [pc, #60]	; (800b054 <_svfiprintf_r+0x1f4>)
 800b018:	a904      	add	r1, sp, #16
 800b01a:	4638      	mov	r0, r7
 800b01c:	f7fc fc98 	bl	8007950 <_printf_float>
 800b020:	1c42      	adds	r2, r0, #1
 800b022:	4606      	mov	r6, r0
 800b024:	d1d6      	bne.n	800afd4 <_svfiprintf_r+0x174>
 800b026:	89ab      	ldrh	r3, [r5, #12]
 800b028:	065b      	lsls	r3, r3, #25
 800b02a:	f53f af2d 	bmi.w	800ae88 <_svfiprintf_r+0x28>
 800b02e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b030:	b01d      	add	sp, #116	; 0x74
 800b032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b036:	ab03      	add	r3, sp, #12
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	462a      	mov	r2, r5
 800b03c:	4b05      	ldr	r3, [pc, #20]	; (800b054 <_svfiprintf_r+0x1f4>)
 800b03e:	a904      	add	r1, sp, #16
 800b040:	4638      	mov	r0, r7
 800b042:	f7fc ff29 	bl	8007e98 <_printf_i>
 800b046:	e7eb      	b.n	800b020 <_svfiprintf_r+0x1c0>
 800b048:	0800c531 	.word	0x0800c531
 800b04c:	0800c53b 	.word	0x0800c53b
 800b050:	08007951 	.word	0x08007951
 800b054:	0800adad 	.word	0x0800adad
 800b058:	0800c537 	.word	0x0800c537

0800b05c <__sflush_r>:
 800b05c:	898a      	ldrh	r2, [r1, #12]
 800b05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b062:	4605      	mov	r5, r0
 800b064:	0710      	lsls	r0, r2, #28
 800b066:	460c      	mov	r4, r1
 800b068:	d458      	bmi.n	800b11c <__sflush_r+0xc0>
 800b06a:	684b      	ldr	r3, [r1, #4]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dc05      	bgt.n	800b07c <__sflush_r+0x20>
 800b070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b072:	2b00      	cmp	r3, #0
 800b074:	dc02      	bgt.n	800b07c <__sflush_r+0x20>
 800b076:	2000      	movs	r0, #0
 800b078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b07c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b07e:	2e00      	cmp	r6, #0
 800b080:	d0f9      	beq.n	800b076 <__sflush_r+0x1a>
 800b082:	2300      	movs	r3, #0
 800b084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b088:	682f      	ldr	r7, [r5, #0]
 800b08a:	6a21      	ldr	r1, [r4, #32]
 800b08c:	602b      	str	r3, [r5, #0]
 800b08e:	d032      	beq.n	800b0f6 <__sflush_r+0x9a>
 800b090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	075a      	lsls	r2, r3, #29
 800b096:	d505      	bpl.n	800b0a4 <__sflush_r+0x48>
 800b098:	6863      	ldr	r3, [r4, #4]
 800b09a:	1ac0      	subs	r0, r0, r3
 800b09c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b09e:	b10b      	cbz	r3, 800b0a4 <__sflush_r+0x48>
 800b0a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0a2:	1ac0      	subs	r0, r0, r3
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0aa:	6a21      	ldr	r1, [r4, #32]
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b0      	blx	r6
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	d106      	bne.n	800b0c4 <__sflush_r+0x68>
 800b0b6:	6829      	ldr	r1, [r5, #0]
 800b0b8:	291d      	cmp	r1, #29
 800b0ba:	d82b      	bhi.n	800b114 <__sflush_r+0xb8>
 800b0bc:	4a29      	ldr	r2, [pc, #164]	; (800b164 <__sflush_r+0x108>)
 800b0be:	410a      	asrs	r2, r1
 800b0c0:	07d6      	lsls	r6, r2, #31
 800b0c2:	d427      	bmi.n	800b114 <__sflush_r+0xb8>
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	6062      	str	r2, [r4, #4]
 800b0c8:	04d9      	lsls	r1, r3, #19
 800b0ca:	6922      	ldr	r2, [r4, #16]
 800b0cc:	6022      	str	r2, [r4, #0]
 800b0ce:	d504      	bpl.n	800b0da <__sflush_r+0x7e>
 800b0d0:	1c42      	adds	r2, r0, #1
 800b0d2:	d101      	bne.n	800b0d8 <__sflush_r+0x7c>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b903      	cbnz	r3, 800b0da <__sflush_r+0x7e>
 800b0d8:	6560      	str	r0, [r4, #84]	; 0x54
 800b0da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0dc:	602f      	str	r7, [r5, #0]
 800b0de:	2900      	cmp	r1, #0
 800b0e0:	d0c9      	beq.n	800b076 <__sflush_r+0x1a>
 800b0e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0e6:	4299      	cmp	r1, r3
 800b0e8:	d002      	beq.n	800b0f0 <__sflush_r+0x94>
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f7fe fa1a 	bl	8009524 <_free_r>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	6360      	str	r0, [r4, #52]	; 0x34
 800b0f4:	e7c0      	b.n	800b078 <__sflush_r+0x1c>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	47b0      	blx	r6
 800b0fc:	1c41      	adds	r1, r0, #1
 800b0fe:	d1c8      	bne.n	800b092 <__sflush_r+0x36>
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0c5      	beq.n	800b092 <__sflush_r+0x36>
 800b106:	2b1d      	cmp	r3, #29
 800b108:	d001      	beq.n	800b10e <__sflush_r+0xb2>
 800b10a:	2b16      	cmp	r3, #22
 800b10c:	d101      	bne.n	800b112 <__sflush_r+0xb6>
 800b10e:	602f      	str	r7, [r5, #0]
 800b110:	e7b1      	b.n	800b076 <__sflush_r+0x1a>
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b118:	81a3      	strh	r3, [r4, #12]
 800b11a:	e7ad      	b.n	800b078 <__sflush_r+0x1c>
 800b11c:	690f      	ldr	r7, [r1, #16]
 800b11e:	2f00      	cmp	r7, #0
 800b120:	d0a9      	beq.n	800b076 <__sflush_r+0x1a>
 800b122:	0793      	lsls	r3, r2, #30
 800b124:	680e      	ldr	r6, [r1, #0]
 800b126:	bf08      	it	eq
 800b128:	694b      	ldreq	r3, [r1, #20]
 800b12a:	600f      	str	r7, [r1, #0]
 800b12c:	bf18      	it	ne
 800b12e:	2300      	movne	r3, #0
 800b130:	eba6 0807 	sub.w	r8, r6, r7
 800b134:	608b      	str	r3, [r1, #8]
 800b136:	f1b8 0f00 	cmp.w	r8, #0
 800b13a:	dd9c      	ble.n	800b076 <__sflush_r+0x1a>
 800b13c:	6a21      	ldr	r1, [r4, #32]
 800b13e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b140:	4643      	mov	r3, r8
 800b142:	463a      	mov	r2, r7
 800b144:	4628      	mov	r0, r5
 800b146:	47b0      	blx	r6
 800b148:	2800      	cmp	r0, #0
 800b14a:	dc06      	bgt.n	800b15a <__sflush_r+0xfe>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b152:	81a3      	strh	r3, [r4, #12]
 800b154:	f04f 30ff 	mov.w	r0, #4294967295
 800b158:	e78e      	b.n	800b078 <__sflush_r+0x1c>
 800b15a:	4407      	add	r7, r0
 800b15c:	eba8 0800 	sub.w	r8, r8, r0
 800b160:	e7e9      	b.n	800b136 <__sflush_r+0xda>
 800b162:	bf00      	nop
 800b164:	dfbffffe 	.word	0xdfbffffe

0800b168 <_fflush_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	690b      	ldr	r3, [r1, #16]
 800b16c:	4605      	mov	r5, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	b913      	cbnz	r3, 800b178 <_fflush_r+0x10>
 800b172:	2500      	movs	r5, #0
 800b174:	4628      	mov	r0, r5
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	b118      	cbz	r0, 800b182 <_fflush_r+0x1a>
 800b17a:	6a03      	ldr	r3, [r0, #32]
 800b17c:	b90b      	cbnz	r3, 800b182 <_fflush_r+0x1a>
 800b17e:	f7fd fa37 	bl	80085f0 <__sinit>
 800b182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0f3      	beq.n	800b172 <_fflush_r+0xa>
 800b18a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b18c:	07d0      	lsls	r0, r2, #31
 800b18e:	d404      	bmi.n	800b19a <_fflush_r+0x32>
 800b190:	0599      	lsls	r1, r3, #22
 800b192:	d402      	bmi.n	800b19a <_fflush_r+0x32>
 800b194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b196:	f7fd fb41 	bl	800881c <__retarget_lock_acquire_recursive>
 800b19a:	4628      	mov	r0, r5
 800b19c:	4621      	mov	r1, r4
 800b19e:	f7ff ff5d 	bl	800b05c <__sflush_r>
 800b1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1a4:	07da      	lsls	r2, r3, #31
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	d4e4      	bmi.n	800b174 <_fflush_r+0xc>
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	059b      	lsls	r3, r3, #22
 800b1ae:	d4e1      	bmi.n	800b174 <_fflush_r+0xc>
 800b1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1b2:	f7fd fb34 	bl	800881e <__retarget_lock_release_recursive>
 800b1b6:	e7dd      	b.n	800b174 <_fflush_r+0xc>

0800b1b8 <memmove>:
 800b1b8:	4288      	cmp	r0, r1
 800b1ba:	b510      	push	{r4, lr}
 800b1bc:	eb01 0402 	add.w	r4, r1, r2
 800b1c0:	d902      	bls.n	800b1c8 <memmove+0x10>
 800b1c2:	4284      	cmp	r4, r0
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	d807      	bhi.n	800b1d8 <memmove+0x20>
 800b1c8:	1e43      	subs	r3, r0, #1
 800b1ca:	42a1      	cmp	r1, r4
 800b1cc:	d008      	beq.n	800b1e0 <memmove+0x28>
 800b1ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1d6:	e7f8      	b.n	800b1ca <memmove+0x12>
 800b1d8:	4402      	add	r2, r0
 800b1da:	4601      	mov	r1, r0
 800b1dc:	428a      	cmp	r2, r1
 800b1de:	d100      	bne.n	800b1e2 <memmove+0x2a>
 800b1e0:	bd10      	pop	{r4, pc}
 800b1e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1ea:	e7f7      	b.n	800b1dc <memmove+0x24>

0800b1ec <strncmp>:
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	b16a      	cbz	r2, 800b20c <strncmp+0x20>
 800b1f0:	3901      	subs	r1, #1
 800b1f2:	1884      	adds	r4, r0, r2
 800b1f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d103      	bne.n	800b208 <strncmp+0x1c>
 800b200:	42a0      	cmp	r0, r4
 800b202:	d001      	beq.n	800b208 <strncmp+0x1c>
 800b204:	2a00      	cmp	r2, #0
 800b206:	d1f5      	bne.n	800b1f4 <strncmp+0x8>
 800b208:	1ad0      	subs	r0, r2, r3
 800b20a:	bd10      	pop	{r4, pc}
 800b20c:	4610      	mov	r0, r2
 800b20e:	e7fc      	b.n	800b20a <strncmp+0x1e>

0800b210 <_sbrk_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4d06      	ldr	r5, [pc, #24]	; (800b22c <_sbrk_r+0x1c>)
 800b214:	2300      	movs	r3, #0
 800b216:	4604      	mov	r4, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	f7f6 fb52 	bl	80018c4 <_sbrk>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_sbrk_r+0x1a>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b103      	cbz	r3, 800b22a <_sbrk_r+0x1a>
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	20002730 	.word	0x20002730

0800b230 <memcpy>:
 800b230:	440a      	add	r2, r1
 800b232:	4291      	cmp	r1, r2
 800b234:	f100 33ff 	add.w	r3, r0, #4294967295
 800b238:	d100      	bne.n	800b23c <memcpy+0xc>
 800b23a:	4770      	bx	lr
 800b23c:	b510      	push	{r4, lr}
 800b23e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b242:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b246:	4291      	cmp	r1, r2
 800b248:	d1f9      	bne.n	800b23e <memcpy+0xe>
 800b24a:	bd10      	pop	{r4, pc}
 800b24c:	0000      	movs	r0, r0
	...

0800b250 <nan>:
 800b250:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b258 <nan+0x8>
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	00000000 	.word	0x00000000
 800b25c:	7ff80000 	.word	0x7ff80000

0800b260 <__assert_func>:
 800b260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b262:	4614      	mov	r4, r2
 800b264:	461a      	mov	r2, r3
 800b266:	4b09      	ldr	r3, [pc, #36]	; (800b28c <__assert_func+0x2c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4605      	mov	r5, r0
 800b26c:	68d8      	ldr	r0, [r3, #12]
 800b26e:	b14c      	cbz	r4, 800b284 <__assert_func+0x24>
 800b270:	4b07      	ldr	r3, [pc, #28]	; (800b290 <__assert_func+0x30>)
 800b272:	9100      	str	r1, [sp, #0]
 800b274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b278:	4906      	ldr	r1, [pc, #24]	; (800b294 <__assert_func+0x34>)
 800b27a:	462b      	mov	r3, r5
 800b27c:	f000 fbca 	bl	800ba14 <fiprintf>
 800b280:	f000 fbda 	bl	800ba38 <abort>
 800b284:	4b04      	ldr	r3, [pc, #16]	; (800b298 <__assert_func+0x38>)
 800b286:	461c      	mov	r4, r3
 800b288:	e7f3      	b.n	800b272 <__assert_func+0x12>
 800b28a:	bf00      	nop
 800b28c:	20000068 	.word	0x20000068
 800b290:	0800c54a 	.word	0x0800c54a
 800b294:	0800c557 	.word	0x0800c557
 800b298:	0800c585 	.word	0x0800c585

0800b29c <_calloc_r>:
 800b29c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b29e:	fba1 2402 	umull	r2, r4, r1, r2
 800b2a2:	b94c      	cbnz	r4, 800b2b8 <_calloc_r+0x1c>
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	9201      	str	r2, [sp, #4]
 800b2a8:	f7fe f9b0 	bl	800960c <_malloc_r>
 800b2ac:	9a01      	ldr	r2, [sp, #4]
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	b930      	cbnz	r0, 800b2c0 <_calloc_r+0x24>
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	b003      	add	sp, #12
 800b2b6:	bd30      	pop	{r4, r5, pc}
 800b2b8:	220c      	movs	r2, #12
 800b2ba:	6002      	str	r2, [r0, #0]
 800b2bc:	2500      	movs	r5, #0
 800b2be:	e7f8      	b.n	800b2b2 <_calloc_r+0x16>
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	f7fd fa2e 	bl	8008722 <memset>
 800b2c6:	e7f4      	b.n	800b2b2 <_calloc_r+0x16>

0800b2c8 <rshift>:
 800b2c8:	6903      	ldr	r3, [r0, #16]
 800b2ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2d6:	f100 0414 	add.w	r4, r0, #20
 800b2da:	dd45      	ble.n	800b368 <rshift+0xa0>
 800b2dc:	f011 011f 	ands.w	r1, r1, #31
 800b2e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2e8:	d10c      	bne.n	800b304 <rshift+0x3c>
 800b2ea:	f100 0710 	add.w	r7, r0, #16
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	42b1      	cmp	r1, r6
 800b2f2:	d334      	bcc.n	800b35e <rshift+0x96>
 800b2f4:	1a9b      	subs	r3, r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	1eea      	subs	r2, r5, #3
 800b2fa:	4296      	cmp	r6, r2
 800b2fc:	bf38      	it	cc
 800b2fe:	2300      	movcc	r3, #0
 800b300:	4423      	add	r3, r4
 800b302:	e015      	b.n	800b330 <rshift+0x68>
 800b304:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b308:	f1c1 0820 	rsb	r8, r1, #32
 800b30c:	40cf      	lsrs	r7, r1
 800b30e:	f105 0e04 	add.w	lr, r5, #4
 800b312:	46a1      	mov	r9, r4
 800b314:	4576      	cmp	r6, lr
 800b316:	46f4      	mov	ip, lr
 800b318:	d815      	bhi.n	800b346 <rshift+0x7e>
 800b31a:	1a9a      	subs	r2, r3, r2
 800b31c:	0092      	lsls	r2, r2, #2
 800b31e:	3a04      	subs	r2, #4
 800b320:	3501      	adds	r5, #1
 800b322:	42ae      	cmp	r6, r5
 800b324:	bf38      	it	cc
 800b326:	2200      	movcc	r2, #0
 800b328:	18a3      	adds	r3, r4, r2
 800b32a:	50a7      	str	r7, [r4, r2]
 800b32c:	b107      	cbz	r7, 800b330 <rshift+0x68>
 800b32e:	3304      	adds	r3, #4
 800b330:	1b1a      	subs	r2, r3, r4
 800b332:	42a3      	cmp	r3, r4
 800b334:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b338:	bf08      	it	eq
 800b33a:	2300      	moveq	r3, #0
 800b33c:	6102      	str	r2, [r0, #16]
 800b33e:	bf08      	it	eq
 800b340:	6143      	streq	r3, [r0, #20]
 800b342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b346:	f8dc c000 	ldr.w	ip, [ip]
 800b34a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b34e:	ea4c 0707 	orr.w	r7, ip, r7
 800b352:	f849 7b04 	str.w	r7, [r9], #4
 800b356:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b35a:	40cf      	lsrs	r7, r1
 800b35c:	e7da      	b.n	800b314 <rshift+0x4c>
 800b35e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b362:	f847 cf04 	str.w	ip, [r7, #4]!
 800b366:	e7c3      	b.n	800b2f0 <rshift+0x28>
 800b368:	4623      	mov	r3, r4
 800b36a:	e7e1      	b.n	800b330 <rshift+0x68>

0800b36c <__hexdig_fun>:
 800b36c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b370:	2b09      	cmp	r3, #9
 800b372:	d802      	bhi.n	800b37a <__hexdig_fun+0xe>
 800b374:	3820      	subs	r0, #32
 800b376:	b2c0      	uxtb	r0, r0
 800b378:	4770      	bx	lr
 800b37a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b37e:	2b05      	cmp	r3, #5
 800b380:	d801      	bhi.n	800b386 <__hexdig_fun+0x1a>
 800b382:	3847      	subs	r0, #71	; 0x47
 800b384:	e7f7      	b.n	800b376 <__hexdig_fun+0xa>
 800b386:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b38a:	2b05      	cmp	r3, #5
 800b38c:	d801      	bhi.n	800b392 <__hexdig_fun+0x26>
 800b38e:	3827      	subs	r0, #39	; 0x27
 800b390:	e7f1      	b.n	800b376 <__hexdig_fun+0xa>
 800b392:	2000      	movs	r0, #0
 800b394:	4770      	bx	lr
	...

0800b398 <__gethex>:
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4617      	mov	r7, r2
 800b39e:	680a      	ldr	r2, [r1, #0]
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	f102 0b02 	add.w	fp, r2, #2
 800b3a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3ae:	4681      	mov	r9, r0
 800b3b0:	468a      	mov	sl, r1
 800b3b2:	9302      	str	r3, [sp, #8]
 800b3b4:	32fe      	adds	r2, #254	; 0xfe
 800b3b6:	eb02 030b 	add.w	r3, r2, fp
 800b3ba:	46d8      	mov	r8, fp
 800b3bc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	2830      	cmp	r0, #48	; 0x30
 800b3c4:	d0f7      	beq.n	800b3b6 <__gethex+0x1e>
 800b3c6:	f7ff ffd1 	bl	800b36c <__hexdig_fun>
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d138      	bne.n	800b442 <__gethex+0xaa>
 800b3d0:	49a7      	ldr	r1, [pc, #668]	; (800b670 <__gethex+0x2d8>)
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	f7ff ff09 	bl	800b1ec <strncmp>
 800b3da:	4606      	mov	r6, r0
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d169      	bne.n	800b4b4 <__gethex+0x11c>
 800b3e0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b3e4:	465d      	mov	r5, fp
 800b3e6:	f7ff ffc1 	bl	800b36c <__hexdig_fun>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d064      	beq.n	800b4b8 <__gethex+0x120>
 800b3ee:	465a      	mov	r2, fp
 800b3f0:	7810      	ldrb	r0, [r2, #0]
 800b3f2:	2830      	cmp	r0, #48	; 0x30
 800b3f4:	4690      	mov	r8, r2
 800b3f6:	f102 0201 	add.w	r2, r2, #1
 800b3fa:	d0f9      	beq.n	800b3f0 <__gethex+0x58>
 800b3fc:	f7ff ffb6 	bl	800b36c <__hexdig_fun>
 800b400:	2301      	movs	r3, #1
 800b402:	fab0 f480 	clz	r4, r0
 800b406:	0964      	lsrs	r4, r4, #5
 800b408:	465e      	mov	r6, fp
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	4642      	mov	r2, r8
 800b40e:	4615      	mov	r5, r2
 800b410:	3201      	adds	r2, #1
 800b412:	7828      	ldrb	r0, [r5, #0]
 800b414:	f7ff ffaa 	bl	800b36c <__hexdig_fun>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d1f8      	bne.n	800b40e <__gethex+0x76>
 800b41c:	4994      	ldr	r1, [pc, #592]	; (800b670 <__gethex+0x2d8>)
 800b41e:	2201      	movs	r2, #1
 800b420:	4628      	mov	r0, r5
 800b422:	f7ff fee3 	bl	800b1ec <strncmp>
 800b426:	b978      	cbnz	r0, 800b448 <__gethex+0xb0>
 800b428:	b946      	cbnz	r6, 800b43c <__gethex+0xa4>
 800b42a:	1c6e      	adds	r6, r5, #1
 800b42c:	4632      	mov	r2, r6
 800b42e:	4615      	mov	r5, r2
 800b430:	3201      	adds	r2, #1
 800b432:	7828      	ldrb	r0, [r5, #0]
 800b434:	f7ff ff9a 	bl	800b36c <__hexdig_fun>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d1f8      	bne.n	800b42e <__gethex+0x96>
 800b43c:	1b73      	subs	r3, r6, r5
 800b43e:	009e      	lsls	r6, r3, #2
 800b440:	e004      	b.n	800b44c <__gethex+0xb4>
 800b442:	2400      	movs	r4, #0
 800b444:	4626      	mov	r6, r4
 800b446:	e7e1      	b.n	800b40c <__gethex+0x74>
 800b448:	2e00      	cmp	r6, #0
 800b44a:	d1f7      	bne.n	800b43c <__gethex+0xa4>
 800b44c:	782b      	ldrb	r3, [r5, #0]
 800b44e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b452:	2b50      	cmp	r3, #80	; 0x50
 800b454:	d13d      	bne.n	800b4d2 <__gethex+0x13a>
 800b456:	786b      	ldrb	r3, [r5, #1]
 800b458:	2b2b      	cmp	r3, #43	; 0x2b
 800b45a:	d02f      	beq.n	800b4bc <__gethex+0x124>
 800b45c:	2b2d      	cmp	r3, #45	; 0x2d
 800b45e:	d031      	beq.n	800b4c4 <__gethex+0x12c>
 800b460:	1c69      	adds	r1, r5, #1
 800b462:	f04f 0b00 	mov.w	fp, #0
 800b466:	7808      	ldrb	r0, [r1, #0]
 800b468:	f7ff ff80 	bl	800b36c <__hexdig_fun>
 800b46c:	1e42      	subs	r2, r0, #1
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	2a18      	cmp	r2, #24
 800b472:	d82e      	bhi.n	800b4d2 <__gethex+0x13a>
 800b474:	f1a0 0210 	sub.w	r2, r0, #16
 800b478:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b47c:	f7ff ff76 	bl	800b36c <__hexdig_fun>
 800b480:	f100 3cff 	add.w	ip, r0, #4294967295
 800b484:	fa5f fc8c 	uxtb.w	ip, ip
 800b488:	f1bc 0f18 	cmp.w	ip, #24
 800b48c:	d91d      	bls.n	800b4ca <__gethex+0x132>
 800b48e:	f1bb 0f00 	cmp.w	fp, #0
 800b492:	d000      	beq.n	800b496 <__gethex+0xfe>
 800b494:	4252      	negs	r2, r2
 800b496:	4416      	add	r6, r2
 800b498:	f8ca 1000 	str.w	r1, [sl]
 800b49c:	b1dc      	cbz	r4, 800b4d6 <__gethex+0x13e>
 800b49e:	9b01      	ldr	r3, [sp, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	bf14      	ite	ne
 800b4a4:	f04f 0800 	movne.w	r8, #0
 800b4a8:	f04f 0806 	moveq.w	r8, #6
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	b005      	add	sp, #20
 800b4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b4:	4645      	mov	r5, r8
 800b4b6:	4626      	mov	r6, r4
 800b4b8:	2401      	movs	r4, #1
 800b4ba:	e7c7      	b.n	800b44c <__gethex+0xb4>
 800b4bc:	f04f 0b00 	mov.w	fp, #0
 800b4c0:	1ca9      	adds	r1, r5, #2
 800b4c2:	e7d0      	b.n	800b466 <__gethex+0xce>
 800b4c4:	f04f 0b01 	mov.w	fp, #1
 800b4c8:	e7fa      	b.n	800b4c0 <__gethex+0x128>
 800b4ca:	230a      	movs	r3, #10
 800b4cc:	fb03 0002 	mla	r0, r3, r2, r0
 800b4d0:	e7d0      	b.n	800b474 <__gethex+0xdc>
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	e7e0      	b.n	800b498 <__gethex+0x100>
 800b4d6:	eba5 0308 	sub.w	r3, r5, r8
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	4621      	mov	r1, r4
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	dc0a      	bgt.n	800b4f8 <__gethex+0x160>
 800b4e2:	4648      	mov	r0, r9
 800b4e4:	f7fe f91e 	bl	8009724 <_Balloc>
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	b940      	cbnz	r0, 800b4fe <__gethex+0x166>
 800b4ec:	4b61      	ldr	r3, [pc, #388]	; (800b674 <__gethex+0x2dc>)
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	21e4      	movs	r1, #228	; 0xe4
 800b4f2:	4861      	ldr	r0, [pc, #388]	; (800b678 <__gethex+0x2e0>)
 800b4f4:	f7ff feb4 	bl	800b260 <__assert_func>
 800b4f8:	3101      	adds	r1, #1
 800b4fa:	105b      	asrs	r3, r3, #1
 800b4fc:	e7ef      	b.n	800b4de <__gethex+0x146>
 800b4fe:	f100 0a14 	add.w	sl, r0, #20
 800b502:	2300      	movs	r3, #0
 800b504:	495a      	ldr	r1, [pc, #360]	; (800b670 <__gethex+0x2d8>)
 800b506:	f8cd a004 	str.w	sl, [sp, #4]
 800b50a:	469b      	mov	fp, r3
 800b50c:	45a8      	cmp	r8, r5
 800b50e:	d342      	bcc.n	800b596 <__gethex+0x1fe>
 800b510:	9801      	ldr	r0, [sp, #4]
 800b512:	f840 bb04 	str.w	fp, [r0], #4
 800b516:	eba0 000a 	sub.w	r0, r0, sl
 800b51a:	1080      	asrs	r0, r0, #2
 800b51c:	6120      	str	r0, [r4, #16]
 800b51e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b522:	4658      	mov	r0, fp
 800b524:	f7fe f9f0 	bl	8009908 <__hi0bits>
 800b528:	683d      	ldr	r5, [r7, #0]
 800b52a:	eba8 0000 	sub.w	r0, r8, r0
 800b52e:	42a8      	cmp	r0, r5
 800b530:	dd59      	ble.n	800b5e6 <__gethex+0x24e>
 800b532:	eba0 0805 	sub.w	r8, r0, r5
 800b536:	4641      	mov	r1, r8
 800b538:	4620      	mov	r0, r4
 800b53a:	f7fe fd7f 	bl	800a03c <__any_on>
 800b53e:	4683      	mov	fp, r0
 800b540:	b1b8      	cbz	r0, 800b572 <__gethex+0x1da>
 800b542:	f108 33ff 	add.w	r3, r8, #4294967295
 800b546:	1159      	asrs	r1, r3, #5
 800b548:	f003 021f 	and.w	r2, r3, #31
 800b54c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b550:	f04f 0b01 	mov.w	fp, #1
 800b554:	fa0b f202 	lsl.w	r2, fp, r2
 800b558:	420a      	tst	r2, r1
 800b55a:	d00a      	beq.n	800b572 <__gethex+0x1da>
 800b55c:	455b      	cmp	r3, fp
 800b55e:	dd06      	ble.n	800b56e <__gethex+0x1d6>
 800b560:	f1a8 0102 	sub.w	r1, r8, #2
 800b564:	4620      	mov	r0, r4
 800b566:	f7fe fd69 	bl	800a03c <__any_on>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d138      	bne.n	800b5e0 <__gethex+0x248>
 800b56e:	f04f 0b02 	mov.w	fp, #2
 800b572:	4641      	mov	r1, r8
 800b574:	4620      	mov	r0, r4
 800b576:	f7ff fea7 	bl	800b2c8 <rshift>
 800b57a:	4446      	add	r6, r8
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	42b3      	cmp	r3, r6
 800b580:	da41      	bge.n	800b606 <__gethex+0x26e>
 800b582:	4621      	mov	r1, r4
 800b584:	4648      	mov	r0, r9
 800b586:	f7fe f90d 	bl	80097a4 <_Bfree>
 800b58a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b58c:	2300      	movs	r3, #0
 800b58e:	6013      	str	r3, [r2, #0]
 800b590:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b594:	e78a      	b.n	800b4ac <__gethex+0x114>
 800b596:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b59a:	2a2e      	cmp	r2, #46	; 0x2e
 800b59c:	d014      	beq.n	800b5c8 <__gethex+0x230>
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	d106      	bne.n	800b5b0 <__gethex+0x218>
 800b5a2:	9b01      	ldr	r3, [sp, #4]
 800b5a4:	f843 bb04 	str.w	fp, [r3], #4
 800b5a8:	f04f 0b00 	mov.w	fp, #0
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	465b      	mov	r3, fp
 800b5b0:	7828      	ldrb	r0, [r5, #0]
 800b5b2:	9303      	str	r3, [sp, #12]
 800b5b4:	f7ff feda 	bl	800b36c <__hexdig_fun>
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	f000 000f 	and.w	r0, r0, #15
 800b5be:	4098      	lsls	r0, r3
 800b5c0:	ea4b 0b00 	orr.w	fp, fp, r0
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	e7a1      	b.n	800b50c <__gethex+0x174>
 800b5c8:	45a8      	cmp	r8, r5
 800b5ca:	d8e8      	bhi.n	800b59e <__gethex+0x206>
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	9303      	str	r3, [sp, #12]
 800b5d2:	f7ff fe0b 	bl	800b1ec <strncmp>
 800b5d6:	4926      	ldr	r1, [pc, #152]	; (800b670 <__gethex+0x2d8>)
 800b5d8:	9b03      	ldr	r3, [sp, #12]
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d1df      	bne.n	800b59e <__gethex+0x206>
 800b5de:	e795      	b.n	800b50c <__gethex+0x174>
 800b5e0:	f04f 0b03 	mov.w	fp, #3
 800b5e4:	e7c5      	b.n	800b572 <__gethex+0x1da>
 800b5e6:	da0b      	bge.n	800b600 <__gethex+0x268>
 800b5e8:	eba5 0800 	sub.w	r8, r5, r0
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4642      	mov	r2, r8
 800b5f0:	4648      	mov	r0, r9
 800b5f2:	f7fe faf1 	bl	8009bd8 <__lshift>
 800b5f6:	eba6 0608 	sub.w	r6, r6, r8
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	f100 0a14 	add.w	sl, r0, #20
 800b600:	f04f 0b00 	mov.w	fp, #0
 800b604:	e7ba      	b.n	800b57c <__gethex+0x1e4>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	42b3      	cmp	r3, r6
 800b60a:	dd73      	ble.n	800b6f4 <__gethex+0x35c>
 800b60c:	1b9e      	subs	r6, r3, r6
 800b60e:	42b5      	cmp	r5, r6
 800b610:	dc34      	bgt.n	800b67c <__gethex+0x2e4>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b02      	cmp	r3, #2
 800b616:	d023      	beq.n	800b660 <__gethex+0x2c8>
 800b618:	2b03      	cmp	r3, #3
 800b61a:	d025      	beq.n	800b668 <__gethex+0x2d0>
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d115      	bne.n	800b64c <__gethex+0x2b4>
 800b620:	42b5      	cmp	r5, r6
 800b622:	d113      	bne.n	800b64c <__gethex+0x2b4>
 800b624:	2d01      	cmp	r5, #1
 800b626:	d10b      	bne.n	800b640 <__gethex+0x2a8>
 800b628:	9a02      	ldr	r2, [sp, #8]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6013      	str	r3, [r2, #0]
 800b62e:	2301      	movs	r3, #1
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	f8ca 3000 	str.w	r3, [sl]
 800b636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b638:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b63c:	601c      	str	r4, [r3, #0]
 800b63e:	e735      	b.n	800b4ac <__gethex+0x114>
 800b640:	1e69      	subs	r1, r5, #1
 800b642:	4620      	mov	r0, r4
 800b644:	f7fe fcfa 	bl	800a03c <__any_on>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d1ed      	bne.n	800b628 <__gethex+0x290>
 800b64c:	4621      	mov	r1, r4
 800b64e:	4648      	mov	r0, r9
 800b650:	f7fe f8a8 	bl	80097a4 <_Bfree>
 800b654:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b656:	2300      	movs	r3, #0
 800b658:	6013      	str	r3, [r2, #0]
 800b65a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b65e:	e725      	b.n	800b4ac <__gethex+0x114>
 800b660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1f2      	bne.n	800b64c <__gethex+0x2b4>
 800b666:	e7df      	b.n	800b628 <__gethex+0x290>
 800b668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1dc      	bne.n	800b628 <__gethex+0x290>
 800b66e:	e7ed      	b.n	800b64c <__gethex+0x2b4>
 800b670:	0800c3dc 	.word	0x0800c3dc
 800b674:	0800c271 	.word	0x0800c271
 800b678:	0800c586 	.word	0x0800c586
 800b67c:	f106 38ff 	add.w	r8, r6, #4294967295
 800b680:	f1bb 0f00 	cmp.w	fp, #0
 800b684:	d133      	bne.n	800b6ee <__gethex+0x356>
 800b686:	f1b8 0f00 	cmp.w	r8, #0
 800b68a:	d004      	beq.n	800b696 <__gethex+0x2fe>
 800b68c:	4641      	mov	r1, r8
 800b68e:	4620      	mov	r0, r4
 800b690:	f7fe fcd4 	bl	800a03c <__any_on>
 800b694:	4683      	mov	fp, r0
 800b696:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b69a:	2301      	movs	r3, #1
 800b69c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6a0:	f008 081f 	and.w	r8, r8, #31
 800b6a4:	fa03 f308 	lsl.w	r3, r3, r8
 800b6a8:	4213      	tst	r3, r2
 800b6aa:	4631      	mov	r1, r6
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	bf18      	it	ne
 800b6b0:	f04b 0b02 	orrne.w	fp, fp, #2
 800b6b4:	1bad      	subs	r5, r5, r6
 800b6b6:	f7ff fe07 	bl	800b2c8 <rshift>
 800b6ba:	687e      	ldr	r6, [r7, #4]
 800b6bc:	f04f 0802 	mov.w	r8, #2
 800b6c0:	f1bb 0f00 	cmp.w	fp, #0
 800b6c4:	d04a      	beq.n	800b75c <__gethex+0x3c4>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d016      	beq.n	800b6fa <__gethex+0x362>
 800b6cc:	2b03      	cmp	r3, #3
 800b6ce:	d018      	beq.n	800b702 <__gethex+0x36a>
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d109      	bne.n	800b6e8 <__gethex+0x350>
 800b6d4:	f01b 0f02 	tst.w	fp, #2
 800b6d8:	d006      	beq.n	800b6e8 <__gethex+0x350>
 800b6da:	f8da 3000 	ldr.w	r3, [sl]
 800b6de:	ea4b 0b03 	orr.w	fp, fp, r3
 800b6e2:	f01b 0f01 	tst.w	fp, #1
 800b6e6:	d10f      	bne.n	800b708 <__gethex+0x370>
 800b6e8:	f048 0810 	orr.w	r8, r8, #16
 800b6ec:	e036      	b.n	800b75c <__gethex+0x3c4>
 800b6ee:	f04f 0b01 	mov.w	fp, #1
 800b6f2:	e7d0      	b.n	800b696 <__gethex+0x2fe>
 800b6f4:	f04f 0801 	mov.w	r8, #1
 800b6f8:	e7e2      	b.n	800b6c0 <__gethex+0x328>
 800b6fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6fc:	f1c3 0301 	rsb	r3, r3, #1
 800b700:	930f      	str	r3, [sp, #60]	; 0x3c
 800b702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0ef      	beq.n	800b6e8 <__gethex+0x350>
 800b708:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b70c:	f104 0214 	add.w	r2, r4, #20
 800b710:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b71a:	2300      	movs	r3, #0
 800b71c:	4694      	mov	ip, r2
 800b71e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b722:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b726:	d01e      	beq.n	800b766 <__gethex+0x3ce>
 800b728:	3101      	adds	r1, #1
 800b72a:	f8cc 1000 	str.w	r1, [ip]
 800b72e:	f1b8 0f02 	cmp.w	r8, #2
 800b732:	f104 0214 	add.w	r2, r4, #20
 800b736:	d13d      	bne.n	800b7b4 <__gethex+0x41c>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	42ab      	cmp	r3, r5
 800b73e:	d10b      	bne.n	800b758 <__gethex+0x3c0>
 800b740:	1169      	asrs	r1, r5, #5
 800b742:	2301      	movs	r3, #1
 800b744:	f005 051f 	and.w	r5, r5, #31
 800b748:	fa03 f505 	lsl.w	r5, r3, r5
 800b74c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b750:	421d      	tst	r5, r3
 800b752:	bf18      	it	ne
 800b754:	f04f 0801 	movne.w	r8, #1
 800b758:	f048 0820 	orr.w	r8, r8, #32
 800b75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b75e:	601c      	str	r4, [r3, #0]
 800b760:	9b02      	ldr	r3, [sp, #8]
 800b762:	601e      	str	r6, [r3, #0]
 800b764:	e6a2      	b.n	800b4ac <__gethex+0x114>
 800b766:	4290      	cmp	r0, r2
 800b768:	f842 3c04 	str.w	r3, [r2, #-4]
 800b76c:	d8d6      	bhi.n	800b71c <__gethex+0x384>
 800b76e:	68a2      	ldr	r2, [r4, #8]
 800b770:	4593      	cmp	fp, r2
 800b772:	db17      	blt.n	800b7a4 <__gethex+0x40c>
 800b774:	6861      	ldr	r1, [r4, #4]
 800b776:	4648      	mov	r0, r9
 800b778:	3101      	adds	r1, #1
 800b77a:	f7fd ffd3 	bl	8009724 <_Balloc>
 800b77e:	4682      	mov	sl, r0
 800b780:	b918      	cbnz	r0, 800b78a <__gethex+0x3f2>
 800b782:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <__gethex+0x458>)
 800b784:	4602      	mov	r2, r0
 800b786:	2184      	movs	r1, #132	; 0x84
 800b788:	e6b3      	b.n	800b4f2 <__gethex+0x15a>
 800b78a:	6922      	ldr	r2, [r4, #16]
 800b78c:	3202      	adds	r2, #2
 800b78e:	f104 010c 	add.w	r1, r4, #12
 800b792:	0092      	lsls	r2, r2, #2
 800b794:	300c      	adds	r0, #12
 800b796:	f7ff fd4b 	bl	800b230 <memcpy>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4648      	mov	r0, r9
 800b79e:	f7fe f801 	bl	80097a4 <_Bfree>
 800b7a2:	4654      	mov	r4, sl
 800b7a4:	6922      	ldr	r2, [r4, #16]
 800b7a6:	1c51      	adds	r1, r2, #1
 800b7a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b7ac:	6121      	str	r1, [r4, #16]
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	6151      	str	r1, [r2, #20]
 800b7b2:	e7bc      	b.n	800b72e <__gethex+0x396>
 800b7b4:	6921      	ldr	r1, [r4, #16]
 800b7b6:	4559      	cmp	r1, fp
 800b7b8:	dd0b      	ble.n	800b7d2 <__gethex+0x43a>
 800b7ba:	2101      	movs	r1, #1
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f7ff fd83 	bl	800b2c8 <rshift>
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	3601      	adds	r6, #1
 800b7c6:	42b3      	cmp	r3, r6
 800b7c8:	f6ff aedb 	blt.w	800b582 <__gethex+0x1ea>
 800b7cc:	f04f 0801 	mov.w	r8, #1
 800b7d0:	e7c2      	b.n	800b758 <__gethex+0x3c0>
 800b7d2:	f015 051f 	ands.w	r5, r5, #31
 800b7d6:	d0f9      	beq.n	800b7cc <__gethex+0x434>
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	441a      	add	r2, r3
 800b7dc:	f1c5 0520 	rsb	r5, r5, #32
 800b7e0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b7e4:	f7fe f890 	bl	8009908 <__hi0bits>
 800b7e8:	42a8      	cmp	r0, r5
 800b7ea:	dbe6      	blt.n	800b7ba <__gethex+0x422>
 800b7ec:	e7ee      	b.n	800b7cc <__gethex+0x434>
 800b7ee:	bf00      	nop
 800b7f0:	0800c271 	.word	0x0800c271

0800b7f4 <L_shift>:
 800b7f4:	f1c2 0208 	rsb	r2, r2, #8
 800b7f8:	0092      	lsls	r2, r2, #2
 800b7fa:	b570      	push	{r4, r5, r6, lr}
 800b7fc:	f1c2 0620 	rsb	r6, r2, #32
 800b800:	6843      	ldr	r3, [r0, #4]
 800b802:	6804      	ldr	r4, [r0, #0]
 800b804:	fa03 f506 	lsl.w	r5, r3, r6
 800b808:	432c      	orrs	r4, r5
 800b80a:	40d3      	lsrs	r3, r2
 800b80c:	6004      	str	r4, [r0, #0]
 800b80e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b812:	4288      	cmp	r0, r1
 800b814:	d3f4      	bcc.n	800b800 <L_shift+0xc>
 800b816:	bd70      	pop	{r4, r5, r6, pc}

0800b818 <__match>:
 800b818:	b530      	push	{r4, r5, lr}
 800b81a:	6803      	ldr	r3, [r0, #0]
 800b81c:	3301      	adds	r3, #1
 800b81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b822:	b914      	cbnz	r4, 800b82a <__match+0x12>
 800b824:	6003      	str	r3, [r0, #0]
 800b826:	2001      	movs	r0, #1
 800b828:	bd30      	pop	{r4, r5, pc}
 800b82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b82e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b832:	2d19      	cmp	r5, #25
 800b834:	bf98      	it	ls
 800b836:	3220      	addls	r2, #32
 800b838:	42a2      	cmp	r2, r4
 800b83a:	d0f0      	beq.n	800b81e <__match+0x6>
 800b83c:	2000      	movs	r0, #0
 800b83e:	e7f3      	b.n	800b828 <__match+0x10>

0800b840 <__hexnan>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	680b      	ldr	r3, [r1, #0]
 800b846:	6801      	ldr	r1, [r0, #0]
 800b848:	115e      	asrs	r6, r3, #5
 800b84a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b84e:	f013 031f 	ands.w	r3, r3, #31
 800b852:	b087      	sub	sp, #28
 800b854:	bf18      	it	ne
 800b856:	3604      	addne	r6, #4
 800b858:	2500      	movs	r5, #0
 800b85a:	1f37      	subs	r7, r6, #4
 800b85c:	4682      	mov	sl, r0
 800b85e:	4690      	mov	r8, r2
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	f846 5c04 	str.w	r5, [r6, #-4]
 800b866:	46b9      	mov	r9, r7
 800b868:	463c      	mov	r4, r7
 800b86a:	9502      	str	r5, [sp, #8]
 800b86c:	46ab      	mov	fp, r5
 800b86e:	784a      	ldrb	r2, [r1, #1]
 800b870:	1c4b      	adds	r3, r1, #1
 800b872:	9303      	str	r3, [sp, #12]
 800b874:	b342      	cbz	r2, 800b8c8 <__hexnan+0x88>
 800b876:	4610      	mov	r0, r2
 800b878:	9105      	str	r1, [sp, #20]
 800b87a:	9204      	str	r2, [sp, #16]
 800b87c:	f7ff fd76 	bl	800b36c <__hexdig_fun>
 800b880:	2800      	cmp	r0, #0
 800b882:	d14f      	bne.n	800b924 <__hexnan+0xe4>
 800b884:	9a04      	ldr	r2, [sp, #16]
 800b886:	9905      	ldr	r1, [sp, #20]
 800b888:	2a20      	cmp	r2, #32
 800b88a:	d818      	bhi.n	800b8be <__hexnan+0x7e>
 800b88c:	9b02      	ldr	r3, [sp, #8]
 800b88e:	459b      	cmp	fp, r3
 800b890:	dd13      	ble.n	800b8ba <__hexnan+0x7a>
 800b892:	454c      	cmp	r4, r9
 800b894:	d206      	bcs.n	800b8a4 <__hexnan+0x64>
 800b896:	2d07      	cmp	r5, #7
 800b898:	dc04      	bgt.n	800b8a4 <__hexnan+0x64>
 800b89a:	462a      	mov	r2, r5
 800b89c:	4649      	mov	r1, r9
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7ff ffa8 	bl	800b7f4 <L_shift>
 800b8a4:	4544      	cmp	r4, r8
 800b8a6:	d950      	bls.n	800b94a <__hexnan+0x10a>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f1a4 0904 	sub.w	r9, r4, #4
 800b8ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8b2:	f8cd b008 	str.w	fp, [sp, #8]
 800b8b6:	464c      	mov	r4, r9
 800b8b8:	461d      	mov	r5, r3
 800b8ba:	9903      	ldr	r1, [sp, #12]
 800b8bc:	e7d7      	b.n	800b86e <__hexnan+0x2e>
 800b8be:	2a29      	cmp	r2, #41	; 0x29
 800b8c0:	d155      	bne.n	800b96e <__hexnan+0x12e>
 800b8c2:	3102      	adds	r1, #2
 800b8c4:	f8ca 1000 	str.w	r1, [sl]
 800b8c8:	f1bb 0f00 	cmp.w	fp, #0
 800b8cc:	d04f      	beq.n	800b96e <__hexnan+0x12e>
 800b8ce:	454c      	cmp	r4, r9
 800b8d0:	d206      	bcs.n	800b8e0 <__hexnan+0xa0>
 800b8d2:	2d07      	cmp	r5, #7
 800b8d4:	dc04      	bgt.n	800b8e0 <__hexnan+0xa0>
 800b8d6:	462a      	mov	r2, r5
 800b8d8:	4649      	mov	r1, r9
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7ff ff8a 	bl	800b7f4 <L_shift>
 800b8e0:	4544      	cmp	r4, r8
 800b8e2:	d934      	bls.n	800b94e <__hexnan+0x10e>
 800b8e4:	f1a8 0204 	sub.w	r2, r8, #4
 800b8e8:	4623      	mov	r3, r4
 800b8ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800b8f2:	429f      	cmp	r7, r3
 800b8f4:	d2f9      	bcs.n	800b8ea <__hexnan+0xaa>
 800b8f6:	1b3b      	subs	r3, r7, r4
 800b8f8:	f023 0303 	bic.w	r3, r3, #3
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	3e03      	subs	r6, #3
 800b900:	3401      	adds	r4, #1
 800b902:	42a6      	cmp	r6, r4
 800b904:	bf38      	it	cc
 800b906:	2304      	movcc	r3, #4
 800b908:	4443      	add	r3, r8
 800b90a:	2200      	movs	r2, #0
 800b90c:	f843 2b04 	str.w	r2, [r3], #4
 800b910:	429f      	cmp	r7, r3
 800b912:	d2fb      	bcs.n	800b90c <__hexnan+0xcc>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	b91b      	cbnz	r3, 800b920 <__hexnan+0xe0>
 800b918:	4547      	cmp	r7, r8
 800b91a:	d126      	bne.n	800b96a <__hexnan+0x12a>
 800b91c:	2301      	movs	r3, #1
 800b91e:	603b      	str	r3, [r7, #0]
 800b920:	2005      	movs	r0, #5
 800b922:	e025      	b.n	800b970 <__hexnan+0x130>
 800b924:	3501      	adds	r5, #1
 800b926:	2d08      	cmp	r5, #8
 800b928:	f10b 0b01 	add.w	fp, fp, #1
 800b92c:	dd06      	ble.n	800b93c <__hexnan+0xfc>
 800b92e:	4544      	cmp	r4, r8
 800b930:	d9c3      	bls.n	800b8ba <__hexnan+0x7a>
 800b932:	2300      	movs	r3, #0
 800b934:	f844 3c04 	str.w	r3, [r4, #-4]
 800b938:	2501      	movs	r5, #1
 800b93a:	3c04      	subs	r4, #4
 800b93c:	6822      	ldr	r2, [r4, #0]
 800b93e:	f000 000f 	and.w	r0, r0, #15
 800b942:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b946:	6020      	str	r0, [r4, #0]
 800b948:	e7b7      	b.n	800b8ba <__hexnan+0x7a>
 800b94a:	2508      	movs	r5, #8
 800b94c:	e7b5      	b.n	800b8ba <__hexnan+0x7a>
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0df      	beq.n	800b914 <__hexnan+0xd4>
 800b954:	f1c3 0320 	rsb	r3, r3, #32
 800b958:	f04f 32ff 	mov.w	r2, #4294967295
 800b95c:	40da      	lsrs	r2, r3
 800b95e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b962:	4013      	ands	r3, r2
 800b964:	f846 3c04 	str.w	r3, [r6, #-4]
 800b968:	e7d4      	b.n	800b914 <__hexnan+0xd4>
 800b96a:	3f04      	subs	r7, #4
 800b96c:	e7d2      	b.n	800b914 <__hexnan+0xd4>
 800b96e:	2004      	movs	r0, #4
 800b970:	b007      	add	sp, #28
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b976 <__ascii_mbtowc>:
 800b976:	b082      	sub	sp, #8
 800b978:	b901      	cbnz	r1, 800b97c <__ascii_mbtowc+0x6>
 800b97a:	a901      	add	r1, sp, #4
 800b97c:	b142      	cbz	r2, 800b990 <__ascii_mbtowc+0x1a>
 800b97e:	b14b      	cbz	r3, 800b994 <__ascii_mbtowc+0x1e>
 800b980:	7813      	ldrb	r3, [r2, #0]
 800b982:	600b      	str	r3, [r1, #0]
 800b984:	7812      	ldrb	r2, [r2, #0]
 800b986:	1e10      	subs	r0, r2, #0
 800b988:	bf18      	it	ne
 800b98a:	2001      	movne	r0, #1
 800b98c:	b002      	add	sp, #8
 800b98e:	4770      	bx	lr
 800b990:	4610      	mov	r0, r2
 800b992:	e7fb      	b.n	800b98c <__ascii_mbtowc+0x16>
 800b994:	f06f 0001 	mvn.w	r0, #1
 800b998:	e7f8      	b.n	800b98c <__ascii_mbtowc+0x16>

0800b99a <_realloc_r>:
 800b99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99e:	4680      	mov	r8, r0
 800b9a0:	4614      	mov	r4, r2
 800b9a2:	460e      	mov	r6, r1
 800b9a4:	b921      	cbnz	r1, 800b9b0 <_realloc_r+0x16>
 800b9a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	f7fd be2e 	b.w	800960c <_malloc_r>
 800b9b0:	b92a      	cbnz	r2, 800b9be <_realloc_r+0x24>
 800b9b2:	f7fd fdb7 	bl	8009524 <_free_r>
 800b9b6:	4625      	mov	r5, r4
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9be:	f000 f842 	bl	800ba46 <_malloc_usable_size_r>
 800b9c2:	4284      	cmp	r4, r0
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	d802      	bhi.n	800b9ce <_realloc_r+0x34>
 800b9c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9cc:	d812      	bhi.n	800b9f4 <_realloc_r+0x5a>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	f7fd fe1b 	bl	800960c <_malloc_r>
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d0ed      	beq.n	800b9b8 <_realloc_r+0x1e>
 800b9dc:	42bc      	cmp	r4, r7
 800b9de:	4622      	mov	r2, r4
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	bf28      	it	cs
 800b9e4:	463a      	movcs	r2, r7
 800b9e6:	f7ff fc23 	bl	800b230 <memcpy>
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4640      	mov	r0, r8
 800b9ee:	f7fd fd99 	bl	8009524 <_free_r>
 800b9f2:	e7e1      	b.n	800b9b8 <_realloc_r+0x1e>
 800b9f4:	4635      	mov	r5, r6
 800b9f6:	e7df      	b.n	800b9b8 <_realloc_r+0x1e>

0800b9f8 <__ascii_wctomb>:
 800b9f8:	b149      	cbz	r1, 800ba0e <__ascii_wctomb+0x16>
 800b9fa:	2aff      	cmp	r2, #255	; 0xff
 800b9fc:	bf85      	ittet	hi
 800b9fe:	238a      	movhi	r3, #138	; 0x8a
 800ba00:	6003      	strhi	r3, [r0, #0]
 800ba02:	700a      	strbls	r2, [r1, #0]
 800ba04:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba08:	bf98      	it	ls
 800ba0a:	2001      	movls	r0, #1
 800ba0c:	4770      	bx	lr
 800ba0e:	4608      	mov	r0, r1
 800ba10:	4770      	bx	lr
	...

0800ba14 <fiprintf>:
 800ba14:	b40e      	push	{r1, r2, r3}
 800ba16:	b503      	push	{r0, r1, lr}
 800ba18:	4601      	mov	r1, r0
 800ba1a:	ab03      	add	r3, sp, #12
 800ba1c:	4805      	ldr	r0, [pc, #20]	; (800ba34 <fiprintf+0x20>)
 800ba1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba22:	6800      	ldr	r0, [r0, #0]
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	f000 f83f 	bl	800baa8 <_vfiprintf_r>
 800ba2a:	b002      	add	sp, #8
 800ba2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba30:	b003      	add	sp, #12
 800ba32:	4770      	bx	lr
 800ba34:	20000068 	.word	0x20000068

0800ba38 <abort>:
 800ba38:	b508      	push	{r3, lr}
 800ba3a:	2006      	movs	r0, #6
 800ba3c:	f000 fa0c 	bl	800be58 <raise>
 800ba40:	2001      	movs	r0, #1
 800ba42:	f7f5 fec7 	bl	80017d4 <_exit>

0800ba46 <_malloc_usable_size_r>:
 800ba46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba4a:	1f18      	subs	r0, r3, #4
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	bfbc      	itt	lt
 800ba50:	580b      	ldrlt	r3, [r1, r0]
 800ba52:	18c0      	addlt	r0, r0, r3
 800ba54:	4770      	bx	lr

0800ba56 <__sfputc_r>:
 800ba56:	6893      	ldr	r3, [r2, #8]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	b410      	push	{r4}
 800ba5e:	6093      	str	r3, [r2, #8]
 800ba60:	da08      	bge.n	800ba74 <__sfputc_r+0x1e>
 800ba62:	6994      	ldr	r4, [r2, #24]
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	db01      	blt.n	800ba6c <__sfputc_r+0x16>
 800ba68:	290a      	cmp	r1, #10
 800ba6a:	d103      	bne.n	800ba74 <__sfputc_r+0x1e>
 800ba6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba70:	f000 b934 	b.w	800bcdc <__swbuf_r>
 800ba74:	6813      	ldr	r3, [r2, #0]
 800ba76:	1c58      	adds	r0, r3, #1
 800ba78:	6010      	str	r0, [r2, #0]
 800ba7a:	7019      	strb	r1, [r3, #0]
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <__sfputs_r>:
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba86:	4606      	mov	r6, r0
 800ba88:	460f      	mov	r7, r1
 800ba8a:	4614      	mov	r4, r2
 800ba8c:	18d5      	adds	r5, r2, r3
 800ba8e:	42ac      	cmp	r4, r5
 800ba90:	d101      	bne.n	800ba96 <__sfputs_r+0x12>
 800ba92:	2000      	movs	r0, #0
 800ba94:	e007      	b.n	800baa6 <__sfputs_r+0x22>
 800ba96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba9a:	463a      	mov	r2, r7
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f7ff ffda 	bl	800ba56 <__sfputc_r>
 800baa2:	1c43      	adds	r3, r0, #1
 800baa4:	d1f3      	bne.n	800ba8e <__sfputs_r+0xa>
 800baa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800baa8 <_vfiprintf_r>:
 800baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baac:	460d      	mov	r5, r1
 800baae:	b09d      	sub	sp, #116	; 0x74
 800bab0:	4614      	mov	r4, r2
 800bab2:	4698      	mov	r8, r3
 800bab4:	4606      	mov	r6, r0
 800bab6:	b118      	cbz	r0, 800bac0 <_vfiprintf_r+0x18>
 800bab8:	6a03      	ldr	r3, [r0, #32]
 800baba:	b90b      	cbnz	r3, 800bac0 <_vfiprintf_r+0x18>
 800babc:	f7fc fd98 	bl	80085f0 <__sinit>
 800bac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac2:	07d9      	lsls	r1, r3, #31
 800bac4:	d405      	bmi.n	800bad2 <_vfiprintf_r+0x2a>
 800bac6:	89ab      	ldrh	r3, [r5, #12]
 800bac8:	059a      	lsls	r2, r3, #22
 800baca:	d402      	bmi.n	800bad2 <_vfiprintf_r+0x2a>
 800bacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bace:	f7fc fea5 	bl	800881c <__retarget_lock_acquire_recursive>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	071b      	lsls	r3, r3, #28
 800bad6:	d501      	bpl.n	800badc <_vfiprintf_r+0x34>
 800bad8:	692b      	ldr	r3, [r5, #16]
 800bada:	b99b      	cbnz	r3, 800bb04 <_vfiprintf_r+0x5c>
 800badc:	4629      	mov	r1, r5
 800bade:	4630      	mov	r0, r6
 800bae0:	f000 f93a 	bl	800bd58 <__swsetup_r>
 800bae4:	b170      	cbz	r0, 800bb04 <_vfiprintf_r+0x5c>
 800bae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae8:	07dc      	lsls	r4, r3, #31
 800baea:	d504      	bpl.n	800baf6 <_vfiprintf_r+0x4e>
 800baec:	f04f 30ff 	mov.w	r0, #4294967295
 800baf0:	b01d      	add	sp, #116	; 0x74
 800baf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	89ab      	ldrh	r3, [r5, #12]
 800baf8:	0598      	lsls	r0, r3, #22
 800bafa:	d4f7      	bmi.n	800baec <_vfiprintf_r+0x44>
 800bafc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bafe:	f7fc fe8e 	bl	800881e <__retarget_lock_release_recursive>
 800bb02:	e7f3      	b.n	800baec <_vfiprintf_r+0x44>
 800bb04:	2300      	movs	r3, #0
 800bb06:	9309      	str	r3, [sp, #36]	; 0x24
 800bb08:	2320      	movs	r3, #32
 800bb0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb12:	2330      	movs	r3, #48	; 0x30
 800bb14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bcc8 <_vfiprintf_r+0x220>
 800bb18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb1c:	f04f 0901 	mov.w	r9, #1
 800bb20:	4623      	mov	r3, r4
 800bb22:	469a      	mov	sl, r3
 800bb24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb28:	b10a      	cbz	r2, 800bb2e <_vfiprintf_r+0x86>
 800bb2a:	2a25      	cmp	r2, #37	; 0x25
 800bb2c:	d1f9      	bne.n	800bb22 <_vfiprintf_r+0x7a>
 800bb2e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb32:	d00b      	beq.n	800bb4c <_vfiprintf_r+0xa4>
 800bb34:	465b      	mov	r3, fp
 800bb36:	4622      	mov	r2, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7ff ffa2 	bl	800ba84 <__sfputs_r>
 800bb40:	3001      	adds	r0, #1
 800bb42:	f000 80a9 	beq.w	800bc98 <_vfiprintf_r+0x1f0>
 800bb46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb48:	445a      	add	r2, fp
 800bb4a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f000 80a1 	beq.w	800bc98 <_vfiprintf_r+0x1f0>
 800bb56:	2300      	movs	r3, #0
 800bb58:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb60:	f10a 0a01 	add.w	sl, sl, #1
 800bb64:	9304      	str	r3, [sp, #16]
 800bb66:	9307      	str	r3, [sp, #28]
 800bb68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb6c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb6e:	4654      	mov	r4, sl
 800bb70:	2205      	movs	r2, #5
 800bb72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb76:	4854      	ldr	r0, [pc, #336]	; (800bcc8 <_vfiprintf_r+0x220>)
 800bb78:	f7f4 fb32 	bl	80001e0 <memchr>
 800bb7c:	9a04      	ldr	r2, [sp, #16]
 800bb7e:	b9d8      	cbnz	r0, 800bbb8 <_vfiprintf_r+0x110>
 800bb80:	06d1      	lsls	r1, r2, #27
 800bb82:	bf44      	itt	mi
 800bb84:	2320      	movmi	r3, #32
 800bb86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb8a:	0713      	lsls	r3, r2, #28
 800bb8c:	bf44      	itt	mi
 800bb8e:	232b      	movmi	r3, #43	; 0x2b
 800bb90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb94:	f89a 3000 	ldrb.w	r3, [sl]
 800bb98:	2b2a      	cmp	r3, #42	; 0x2a
 800bb9a:	d015      	beq.n	800bbc8 <_vfiprintf_r+0x120>
 800bb9c:	9a07      	ldr	r2, [sp, #28]
 800bb9e:	4654      	mov	r4, sl
 800bba0:	2000      	movs	r0, #0
 800bba2:	f04f 0c0a 	mov.w	ip, #10
 800bba6:	4621      	mov	r1, r4
 800bba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbac:	3b30      	subs	r3, #48	; 0x30
 800bbae:	2b09      	cmp	r3, #9
 800bbb0:	d94d      	bls.n	800bc4e <_vfiprintf_r+0x1a6>
 800bbb2:	b1b0      	cbz	r0, 800bbe2 <_vfiprintf_r+0x13a>
 800bbb4:	9207      	str	r2, [sp, #28]
 800bbb6:	e014      	b.n	800bbe2 <_vfiprintf_r+0x13a>
 800bbb8:	eba0 0308 	sub.w	r3, r0, r8
 800bbbc:	fa09 f303 	lsl.w	r3, r9, r3
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	9304      	str	r3, [sp, #16]
 800bbc4:	46a2      	mov	sl, r4
 800bbc6:	e7d2      	b.n	800bb6e <_vfiprintf_r+0xc6>
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	1d19      	adds	r1, r3, #4
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	9103      	str	r1, [sp, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	bfbb      	ittet	lt
 800bbd4:	425b      	neglt	r3, r3
 800bbd6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbda:	9307      	strge	r3, [sp, #28]
 800bbdc:	9307      	strlt	r3, [sp, #28]
 800bbde:	bfb8      	it	lt
 800bbe0:	9204      	strlt	r2, [sp, #16]
 800bbe2:	7823      	ldrb	r3, [r4, #0]
 800bbe4:	2b2e      	cmp	r3, #46	; 0x2e
 800bbe6:	d10c      	bne.n	800bc02 <_vfiprintf_r+0x15a>
 800bbe8:	7863      	ldrb	r3, [r4, #1]
 800bbea:	2b2a      	cmp	r3, #42	; 0x2a
 800bbec:	d134      	bne.n	800bc58 <_vfiprintf_r+0x1b0>
 800bbee:	9b03      	ldr	r3, [sp, #12]
 800bbf0:	1d1a      	adds	r2, r3, #4
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	9203      	str	r2, [sp, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	bfb8      	it	lt
 800bbfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbfe:	3402      	adds	r4, #2
 800bc00:	9305      	str	r3, [sp, #20]
 800bc02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bcd8 <_vfiprintf_r+0x230>
 800bc06:	7821      	ldrb	r1, [r4, #0]
 800bc08:	2203      	movs	r2, #3
 800bc0a:	4650      	mov	r0, sl
 800bc0c:	f7f4 fae8 	bl	80001e0 <memchr>
 800bc10:	b138      	cbz	r0, 800bc22 <_vfiprintf_r+0x17a>
 800bc12:	9b04      	ldr	r3, [sp, #16]
 800bc14:	eba0 000a 	sub.w	r0, r0, sl
 800bc18:	2240      	movs	r2, #64	; 0x40
 800bc1a:	4082      	lsls	r2, r0
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	3401      	adds	r4, #1
 800bc20:	9304      	str	r3, [sp, #16]
 800bc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc26:	4829      	ldr	r0, [pc, #164]	; (800bccc <_vfiprintf_r+0x224>)
 800bc28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc2c:	2206      	movs	r2, #6
 800bc2e:	f7f4 fad7 	bl	80001e0 <memchr>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d03f      	beq.n	800bcb6 <_vfiprintf_r+0x20e>
 800bc36:	4b26      	ldr	r3, [pc, #152]	; (800bcd0 <_vfiprintf_r+0x228>)
 800bc38:	bb1b      	cbnz	r3, 800bc82 <_vfiprintf_r+0x1da>
 800bc3a:	9b03      	ldr	r3, [sp, #12]
 800bc3c:	3307      	adds	r3, #7
 800bc3e:	f023 0307 	bic.w	r3, r3, #7
 800bc42:	3308      	adds	r3, #8
 800bc44:	9303      	str	r3, [sp, #12]
 800bc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc48:	443b      	add	r3, r7
 800bc4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc4c:	e768      	b.n	800bb20 <_vfiprintf_r+0x78>
 800bc4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc52:	460c      	mov	r4, r1
 800bc54:	2001      	movs	r0, #1
 800bc56:	e7a6      	b.n	800bba6 <_vfiprintf_r+0xfe>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	3401      	adds	r4, #1
 800bc5c:	9305      	str	r3, [sp, #20]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	f04f 0c0a 	mov.w	ip, #10
 800bc64:	4620      	mov	r0, r4
 800bc66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc6a:	3a30      	subs	r2, #48	; 0x30
 800bc6c:	2a09      	cmp	r2, #9
 800bc6e:	d903      	bls.n	800bc78 <_vfiprintf_r+0x1d0>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d0c6      	beq.n	800bc02 <_vfiprintf_r+0x15a>
 800bc74:	9105      	str	r1, [sp, #20]
 800bc76:	e7c4      	b.n	800bc02 <_vfiprintf_r+0x15a>
 800bc78:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e7f0      	b.n	800bc64 <_vfiprintf_r+0x1bc>
 800bc82:	ab03      	add	r3, sp, #12
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4b12      	ldr	r3, [pc, #72]	; (800bcd4 <_vfiprintf_r+0x22c>)
 800bc8a:	a904      	add	r1, sp, #16
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f7fb fe5f 	bl	8007950 <_printf_float>
 800bc92:	4607      	mov	r7, r0
 800bc94:	1c78      	adds	r0, r7, #1
 800bc96:	d1d6      	bne.n	800bc46 <_vfiprintf_r+0x19e>
 800bc98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc9a:	07d9      	lsls	r1, r3, #31
 800bc9c:	d405      	bmi.n	800bcaa <_vfiprintf_r+0x202>
 800bc9e:	89ab      	ldrh	r3, [r5, #12]
 800bca0:	059a      	lsls	r2, r3, #22
 800bca2:	d402      	bmi.n	800bcaa <_vfiprintf_r+0x202>
 800bca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bca6:	f7fc fdba 	bl	800881e <__retarget_lock_release_recursive>
 800bcaa:	89ab      	ldrh	r3, [r5, #12]
 800bcac:	065b      	lsls	r3, r3, #25
 800bcae:	f53f af1d 	bmi.w	800baec <_vfiprintf_r+0x44>
 800bcb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcb4:	e71c      	b.n	800baf0 <_vfiprintf_r+0x48>
 800bcb6:	ab03      	add	r3, sp, #12
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	462a      	mov	r2, r5
 800bcbc:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <_vfiprintf_r+0x22c>)
 800bcbe:	a904      	add	r1, sp, #16
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7fc f8e9 	bl	8007e98 <_printf_i>
 800bcc6:	e7e4      	b.n	800bc92 <_vfiprintf_r+0x1ea>
 800bcc8:	0800c531 	.word	0x0800c531
 800bccc:	0800c53b 	.word	0x0800c53b
 800bcd0:	08007951 	.word	0x08007951
 800bcd4:	0800ba85 	.word	0x0800ba85
 800bcd8:	0800c537 	.word	0x0800c537

0800bcdc <__swbuf_r>:
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcde:	460e      	mov	r6, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	4605      	mov	r5, r0
 800bce4:	b118      	cbz	r0, 800bcee <__swbuf_r+0x12>
 800bce6:	6a03      	ldr	r3, [r0, #32]
 800bce8:	b90b      	cbnz	r3, 800bcee <__swbuf_r+0x12>
 800bcea:	f7fc fc81 	bl	80085f0 <__sinit>
 800bcee:	69a3      	ldr	r3, [r4, #24]
 800bcf0:	60a3      	str	r3, [r4, #8]
 800bcf2:	89a3      	ldrh	r3, [r4, #12]
 800bcf4:	071a      	lsls	r2, r3, #28
 800bcf6:	d525      	bpl.n	800bd44 <__swbuf_r+0x68>
 800bcf8:	6923      	ldr	r3, [r4, #16]
 800bcfa:	b31b      	cbz	r3, 800bd44 <__swbuf_r+0x68>
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	6922      	ldr	r2, [r4, #16]
 800bd00:	1a98      	subs	r0, r3, r2
 800bd02:	6963      	ldr	r3, [r4, #20]
 800bd04:	b2f6      	uxtb	r6, r6
 800bd06:	4283      	cmp	r3, r0
 800bd08:	4637      	mov	r7, r6
 800bd0a:	dc04      	bgt.n	800bd16 <__swbuf_r+0x3a>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f7ff fa2a 	bl	800b168 <_fflush_r>
 800bd14:	b9e0      	cbnz	r0, 800bd50 <__swbuf_r+0x74>
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	60a3      	str	r3, [r4, #8]
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	6022      	str	r2, [r4, #0]
 800bd22:	701e      	strb	r6, [r3, #0]
 800bd24:	6962      	ldr	r2, [r4, #20]
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d004      	beq.n	800bd36 <__swbuf_r+0x5a>
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	07db      	lsls	r3, r3, #31
 800bd30:	d506      	bpl.n	800bd40 <__swbuf_r+0x64>
 800bd32:	2e0a      	cmp	r6, #10
 800bd34:	d104      	bne.n	800bd40 <__swbuf_r+0x64>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f7ff fa15 	bl	800b168 <_fflush_r>
 800bd3e:	b938      	cbnz	r0, 800bd50 <__swbuf_r+0x74>
 800bd40:	4638      	mov	r0, r7
 800bd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd44:	4621      	mov	r1, r4
 800bd46:	4628      	mov	r0, r5
 800bd48:	f000 f806 	bl	800bd58 <__swsetup_r>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d0d5      	beq.n	800bcfc <__swbuf_r+0x20>
 800bd50:	f04f 37ff 	mov.w	r7, #4294967295
 800bd54:	e7f4      	b.n	800bd40 <__swbuf_r+0x64>
	...

0800bd58 <__swsetup_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4b2a      	ldr	r3, [pc, #168]	; (800be04 <__swsetup_r+0xac>)
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	6818      	ldr	r0, [r3, #0]
 800bd60:	460c      	mov	r4, r1
 800bd62:	b118      	cbz	r0, 800bd6c <__swsetup_r+0x14>
 800bd64:	6a03      	ldr	r3, [r0, #32]
 800bd66:	b90b      	cbnz	r3, 800bd6c <__swsetup_r+0x14>
 800bd68:	f7fc fc42 	bl	80085f0 <__sinit>
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd72:	0718      	lsls	r0, r3, #28
 800bd74:	d422      	bmi.n	800bdbc <__swsetup_r+0x64>
 800bd76:	06d9      	lsls	r1, r3, #27
 800bd78:	d407      	bmi.n	800bd8a <__swsetup_r+0x32>
 800bd7a:	2309      	movs	r3, #9
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd82:	81a3      	strh	r3, [r4, #12]
 800bd84:	f04f 30ff 	mov.w	r0, #4294967295
 800bd88:	e034      	b.n	800bdf4 <__swsetup_r+0x9c>
 800bd8a:	0758      	lsls	r0, r3, #29
 800bd8c:	d512      	bpl.n	800bdb4 <__swsetup_r+0x5c>
 800bd8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd90:	b141      	cbz	r1, 800bda4 <__swsetup_r+0x4c>
 800bd92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd96:	4299      	cmp	r1, r3
 800bd98:	d002      	beq.n	800bda0 <__swsetup_r+0x48>
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f7fd fbc2 	bl	8009524 <_free_r>
 800bda0:	2300      	movs	r3, #0
 800bda2:	6363      	str	r3, [r4, #52]	; 0x34
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	2300      	movs	r3, #0
 800bdae:	6063      	str	r3, [r4, #4]
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	f043 0308 	orr.w	r3, r3, #8
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	6923      	ldr	r3, [r4, #16]
 800bdbe:	b94b      	cbnz	r3, 800bdd4 <__swsetup_r+0x7c>
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bdc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdca:	d003      	beq.n	800bdd4 <__swsetup_r+0x7c>
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4628      	mov	r0, r5
 800bdd0:	f000 f884 	bl	800bedc <__smakebuf_r>
 800bdd4:	89a0      	ldrh	r0, [r4, #12]
 800bdd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdda:	f010 0301 	ands.w	r3, r0, #1
 800bdde:	d00a      	beq.n	800bdf6 <__swsetup_r+0x9e>
 800bde0:	2300      	movs	r3, #0
 800bde2:	60a3      	str	r3, [r4, #8]
 800bde4:	6963      	ldr	r3, [r4, #20]
 800bde6:	425b      	negs	r3, r3
 800bde8:	61a3      	str	r3, [r4, #24]
 800bdea:	6923      	ldr	r3, [r4, #16]
 800bdec:	b943      	cbnz	r3, 800be00 <__swsetup_r+0xa8>
 800bdee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdf2:	d1c4      	bne.n	800bd7e <__swsetup_r+0x26>
 800bdf4:	bd38      	pop	{r3, r4, r5, pc}
 800bdf6:	0781      	lsls	r1, r0, #30
 800bdf8:	bf58      	it	pl
 800bdfa:	6963      	ldrpl	r3, [r4, #20]
 800bdfc:	60a3      	str	r3, [r4, #8]
 800bdfe:	e7f4      	b.n	800bdea <__swsetup_r+0x92>
 800be00:	2000      	movs	r0, #0
 800be02:	e7f7      	b.n	800bdf4 <__swsetup_r+0x9c>
 800be04:	20000068 	.word	0x20000068

0800be08 <_raise_r>:
 800be08:	291f      	cmp	r1, #31
 800be0a:	b538      	push	{r3, r4, r5, lr}
 800be0c:	4604      	mov	r4, r0
 800be0e:	460d      	mov	r5, r1
 800be10:	d904      	bls.n	800be1c <_raise_r+0x14>
 800be12:	2316      	movs	r3, #22
 800be14:	6003      	str	r3, [r0, #0]
 800be16:	f04f 30ff 	mov.w	r0, #4294967295
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800be1e:	b112      	cbz	r2, 800be26 <_raise_r+0x1e>
 800be20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be24:	b94b      	cbnz	r3, 800be3a <_raise_r+0x32>
 800be26:	4620      	mov	r0, r4
 800be28:	f000 f830 	bl	800be8c <_getpid_r>
 800be2c:	462a      	mov	r2, r5
 800be2e:	4601      	mov	r1, r0
 800be30:	4620      	mov	r0, r4
 800be32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be36:	f000 b817 	b.w	800be68 <_kill_r>
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d00a      	beq.n	800be54 <_raise_r+0x4c>
 800be3e:	1c59      	adds	r1, r3, #1
 800be40:	d103      	bne.n	800be4a <_raise_r+0x42>
 800be42:	2316      	movs	r3, #22
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	2001      	movs	r0, #1
 800be48:	e7e7      	b.n	800be1a <_raise_r+0x12>
 800be4a:	2400      	movs	r4, #0
 800be4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be50:	4628      	mov	r0, r5
 800be52:	4798      	blx	r3
 800be54:	2000      	movs	r0, #0
 800be56:	e7e0      	b.n	800be1a <_raise_r+0x12>

0800be58 <raise>:
 800be58:	4b02      	ldr	r3, [pc, #8]	; (800be64 <raise+0xc>)
 800be5a:	4601      	mov	r1, r0
 800be5c:	6818      	ldr	r0, [r3, #0]
 800be5e:	f7ff bfd3 	b.w	800be08 <_raise_r>
 800be62:	bf00      	nop
 800be64:	20000068 	.word	0x20000068

0800be68 <_kill_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d07      	ldr	r5, [pc, #28]	; (800be88 <_kill_r+0x20>)
 800be6c:	2300      	movs	r3, #0
 800be6e:	4604      	mov	r4, r0
 800be70:	4608      	mov	r0, r1
 800be72:	4611      	mov	r1, r2
 800be74:	602b      	str	r3, [r5, #0]
 800be76:	f7f5 fc9d 	bl	80017b4 <_kill>
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	d102      	bne.n	800be84 <_kill_r+0x1c>
 800be7e:	682b      	ldr	r3, [r5, #0]
 800be80:	b103      	cbz	r3, 800be84 <_kill_r+0x1c>
 800be82:	6023      	str	r3, [r4, #0]
 800be84:	bd38      	pop	{r3, r4, r5, pc}
 800be86:	bf00      	nop
 800be88:	20002730 	.word	0x20002730

0800be8c <_getpid_r>:
 800be8c:	f7f5 bc8a 	b.w	80017a4 <_getpid>

0800be90 <__swhatbuf_r>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	460c      	mov	r4, r1
 800be94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be98:	2900      	cmp	r1, #0
 800be9a:	b096      	sub	sp, #88	; 0x58
 800be9c:	4615      	mov	r5, r2
 800be9e:	461e      	mov	r6, r3
 800bea0:	da0d      	bge.n	800bebe <__swhatbuf_r+0x2e>
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bea8:	f04f 0100 	mov.w	r1, #0
 800beac:	bf0c      	ite	eq
 800beae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800beb2:	2340      	movne	r3, #64	; 0x40
 800beb4:	2000      	movs	r0, #0
 800beb6:	6031      	str	r1, [r6, #0]
 800beb8:	602b      	str	r3, [r5, #0]
 800beba:	b016      	add	sp, #88	; 0x58
 800bebc:	bd70      	pop	{r4, r5, r6, pc}
 800bebe:	466a      	mov	r2, sp
 800bec0:	f000 f848 	bl	800bf54 <_fstat_r>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	dbec      	blt.n	800bea2 <__swhatbuf_r+0x12>
 800bec8:	9901      	ldr	r1, [sp, #4]
 800beca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bece:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bed2:	4259      	negs	r1, r3
 800bed4:	4159      	adcs	r1, r3
 800bed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beda:	e7eb      	b.n	800beb4 <__swhatbuf_r+0x24>

0800bedc <__smakebuf_r>:
 800bedc:	898b      	ldrh	r3, [r1, #12]
 800bede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bee0:	079d      	lsls	r5, r3, #30
 800bee2:	4606      	mov	r6, r0
 800bee4:	460c      	mov	r4, r1
 800bee6:	d507      	bpl.n	800bef8 <__smakebuf_r+0x1c>
 800bee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	6123      	str	r3, [r4, #16]
 800bef0:	2301      	movs	r3, #1
 800bef2:	6163      	str	r3, [r4, #20]
 800bef4:	b002      	add	sp, #8
 800bef6:	bd70      	pop	{r4, r5, r6, pc}
 800bef8:	ab01      	add	r3, sp, #4
 800befa:	466a      	mov	r2, sp
 800befc:	f7ff ffc8 	bl	800be90 <__swhatbuf_r>
 800bf00:	9900      	ldr	r1, [sp, #0]
 800bf02:	4605      	mov	r5, r0
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7fd fb81 	bl	800960c <_malloc_r>
 800bf0a:	b948      	cbnz	r0, 800bf20 <__smakebuf_r+0x44>
 800bf0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf10:	059a      	lsls	r2, r3, #22
 800bf12:	d4ef      	bmi.n	800bef4 <__smakebuf_r+0x18>
 800bf14:	f023 0303 	bic.w	r3, r3, #3
 800bf18:	f043 0302 	orr.w	r3, r3, #2
 800bf1c:	81a3      	strh	r3, [r4, #12]
 800bf1e:	e7e3      	b.n	800bee8 <__smakebuf_r+0xc>
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	6020      	str	r0, [r4, #0]
 800bf24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf28:	81a3      	strh	r3, [r4, #12]
 800bf2a:	9b00      	ldr	r3, [sp, #0]
 800bf2c:	6163      	str	r3, [r4, #20]
 800bf2e:	9b01      	ldr	r3, [sp, #4]
 800bf30:	6120      	str	r0, [r4, #16]
 800bf32:	b15b      	cbz	r3, 800bf4c <__smakebuf_r+0x70>
 800bf34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f000 f81d 	bl	800bf78 <_isatty_r>
 800bf3e:	b128      	cbz	r0, 800bf4c <__smakebuf_r+0x70>
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	f043 0301 	orr.w	r3, r3, #1
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	431d      	orrs	r5, r3
 800bf50:	81a5      	strh	r5, [r4, #12]
 800bf52:	e7cf      	b.n	800bef4 <__smakebuf_r+0x18>

0800bf54 <_fstat_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4d07      	ldr	r5, [pc, #28]	; (800bf74 <_fstat_r+0x20>)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	4611      	mov	r1, r2
 800bf60:	602b      	str	r3, [r5, #0]
 800bf62:	f7f5 fc86 	bl	8001872 <_fstat>
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	d102      	bne.n	800bf70 <_fstat_r+0x1c>
 800bf6a:	682b      	ldr	r3, [r5, #0]
 800bf6c:	b103      	cbz	r3, 800bf70 <_fstat_r+0x1c>
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	bd38      	pop	{r3, r4, r5, pc}
 800bf72:	bf00      	nop
 800bf74:	20002730 	.word	0x20002730

0800bf78 <_isatty_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d06      	ldr	r5, [pc, #24]	; (800bf94 <_isatty_r+0x1c>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	602b      	str	r3, [r5, #0]
 800bf84:	f7f5 fc85 	bl	8001892 <_isatty>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d102      	bne.n	800bf92 <_isatty_r+0x1a>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	b103      	cbz	r3, 800bf92 <_isatty_r+0x1a>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	20002730 	.word	0x20002730

0800bf98 <_init>:
 800bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9a:	bf00      	nop
 800bf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9e:	bc08      	pop	{r3}
 800bfa0:	469e      	mov	lr, r3
 800bfa2:	4770      	bx	lr

0800bfa4 <_fini>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	bf00      	nop
 800bfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfaa:	bc08      	pop	{r3}
 800bfac:	469e      	mov	lr, r3
 800bfae:	4770      	bx	lr
