
SDIO_SDcardOps_Driver-APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbe8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800bd88  0800bd88  0001bd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2b8  0800c2b8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2b8  0800c2b8  0001c2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2c0  0800c2c0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2c0  0800c2c0  0001c2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2c4  0800c2c4  0001c2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001374  200001d4  0800c49c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001548  0800c49c  00021548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102e1  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b1d  00000000  00000000  00030528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00033048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af3  00000000  00000000  00033eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040ac  00000000  00000000  000349a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013aeb  00000000  00000000  00038a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d9c2  00000000  00000000  0004c53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f74  00000000  00000000  000d9efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000dee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd70 	.word	0x0800bd70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800bd70 	.word	0x0800bd70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <SD_Mount>:
 * 			   And your PC,STM's MCU... use this logic driver
 * @param[IN]  SD_path is Logical drive number. It can be "E:\","e/" , "\", "1:" etc.
 * 		   	   Check your SD card's name that is given from the PC
 */
FRESULT SD_Mount (const TCHAR* SD_path, BYTE Mount_Op)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
	SD_result = f_mount(&FATFS_Ob, SD_path, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <SD_Mount+0x34>)
 8001012:	f006 f939 	bl	8007288 <f_mount>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <SD_Mount+0x38>)
 800101c:	701a      	strb	r2, [r3, #0]

	if(SD_result != FR_OK){
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <SD_Mount+0x38>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d000      	beq.n	8001028 <SD_Mount+0x28>
		/**
		 * Buzzer will be activated like biiip biip bip
		 */
		while(1);
 8001026:	e7fe      	b.n	8001026 <SD_Mount+0x26>
	}
	else{

		return FR_OK;
 8001028:	2300      	movs	r3, #0

	}
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001f0 	.word	0x200001f0
 8001038:	20001224 	.word	0x20001224

0800103c <SD_Create_Dir>:


FRESULT SD_Create_Dir(const TCHAR* SD_path){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	SD_result = f_mkdir(SD_path);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f006 f965 	bl	8007314 <f_mkdir>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <SD_Create_Dir+0x34>)
 8001050:	701a      	strb	r2, [r3, #0]

	if ((SD_result != FR_OK)&&(SD_result != FR_EXIST))
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <SD_Create_Dir+0x34>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <SD_Create_Dir+0x28>
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SD_Create_Dir+0x34>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b08      	cmp	r3, #8
 8001060:	d000      	beq.n	8001064 <SD_Create_Dir+0x28>
	  	  while(1);
 8001062:	e7fe      	b.n	8001062 <SD_Create_Dir+0x26>


}
 8001064:	bf00      	nop
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20001224 	.word	0x20001224

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f000 fbf8 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f816 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001080:	f000 f8f0 	bl	8001264 <MX_GPIO_Init>
  MX_DMA_Init();
 8001084:	f000 f8c6 	bl	8001214 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001088:	f000 f87a 	bl	8001180 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800108c:	f004 fa78 	bl	8005580 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8001090:	f000 f896 	bl	80011c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /**
   * you can not write "E:" , "e:" ;
   */
  SD_Mount ("E/", 1);
 8001094:	2101      	movs	r1, #1
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <main+0x30>)
 8001098:	f7ff ffb2 	bl	8001000 <SD_Mount>


  SD_Create_Dir("sub1");
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <main+0x34>)
 800109e:	f7ff ffcd 	bl	800103c <SD_Create_Dir>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <main+0x2e>
 80010a4:	0800bd88 	.word	0x0800bd88
 80010a8:	0800bd8c 	.word	0x0800bd8c

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fad1 	bl	8008662 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <SystemClock_Config+0xcc>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a27      	ldr	r2, [pc, #156]	; (8001178 <SystemClock_Config+0xcc>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <SystemClock_Config+0xcc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <SystemClock_Config+0xd0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <SystemClock_Config+0xd0>)
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <SystemClock_Config+0xd0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001120:	230f      	movs	r3, #15
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001124:	2390      	movs	r3, #144	; 0x90
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001128:	2304      	movs	r3, #4
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800112c:	2305      	movs	r3, #5
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fa63 	bl	8002600 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001140:	f000 f8d4 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2302      	movs	r3, #2
 800114a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2101      	movs	r1, #1
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fcc5 	bl	8002af0 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800116c:	f000 f8be 	bl	80012ec <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	; 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_SDIO_SD_Init+0x38>)
 8001186:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <MX_SDIO_SD_Init+0x3c>)
 8001188:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_SDIO_SD_Init+0x38>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_SDIO_SD_Init+0x38>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_SDIO_SD_Init+0x38>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_SDIO_SD_Init+0x38>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <MX_SDIO_SD_Init+0x38>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 20;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <MX_SDIO_SD_Init+0x38>)
 80011aa:	2214      	movs	r2, #20
 80011ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20001228 	.word	0x20001228
 80011bc:	40012c00 	.word	0x40012c00

080011c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_USART1_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011f8:	f003 f98d 	bl	8004516 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f873 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000136c 	.word	0x2000136c
 8001210:	40011000 	.word	0x40011000

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_DMA_Init+0x4c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <MX_DMA_Init+0x4c>)
 8001224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <MX_DMA_Init+0x4c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	203b      	movs	r0, #59	; 0x3b
 800123c:	f000 fc87 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001240:	203b      	movs	r0, #59	; 0x3b
 8001242:	f000 fca0 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2045      	movs	r0, #69	; 0x45
 800124c:	f000 fc7f 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001250:	2045      	movs	r0, #69	; 0x45
 8001252:	f000 fc98 	bl	8001b86 <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_GPIO_Init+0x84>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <MX_GPIO_Init+0x84>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_GPIO_Init+0x84>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_GPIO_Init+0x84>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <MX_GPIO_Init+0x84>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_GPIO_Init+0x84>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_GPIO_Init+0x84>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <MX_GPIO_Init+0x84>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <MX_GPIO_Init+0x84>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_GPIO_Init+0x84>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <MX_GPIO_Init+0x84>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_GPIO_Init+0x84>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <HAL_MspInit+0x4c>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_MspInit+0x4c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a70      	ldr	r2, [pc, #448]	; (8001528 <HAL_SD_MspInit+0x1e0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	f040 80da 	bne.w	8001520 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	4b6e      	ldr	r3, [pc, #440]	; (800152c <HAL_SD_MspInit+0x1e4>)
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	4a6d      	ldr	r2, [pc, #436]	; (800152c <HAL_SD_MspInit+0x1e4>)
 8001376:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137a:	6453      	str	r3, [r2, #68]	; 0x44
 800137c:	4b6b      	ldr	r3, [pc, #428]	; (800152c <HAL_SD_MspInit+0x1e4>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4b67      	ldr	r3, [pc, #412]	; (800152c <HAL_SD_MspInit+0x1e4>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a66      	ldr	r2, [pc, #408]	; (800152c <HAL_SD_MspInit+0x1e4>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
 8001398:	4b64      	ldr	r3, [pc, #400]	; (800152c <HAL_SD_MspInit+0x1e4>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	4b60      	ldr	r3, [pc, #384]	; (800152c <HAL_SD_MspInit+0x1e4>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4a5f      	ldr	r2, [pc, #380]	; (800152c <HAL_SD_MspInit+0x1e4>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6313      	str	r3, [r2, #48]	; 0x30
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <HAL_SD_MspInit+0x1e4>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80013c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013d2:	230c      	movs	r3, #12
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4854      	ldr	r0, [pc, #336]	; (8001530 <HAL_SD_MspInit+0x1e8>)
 80013de:	f000 ff8b 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013f4:	230c      	movs	r3, #12
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	484c      	ldr	r0, [pc, #304]	; (8001530 <HAL_SD_MspInit+0x1e8>)
 8001400:	f000 ff7a 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001404:	2304      	movs	r3, #4
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140c:	2301      	movs	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001414:	230c      	movs	r3, #12
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4845      	ldr	r0, [pc, #276]	; (8001534 <HAL_SD_MspInit+0x1ec>)
 8001420:	f000 ff6a 	bl	80022f8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001424:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001426:	4a45      	ldr	r2, [pc, #276]	; (800153c <HAL_SD_MspInit+0x1f4>)
 8001428:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 800142c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001430:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001438:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800143e:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001444:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800144e:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001450:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001454:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001458:	2220      	movs	r2, #32
 800145a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001462:	4b35      	ldr	r3, [pc, #212]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001464:	2204      	movs	r2, #4
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001468:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 800146a:	2203      	movs	r2, #3
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800146e:	4b32      	ldr	r3, [pc, #200]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001470:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001476:	4b30      	ldr	r3, [pc, #192]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001478:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800147c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800147e:	482e      	ldr	r0, [pc, #184]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001480:	f000 fb9c 	bl	8001bbc <HAL_DMA_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800148a:	f7ff ff2f 	bl	80012ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a29      	ldr	r2, [pc, #164]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
 8001494:	4a28      	ldr	r2, [pc, #160]	; (8001538 <HAL_SD_MspInit+0x1f0>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_SD_MspInit+0x1fc>)
 800149e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ba:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ca:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014ce:	2220      	movs	r2, #32
 80014d0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014da:	2204      	movs	r2, #4
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014e0:	2203      	movs	r2, #3
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80014f4:	4812      	ldr	r0, [pc, #72]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 80014f6:	f000 fb61 	bl	8001bbc <HAL_DMA_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001500:	f7ff fef4 	bl	80012ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 8001508:	63da      	str	r2, [r3, #60]	; 0x3c
 800150a:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_SD_MspInit+0x1f8>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2031      	movs	r0, #49	; 0x31
 8001516:	f000 fb1a 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800151a:	2031      	movs	r0, #49	; 0x31
 800151c:	f000 fb33 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40012c00 	.word	0x40012c00
 800152c:	40023800 	.word	0x40023800
 8001530:	40020800 	.word	0x40020800
 8001534:	40020c00 	.word	0x40020c00
 8001538:	200012ac 	.word	0x200012ac
 800153c:	40026458 	.word	0x40026458
 8001540:	2000130c 	.word	0x2000130c
 8001544:	400264a0 	.word	0x400264a0

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_UART_MspInit+0x84>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12c      	bne.n	80015c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b4:	2307      	movs	r3, #7
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_UART_MspInit+0x8c>)
 80015c0:	f000 fe9a 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40011000 	.word	0x40011000
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 f974 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <SDIO_IRQHandler+0x10>)
 8001632:	f001 feb5 	bl	80033a0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20001228 	.word	0x20001228

08001640 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <DMA2_Stream3_IRQHandler+0x10>)
 8001646:	f000 fbe1 	bl	8001e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200012ac 	.word	0x200012ac

08001654 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA2_Stream6_IRQHandler+0x10>)
 800165a:	f000 fbd7 	bl	8001e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000130c 	.word	0x2000130c

08001668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_kill>:

int _kill(int pid, int sig)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001682:	f007 f851 	bl	8008728 <__errno>
 8001686:	4603      	mov	r3, r0
 8001688:	2216      	movs	r2, #22
 800168a:	601a      	str	r2, [r3, #0]
  return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_exit>:

void _exit (int status)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffe7 	bl	8001678 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016aa:	e7fe      	b.n	80016aa <_exit+0x12>

080016ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e00a      	b.n	80016d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016be:	f3af 8000 	nop.w
 80016c2:	4601      	mov	r1, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	b2ca      	uxtb	r2, r1
 80016cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf0      	blt.n	80016be <_read+0x12>
  }

  return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e009      	b.n	800170c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf1      	blt.n	80016f8 <_write+0x12>
  }
  return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_close>:

int _close(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f006 ffb6 	bl	8008728 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20010000 	.word	0x20010000
 80017e8:	00000800 	.word	0x00000800
 80017ec:	200013b0 	.word	0x200013b0
 80017f0:	20001548 	.word	0x20001548

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001842:	f7ff ffd7 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f006 ff75 	bl	8008734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fc13 	bl	8001074 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800185c:	0800c2c8 	.word	0x0800c2c8
  ldr r2, =_sbss
 8001860:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001864:	20001548 	.word	0x20001548

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f94f 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fd2a 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f967 	bl	8001ba2 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f92f 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	20000008 	.word	0x20000008
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	200013b4 	.word	0x200013b4

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200013b4 	.word	0x200013b4

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff feb6 	bl	8001938 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e099      	b.n	8001d0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf8:	e00f      	b.n	8001c1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfa:	f7ff fe9d 	bl	8001938 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d908      	bls.n	8001c1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2203      	movs	r2, #3
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e078      	b.n	8001d0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e8      	bne.n	8001bfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_DMA_Init+0x158>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d107      	bne.n	8001c84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f023 0307 	bic.w	r3, r3, #7
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d117      	bne.n	8001cde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00e      	beq.n	8001cde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fa9d 	bl	8002200 <DMA_CheckFifoParam>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e016      	b.n	8001d0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fa54 	bl	8002194 <DMA_CalcBaseAndBitshift>
 8001cec:	4603      	mov	r3, r0
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	223f      	movs	r2, #63	; 0x3f
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	f010803f 	.word	0xf010803f

08001d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_DMA_Start_IT+0x26>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e040      	b.n	8001dc0 <HAL_DMA_Start_IT+0xa8>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d12f      	bne.n	8001db2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f9e6 	bl	8002138 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	223f      	movs	r2, #63	; 0x3f
 8001d72:	409a      	lsls	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0216 	orr.w	r2, r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0208 	orr.w	r2, r2, #8
 8001d9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e005      	b.n	8001dbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00c      	b.n	8001e00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2205      	movs	r2, #5
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e18:	4b8e      	ldr	r3, [pc, #568]	; (8002054 <HAL_DMA_IRQHandler+0x248>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a8e      	ldr	r2, [pc, #568]	; (8002058 <HAL_DMA_IRQHandler+0x24c>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0a9b      	lsrs	r3, r3, #10
 8001e24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2208      	movs	r2, #8
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01a      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0204 	bic.w	r2, r2, #4
 8001e5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2208      	movs	r2, #8
 8001e66:	409a      	lsls	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d012      	beq.n	8001eae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d012      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	f043 0204 	orr.w	r2, r3, #4
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	2210      	movs	r2, #16
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d043      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d03c      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	2210      	movs	r2, #16
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d018      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d108      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d024      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
 8001f3a:	e01f      	b.n	8001f7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
 8001f4c:	e016      	b.n	8001f7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0208 	bic.w	r2, r2, #8
 8001f6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	2220      	movs	r2, #32
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 808f 	beq.w	80020ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8087 	beq.w	80020ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d136      	bne.n	8002024 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0216 	bic.w	r2, r2, #22
 8001fc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x1da>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0208 	bic.w	r2, r2, #8
 8001ff4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	223f      	movs	r2, #63	; 0x3f
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002016:	2b00      	cmp	r3, #0
 8002018:	d07e      	beq.n	8002118 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
        }
        return;
 8002022:	e079      	b.n	8002118 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01d      	beq.n	800206e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	2b00      	cmp	r3, #0
 8002046:	d031      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
 8002050:	e02c      	b.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000
 8002058:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
 800206c:	e01e      	b.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10f      	bne.n	800209c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0210 	bic.w	r2, r2, #16
 800208a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d032      	beq.n	800211a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d022      	beq.n	8002106 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2205      	movs	r2, #5
 80020c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	3301      	adds	r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d307      	bcc.n	80020f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f2      	bne.n	80020d8 <HAL_DMA_IRQHandler+0x2cc>
 80020f2:	e000      	b.n	80020f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
 8002116:	e000      	b.n	800211a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002118:	bf00      	nop
    }
  }
}
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002154:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b40      	cmp	r3, #64	; 0x40
 8002164:	d108      	bne.n	8002178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002176:	e007      	b.n	8002188 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3b10      	subs	r3, #16
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <DMA_CalcBaseAndBitshift+0x64>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ae:	4a13      	ldr	r2, [pc, #76]	; (80021fc <DMA_CalcBaseAndBitshift+0x68>)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d909      	bls.n	80021d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	659a      	str	r2, [r3, #88]	; 0x58
 80021d4:	e007      	b.n	80021e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	aaaaaaab 	.word	0xaaaaaaab
 80021fc:	0800bdf0 	.word	0x0800bdf0

08002200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11f      	bne.n	800225a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d856      	bhi.n	80022ce <DMA_CheckFifoParam+0xce>
 8002220:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <DMA_CheckFifoParam+0x28>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	08002239 	.word	0x08002239
 800222c:	0800224b 	.word	0x0800224b
 8002230:	08002239 	.word	0x08002239
 8002234:	080022cf 	.word	0x080022cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d046      	beq.n	80022d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e043      	b.n	80022d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002252:	d140      	bne.n	80022d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002258:	e03d      	b.n	80022d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002262:	d121      	bne.n	80022a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d837      	bhi.n	80022da <DMA_CheckFifoParam+0xda>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <DMA_CheckFifoParam+0x70>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002281 	.word	0x08002281
 8002274:	08002287 	.word	0x08002287
 8002278:	08002281 	.word	0x08002281
 800227c:	08002299 	.word	0x08002299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e030      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d025      	beq.n	80022de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002296:	e022      	b.n	80022de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022a0:	d11f      	bne.n	80022e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022a6:	e01c      	b.n	80022e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d903      	bls.n	80022b6 <DMA_CheckFifoParam+0xb6>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d003      	beq.n	80022bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022b4:	e018      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ba:	e015      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      break;
 80022cc:	e00b      	b.n	80022e6 <DMA_CheckFifoParam+0xe6>
      break;
 80022ce:	bf00      	nop
 80022d0:	e00a      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e008      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e006      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e004      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e002      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
    }
  } 
  
  return status; 
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e159      	b.n	80025c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8148 	bne.w	80025c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a2 	beq.w	80025c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a56      	ldr	r2, [pc, #344]	; (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_GPIO_Init+0x2ec>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a49      	ldr	r2, [pc, #292]	; (80025e8 <HAL_GPIO_Init+0x2f0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d019      	beq.n	80024fa <HAL_GPIO_Init+0x202>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a48      	ldr	r2, [pc, #288]	; (80025ec <HAL_GPIO_Init+0x2f4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x1fe>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a47      	ldr	r2, [pc, #284]	; (80025f0 <HAL_GPIO_Init+0x2f8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x1fa>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a46      	ldr	r2, [pc, #280]	; (80025f4 <HAL_GPIO_Init+0x2fc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x1f6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a45      	ldr	r2, [pc, #276]	; (80025f8 <HAL_GPIO_Init+0x300>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x1f2>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024ea:	2307      	movs	r3, #7
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024fa:	2300      	movs	r3, #0
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	; (80025e4 <HAL_GPIO_Init+0x2ec>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_GPIO_Init+0x304>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253e:	4a2f      	ldr	r2, [pc, #188]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002568:	4a24      	ldr	r2, [pc, #144]	; (80025fc <HAL_GPIO_Init+0x304>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002592:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_GPIO_Init+0x304>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025bc:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_GPIO_Init+0x304>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	f67f aea2 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40013c00 	.word	0x40013c00

08002600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e267      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d075      	beq.n	800270a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261e:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b04      	cmp	r3, #4
 8002628:	d00c      	beq.n	8002644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262a:	4b85      	ldr	r3, [pc, #532]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002632:	2b08      	cmp	r3, #8
 8002634:	d112      	bne.n	800265c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b82      	ldr	r3, [pc, #520]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	4b7e      	ldr	r3, [pc, #504]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d05b      	beq.n	8002708 <HAL_RCC_OscConfig+0x108>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d157      	bne.n	8002708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e242      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x74>
 8002666:	4b76      	ldr	r3, [pc, #472]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a75      	ldr	r2, [pc, #468]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xb0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x98>
 800267e:	4b70      	ldr	r3, [pc, #448]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6f      	ldr	r2, [pc, #444]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6c      	ldr	r2, [pc, #432]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xb0>
 8002698:	4b69      	ldr	r3, [pc, #420]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a68      	ldr	r2, [pc, #416]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a65      	ldr	r2, [pc, #404]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff f93e 	bl	8001938 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff f93a 	bl	8001938 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e207      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xc0>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff f92a 	bl	8001938 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff f926 	bl	8001938 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1f3      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	4b51      	ldr	r3, [pc, #324]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0xe8>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d063      	beq.n	80027de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002716:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272a:	2b08      	cmp	r3, #8
 800272c:	d11c      	bne.n	8002768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x152>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1c7      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4937      	ldr	r1, [pc, #220]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	e03a      	b.n	80027de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002770:	4b34      	ldr	r3, [pc, #208]	; (8002844 <HAL_RCC_OscConfig+0x244>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7ff f8df 	bl	8001938 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277e:	f7ff f8db 	bl	8001938 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1a8      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4925      	ldr	r1, [pc, #148]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_OscConfig+0x244>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7ff f8be 	bl	8001938 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c0:	f7ff f8ba 	bl	8001938 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e187      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d036      	beq.n	8002858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_RCC_OscConfig+0x248>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7ff f89e 	bl	8001938 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff f89a 	bl	8001938 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e167      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x200>
 800281e:	e01b      	b.n	8002858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_OscConfig+0x248>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7ff f887 	bl	8001938 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	e00e      	b.n	800284c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282e:	f7ff f883 	bl	8001938 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d907      	bls.n	800284c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e150      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
 8002840:	40023800 	.word	0x40023800
 8002844:	42470000 	.word	0x42470000
 8002848:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	4b88      	ldr	r3, [pc, #544]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ea      	bne.n	800282e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8097 	beq.w	8002994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286a:	4b81      	ldr	r3, [pc, #516]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a7c      	ldr	r2, [pc, #496]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b7a      	ldr	r3, [pc, #488]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b77      	ldr	r3, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x474>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d118      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a2:	4b74      	ldr	r3, [pc, #464]	; (8002a74 <HAL_RCC_OscConfig+0x474>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a73      	ldr	r2, [pc, #460]	; (8002a74 <HAL_RCC_OscConfig+0x474>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7ff f843 	bl	8001938 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7ff f83f 	bl	8001938 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e10c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x474>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x2ea>
 80028dc:	4b64      	ldr	r3, [pc, #400]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a63      	ldr	r2, [pc, #396]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0x324>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x30c>
 80028f2:	4b5f      	ldr	r3, [pc, #380]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a5e      	ldr	r2, [pc, #376]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
 80028fe:	4b5c      	ldr	r3, [pc, #368]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a5b      	ldr	r2, [pc, #364]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0x324>
 800290c:	4b58      	ldr	r3, [pc, #352]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	4b55      	ldr	r3, [pc, #340]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a54      	ldr	r2, [pc, #336]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 0304 	bic.w	r3, r3, #4
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7ff f804 	bl	8001938 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7ff f800 	bl	8001938 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0cb      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	4b49      	ldr	r3, [pc, #292]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ee      	beq.n	8002934 <HAL_RCC_OscConfig+0x334>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7fe ffee 	bl	8001938 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe ffea 	bl	8001938 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0b5      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ee      	bne.n	8002960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800298e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002992:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a1 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d05c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d141      	bne.n	8002a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_RCC_OscConfig+0x478>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe ffbe 	bl	8001938 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe ffba 	bl	8001938 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e087      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	491b      	ldr	r1, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCC_OscConfig+0x478>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe ff93 	bl	8001938 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe ff8f 	bl	8001938 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e05c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x416>
 8002a34:	e054      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <HAL_RCC_OscConfig+0x478>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe ff7c 	bl	8001938 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe ff78 	bl	8001938 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e045      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x444>
 8002a62:	e03d      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e038      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40007000 	.word	0x40007000
 8002a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x4ec>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d028      	beq.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d121      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d11a      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d111      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800

08002af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0cc      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b68      	ldr	r3, [pc, #416]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d90c      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b65      	ldr	r3, [pc, #404]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0b8      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b44:	4b59      	ldr	r3, [pc, #356]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a58      	ldr	r2, [pc, #352]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b5c:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a52      	ldr	r2, [pc, #328]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b50      	ldr	r3, [pc, #320]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	494d      	ldr	r1, [pc, #308]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d044      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	4b47      	ldr	r3, [pc, #284]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d119      	bne.n	8002bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e07f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bae:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e067      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bce:	4b37      	ldr	r3, [pc, #220]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f023 0203 	bic.w	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4934      	ldr	r1, [pc, #208]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be0:	f7fe feaa 	bl	8001938 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be8:	f7fe fea6 	bl	8001938 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e04f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 020c 	and.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d1eb      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c10:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d20c      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e032      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4916      	ldr	r1, [pc, #88]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	490e      	ldr	r1, [pc, #56]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c76:	f000 f821 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	490a      	ldr	r1, [pc, #40]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	5ccb      	ldrb	r3, [r1, r3]
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fe0a 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023c00 	.word	0x40023c00
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	0800bdd8 	.word	0x0800bdd8
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	20000004 	.word	0x20000004

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc0:	b090      	sub	sp, #64	; 0x40
 8002cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc8:	2300      	movs	r3, #0
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ccc:	2300      	movs	r3, #0
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd4:	4b59      	ldr	r3, [pc, #356]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d00d      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x40>
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	f200 80a1 	bhi.w	8002e28 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cee:	e09b      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cf4:	e09b      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf6:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cfa:	e098      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d06:	4b4d      	ldr	r3, [pc, #308]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d028      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d12:	4b4a      	ldr	r3, [pc, #296]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	2200      	movs	r2, #0
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d24:	2100      	movs	r1, #0
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d28:	fb03 f201 	mul.w	r2, r3, r1
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	fb00 f303 	mul.w	r3, r0, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	4a43      	ldr	r2, [pc, #268]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d36:	fba0 1202 	umull	r1, r2, r0, r2
 8002d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d42:	4413      	add	r3, r2
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	2200      	movs	r2, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	61fa      	str	r2, [r7, #28]
 8002d4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d56:	f7fd ff9f 	bl	8000c98 <__aeabi_uldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4613      	mov	r3, r2
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d62:	e053      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d64:	4b35      	ldr	r3, [pc, #212]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	617a      	str	r2, [r7, #20]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d76:	f04f 0b00 	mov.w	fp, #0
 8002d7a:	4652      	mov	r2, sl
 8002d7c:	465b      	mov	r3, fp
 8002d7e:	f04f 0000 	mov.w	r0, #0
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	0159      	lsls	r1, r3, #5
 8002d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d8c:	0150      	lsls	r0, r2, #5
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	ebb2 080a 	subs.w	r8, r2, sl
 8002d96:	eb63 090b 	sbc.w	r9, r3, fp
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002da6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002daa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dae:	ebb2 0408 	subs.w	r4, r2, r8
 8002db2:	eb63 0509 	sbc.w	r5, r3, r9
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	00eb      	lsls	r3, r5, #3
 8002dc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc4:	00e2      	lsls	r2, r4, #3
 8002dc6:	4614      	mov	r4, r2
 8002dc8:	461d      	mov	r5, r3
 8002dca:	eb14 030a 	adds.w	r3, r4, sl
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	eb45 030b 	adc.w	r3, r5, fp
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002de2:	4629      	mov	r1, r5
 8002de4:	028b      	lsls	r3, r1, #10
 8002de6:	4621      	mov	r1, r4
 8002de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dec:	4621      	mov	r1, r4
 8002dee:	028a      	lsls	r2, r1, #10
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	2200      	movs	r2, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	60fa      	str	r2, [r7, #12]
 8002dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e00:	f7fd ff4a 	bl	8000c98 <__aeabi_uldivmod>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4613      	mov	r3, r2
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	3301      	adds	r3, #1
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e26:	e002      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3740      	adds	r7, #64	; 0x40
 8002e34:	46bd      	mov	sp, r7
 8002e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	00f42400 	.word	0x00f42400
 8002e44:	017d7840 	.word	0x017d7840

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000

08002e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e64:	f7ff fff0 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0a9b      	lsrs	r3, r3, #10
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4903      	ldr	r1, [pc, #12]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	0800bde8 	.word	0x0800bde8

08002e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e8c:	f7ff ffdc 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0b5b      	lsrs	r3, r3, #13
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	0800bde8 	.word	0x0800bde8

08002eb0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e022      	b.n	8002f08 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d105      	bne.n	8002eda <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fe fa37 	bl	8001348 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2203      	movs	r2, #3
 8002ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f814 	bl	8002f10 <HAL_SD_InitCard>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00a      	b.n	8002f08 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b08e      	sub	sp, #56	; 0x38
 8002f14:	af04      	add	r7, sp, #16
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002f2c:	2376      	movs	r3, #118	; 0x76
 8002f2e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681d      	ldr	r5, [r3, #0]
 8002f34:	466c      	mov	r4, sp
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f001 fda5 	bl	8004a98 <SDIO_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e04f      	b.n	8003000 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_SD_InitCard+0xf8>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 fddd 	bl	8004b2a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <HAL_SD_InitCard+0xf8>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002f76:	2002      	movs	r0, #2
 8002f78:	f7fe fcea 	bl	8001950 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f001 f805 	bl	8003f8c <SD_PowerON>
 8002f82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e02e      	b.n	8003000 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 ff24 	bl	8003df0 <SD_InitCard>
 8002fa8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e01b      	b.n	8003000 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 fe3c 	bl	8004c4e <SDMMC_CmdBlockLength>
 8002fd6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00f      	beq.n	8002ffe <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <HAL_SD_InitCard+0xfc>)
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3728      	adds	r7, #40	; 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bdb0      	pop	{r4, r5, r7, pc}
 8003008:	422580a0 	.word	0x422580a0
 800300c:	004005ff 	.word	0x004005ff

08003010 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08c      	sub	sp, #48	; 0x30
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0c0      	b.n	80031ba <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	f040 80b9 	bne.w	80031b8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800304c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	441a      	add	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	429a      	cmp	r2, r3
 8003058:	d907      	bls.n	800306a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0a7      	b.n	80031ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a4c      	ldr	r2, [pc, #304]	; (80031c4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003094:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a4b      	ldr	r2, [pc, #300]	; (80031c8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800309c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2200      	movs	r2, #0
 80030a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3380      	adds	r3, #128	; 0x80
 80030d4:	4619      	mov	r1, r3
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	f7fe fe1b 	bl	8001d18 <HAL_DMA_Start_IT>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80030f6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a33      	ldr	r2, [pc, #204]	; (80031cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e050      	b.n	80031ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	2b01      	cmp	r3, #1
 8003124:	d002      	beq.n	800312c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	025b      	lsls	r3, r3, #9
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	025b      	lsls	r3, r3, #9
 8003136:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003138:	2390      	movs	r3, #144	; 0x90
 800313a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800313c:	2302      	movs	r3, #2
 800313e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003140:	2300      	movs	r3, #0
 8003142:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003144:	2301      	movs	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f107 0210 	add.w	r2, r7, #16
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f001 fd4f 	bl	8004bf6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d90a      	bls.n	8003174 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2282      	movs	r2, #130	; 0x82
 8003162:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800316a:	4618      	mov	r0, r3
 800316c:	f001 fdb3 	bl	8004cd6 <SDMMC_CmdReadMultiBlock>
 8003170:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003172:	e009      	b.n	8003188 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2281      	movs	r2, #129	; 0x81
 8003178:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003180:	4618      	mov	r0, r3
 8003182:	f001 fd86 	bl	8004c92 <SDMMC_CmdReadSingleBlock>
 8003186:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003194:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e002      	b.n	80031ba <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e000      	b.n	80031ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
  }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3730      	adds	r7, #48	; 0x30
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	08003bff 	.word	0x08003bff
 80031c8:	08003c71 	.word	0x08003c71
 80031cc:	004005ff 	.word	0x004005ff
 80031d0:	4225858c 	.word	0x4225858c

080031d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0c5      	b.n	8003388 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 80be 	bne.w	8003386 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	441a      	add	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	429a      	cmp	r2, r3
 800321c:	d907      	bls.n	800322e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0ac      	b.n	8003388 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2203      	movs	r2, #3
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	4a4e      	ldr	r2, [pc, #312]	; (8003390 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	4a4d      	ldr	r2, [pc, #308]	; (8003394 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003260:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	2200      	movs	r2, #0
 8003268:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	2b01      	cmp	r3, #1
 8003270:	d002      	beq.n	8003278 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	025b      	lsls	r3, r3, #9
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d90a      	bls.n	8003294 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	22a0      	movs	r2, #160	; 0xa0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800328a:	4618      	mov	r0, r3
 800328c:	f001 fd67 	bl	8004d5e <SDMMC_CmdWriteMultiBlock>
 8003290:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003292:	e009      	b.n	80032a8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2290      	movs	r2, #144	; 0x90
 8003298:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 fd3a 	bl	8004d1a <SDMMC_CmdWriteSingleBlock>
 80032a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a39      	ldr	r2, [pc, #228]	; (8003398 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e059      	b.n	8003388 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80032d4:	4b31      	ldr	r3, [pc, #196]	; (800339c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	2240      	movs	r2, #64	; 0x40
 80032e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3380      	adds	r3, #128	; 0x80
 800330a:	461a      	mov	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	025b      	lsls	r3, r3, #9
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	f7fe fd01 	bl	8001d18 <HAL_DMA_Start_IT>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01c      	beq.n	8003356 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800332a:	f023 0302 	bic.w	r3, r3, #2
 800332e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e018      	b.n	8003388 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	025b      	lsls	r3, r3, #9
 8003360:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003362:	2390      	movs	r3, #144	; 0x90
 8003364:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800336a:	2300      	movs	r3, #0
 800336c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800336e:	2301      	movs	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f107 0210 	add.w	r2, r7, #16
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f001 fc3a 	bl	8004bf6 <SDIO_ConfigData>

      return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003386:	2302      	movs	r3, #2
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3730      	adds	r7, #48	; 0x30
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	08003bd5 	.word	0x08003bd5
 8003394:	08003c71 	.word	0x08003c71
 8003398:	004005ff 	.word	0x004005ff
 800339c:	4225858c 	.word	0x4225858c

080033a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_SD_IRQHandler+0x2e>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 ffff 	bl	80043ca <SD_Read_IT>
 80033cc:	e165      	b.n	800369a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 808f 	beq.w	80034fc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80033f6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80033fa:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d039      	beq.n	800348a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <HAL_SD_IRQHandler+0x8a>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d011      	beq.n	800344e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f001 fcb8 	bl	8004da4 <SDMMC_CmdStopTransfer>
 8003434:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f92f 	bl	80036ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f240 523a 	movw	r2, #1338	; 0x53a
 8003456:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d104      	bne.n	800347a <HAL_SD_IRQHandler+0xda>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f002 f926 	bl	80056cc <HAL_SD_RxCpltCallback>
 8003480:	e10b      	b.n	800369a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f002 f918 	bl	80056b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003488:	e107      	b.n	800369a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8102 	beq.w	800369a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d011      	beq.n	80034c4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fc7d 	bl	8004da4 <SDMMC_CmdStopTransfer>
 80034aa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f8f4 	bl	80036ac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f040 80e5 	bne.w	800369a <HAL_SD_IRQHandler+0x2fa>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 80df 	bne.w	800369a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0208 	bic.w	r2, r2, #8
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f002 f8df 	bl	80056b8 <HAL_SD_TxCpltCallback>
}
 80034fa:	e0ce      	b.n	800369a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_SD_IRQHandler+0x17c>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 ffa9 	bl	800446c <SD_Write_IT>
 800351a:	e0be      	b.n	800369a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003522:	f240 233a 	movw	r3, #570	; 0x23a
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80b6 	beq.w	800369a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	f043 0202 	orr.w	r2, r3, #2
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	f043 0208 	orr.w	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	f043 0208 	orr.w	r2, r3, #8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f240 723a 	movw	r2, #1850	; 0x73a
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80035c8:	f023 0302 	bic.w	r3, r3, #2
 80035cc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 fbe6 	bl	8004da4 <SDMMC_CmdStopTransfer>
 80035d8:	4602      	mov	r2, r0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f855 	bl	80036ac <HAL_SD_ErrorCallback>
}
 8003602:	e04a      	b.n	800369a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d045      	beq.n	800369a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	d104      	bne.n	8003622 <HAL_SD_IRQHandler+0x282>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d011      	beq.n	8003646 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_SD_IRQHandler+0x304>)
 8003628:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fbca 	bl	8001dc8 <HAL_DMA_Abort_IT>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02f      	beq.n	800369a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fb68 	bl	8003d14 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003644:	e029      	b.n	800369a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <HAL_SD_IRQHandler+0x2ba>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d011      	beq.n	800367e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	4a12      	ldr	r2, [pc, #72]	; (80036a8 <HAL_SD_IRQHandler+0x308>)
 8003660:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fbae 	bl	8001dc8 <HAL_DMA_Abort_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d013      	beq.n	800369a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fb83 	bl	8003d82 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800367c:	e00d      	b.n	800369a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f002 f806 	bl	80056a4 <HAL_SD_AbortCallback>
}
 8003698:	e7ff      	b.n	800369a <HAL_SD_IRQHandler+0x2fa>
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08003d15 	.word	0x08003d15
 80036a8:	08003d83 	.word	0x08003d83

080036ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ce:	0f9b      	lsrs	r3, r3, #30
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036da:	0e9b      	lsrs	r3, r3, #26
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ec:	0e1b      	lsrs	r3, r3, #24
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	b2da      	uxtb	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	b2da      	uxtb	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003716:	b2da      	uxtb	r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003720:	0d1b      	lsrs	r3, r3, #20
 8003722:	b29a      	uxth	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	b2da      	uxtb	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373e:	0bdb      	lsrs	r3, r3, #15
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	b2da      	uxtb	r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003750:	0b9b      	lsrs	r3, r3, #14
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	b2da      	uxtb	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003762:	0b5b      	lsrs	r3, r3, #13
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	b2da      	uxtb	r2, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003774:	0b1b      	lsrs	r3, r3, #12
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	b2da      	uxtb	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	2b00      	cmp	r3, #0
 800378e:	d163      	bne.n	8003858 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003794:	009a      	lsls	r2, r3, #2
 8003796:	f640 73fc 	movw	r3, #4092	; 0xffc
 800379a:	4013      	ands	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80037a0:	0f92      	lsrs	r2, r2, #30
 80037a2:	431a      	orrs	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ac:	0edb      	lsrs	r3, r3, #27
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037be:	0e1b      	lsrs	r3, r3, #24
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d0:	0d5b      	lsrs	r3, r3, #21
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f4:	0bdb      	lsrs	r3, r3, #15
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	7e1b      	ldrb	r3, [r3, #24]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	3302      	adds	r3, #2
 8003818:	2201      	movs	r2, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003822:	fb03 f202 	mul.w	r2, r3, r2
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	7a1b      	ldrb	r3, [r3, #8]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003844:	0a52      	lsrs	r2, r2, #9
 8003846:	fb03 f202 	mul.w	r2, r3, r2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003854:	661a      	str	r2, [r3, #96]	; 0x60
 8003856:	e031      	b.n	80038bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	2b01      	cmp	r3, #1
 800385e:	d11d      	bne.n	800389c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	041b      	lsls	r3, r3, #16
 8003866:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386e:	0c1b      	lsrs	r3, r3, #16
 8003870:	431a      	orrs	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	3301      	adds	r3, #1
 800387c:	029a      	lsls	r2, r3, #10
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003890:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	661a      	str	r2, [r3, #96]	; 0x60
 800389a:	e00f      	b.n	80038bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a58      	ldr	r2, [pc, #352]	; (8003a04 <HAL_SD_GetCardCSD+0x344>)
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e09d      	b.n	80039f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c0:	0b9b      	lsrs	r3, r3, #14
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d2:	09db      	lsrs	r3, r3, #7
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	0fdb      	lsrs	r3, r3, #31
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	0f5b      	lsrs	r3, r3, #29
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	b2da      	uxtb	r2, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	0e9b      	lsrs	r3, r3, #26
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	b2da      	uxtb	r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	0d9b      	lsrs	r3, r3, #22
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	b2da      	uxtb	r2, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	0d5b      	lsrs	r3, r3, #21
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	b2da      	uxtb	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	0c1b      	lsrs	r3, r3, #16
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	0bdb      	lsrs	r3, r3, #15
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	b2da      	uxtb	r2, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	0b9b      	lsrs	r3, r3, #14
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	b2da      	uxtb	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	0b5b      	lsrs	r3, r3, #13
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	b2da      	uxtb	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	0b1b      	lsrs	r3, r3, #12
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	004005ff 	.word	0x004005ff

08003a08 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	b08e      	sub	sp, #56	; 0x38
 8003a64:	af04      	add	r7, sp, #16
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2203      	movs	r2, #3
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d02e      	beq.n	8003ade <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a86:	d106      	bne.n	8003a96 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
 8003a94:	e029      	b.n	8003aea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fb2a 	bl	80040f8 <SD_WideBus_Enable>
 8003aa4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ab2:	e01a      	b.n	8003aea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fb67 	bl	800418e <SD_WideBus_Disable>
 8003ac0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
 8003ace:	e00c      	b.n	8003aea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
 8003adc:	e005      	b.n	8003aea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b08:	e01f      	b.n	8003b4a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681d      	ldr	r5, [r3, #0]
 8003b30:	466c      	mov	r4, sp
 8003b32:	f107 0314 	add.w	r3, r7, #20
 8003b36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b3e:	f107 0308 	add.w	r3, r7, #8
 8003b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b44:	4628      	mov	r0, r5
 8003b46:	f000 ffa7 	bl	8004a98 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f87b 	bl	8004c4e <SDMMC_CmdBlockLength>
 8003b58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00c      	beq.n	8003b7a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003b82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3728      	adds	r7, #40	; 0x28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	004005ff 	.word	0x004005ff

08003b94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa7e 	bl	80040a8 <SD_SendStatus>
 8003bac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0a5b      	lsrs	r3, r3, #9
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003bca:	693b      	ldr	r3, [r7, #16]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	2b82      	cmp	r3, #130	; 0x82
 8003c12:	d111      	bne.n	8003c38 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f001 f8c3 	bl	8004da4 <SDMMC_CmdStopTransfer>
 8003c1e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff fd3a 	bl	80036ac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0208 	bic.w	r2, r2, #8
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f001 fd33 	bl	80056cc <HAL_SD_RxCpltCallback>
#endif
}
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fe fa4e 	bl	8002120 <HAL_DMA_GetError>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d03e      	beq.n	8003d08 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d002      	beq.n	8003ca6 <SD_DMAError+0x36>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d12d      	bne.n	8003d02 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <SD_DMAError+0xa0>)
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003cbc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003cca:	6978      	ldr	r0, [r7, #20]
 8003ccc:	f7ff ff62 	bl	8003b94 <HAL_SD_GetCardState>
 8003cd0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b06      	cmp	r3, #6
 8003cd6:	d002      	beq.n	8003cde <SD_DMAError+0x6e>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d10a      	bne.n	8003cf4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f85e 	bl	8004da4 <SDMMC_CmdStopTransfer>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003d02:	6978      	ldr	r0, [r7, #20]
 8003d04:	f7ff fcd2 	bl	80036ac <HAL_SD_ErrorCallback>
#endif
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	004005ff 	.word	0x004005ff

08003d14 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff ff31 	bl	8003b94 <HAL_SD_GetCardState>
 8003d32:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	d002      	beq.n	8003d4e <SD_DMATxAbort+0x3a>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d10a      	bne.n	8003d64 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 f826 	bl	8004da4 <SDMMC_CmdStopTransfer>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f001 fc99 	bl	80056a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003d72:	e002      	b.n	8003d7a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7ff fc99 	bl	80036ac <HAL_SD_ErrorCallback>
}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fefa 	bl	8003b94 <HAL_SD_GetCardState>
 8003da0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d002      	beq.n	8003dbc <SD_DMARxAbort+0x3a>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d10a      	bne.n	8003dd2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 ffef 	bl	8004da4 <SDMMC_CmdStopTransfer>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f001 fc62 	bl	80056a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003de0:	e002      	b.n	8003de8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f7ff fc62 	bl	80036ac <HAL_SD_ErrorCallback>
}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b094      	sub	sp, #80	; 0x50
 8003df4:	af04      	add	r7, sp, #16
 8003df6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fea0 	bl	8004b46 <SDIO_GetPowerState>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e10:	e0b8      	b.n	8003f84 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d02f      	beq.n	8003e7a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 f8ca 	bl	8004fb8 <SDMMC_CmdSendCID>
 8003e24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <SD_InitCard+0x40>
    {
      return errorstate;
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2e:	e0a9      	b.n	8003f84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 feca 	bl	8004bd0 <SDIO_GetResponse>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2104      	movs	r1, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fec1 	bl	8004bd0 <SDIO_GetResponse>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2108      	movs	r1, #8
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 feb8 	bl	8004bd0 <SDIO_GetResponse>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	210c      	movs	r1, #12
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 feaf 	bl	8004bd0 <SDIO_GetResponse>
 8003e72:	4602      	mov	r2, r0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d00d      	beq.n	8003e9e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f107 020e 	add.w	r2, r7, #14
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f8d0 	bl	8005032 <SDMMC_CmdSetRelAdd>
 8003e92:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <SD_InitCard+0xae>
    {
      return errorstate;
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9c:	e072      	b.n	8003f84 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d036      	beq.n	8003f14 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003ea6:	89fb      	ldrh	r3, [r7, #14]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f001 f89a 	bl	8004ff4 <SDMMC_CmdSendCSD>
 8003ec0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <SD_InitCard+0xdc>
    {
      return errorstate;
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	e05b      	b.n	8003f84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fe7c 	bl	8004bd0 <SDIO_GetResponse>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2104      	movs	r1, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fe73 	bl	8004bd0 <SDIO_GetResponse>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2108      	movs	r1, #8
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fe6a 	bl	8004bd0 <SDIO_GetResponse>
 8003efc:	4602      	mov	r2, r0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	210c      	movs	r1, #12
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fe61 	bl	8004bd0 <SDIO_GetResponse>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2104      	movs	r1, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fe58 	bl	8004bd0 <SDIO_GetResponse>
 8003f20:	4603      	mov	r3, r0
 8003f22:	0d1a      	lsrs	r2, r3, #20
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003f28:	f107 0310 	add.w	r3, r7, #16
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fbc6 	bl	80036c0 <HAL_SD_GetCardCSD>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f3e:	e021      	b.n	8003f84 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	461c      	mov	r4, r3
 8003f4e:	4615      	mov	r5, r2
 8003f50:	4622      	mov	r2, r4
 8003f52:	462b      	mov	r3, r5
 8003f54:	4608      	mov	r0, r1
 8003f56:	f000 ff47 	bl	8004de8 <SDMMC_CmdSelDesel>
 8003f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <SD_InitCard+0x176>
  {
    return errorstate;
 8003f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f64:	e00e      	b.n	8003f84 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681d      	ldr	r5, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	466c      	mov	r4, sp
 8003f6e:	f103 0210 	add.w	r2, r3, #16
 8003f72:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f78:	3304      	adds	r3, #4
 8003f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f000 fd8b 	bl	8004a98 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3740      	adds	r7, #64	; 0x40
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bdb0      	pop	{r4, r5, r7, pc}

08003f8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 ff42 	bl	8004e2e <SDMMC_CmdGoIdleState>
 8003faa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	e072      	b.n	800409c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 ff55 	bl	8004e6a <SDMMC_CmdOperCond>
 8003fc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 ff2b 	bl	8004e2e <SDMMC_CmdGoIdleState>
 8003fd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <SD_PowerON+0x5e>
    {
      return errorstate;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	e05b      	b.n	800409c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d137      	bne.n	8004062 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 ff55 	bl	8004ea8 <SDMMC_CmdAppCommand>
 8003ffe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02d      	beq.n	8004062 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004006:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800400a:	e047      	b.n	800409c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f000 ff48 	bl	8004ea8 <SDMMC_CmdAppCommand>
 8004018:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <SD_PowerON+0x98>
    {
      return errorstate;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	e03b      	b.n	800409c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	491e      	ldr	r1, [pc, #120]	; (80040a4 <SD_PowerON+0x118>)
 800402a:	4618      	mov	r0, r3
 800402c:	f000 ff5e 	bl	8004eec <SDMMC_CmdAppOperCommand>
 8004030:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004038:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800403c:	e02e      	b.n	800409c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fdc3 	bl	8004bd0 <SDIO_GetResponse>
 800404a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	0fdb      	lsrs	r3, r3, #31
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <SD_PowerON+0xcc>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <SD_PowerON+0xce>
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]

    count++;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	3301      	adds	r3, #1
 8004060:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004068:	4293      	cmp	r3, r2
 800406a:	d802      	bhi.n	8004072 <SD_PowerON+0xe6>
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0cc      	beq.n	800400c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004078:	4293      	cmp	r3, r2
 800407a:	d902      	bls.n	8004082 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800407c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004080:	e00c      	b.n	800409c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	645a      	str	r2, [r3, #68]	; 0x44
 8004092:	e002      	b.n	800409a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	c1100000 	.word	0xc1100000

080040a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80040b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040bc:	e018      	b.n	80040f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c6:	041b      	lsls	r3, r3, #16
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f000 ffd2 	bl	8005074 <SDMMC_CmdSendStatus>
 80040d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	e009      	b.n	80040f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fd74 	bl	8004bd0 <SDIO_GetResponse>
 80040e8:	4602      	mov	r2, r0
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fd5e 	bl	8004bd0 <SDIO_GetResponse>
 8004114:	4603      	mov	r3, r0
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800411e:	d102      	bne.n	8004126 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004124:	e02f      	b.n	8004186 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004126:	f107 030c 	add.w	r3, r7, #12
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f879 	bl	8004224 <SD_FindSCR>
 8004132:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e023      	b.n	8004186 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01c      	beq.n	8004182 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 fea7 	bl	8004ea8 <SDMMC_CmdAppCommand>
 800415a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	e00f      	b.n	8004186 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2102      	movs	r1, #2
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fee0 	bl	8004f32 <SDMMC_CmdBusWidth>
 8004172:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	e003      	b.n	8004186 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800417e:	2300      	movs	r3, #0
 8004180:	e001      	b.n	8004186 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004182:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fd13 	bl	8004bd0 <SDIO_GetResponse>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b4:	d102      	bne.n	80041bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80041b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041ba:	e02f      	b.n	800421c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80041bc:	f107 030c 	add.w	r3, r7, #12
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f82e 	bl	8004224 <SD_FindSCR>
 80041c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	e023      	b.n	800421c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01c      	beq.n	8004218 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f000 fe5c 	bl	8004ea8 <SDMMC_CmdAppCommand>
 80041f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	e00f      	b.n	800421c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fe95 	bl	8004f32 <SDMMC_CmdBusWidth>
 8004208:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	e003      	b.n	800421c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004214:	2300      	movs	r3, #0
 8004216:	e001      	b.n	800421c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004218:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b08f      	sub	sp, #60	; 0x3c
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800422e:	f7fd fb83 	bl	8001938 <HAL_GetTick>
 8004232:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2108      	movs	r1, #8
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fcff 	bl	8004c4e <SDMMC_CmdBlockLength>
 8004250:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	e0b2      	b.n	80043c2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f000 fe1d 	bl	8004ea8 <SDMMC_CmdAppCommand>
 800426e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	e0a3      	b.n	80043c2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800427a:	f04f 33ff 	mov.w	r3, #4294967295
 800427e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004280:	2308      	movs	r3, #8
 8004282:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004284:	2330      	movs	r3, #48	; 0x30
 8004286:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004288:	2302      	movs	r3, #2
 800428a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004290:	2301      	movs	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f107 0210 	add.w	r2, r7, #16
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fca9 	bl	8004bf6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fe64 	bl	8004f76 <SDMMC_CmdSendSCR>
 80042ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d02a      	beq.n	800430c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	e083      	b.n	80043c2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00f      	beq.n	80042e8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6819      	ldr	r1, [r3, #0]
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	f107 0208 	add.w	r2, r7, #8
 80042d4:	18d4      	adds	r4, r2, r3
 80042d6:	4608      	mov	r0, r1
 80042d8:	f000 fc09 	bl	8004aee <SDIO_ReadFIFO>
 80042dc:	4603      	mov	r3, r0
 80042de:	6023      	str	r3, [r4, #0]
      index++;
 80042e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e2:	3301      	adds	r3, #1
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
 80042e6:	e006      	b.n	80042f6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d012      	beq.n	800431c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80042f6:	f7fd fb1f 	bl	8001938 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d102      	bne.n	800430c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004306:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800430a:	e05a      	b.n	80043c2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004312:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0cf      	beq.n	80042ba <SD_FindSCR+0x96>
 800431a:	e000      	b.n	800431e <SD_FindSCR+0xfa>
      break;
 800431c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2208      	movs	r2, #8
 8004332:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004334:	2308      	movs	r3, #8
 8004336:	e044      	b.n	80043c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2202      	movs	r2, #2
 800434c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800434e:	2302      	movs	r3, #2
 8004350:	e037      	b.n	80043c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2220      	movs	r2, #32
 8004366:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004368:	2320      	movs	r3, #32
 800436a:	e02a      	b.n	80043c2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f240 523a 	movw	r2, #1338	; 0x53a
 8004374:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	061a      	lsls	r2, r3, #24
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004382:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800438c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	0e1b      	lsrs	r3, r3, #24
 8004392:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	601a      	str	r2, [r3, #0]
    scr++;
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	3304      	adds	r3, #4
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	061a      	lsls	r2, r3, #24
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80043b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	0e1b      	lsrs	r3, r3, #24
 80043ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	373c      	adds	r7, #60	; 0x3c
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd90      	pop	{r4, r7, pc}

080043ca <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d03f      	beq.n	8004464 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e033      	b.n	8004452 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fb7d 	bl	8004aee <SDIO_ReadFIFO>
 80043f4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	3b01      	subs	r3, #1
 8004408:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	3b01      	subs	r3, #1
 800441e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	b2da      	uxtb	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	701a      	strb	r2, [r3, #0]
      tmp++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3301      	adds	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	3b01      	subs	r3, #1
 8004434:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	0e1b      	lsrs	r3, r3, #24
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3301      	adds	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	3b01      	subs	r3, #1
 800444a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	3301      	adds	r3, #1
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b07      	cmp	r3, #7
 8004456:	d9c8      	bls.n	80043ea <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004464:	bf00      	nop
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d043      	beq.n	800450e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e037      	b.n	80044fc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	3b01      	subs	r3, #1
 800449c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	021a      	lsls	r2, r3, #8
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3301      	adds	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3301      	adds	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	061a      	lsls	r2, r3, #24
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3301      	adds	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f107 0208 	add.w	r2, r7, #8
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fb09 	bl	8004b08 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	3301      	adds	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b07      	cmp	r3, #7
 8004500:	d9c4      	bls.n	800448c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800450e:	bf00      	nop
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e03f      	b.n	80045a8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fd f803 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2224      	movs	r2, #36	; 0x24
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004558:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f828 	bl	80045b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800456e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800457e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b4:	b0c0      	sub	sp, #256	; 0x100
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	ea40 0301 	orr.w	r3, r0, r1
 80045d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004608:	f021 010c 	bic.w	r1, r1, #12
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004616:	430b      	orrs	r3, r1
 8004618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462a:	6999      	ldr	r1, [r3, #24]
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	ea40 0301 	orr.w	r3, r0, r1
 8004636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b8f      	ldr	r3, [pc, #572]	; (800487c <UART_SetConfig+0x2cc>)
 8004640:	429a      	cmp	r2, r3
 8004642:	d005      	beq.n	8004650 <UART_SetConfig+0xa0>
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b8d      	ldr	r3, [pc, #564]	; (8004880 <UART_SetConfig+0x2d0>)
 800464c:	429a      	cmp	r2, r3
 800464e:	d104      	bne.n	800465a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004650:	f7fe fc1a 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 8004654:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004658:	e003      	b.n	8004662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800465a:	f7fe fc01 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 800465e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800466c:	f040 810c 	bne.w	8004888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004674:	2200      	movs	r2, #0
 8004676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800467a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800467e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004682:	4622      	mov	r2, r4
 8004684:	462b      	mov	r3, r5
 8004686:	1891      	adds	r1, r2, r2
 8004688:	65b9      	str	r1, [r7, #88]	; 0x58
 800468a:	415b      	adcs	r3, r3
 800468c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800468e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004692:	4621      	mov	r1, r4
 8004694:	eb12 0801 	adds.w	r8, r2, r1
 8004698:	4629      	mov	r1, r5
 800469a:	eb43 0901 	adc.w	r9, r3, r1
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046b2:	4690      	mov	r8, r2
 80046b4:	4699      	mov	r9, r3
 80046b6:	4623      	mov	r3, r4
 80046b8:	eb18 0303 	adds.w	r3, r8, r3
 80046bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046c0:	462b      	mov	r3, r5
 80046c2:	eb49 0303 	adc.w	r3, r9, r3
 80046c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046de:	460b      	mov	r3, r1
 80046e0:	18db      	adds	r3, r3, r3
 80046e2:	653b      	str	r3, [r7, #80]	; 0x50
 80046e4:	4613      	mov	r3, r2
 80046e6:	eb42 0303 	adc.w	r3, r2, r3
 80046ea:	657b      	str	r3, [r7, #84]	; 0x54
 80046ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046f4:	f7fc fad0 	bl	8000c98 <__aeabi_uldivmod>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4b61      	ldr	r3, [pc, #388]	; (8004884 <UART_SetConfig+0x2d4>)
 80046fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	011c      	lsls	r4, r3, #4
 8004706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004710:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004718:	4642      	mov	r2, r8
 800471a:	464b      	mov	r3, r9
 800471c:	1891      	adds	r1, r2, r2
 800471e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004720:	415b      	adcs	r3, r3
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004728:	4641      	mov	r1, r8
 800472a:	eb12 0a01 	adds.w	sl, r2, r1
 800472e:	4649      	mov	r1, r9
 8004730:	eb43 0b01 	adc.w	fp, r3, r1
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004748:	4692      	mov	sl, r2
 800474a:	469b      	mov	fp, r3
 800474c:	4643      	mov	r3, r8
 800474e:	eb1a 0303 	adds.w	r3, sl, r3
 8004752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004756:	464b      	mov	r3, r9
 8004758:	eb4b 0303 	adc.w	r3, fp, r3
 800475c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800476c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004774:	460b      	mov	r3, r1
 8004776:	18db      	adds	r3, r3, r3
 8004778:	643b      	str	r3, [r7, #64]	; 0x40
 800477a:	4613      	mov	r3, r2
 800477c:	eb42 0303 	adc.w	r3, r2, r3
 8004780:	647b      	str	r3, [r7, #68]	; 0x44
 8004782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800478a:	f7fc fa85 	bl	8000c98 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4611      	mov	r1, r2
 8004794:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <UART_SetConfig+0x2d4>)
 8004796:	fba3 2301 	umull	r2, r3, r3, r1
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2264      	movs	r2, #100	; 0x64
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	1acb      	subs	r3, r1, r3
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047aa:	4b36      	ldr	r3, [pc, #216]	; (8004884 <UART_SetConfig+0x2d4>)
 80047ac:	fba3 2302 	umull	r2, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047b8:	441c      	add	r4, r3
 80047ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047cc:	4642      	mov	r2, r8
 80047ce:	464b      	mov	r3, r9
 80047d0:	1891      	adds	r1, r2, r2
 80047d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80047d4:	415b      	adcs	r3, r3
 80047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047dc:	4641      	mov	r1, r8
 80047de:	1851      	adds	r1, r2, r1
 80047e0:	6339      	str	r1, [r7, #48]	; 0x30
 80047e2:	4649      	mov	r1, r9
 80047e4:	414b      	adcs	r3, r1
 80047e6:	637b      	str	r3, [r7, #52]	; 0x34
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047f4:	4659      	mov	r1, fp
 80047f6:	00cb      	lsls	r3, r1, #3
 80047f8:	4651      	mov	r1, sl
 80047fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047fe:	4651      	mov	r1, sl
 8004800:	00ca      	lsls	r2, r1, #3
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	4603      	mov	r3, r0
 8004808:	4642      	mov	r2, r8
 800480a:	189b      	adds	r3, r3, r2
 800480c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004810:	464b      	mov	r3, r9
 8004812:	460a      	mov	r2, r1
 8004814:	eb42 0303 	adc.w	r3, r2, r3
 8004818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004828:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800482c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004830:	460b      	mov	r3, r1
 8004832:	18db      	adds	r3, r3, r3
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
 8004836:	4613      	mov	r3, r2
 8004838:	eb42 0303 	adc.w	r3, r2, r3
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004846:	f7fc fa27 	bl	8000c98 <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <UART_SetConfig+0x2d4>)
 8004850:	fba3 1302 	umull	r1, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	2164      	movs	r1, #100	; 0x64
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	3332      	adds	r3, #50	; 0x32
 8004862:	4a08      	ldr	r2, [pc, #32]	; (8004884 <UART_SetConfig+0x2d4>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	f003 0207 	and.w	r2, r3, #7
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4422      	add	r2, r4
 8004876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004878:	e106      	b.n	8004a88 <UART_SetConfig+0x4d8>
 800487a:	bf00      	nop
 800487c:	40011000 	.word	0x40011000
 8004880:	40011400 	.word	0x40011400
 8004884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488c:	2200      	movs	r2, #0
 800488e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004892:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800489a:	4642      	mov	r2, r8
 800489c:	464b      	mov	r3, r9
 800489e:	1891      	adds	r1, r2, r2
 80048a0:	6239      	str	r1, [r7, #32]
 80048a2:	415b      	adcs	r3, r3
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048aa:	4641      	mov	r1, r8
 80048ac:	1854      	adds	r4, r2, r1
 80048ae:	4649      	mov	r1, r9
 80048b0:	eb43 0501 	adc.w	r5, r3, r1
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	00eb      	lsls	r3, r5, #3
 80048be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048c2:	00e2      	lsls	r2, r4, #3
 80048c4:	4614      	mov	r4, r2
 80048c6:	461d      	mov	r5, r3
 80048c8:	4643      	mov	r3, r8
 80048ca:	18e3      	adds	r3, r4, r3
 80048cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048d0:	464b      	mov	r3, r9
 80048d2:	eb45 0303 	adc.w	r3, r5, r3
 80048d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048f6:	4629      	mov	r1, r5
 80048f8:	008b      	lsls	r3, r1, #2
 80048fa:	4621      	mov	r1, r4
 80048fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004900:	4621      	mov	r1, r4
 8004902:	008a      	lsls	r2, r1, #2
 8004904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004908:	f7fc f9c6 	bl	8000c98 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4b60      	ldr	r3, [pc, #384]	; (8004a94 <UART_SetConfig+0x4e4>)
 8004912:	fba3 2302 	umull	r2, r3, r3, r2
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	011c      	lsls	r4, r3, #4
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	61b9      	str	r1, [r7, #24]
 8004934:	415b      	adcs	r3, r3
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800493c:	4641      	mov	r1, r8
 800493e:	1851      	adds	r1, r2, r1
 8004940:	6139      	str	r1, [r7, #16]
 8004942:	4649      	mov	r1, r9
 8004944:	414b      	adcs	r3, r1
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004954:	4659      	mov	r1, fp
 8004956:	00cb      	lsls	r3, r1, #3
 8004958:	4651      	mov	r1, sl
 800495a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495e:	4651      	mov	r1, sl
 8004960:	00ca      	lsls	r2, r1, #3
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	4603      	mov	r3, r0
 8004968:	4642      	mov	r2, r8
 800496a:	189b      	adds	r3, r3, r2
 800496c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004970:	464b      	mov	r3, r9
 8004972:	460a      	mov	r2, r1
 8004974:	eb42 0303 	adc.w	r3, r2, r3
 8004978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	67bb      	str	r3, [r7, #120]	; 0x78
 8004986:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004994:	4649      	mov	r1, r9
 8004996:	008b      	lsls	r3, r1, #2
 8004998:	4641      	mov	r1, r8
 800499a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499e:	4641      	mov	r1, r8
 80049a0:	008a      	lsls	r2, r1, #2
 80049a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049a6:	f7fc f977 	bl	8000c98 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	4b38      	ldr	r3, [pc, #224]	; (8004a94 <UART_SetConfig+0x4e4>)
 80049b2:	fba3 2301 	umull	r2, r3, r3, r1
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2264      	movs	r2, #100	; 0x64
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	1acb      	subs	r3, r1, r3
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	3332      	adds	r3, #50	; 0x32
 80049c4:	4a33      	ldr	r2, [pc, #204]	; (8004a94 <UART_SetConfig+0x4e4>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d0:	441c      	add	r4, r3
 80049d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d6:	2200      	movs	r2, #0
 80049d8:	673b      	str	r3, [r7, #112]	; 0x70
 80049da:	677a      	str	r2, [r7, #116]	; 0x74
 80049dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	415b      	adcs	r3, r3
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049f0:	4641      	mov	r1, r8
 80049f2:	1851      	adds	r1, r2, r1
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	4649      	mov	r1, r9
 80049f8:	414b      	adcs	r3, r1
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a08:	4659      	mov	r1, fp
 8004a0a:	00cb      	lsls	r3, r1, #3
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a12:	4651      	mov	r1, sl
 8004a14:	00ca      	lsls	r2, r1, #3
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a22:	464b      	mov	r3, r9
 8004a24:	460a      	mov	r2, r1
 8004a26:	eb42 0303 	adc.w	r3, r2, r3
 8004a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	663b      	str	r3, [r7, #96]	; 0x60
 8004a36:	667a      	str	r2, [r7, #100]	; 0x64
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a44:	4649      	mov	r1, r9
 8004a46:	008b      	lsls	r3, r1, #2
 8004a48:	4641      	mov	r1, r8
 8004a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a4e:	4641      	mov	r1, r8
 8004a50:	008a      	lsls	r2, r1, #2
 8004a52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a56:	f7fc f91f 	bl	8000c98 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <UART_SetConfig+0x4e4>)
 8004a60:	fba3 1302 	umull	r1, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	2164      	movs	r1, #100	; 0x64
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	3332      	adds	r3, #50	; 0x32
 8004a72:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <UART_SetConfig+0x4e4>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	f003 020f 	and.w	r2, r3, #15
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4422      	add	r2, r4
 8004a86:	609a      	str	r2, [r3, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a94:	51eb851f 	.word	0x51eb851f

08004a98 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004a98:	b084      	sub	sp, #16
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	f107 001c 	add.w	r0, r7, #28
 8004aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004aae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004ab2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004ab6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004aba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004abe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004ac2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004ad2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	b004      	add	sp, #16
 8004aec:	4770      	bx	lr

08004aee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2203      	movs	r2, #3
 8004b36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0303 	and.w	r3, r3, #3
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b80:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004b86:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004b8c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b9c:	f023 030f 	bic.w	r3, r3, #15
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	b2db      	uxtb	r3, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3314      	adds	r3, #20
 8004bde:	461a      	mov	r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4413      	add	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
}  
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c1c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004c22:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004c28:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0

}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b088      	sub	sp, #32
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c60:	2340      	movs	r3, #64	; 0x40
 8004c62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff74 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7e:	2110      	movs	r1, #16
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa19 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004c86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c88:	69fb      	ldr	r3, [r7, #28]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b088      	sub	sp, #32
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004ca0:	2311      	movs	r3, #17
 8004ca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ca4:	2340      	movs	r3, #64	; 0x40
 8004ca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ff52 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc2:	2111      	movs	r1, #17
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f9f7 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004cca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b088      	sub	sp, #32
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004ce4:	2312      	movs	r3, #18
 8004ce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ce8:	2340      	movs	r3, #64	; 0x40
 8004cea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cf6:	f107 0308 	add.w	r3, r7, #8
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff30 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	2112      	movs	r1, #18
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f9d5 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004d0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d10:	69fb      	ldr	r3, [r7, #28]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004d28:	2318      	movs	r3, #24
 8004d2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d2c:	2340      	movs	r3, #64	; 0x40
 8004d2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d3a:	f107 0308 	add.w	r3, r7, #8
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff ff0e 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4a:	2118      	movs	r1, #24
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9b3 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004d52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d54:	69fb      	ldr	r3, [r7, #28]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b088      	sub	sp, #32
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004d6c:	2319      	movs	r3, #25
 8004d6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d7e:	f107 0308 	add.w	r3, r7, #8
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff feec 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8e:	2119      	movs	r1, #25
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f991 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004d96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d98:	69fb      	ldr	r3, [r7, #28]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004db0:	230c      	movs	r3, #12
 8004db2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004db4:	2340      	movs	r3, #64	; 0x40
 8004db6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dc2:	f107 0308 	add.w	r3, r7, #8
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff feca 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004dce:	4a05      	ldr	r2, [pc, #20]	; (8004de4 <SDMMC_CmdStopTransfer+0x40>)
 8004dd0:	210c      	movs	r1, #12
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f970 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dda:	69fb      	ldr	r3, [r7, #28]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	05f5e100 	.word	0x05f5e100

08004de8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004df8:	2307      	movs	r3, #7
 8004dfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e08:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e0a:	f107 0310 	add.w	r3, r7, #16
 8004e0e:	4619      	mov	r1, r3
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff fea6 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1a:	2107      	movs	r1, #7
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f94b 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004e22:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3728      	adds	r7, #40	; 0x28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b088      	sub	sp, #32
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fe85 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb65 	bl	8005528 <SDMMC_GetCmdError>
 8004e5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e60:	69fb      	ldr	r3, [r7, #28]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b088      	sub	sp, #32
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004e72:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004e76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e78:	2308      	movs	r3, #8
 8004e7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e7c:	2340      	movs	r3, #64	; 0x40
 8004e7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e8a:	f107 0308 	add.w	r3, r7, #8
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff fe66 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 faf8 	bl	800548c <SDMMC_GetCmdResp7>
 8004e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004eb6:	2337      	movs	r3, #55	; 0x37
 8004eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eba:	2340      	movs	r3, #64	; 0x40
 8004ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ec6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ec8:	f107 0308 	add.w	r3, r7, #8
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff fe47 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed8:	2137      	movs	r1, #55	; 0x37
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8ec 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004f02:	2329      	movs	r3, #41	; 0x29
 8004f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f06:	2340      	movs	r3, #64	; 0x40
 8004f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f14:	f107 0308 	add.w	r3, r7, #8
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fe21 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f9ff 	bl	8005324 <SDMMC_GetCmdResp3>
 8004f26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f28:	69fb      	ldr	r3, [r7, #28]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b088      	sub	sp, #32
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004f40:	2306      	movs	r3, #6
 8004f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	4619      	mov	r1, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fe02 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f62:	2106      	movs	r1, #6
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f8a7 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b088      	sub	sp, #32
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004f82:	2333      	movs	r3, #51	; 0x33
 8004f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f86:	2340      	movs	r3, #64	; 0x40
 8004f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f94:	f107 0308 	add.w	r3, r7, #8
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fde1 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa4:	2133      	movs	r1, #51	; 0x33
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f886 	bl	80050b8 <SDMMC_GetCmdResp1>
 8004fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fae:	69fb      	ldr	r3, [r7, #28]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004fc8:	23c0      	movs	r3, #192	; 0xc0
 8004fca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fd6:	f107 0308 	add.w	r3, r7, #8
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fdc0 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f956 	bl	8005294 <SDMMC_GetCmdResp2>
 8004fe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fea:	69fb      	ldr	r3, [r7, #28]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005002:	2309      	movs	r3, #9
 8005004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005006:	23c0      	movs	r3, #192	; 0xc0
 8005008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800500e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005012:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005014:	f107 0308 	add.w	r3, r7, #8
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fda1 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f937 	bl	8005294 <SDMMC_GetCmdResp2>
 8005026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005028:	69fb      	ldr	r3, [r7, #28]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b088      	sub	sp, #32
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005040:	2303      	movs	r3, #3
 8005042:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800504c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005050:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005052:	f107 0308 	add.w	r3, r7, #8
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fd82 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	2103      	movs	r1, #3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f99c 	bl	80053a0 <SDMMC_GetCmdResp6>
 8005068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800506a:	69fb      	ldr	r3, [r7, #28]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005082:	230d      	movs	r3, #13
 8005084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005086:	2340      	movs	r3, #64	; 0x40
 8005088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800508e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005092:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005094:	f107 0308 	add.w	r3, r7, #8
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fd61 	bl	8004b62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	210d      	movs	r1, #13
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f806 	bl	80050b8 <SDMMC_GetCmdResp1>
 80050ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ae:	69fb      	ldr	r3, [r7, #28]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	460b      	mov	r3, r1
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80050c6:	4b70      	ldr	r3, [pc, #448]	; (8005288 <SDMMC_GetCmdResp1+0x1d0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a70      	ldr	r2, [pc, #448]	; (800528c <SDMMC_GetCmdResp1+0x1d4>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	0a5a      	lsrs	r2, r3, #9
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	fb02 f303 	mul.w	r3, r2, r3
 80050d8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	1e5a      	subs	r2, r3, #1
 80050de:	61fa      	str	r2, [r7, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050e8:	e0c9      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ee:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0ef      	beq.n	80050da <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1ea      	bne.n	80050da <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2204      	movs	r2, #4
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005116:	2304      	movs	r3, #4
 8005118:	e0b1      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800512c:	2301      	movs	r3, #1
 800512e:	e0a6      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	22c5      	movs	r2, #197	; 0xc5
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff fd3d 	bl	8004bb6 <SDIO_GetCommandResponse>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	7afb      	ldrb	r3, [r7, #11]
 8005142:	4293      	cmp	r3, r2
 8005144:	d001      	beq.n	800514a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005146:	2301      	movs	r3, #1
 8005148:	e099      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800514a:	2100      	movs	r1, #0
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f7ff fd3f 	bl	8004bd0 <SDIO_GetResponse>
 8005152:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4b4e      	ldr	r3, [pc, #312]	; (8005290 <SDMMC_GetCmdResp1+0x1d8>)
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800515e:	2300      	movs	r3, #0
 8005160:	e08d      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	da02      	bge.n	800516e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800516c:	e087      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	e080      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005186:	2380      	movs	r3, #128	; 0x80
 8005188:	e079      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005198:	e071      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80051a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a8:	e069      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80051b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b8:	e061      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80051c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051c8:	e059      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80051d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051d8:	e051      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051e8:	e049      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80051f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051f8:	e041      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005208:	e039      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005218:	e031      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005224:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005228:	e029      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005234:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005238:	e021      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005244:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005248:	e019      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005258:	e011      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005264:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005268:	e009      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005274:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005278:	e001      	b.n	800527e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800527a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000000 	.word	0x20000000
 800528c:	10624dd3 	.word	0x10624dd3
 8005290:	fdffe008 	.word	0xfdffe008

08005294 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800529c:	4b1f      	ldr	r3, [pc, #124]	; (800531c <SDMMC_GetCmdResp2+0x88>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <SDMMC_GetCmdResp2+0x8c>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	0a5b      	lsrs	r3, r3, #9
 80052a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ac:	fb02 f303 	mul.w	r3, r2, r3
 80052b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1e5a      	subs	r2, r3, #1
 80052b6:	60fa      	str	r2, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052c0:	e026      	b.n	8005310 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ef      	beq.n	80052b2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ea      	bne.n	80052b2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2204      	movs	r2, #4
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052ee:	2304      	movs	r3, #4
 80052f0:	e00e      	b.n	8005310 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005304:	2301      	movs	r3, #1
 8005306:	e003      	b.n	8005310 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	22c5      	movs	r2, #197	; 0xc5
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	20000000 	.word	0x20000000
 8005320:	10624dd3 	.word	0x10624dd3

08005324 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800532c:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <SDMMC_GetCmdResp3+0x74>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1a      	ldr	r2, [pc, #104]	; (800539c <SDMMC_GetCmdResp3+0x78>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	0a5b      	lsrs	r3, r3, #9
 8005338:	f241 3288 	movw	r2, #5000	; 0x1388
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1e5a      	subs	r2, r3, #1
 8005346:	60fa      	str	r2, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800534c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005350:	e01b      	b.n	800538a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ef      	beq.n	8005342 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1ea      	bne.n	8005342 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2204      	movs	r2, #4
 800537c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800537e:	2304      	movs	r3, #4
 8005380:	e003      	b.n	800538a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	22c5      	movs	r2, #197	; 0xc5
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000000 	.word	0x20000000
 800539c:	10624dd3 	.word	0x10624dd3

080053a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	460b      	mov	r3, r1
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053ae:	4b35      	ldr	r3, [pc, #212]	; (8005484 <SDMMC_GetCmdResp6+0xe4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a35      	ldr	r2, [pc, #212]	; (8005488 <SDMMC_GetCmdResp6+0xe8>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	0a5b      	lsrs	r3, r3, #9
 80053ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	61fa      	str	r2, [r7, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053d2:	e052      	b.n	800547a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0ef      	beq.n	80053c4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1ea      	bne.n	80053c4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2204      	movs	r2, #4
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005400:	2304      	movs	r3, #4
 8005402:	e03a      	b.n	800547a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005416:	2301      	movs	r3, #1
 8005418:	e02f      	b.n	800547a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff fbcb 	bl	8004bb6 <SDIO_GetCommandResponse>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	7afb      	ldrb	r3, [r7, #11]
 8005426:	4293      	cmp	r3, r2
 8005428:	d001      	beq.n	800542e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800542a:	2301      	movs	r3, #1
 800542c:	e025      	b.n	800547a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	22c5      	movs	r2, #197	; 0xc5
 8005432:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005434:	2100      	movs	r1, #0
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff fbca 	bl	8004bd0 <SDIO_GetResponse>
 800543c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	0c1b      	lsrs	r3, r3, #16
 800544c:	b29a      	uxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005452:	2300      	movs	r3, #0
 8005454:	e011      	b.n	800547a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005464:	e009      	b.n	800547a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005474:	e001      	b.n	800547a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000000 	.word	0x20000000
 8005488:	10624dd3 	.word	0x10624dd3

0800548c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005494:	4b22      	ldr	r3, [pc, #136]	; (8005520 <SDMMC_GetCmdResp7+0x94>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a22      	ldr	r2, [pc, #136]	; (8005524 <SDMMC_GetCmdResp7+0x98>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0a5b      	lsrs	r3, r3, #9
 80054a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a4:	fb02 f303 	mul.w	r3, r2, r3
 80054a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1e5a      	subs	r2, r3, #1
 80054ae:	60fa      	str	r2, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054b8:	e02c      	b.n	8005514 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0ef      	beq.n	80054aa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1ea      	bne.n	80054aa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2204      	movs	r2, #4
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054e6:	2304      	movs	r3, #4
 80054e8:	e014      	b.n	8005514 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d004      	beq.n	8005500 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e009      	b.n	8005514 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2240      	movs	r2, #64	; 0x40
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005512:	2300      	movs	r3, #0
  
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	20000000 	.word	0x20000000
 8005524:	10624dd3 	.word	0x10624dd3

08005528 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005530:	4b11      	ldr	r3, [pc, #68]	; (8005578 <SDMMC_GetCmdError+0x50>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a11      	ldr	r2, [pc, #68]	; (800557c <SDMMC_GetCmdError+0x54>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	0a5b      	lsrs	r3, r3, #9
 800553c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005540:	fb02 f303 	mul.w	r3, r2, r3
 8005544:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1e5a      	subs	r2, r3, #1
 800554a:	60fa      	str	r2, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005550:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005554:	e009      	b.n	800556a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f1      	beq.n	8005546 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	22c5      	movs	r2, #197	; 0xc5
 8005566:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000000 	.word	0x20000000
 800557c:	10624dd3 	.word	0x10624dd3

08005580 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005584:	4904      	ldr	r1, [pc, #16]	; (8005598 <MX_FATFS_Init+0x18>)
 8005586:	4805      	ldr	r0, [pc, #20]	; (800559c <MX_FATFS_Init+0x1c>)
 8005588:	f002 f81e 	bl	80075c8 <FATFS_LinkDriver>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <MX_FATFS_Init+0x20>)
 8005592:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005594:	bf00      	nop
 8005596:	bd80      	pop	{r7, pc}
 8005598:	200013bc 	.word	0x200013bc
 800559c:	0800bdf8 	.word	0x0800bdf8
 80055a0:	200013b8 	.word	0x200013b8

080055a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80055a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80055be:	f000 f896 	bl	80056ee <BSP_SD_IsDetected>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d001      	beq.n	80055cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e012      	b.n	80055f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80055cc:	480b      	ldr	r0, [pc, #44]	; (80055fc <BSP_SD_Init+0x48>)
 80055ce:	f7fd fc6f 	bl	8002eb0 <HAL_SD_Init>
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80055dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055e0:	4806      	ldr	r0, [pc, #24]	; (80055fc <BSP_SD_Init+0x48>)
 80055e2:	f7fe fa3d 	bl	8003a60 <HAL_SD_ConfigWideBusOperation>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80055f0:	79fb      	ldrb	r3, [r7, #7]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20001228 	.word	0x20001228

08005600 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	68f9      	ldr	r1, [r7, #12]
 8005616:	4806      	ldr	r0, [pc, #24]	; (8005630 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005618:	f7fd fcfa 	bl	8003010 <HAL_SD_ReadBlocks_DMA>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20001228 	.word	0x20001228

08005634 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	68f9      	ldr	r1, [r7, #12]
 800564a:	4806      	ldr	r0, [pc, #24]	; (8005664 <BSP_SD_WriteBlocks_DMA+0x30>)
 800564c:	f7fd fdc2 	bl	80031d4 <HAL_SD_WriteBlocks_DMA>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20001228 	.word	0x20001228

08005668 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800566c:	4805      	ldr	r0, [pc, #20]	; (8005684 <BSP_SD_GetCardState+0x1c>)
 800566e:	f7fe fa91 	bl	8003b94 <HAL_SD_GetCardState>
 8005672:	4603      	mov	r3, r0
 8005674:	2b04      	cmp	r3, #4
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
}
 800567e:	4618      	mov	r0, r3
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20001228 	.word	0x20001228

08005688 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4803      	ldr	r0, [pc, #12]	; (80056a0 <BSP_SD_GetCardInfo+0x18>)
 8005694:	f7fe f9b8 	bl	8003a08 <HAL_SD_GetCardInfo>
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20001228 	.word	0x20001228

080056a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80056ac:	f000 f818 	bl	80056e0 <BSP_SD_AbortCallback>
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80056c0:	f000 f98c 	bl	80059dc <BSP_SD_WriteCpltCallback>
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80056d4:	f000 f98e 	bl	80059f4 <BSP_SD_ReadCpltCallback>
}
 80056d8:	bf00      	nop
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0

}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80056f4:	2301      	movs	r3, #1
 80056f6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	b2db      	uxtb	r3, r3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005710:	f7fc f912 	bl	8001938 <HAL_GetTick>
 8005714:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005716:	e006      	b.n	8005726 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005718:	f7ff ffa6 	bl	8005668 <BSP_SD_GetCardState>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005722:	2300      	movs	r3, #0
 8005724:	e009      	b.n	800573a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005726:	f7fc f907 	bl	8001938 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d8f0      	bhi.n	8005718 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <SD_CheckStatus+0x38>)
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005754:	f7ff ff88 	bl	8005668 <BSP_SD_GetCardState>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800575e:	4b07      	ldr	r3, [pc, #28]	; (800577c <SD_CheckStatus+0x38>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	b2da      	uxtb	r2, r3
 800576a:	4b04      	ldr	r3, [pc, #16]	; (800577c <SD_CheckStatus+0x38>)
 800576c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800576e:	4b03      	ldr	r3, [pc, #12]	; (800577c <SD_CheckStatus+0x38>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	b2db      	uxtb	r3, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000009 	.word	0x20000009

08005780 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800578a:	f7ff ff13 	bl	80055b4 <BSP_SD_Init>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff ffd4 	bl	8005744 <SD_CheckStatus>
 800579c:	4603      	mov	r3, r0
 800579e:	461a      	mov	r2, r3
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <SD_initialize+0x34>)
 80057a2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <SD_initialize+0x34>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	b2db      	uxtb	r3, r3
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000009 	.word	0x20000009

080057b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff ffbd 	bl	8005744 <SD_CheckStatus>
 80057ca:	4603      	mov	r3, r0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4603      	mov	r3, r0
 80057e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80057e8:	f247 5030 	movw	r0, #30000	; 0x7530
 80057ec:	f7ff ff8c 	bl	8005708 <SD_CheckStatusWithTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	da01      	bge.n	80057fa <SD_read+0x26>
  {
    return res;
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	e03b      	b.n	8005872 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	68b8      	ldr	r0, [r7, #8]
 8005800:	f7ff fefe 	bl	8005600 <BSP_SD_ReadBlocks_DMA>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d132      	bne.n	8005870 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800580a:	4b1c      	ldr	r3, [pc, #112]	; (800587c <SD_read+0xa8>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005810:	f7fc f892 	bl	8001938 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005816:	bf00      	nop
 8005818:	4b18      	ldr	r3, [pc, #96]	; (800587c <SD_read+0xa8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d108      	bne.n	8005832 <SD_read+0x5e>
 8005820:	f7fc f88a 	bl	8001938 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f247 522f 	movw	r2, #29999	; 0x752f
 800582e:	4293      	cmp	r3, r2
 8005830:	d9f2      	bls.n	8005818 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005832:	4b12      	ldr	r3, [pc, #72]	; (800587c <SD_read+0xa8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
 800583e:	e017      	b.n	8005870 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005840:	4b0e      	ldr	r3, [pc, #56]	; (800587c <SD_read+0xa8>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005846:	f7fc f877 	bl	8001938 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800584c:	e007      	b.n	800585e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800584e:	f7ff ff0b 	bl	8005668 <BSP_SD_GetCardState>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <SD_read+0x8a>
          {
            res = RES_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800585c:	e008      	b.n	8005870 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800585e:	f7fc f86b 	bl	8001938 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	f247 522f 	movw	r2, #29999	; 0x752f
 800586c:	4293      	cmp	r3, r2
 800586e:	d9ee      	bls.n	800584e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005870:	7dfb      	ldrb	r3, [r7, #23]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200013c4 	.word	0x200013c4

08005880 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4603      	mov	r3, r0
 800588e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005894:	4b24      	ldr	r3, [pc, #144]	; (8005928 <SD_write+0xa8>)
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800589a:	f247 5030 	movw	r0, #30000	; 0x7530
 800589e:	f7ff ff33 	bl	8005708 <SD_CheckStatusWithTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	da01      	bge.n	80058ac <SD_write+0x2c>
  {
    return res;
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
 80058aa:	e038      	b.n	800591e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	68b8      	ldr	r0, [r7, #8]
 80058b2:	f7ff febf 	bl	8005634 <BSP_SD_WriteBlocks_DMA>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d12f      	bne.n	800591c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80058bc:	f7fc f83c 	bl	8001938 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80058c2:	bf00      	nop
 80058c4:	4b18      	ldr	r3, [pc, #96]	; (8005928 <SD_write+0xa8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <SD_write+0x5e>
 80058cc:	f7fc f834 	bl	8001938 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f247 522f 	movw	r2, #29999	; 0x752f
 80058da:	4293      	cmp	r3, r2
 80058dc:	d9f2      	bls.n	80058c4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80058de:	4b12      	ldr	r3, [pc, #72]	; (8005928 <SD_write+0xa8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <SD_write+0x6c>
      {
        res = RES_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
 80058ea:	e017      	b.n	800591c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <SD_write+0xa8>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80058f2:	f7fc f821 	bl	8001938 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80058f8:	e007      	b.n	800590a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80058fa:	f7ff feb5 	bl	8005668 <BSP_SD_GetCardState>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <SD_write+0x8a>
          {
            res = RES_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	75fb      	strb	r3, [r7, #23]
            break;
 8005908:	e008      	b.n	800591c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800590a:	f7fc f815 	bl	8001938 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f247 522f 	movw	r2, #29999	; 0x752f
 8005918:	4293      	cmp	r3, r2
 800591a:	d9ee      	bls.n	80058fa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800591c:	7dfb      	ldrb	r3, [r7, #23]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	200013c0 	.word	0x200013c0

0800592c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08c      	sub	sp, #48	; 0x30
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	603a      	str	r2, [r7, #0]
 8005936:	71fb      	strb	r3, [r7, #7]
 8005938:	460b      	mov	r3, r1
 800593a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005942:	4b25      	ldr	r3, [pc, #148]	; (80059d8 <SD_ioctl+0xac>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <SD_ioctl+0x28>
 8005950:	2303      	movs	r3, #3
 8005952:	e03c      	b.n	80059ce <SD_ioctl+0xa2>

  switch (cmd)
 8005954:	79bb      	ldrb	r3, [r7, #6]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d834      	bhi.n	80059c4 <SD_ioctl+0x98>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <SD_ioctl+0x34>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005971 	.word	0x08005971
 8005964:	08005979 	.word	0x08005979
 8005968:	08005991 	.word	0x08005991
 800596c:	080059ab 	.word	0x080059ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005976:	e028      	b.n	80059ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005978:	f107 030c 	add.w	r3, r7, #12
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fe83 	bl	8005688 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800598e:	e01c      	b.n	80059ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005990:	f107 030c 	add.w	r3, r7, #12
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fe77 	bl	8005688 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	b29a      	uxth	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80059a8:	e00f      	b.n	80059ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80059aa:	f107 030c 	add.w	r3, r7, #12
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fe6a 	bl	8005688 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	0a5a      	lsrs	r2, r3, #9
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80059c2:	e002      	b.n	80059ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80059c4:	2304      	movs	r3, #4
 80059c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80059ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3730      	adds	r7, #48	; 0x30
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000009 	.word	0x20000009

080059dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80059e0:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <BSP_SD_WriteCpltCallback+0x14>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
}
 80059e6:	bf00      	nop
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	200013c0 	.word	0x200013c0

080059f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80059f8:	4b03      	ldr	r3, [pc, #12]	; (8005a08 <BSP_SD_ReadCpltCallback+0x14>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
}
 80059fe:	bf00      	nop
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	200013c4 	.word	0x200013c4

08005a0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <disk_status+0x30>)
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	79fa      	ldrb	r2, [r7, #7]
 8005a24:	4905      	ldr	r1, [pc, #20]	; (8005a3c <disk_status+0x30>)
 8005a26:	440a      	add	r2, r1
 8005a28:	7a12      	ldrb	r2, [r2, #8]
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	4798      	blx	r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	200013f0 	.word	0x200013f0

08005a40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	4a0d      	ldr	r2, [pc, #52]	; (8005a88 <disk_initialize+0x48>)
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d111      	bne.n	8005a7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <disk_initialize+0x48>)
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <disk_initialize+0x48>)
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	79fa      	ldrb	r2, [r7, #7]
 8005a6e:	4906      	ldr	r1, [pc, #24]	; (8005a88 <disk_initialize+0x48>)
 8005a70:	440a      	add	r2, r1
 8005a72:	7a12      	ldrb	r2, [r2, #8]
 8005a74:	4610      	mov	r0, r2
 8005a76:	4798      	blx	r3
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	200013f0 	.word	0x200013f0

08005a8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005a8c:	b590      	push	{r4, r7, lr}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4603      	mov	r3, r0
 8005a9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <disk_read+0x3c>)
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	689c      	ldr	r4, [r3, #8]
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	4a07      	ldr	r2, [pc, #28]	; (8005ac8 <disk_read+0x3c>)
 8005aac:	4413      	add	r3, r2
 8005aae:	7a18      	ldrb	r0, [r3, #8]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	47a0      	blx	r4
 8005ab8:	4603      	mov	r3, r0
 8005aba:	75fb      	strb	r3, [r7, #23]
  return res;
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd90      	pop	{r4, r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200013f0 	.word	0x200013f0

08005acc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4603      	mov	r3, r0
 8005ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	4a0a      	ldr	r2, [pc, #40]	; (8005b08 <disk_write+0x3c>)
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68dc      	ldr	r4, [r3, #12]
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	4a07      	ldr	r2, [pc, #28]	; (8005b08 <disk_write+0x3c>)
 8005aec:	4413      	add	r3, r2
 8005aee:	7a18      	ldrb	r0, [r3, #8]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	47a0      	blx	r4
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]
  return res;
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd90      	pop	{r4, r7, pc}
 8005b06:	bf00      	nop
 8005b08:	200013f0 	.word	0x200013f0

08005b0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	603a      	str	r2, [r7, #0]
 8005b16:	71fb      	strb	r3, [r7, #7]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <disk_ioctl+0x38>)
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	79fa      	ldrb	r2, [r7, #7]
 8005b2a:	4906      	ldr	r1, [pc, #24]	; (8005b44 <disk_ioctl+0x38>)
 8005b2c:	440a      	add	r2, r1
 8005b2e:	7a10      	ldrb	r0, [r2, #8]
 8005b30:	79b9      	ldrb	r1, [r7, #6]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	4798      	blx	r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]
  return res;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	200013f0 	.word	0x200013f0

08005b48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3301      	adds	r3, #1
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005b58:	89fb      	ldrh	r3, [r7, #14]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	b21a      	sxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	b21b      	sxth	r3, r3
 8005b64:	4313      	orrs	r3, r2
 8005b66:	b21b      	sxth	r3, r3
 8005b68:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005b6a:	89fb      	ldrh	r3, [r7, #14]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3303      	adds	r3, #3
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	3202      	adds	r2, #2
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	3201      	adds	r2, #1
 8005b9e:	7812      	ldrb	r2, [r2, #0]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
	return rv;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	887a      	ldrh	r2, [r7, #2]
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	887b      	ldrh	r3, [r7, #2]
 8005bd8:	0a1b      	lsrs	r3, r3, #8
 8005bda:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	607a      	str	r2, [r7, #4]
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00d      	beq.n	8005c82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	1c53      	adds	r3, r2, #1
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	6179      	str	r1, [r7, #20]
 8005c72:	7812      	ldrb	r2, [r2, #0]
 8005c74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	607b      	str	r3, [r7, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f1      	bne.n	8005c66 <mem_cpy+0x1a>
	}
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005c8e:	b480      	push	{r7}
 8005c90:	b087      	sub	sp, #28
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	617a      	str	r2, [r7, #20]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	607b      	str	r3, [r7, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f3      	bne.n	8005c9e <mem_set+0x10>
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005cc4:	b480      	push	{r7}
 8005cc6:	b089      	sub	sp, #36	; 0x24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	61fa      	str	r2, [r7, #28]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	61ba      	str	r2, [r7, #24]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	1acb      	subs	r3, r1, r3
 8005cf0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	607b      	str	r3, [r7, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <mem_cmp+0x40>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0eb      	beq.n	8005cdc <mem_cmp+0x18>

	return r;
 8005d04:	697b      	ldr	r3, [r7, #20]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3724      	adds	r7, #36	; 0x24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005d1c:	e002      	b.n	8005d24 <chk_chr+0x12>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3301      	adds	r3, #1
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <chk_chr+0x26>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d1f2      	bne.n	8005d1e <chk_chr+0xc>
	return *str;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e010      	b.n	8005d78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d56:	4a0d      	ldr	r2, [pc, #52]	; (8005d8c <clear_lock+0x44>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	4413      	add	r3, r2
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d105      	bne.n	8005d72 <clear_lock+0x2a>
 8005d66:	4a09      	ldr	r2, [pc, #36]	; (8005d8c <clear_lock+0x44>)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	4413      	add	r3, r2
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d9eb      	bls.n	8005d56 <clear_lock+0xe>
	}
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	200013d0 	.word	0x200013d0

08005d90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	78db      	ldrb	r3, [r3, #3]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d034      	beq.n	8005e0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	7858      	ldrb	r0, [r3, #1]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005db4:	2301      	movs	r3, #1
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	f7ff fe88 	bl	8005acc <disk_write>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	73fb      	strb	r3, [r7, #15]
 8005dc6:	e022      	b.n	8005e0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	1ad2      	subs	r2, r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d217      	bcs.n	8005e0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	789b      	ldrb	r3, [r3, #2]
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e010      	b.n	8005e08 <sync_window+0x78>
					wsect += fs->fsize;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	7858      	ldrb	r0, [r3, #1]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	f7ff fe65 	bl	8005acc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d8eb      	bhi.n	8005de6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d01b      	beq.n	8005e68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff ffad 	bl	8005d90 <sync_window>
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d113      	bne.n	8005e68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	7858      	ldrb	r0, [r3, #1]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	f7ff fe1d 	bl	8005a8c <disk_read>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ff87 	bl	8005d90 <sync_window>
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d159      	bne.n	8005f40 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d149      	bne.n	8005f28 <sync_fs+0xb4>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	791b      	ldrb	r3, [r3, #4]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d145      	bne.n	8005f28 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	899b      	ldrh	r3, [r3, #12]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	f7ff fef0 	bl	8005c8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3334      	adds	r3, #52	; 0x34
 8005eb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005eb6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fe7f 	bl	8005bbe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3334      	adds	r3, #52	; 0x34
 8005ec4:	4921      	ldr	r1, [pc, #132]	; (8005f4c <sync_fs+0xd8>)
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fe94 	bl	8005bf4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3334      	adds	r3, #52	; 0x34
 8005ed0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ed4:	491e      	ldr	r1, [pc, #120]	; (8005f50 <sync_fs+0xdc>)
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fe8c 	bl	8005bf4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3334      	adds	r3, #52	; 0x34
 8005ee0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7ff fe82 	bl	8005bf4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3334      	adds	r3, #52	; 0x34
 8005ef4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7ff fe78 	bl	8005bf4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	7858      	ldrb	r0, [r3, #1]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f7ff fdd5 	bl	8005acc <disk_write>
			fs->fsi_flag = 0;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fdeb 	bl	8005b0c <disk_ioctl>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <sync_fs+0xcc>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	41615252 	.word	0x41615252
 8005f50:	61417272 	.word	0x61417272

08005f54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	3b02      	subs	r3, #2
 8005f62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	3b02      	subs	r3, #2
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d301      	bcc.n	8005f74 <clust2sect+0x20>
 8005f70:	2300      	movs	r3, #0
 8005f72:	e008      	b.n	8005f86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	895b      	ldrh	r3, [r3, #10]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	fb03 f202 	mul.w	r2, r3, r2
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	4413      	add	r3, r2
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b086      	sub	sp, #24
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d904      	bls.n	8005fb2 <get_fat+0x20>
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d302      	bcc.n	8005fb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	e0bb      	b.n	8006130 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	f000 8083 	beq.w	80060ce <get_fat+0x13c>
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	f300 80a7 	bgt.w	800611c <get_fat+0x18a>
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d002      	beq.n	8005fd8 <get_fat+0x46>
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d056      	beq.n	8006084 <get_fat+0xf2>
 8005fd6:	e0a1      	b.n	800611c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	899b      	ldrh	r3, [r3, #12]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6938      	ldr	r0, [r7, #16]
 8005ffc:	f7ff ff0c 	bl	8005e18 <move_window>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 808d 	bne.w	8006122 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	60fa      	str	r2, [r7, #12]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	8992      	ldrh	r2, [r2, #12]
 8006012:	fbb3 f1f2 	udiv	r1, r3, r2
 8006016:	fb01 f202 	mul.w	r2, r1, r2
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4413      	add	r3, r2
 8006020:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006024:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	899b      	ldrh	r3, [r3, #12]
 800602e:	4619      	mov	r1, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	fbb3 f3f1 	udiv	r3, r3, r1
 8006036:	4413      	add	r3, r2
 8006038:	4619      	mov	r1, r3
 800603a:	6938      	ldr	r0, [r7, #16]
 800603c:	f7ff feec 	bl	8005e18 <move_window>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d16f      	bne.n	8006126 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	899b      	ldrh	r3, [r3, #12]
 800604a:	461a      	mov	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006052:	fb01 f202 	mul.w	r2, r1, r2
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	461a      	mov	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <get_fat+0xe8>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	091b      	lsrs	r3, r3, #4
 8006078:	e002      	b.n	8006080 <get_fat+0xee>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006080:	617b      	str	r3, [r7, #20]
			break;
 8006082:	e055      	b.n	8006130 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	899b      	ldrh	r3, [r3, #12]
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	b29b      	uxth	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	fbb3 f3f1 	udiv	r3, r3, r1
 8006098:	4413      	add	r3, r2
 800609a:	4619      	mov	r1, r3
 800609c:	6938      	ldr	r0, [r7, #16]
 800609e:	f7ff febb 	bl	8005e18 <move_window>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d140      	bne.n	800612a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	8992      	ldrh	r2, [r2, #12]
 80060b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80060ba:	fb00 f202 	mul.w	r2, r0, r2
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	440b      	add	r3, r1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fd40 	bl	8005b48 <ld_word>
 80060c8:	4603      	mov	r3, r0
 80060ca:	617b      	str	r3, [r7, #20]
			break;
 80060cc:	e030      	b.n	8006130 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	899b      	ldrh	r3, [r3, #12]
 80060d6:	089b      	lsrs	r3, r3, #2
 80060d8:	b29b      	uxth	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	fbb3 f3f1 	udiv	r3, r3, r1
 80060e2:	4413      	add	r3, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	6938      	ldr	r0, [r7, #16]
 80060e8:	f7ff fe96 	bl	8005e18 <move_window>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d11d      	bne.n	800612e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	8992      	ldrh	r2, [r2, #12]
 8006100:	fbb3 f0f2 	udiv	r0, r3, r2
 8006104:	fb00 f202 	mul.w	r2, r0, r2
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	440b      	add	r3, r1
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fd33 	bl	8005b78 <ld_dword>
 8006112:	4603      	mov	r3, r0
 8006114:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006118:	617b      	str	r3, [r7, #20]
			break;
 800611a:	e009      	b.n	8006130 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800611c:	2301      	movs	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e006      	b.n	8006130 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006122:	bf00      	nop
 8006124:	e004      	b.n	8006130 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800612e:	bf00      	nop
		}
	}

	return val;
 8006130:	697b      	ldr	r3, [r7, #20]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800613a:	b590      	push	{r4, r7, lr}
 800613c:	b089      	sub	sp, #36	; 0x24
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006146:	2302      	movs	r3, #2
 8006148:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b01      	cmp	r3, #1
 800614e:	f240 8109 	bls.w	8006364 <put_fat+0x22a>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	429a      	cmp	r2, r3
 800615a:	f080 8103 	bcs.w	8006364 <put_fat+0x22a>
		switch (fs->fs_type) {
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b03      	cmp	r3, #3
 8006164:	f000 80b6 	beq.w	80062d4 <put_fat+0x19a>
 8006168:	2b03      	cmp	r3, #3
 800616a:	f300 80fb 	bgt.w	8006364 <put_fat+0x22a>
 800616e:	2b01      	cmp	r3, #1
 8006170:	d003      	beq.n	800617a <put_fat+0x40>
 8006172:	2b02      	cmp	r3, #2
 8006174:	f000 8083 	beq.w	800627e <put_fat+0x144>
 8006178:	e0f4      	b.n	8006364 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	085b      	lsrs	r3, r3, #1
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	4413      	add	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	899b      	ldrh	r3, [r3, #12]
 8006190:	4619      	mov	r1, r3
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	fbb3 f3f1 	udiv	r3, r3, r1
 8006198:	4413      	add	r3, r2
 800619a:	4619      	mov	r1, r3
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff fe3b 	bl	8005e18 <move_window>
 80061a2:	4603      	mov	r3, r0
 80061a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061a6:	7ffb      	ldrb	r3, [r7, #31]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 80d4 	bne.w	8006356 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	61ba      	str	r2, [r7, #24]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	8992      	ldrh	r2, [r2, #12]
 80061be:	fbb3 f0f2 	udiv	r0, r3, r2
 80061c2:	fb00 f202 	mul.w	r2, r0, r2
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	440b      	add	r3, r1
 80061ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00d      	beq.n	80061f2 <put_fat+0xb8>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	b25b      	sxtb	r3, r3
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	b25a      	sxtb	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	b25b      	sxtb	r3, r3
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b25b      	sxtb	r3, r3
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	e001      	b.n	80061f6 <put_fat+0xbc>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	899b      	ldrh	r3, [r3, #12]
 8006208:	4619      	mov	r1, r3
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006210:	4413      	add	r3, r2
 8006212:	4619      	mov	r1, r3
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f7ff fdff 	bl	8005e18 <move_window>
 800621a:	4603      	mov	r3, r0
 800621c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800621e:	7ffb      	ldrb	r3, [r7, #31]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 809a 	bne.w	800635a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	899b      	ldrh	r3, [r3, #12]
 8006230:	461a      	mov	r2, r3
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	fbb3 f0f2 	udiv	r0, r3, r2
 8006238:	fb00 f202 	mul.w	r2, r0, r2
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	440b      	add	r3, r1
 8006240:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <put_fat+0x11a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	b2db      	uxtb	r3, r3
 8006252:	e00e      	b.n	8006272 <put_fat+0x138>
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	b25b      	sxtb	r3, r3
 800625a:	f023 030f 	bic.w	r3, r3, #15
 800625e:	b25a      	sxtb	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	b25b      	sxtb	r3, r3
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	b25b      	sxtb	r3, r3
 800626c:	4313      	orrs	r3, r2
 800626e:	b25b      	sxtb	r3, r3
 8006270:	b2db      	uxtb	r3, r3
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	70da      	strb	r2, [r3, #3]
			break;
 800627c:	e072      	b.n	8006364 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	899b      	ldrh	r3, [r3, #12]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	b29b      	uxth	r3, r3
 800628a:	4619      	mov	r1, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006292:	4413      	add	r3, r2
 8006294:	4619      	mov	r1, r3
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fdbe 	bl	8005e18 <move_window>
 800629c:	4603      	mov	r3, r0
 800629e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062a0:	7ffb      	ldrb	r3, [r7, #31]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d15b      	bne.n	800635e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	8992      	ldrh	r2, [r2, #12]
 80062b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80062b8:	fb00 f202 	mul.w	r2, r0, r2
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	440b      	add	r3, r1
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	b292      	uxth	r2, r2
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff fc79 	bl	8005bbe <st_word>
			fs->wflag = 1;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	70da      	strb	r2, [r3, #3]
			break;
 80062d2:	e047      	b.n	8006364 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	899b      	ldrh	r3, [r3, #12]
 80062dc:	089b      	lsrs	r3, r3, #2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	4619      	mov	r1, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80062e8:	4413      	add	r3, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff fd93 	bl	8005e18 <move_window>
 80062f2:	4603      	mov	r3, r0
 80062f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062f6:	7ffb      	ldrb	r3, [r7, #31]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d132      	bne.n	8006362 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	8992      	ldrh	r2, [r2, #12]
 8006310:	fbb3 f0f2 	udiv	r0, r3, r2
 8006314:	fb00 f202 	mul.w	r2, r0, r2
 8006318:	1a9b      	subs	r3, r3, r2
 800631a:	440b      	add	r3, r1
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fc2b 	bl	8005b78 <ld_dword>
 8006322:	4603      	mov	r3, r0
 8006324:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006328:	4323      	orrs	r3, r4
 800632a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	8992      	ldrh	r2, [r2, #12]
 800633a:	fbb3 f0f2 	udiv	r0, r3, r2
 800633e:	fb00 f202 	mul.w	r2, r0, r2
 8006342:	1a9b      	subs	r3, r3, r2
 8006344:	440b      	add	r3, r1
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fc53 	bl	8005bf4 <st_dword>
			fs->wflag = 1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	70da      	strb	r2, [r3, #3]
			break;
 8006354:	e006      	b.n	8006364 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006356:	bf00      	nop
 8006358:	e004      	b.n	8006364 <put_fat+0x22a>
			if (res != FR_OK) break;
 800635a:	bf00      	nop
 800635c:	e002      	b.n	8006364 <put_fat+0x22a>
			if (res != FR_OK) break;
 800635e:	bf00      	nop
 8006360:	e000      	b.n	8006364 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006362:	bf00      	nop
		}
	}
	return res;
 8006364:	7ffb      	ldrb	r3, [r7, #31]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3724      	adds	r7, #36	; 0x24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd90      	pop	{r4, r7, pc}

0800636e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b088      	sub	sp, #32
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d904      	bls.n	8006394 <remove_chain+0x26>
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	d301      	bcc.n	8006398 <remove_chain+0x2a>
 8006394:	2302      	movs	r3, #2
 8006396:	e04b      	b.n	8006430 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800639e:	f04f 32ff 	mov.w	r2, #4294967295
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	69b8      	ldr	r0, [r7, #24]
 80063a6:	f7ff fec8 	bl	800613a <put_fat>
 80063aa:	4603      	mov	r3, r0
 80063ac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80063ae:	7ffb      	ldrb	r3, [r7, #31]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <remove_chain+0x4a>
 80063b4:	7ffb      	ldrb	r3, [r7, #31]
 80063b6:	e03b      	b.n	8006430 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff fde9 	bl	8005f92 <get_fat>
 80063c0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d031      	beq.n	800642c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <remove_chain+0x64>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e02e      	b.n	8006430 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d101      	bne.n	80063de <remove_chain+0x70>
 80063da:	2301      	movs	r3, #1
 80063dc:	e028      	b.n	8006430 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80063de:	2200      	movs	r2, #0
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	69b8      	ldr	r0, [r7, #24]
 80063e4:	f7ff fea9 	bl	800613a <put_fat>
 80063e8:	4603      	mov	r3, r0
 80063ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80063ec:	7ffb      	ldrb	r3, [r7, #31]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <remove_chain+0x88>
 80063f2:	7ffb      	ldrb	r3, [r7, #31]
 80063f4:	e01c      	b.n	8006430 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	695a      	ldr	r2, [r3, #20]
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	3b02      	subs	r3, #2
 8006400:	429a      	cmp	r2, r3
 8006402:	d20b      	bcs.n	800641c <remove_chain+0xae>
			fs->free_clst++;
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	791b      	ldrb	r3, [r3, #4]
 8006412:	f043 0301 	orr.w	r3, r3, #1
 8006416:	b2da      	uxtb	r2, r3
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	d3c6      	bcc.n	80063b8 <remove_chain+0x4a>
 800642a:	e000      	b.n	800642e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800642c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10d      	bne.n	800646a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <create_chain+0x2c>
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	429a      	cmp	r2, r3
 8006462:	d31b      	bcc.n	800649c <create_chain+0x64>
 8006464:	2301      	movs	r3, #1
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e018      	b.n	800649c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fd90 	bl	8005f92 <get_fat>
 8006472:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d801      	bhi.n	800647e <create_chain+0x46>
 800647a:	2301      	movs	r3, #1
 800647c:	e070      	b.n	8006560 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006484:	d101      	bne.n	800648a <create_chain+0x52>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	e06a      	b.n	8006560 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	429a      	cmp	r2, r3
 8006492:	d201      	bcs.n	8006498 <create_chain+0x60>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	e063      	b.n	8006560 <create_chain+0x128>
		scl = clst;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	3301      	adds	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d307      	bcc.n	80064c0 <create_chain+0x88>
				ncl = 2;
 80064b0:	2302      	movs	r3, #2
 80064b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d901      	bls.n	80064c0 <create_chain+0x88>
 80064bc:	2300      	movs	r3, #0
 80064be:	e04f      	b.n	8006560 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80064c0:	69f9      	ldr	r1, [r7, #28]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fd65 	bl	8005f92 <get_fat>
 80064c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d003      	beq.n	80064de <create_chain+0xa6>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d101      	bne.n	80064e2 <create_chain+0xaa>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	e03e      	b.n	8006560 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d1da      	bne.n	80064a0 <create_chain+0x68>
 80064ea:	2300      	movs	r3, #0
 80064ec:	e038      	b.n	8006560 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80064ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80064f0:	f04f 32ff 	mov.w	r2, #4294967295
 80064f4:	69f9      	ldr	r1, [r7, #28]
 80064f6:	6938      	ldr	r0, [r7, #16]
 80064f8:	f7ff fe1f 	bl	800613a <put_fat>
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <create_chain+0xe2>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d006      	beq.n	800651a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6938      	ldr	r0, [r7, #16]
 8006512:	f7ff fe12 	bl	800613a <put_fat>
 8006516:	4603      	mov	r3, r0
 8006518:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d116      	bne.n	800654e <create_chain+0x116>
		fs->last_clst = ncl;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	3b02      	subs	r3, #2
 8006530:	429a      	cmp	r2, r3
 8006532:	d804      	bhi.n	800653e <create_chain+0x106>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	1e5a      	subs	r2, r3, #1
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	791b      	ldrb	r3, [r3, #4]
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	b2da      	uxtb	r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	711a      	strb	r2, [r3, #4]
 800654c:	e007      	b.n	800655e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d102      	bne.n	800655a <create_chain+0x122>
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
 8006558:	e000      	b.n	800655c <create_chain+0x124>
 800655a:	2301      	movs	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800655e:	69fb      	ldr	r3, [r7, #28]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800657e:	d204      	bcs.n	800658a <dir_sdi+0x22>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <dir_sdi+0x26>
		return FR_INT_ERR;
 800658a:	2302      	movs	r3, #2
 800658c:	e071      	b.n	8006672 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <dir_sdi+0x46>
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d902      	bls.n	80065ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10c      	bne.n	80065ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	8912      	ldrh	r2, [r2, #8]
 80065bc:	4293      	cmp	r3, r2
 80065be:	d301      	bcc.n	80065c4 <dir_sdi+0x5c>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e056      	b.n	8006672 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	61da      	str	r2, [r3, #28]
 80065cc:	e02d      	b.n	800662a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	895b      	ldrh	r3, [r3, #10]
 80065d2:	461a      	mov	r2, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	899b      	ldrh	r3, [r3, #12]
 80065d8:	fb02 f303 	mul.w	r3, r2, r3
 80065dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065de:	e019      	b.n	8006614 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6979      	ldr	r1, [r7, #20]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff fcd4 	bl	8005f92 <get_fat>
 80065ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d101      	bne.n	80065f8 <dir_sdi+0x90>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e03c      	b.n	8006672 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d904      	bls.n	8006608 <dir_sdi+0xa0>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	429a      	cmp	r2, r3
 8006606:	d301      	bcc.n	800660c <dir_sdi+0xa4>
 8006608:	2302      	movs	r3, #2
 800660a:	e032      	b.n	8006672 <dir_sdi+0x10a>
			ofs -= csz;
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	429a      	cmp	r2, r3
 800661a:	d2e1      	bcs.n	80065e0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800661c:	6979      	ldr	r1, [r7, #20]
 800661e:	6938      	ldr	r0, [r7, #16]
 8006620:	f7ff fc98 	bl	8005f54 <clust2sect>
 8006624:	4602      	mov	r2, r0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <dir_sdi+0xd4>
 8006638:	2302      	movs	r3, #2
 800663a:	e01a      	b.n	8006672 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	899b      	ldrh	r3, [r3, #12]
 8006644:	4619      	mov	r1, r3
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	fbb3 f3f1 	udiv	r3, r3, r1
 800664c:	441a      	add	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	899b      	ldrh	r3, [r3, #12]
 800665c:	461a      	mov	r2, r3
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	fbb3 f0f2 	udiv	r0, r3, r2
 8006664:	fb00 f202 	mul.w	r2, r0, r2
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	18ca      	adds	r2, r1, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	3320      	adds	r3, #32
 8006690:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <dir_next+0x28>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066a0:	d301      	bcc.n	80066a6 <dir_next+0x2c>
 80066a2:	2304      	movs	r3, #4
 80066a4:	e0bb      	b.n	800681e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	899b      	ldrh	r3, [r3, #12]
 80066aa:	461a      	mov	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80066b2:	fb01 f202 	mul.w	r2, r1, r2
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f040 809d 	bne.w	80067f8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	8912      	ldrh	r2, [r2, #8]
 80066d8:	4293      	cmp	r3, r2
 80066da:	f0c0 808d 	bcc.w	80067f8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	61da      	str	r2, [r3, #28]
 80066e4:	2304      	movs	r3, #4
 80066e6:	e09a      	b.n	800681e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	899b      	ldrh	r3, [r3, #12]
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	8952      	ldrh	r2, [r2, #10]
 80066f8:	3a01      	subs	r2, #1
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d17b      	bne.n	80067f8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7ff fc42 	bl	8005f92 <get_fat>
 800670e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d801      	bhi.n	800671a <dir_next+0xa0>
 8006716:	2302      	movs	r3, #2
 8006718:	e081      	b.n	800681e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d101      	bne.n	8006726 <dir_next+0xac>
 8006722:	2301      	movs	r3, #1
 8006724:	e07b      	b.n	800681e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	429a      	cmp	r2, r3
 800672e:	d359      	bcc.n	80067e4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	61da      	str	r2, [r3, #28]
 800673c:	2304      	movs	r3, #4
 800673e:	e06e      	b.n	800681e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f7ff fe75 	bl	8006438 <create_chain>
 800674e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <dir_next+0xe0>
 8006756:	2307      	movs	r3, #7
 8006758:	e061      	b.n	800681e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <dir_next+0xea>
 8006760:	2302      	movs	r3, #2
 8006762:	e05c      	b.n	800681e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d101      	bne.n	8006770 <dir_next+0xf6>
 800676c:	2301      	movs	r3, #1
 800676e:	e056      	b.n	800681e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff fb0d 	bl	8005d90 <sync_window>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <dir_next+0x106>
 800677c:	2301      	movs	r3, #1
 800677e:	e04e      	b.n	800681e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	899b      	ldrh	r3, [r3, #12]
 800678a:	461a      	mov	r2, r3
 800678c:	2100      	movs	r1, #0
 800678e:	f7ff fa7e 	bl	8005c8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	6979      	ldr	r1, [r7, #20]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff fbdb 	bl	8005f54 <clust2sect>
 800679e:	4602      	mov	r2, r0
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30
 80067a4:	e012      	b.n	80067cc <dir_next+0x152>
						fs->wflag = 1;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff faef 	bl	8005d90 <sync_window>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <dir_next+0x142>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e030      	b.n	800681e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	3301      	adds	r3, #1
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	895b      	ldrh	r3, [r3, #10]
 80067d0:	461a      	mov	r2, r3
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d3e6      	bcc.n	80067a6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80067ea:	6979      	ldr	r1, [r7, #20]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff fbb1 	bl	8005f54 <clust2sect>
 80067f2:	4602      	mov	r2, r0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	899b      	ldrh	r3, [r3, #12]
 8006808:	461a      	mov	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006810:	fb00 f202 	mul.w	r2, r0, r2
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	18ca      	adds	r2, r1, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b086      	sub	sp, #24
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006836:	2100      	movs	r1, #0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff fe95 	bl	8006568 <dir_sdi>
 800683e:	4603      	mov	r3, r0
 8006840:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d12b      	bne.n	80068a0 <dir_alloc+0x7a>
		n = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	4619      	mov	r1, r3
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff fae0 	bl	8005e18 <move_window>
 8006858:	4603      	mov	r3, r0
 800685a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d11d      	bne.n	800689e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2be5      	cmp	r3, #229	; 0xe5
 800686a:	d004      	beq.n	8006876 <dir_alloc+0x50>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d107      	bne.n	8006886 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3301      	adds	r3, #1
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d102      	bne.n	800688a <dir_alloc+0x64>
 8006884:	e00c      	b.n	80068a0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006886:	2300      	movs	r3, #0
 8006888:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800688a:	2101      	movs	r1, #1
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fef4 	bl	800667a <dir_next>
 8006892:	4603      	mov	r3, r0
 8006894:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0d7      	beq.n	800684c <dir_alloc+0x26>
 800689c:	e000      	b.n	80068a0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800689e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d101      	bne.n	80068aa <dir_alloc+0x84>
 80068a6:	2307      	movs	r3, #7
 80068a8:	75fb      	strb	r3, [r7, #23]
	return res;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	331a      	adds	r3, #26
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff f940 	bl	8005b48 <ld_word>
 80068c8:	4603      	mov	r3, r0
 80068ca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d109      	bne.n	80068e8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	3314      	adds	r3, #20
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff f935 	bl	8005b48 <ld_word>
 80068de:	4603      	mov	r3, r0
 80068e0:	041b      	lsls	r3, r3, #16
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068e8:	68fb      	ldr	r3, [r7, #12]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	331a      	adds	r3, #26
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	b292      	uxth	r2, r2
 8006906:	4611      	mov	r1, r2
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff f958 	bl	8005bbe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d109      	bne.n	800692a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f103 0214 	add.w	r2, r3, #20
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	b29b      	uxth	r3, r3
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7ff f94a 	bl	8005bbe <st_word>
	}
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006940:	2100      	movs	r1, #0
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff fe10 	bl	8006568 <dir_sdi>
 8006948:	4603      	mov	r3, r0
 800694a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <dir_find+0x24>
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	e03e      	b.n	80069d4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	4619      	mov	r1, r3
 800695c:	6938      	ldr	r0, [r7, #16]
 800695e:	f7ff fa5b 	bl	8005e18 <move_window>
 8006962:	4603      	mov	r3, r0
 8006964:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d12f      	bne.n	80069cc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <dir_find+0x4e>
 800697a:	2304      	movs	r3, #4
 800697c:	75fb      	strb	r3, [r7, #23]
 800697e:	e028      	b.n	80069d2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	330b      	adds	r3, #11
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800698c:	b2da      	uxtb	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	330b      	adds	r3, #11
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <dir_find+0x86>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a18      	ldr	r0, [r3, #32]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3324      	adds	r3, #36	; 0x24
 80069aa:	220b      	movs	r2, #11
 80069ac:	4619      	mov	r1, r3
 80069ae:	f7ff f989 	bl	8005cc4 <mem_cmp>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80069b8:	2100      	movs	r1, #0
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff fe5d 	bl	800667a <dir_next>
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0c5      	beq.n	8006956 <dir_find+0x24>
 80069ca:	e002      	b.n	80069d2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80069cc:	bf00      	nop
 80069ce:	e000      	b.n	80069d2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069d0:	bf00      	nop

	return res;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80069ea:	2101      	movs	r1, #1
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff ff1a 	bl	8006826 <dir_alloc>
 80069f2:	4603      	mov	r3, r0
 80069f4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d11c      	bne.n	8006a36 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4619      	mov	r1, r3
 8006a02:	68b8      	ldr	r0, [r7, #8]
 8006a04:	f7ff fa08 	bl	8005e18 <move_window>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d111      	bne.n	8006a36 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	2220      	movs	r2, #32
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff f937 	bl	8005c8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a18      	ldr	r0, [r3, #32]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3324      	adds	r3, #36	; 0x24
 8006a28:	220b      	movs	r2, #11
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	f7ff f90e 	bl	8005c4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2201      	movs	r2, #1
 8006a34:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3324      	adds	r3, #36	; 0x24
 8006a54:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006a56:	220b      	movs	r2, #11
 8006a58:	2120      	movs	r1, #32
 8006a5a:	68b8      	ldr	r0, [r7, #8]
 8006a5c:	f7ff f917 	bl	8005c8e <mem_set>
	si = i = 0; ni = 8;
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	2308      	movs	r3, #8
 8006a6a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	61fa      	str	r2, [r7, #28]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a7a:	7efb      	ldrb	r3, [r7, #27]
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d94e      	bls.n	8006b1e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006a80:	7efb      	ldrb	r3, [r7, #27]
 8006a82:	2b2f      	cmp	r3, #47	; 0x2f
 8006a84:	d006      	beq.n	8006a94 <create_name+0x54>
 8006a86:	7efb      	ldrb	r3, [r7, #27]
 8006a88:	2b5c      	cmp	r3, #92	; 0x5c
 8006a8a:	d110      	bne.n	8006aae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006a8c:	e002      	b.n	8006a94 <create_name+0x54>
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	3301      	adds	r3, #1
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b2f      	cmp	r3, #47	; 0x2f
 8006a9e:	d0f6      	beq.n	8006a8e <create_name+0x4e>
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b5c      	cmp	r3, #92	; 0x5c
 8006aaa:	d0f0      	beq.n	8006a8e <create_name+0x4e>
			break;
 8006aac:	e038      	b.n	8006b20 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006aae:	7efb      	ldrb	r3, [r7, #27]
 8006ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ab2:	d003      	beq.n	8006abc <create_name+0x7c>
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d30c      	bcc.n	8006ad6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b0b      	cmp	r3, #11
 8006ac0:	d002      	beq.n	8006ac8 <create_name+0x88>
 8006ac2:	7efb      	ldrb	r3, [r7, #27]
 8006ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ac6:	d001      	beq.n	8006acc <create_name+0x8c>
 8006ac8:	2306      	movs	r3, #6
 8006aca:	e044      	b.n	8006b56 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006acc:	2308      	movs	r3, #8
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	230b      	movs	r3, #11
 8006ad2:	617b      	str	r3, [r7, #20]
			continue;
 8006ad4:	e022      	b.n	8006b1c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006ad6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	da04      	bge.n	8006ae8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006ade:	7efb      	ldrb	r3, [r7, #27]
 8006ae0:	3b80      	subs	r3, #128	; 0x80
 8006ae2:	4a1f      	ldr	r2, [pc, #124]	; (8006b60 <create_name+0x120>)
 8006ae4:	5cd3      	ldrb	r3, [r2, r3]
 8006ae6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006ae8:	7efb      	ldrb	r3, [r7, #27]
 8006aea:	4619      	mov	r1, r3
 8006aec:	481d      	ldr	r0, [pc, #116]	; (8006b64 <create_name+0x124>)
 8006aee:	f7ff f910 	bl	8005d12 <chk_chr>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <create_name+0xbc>
 8006af8:	2306      	movs	r3, #6
 8006afa:	e02c      	b.n	8006b56 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006afc:	7efb      	ldrb	r3, [r7, #27]
 8006afe:	2b60      	cmp	r3, #96	; 0x60
 8006b00:	d905      	bls.n	8006b0e <create_name+0xce>
 8006b02:	7efb      	ldrb	r3, [r7, #27]
 8006b04:	2b7a      	cmp	r3, #122	; 0x7a
 8006b06:	d802      	bhi.n	8006b0e <create_name+0xce>
 8006b08:	7efb      	ldrb	r3, [r7, #27]
 8006b0a:	3b20      	subs	r3, #32
 8006b0c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	613a      	str	r2, [r7, #16]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	4413      	add	r3, r2
 8006b18:	7efa      	ldrb	r2, [r7, #27]
 8006b1a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006b1c:	e7a6      	b.n	8006a6c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006b1e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	441a      	add	r2, r3
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <create_name+0xf4>
 8006b30:	2306      	movs	r3, #6
 8006b32:	e010      	b.n	8006b56 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2be5      	cmp	r3, #229	; 0xe5
 8006b3a:	d102      	bne.n	8006b42 <create_name+0x102>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2205      	movs	r2, #5
 8006b40:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b42:	7efb      	ldrb	r3, [r7, #27]
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	d801      	bhi.n	8006b4c <create_name+0x10c>
 8006b48:	2204      	movs	r2, #4
 8006b4a:	e000      	b.n	8006b4e <create_name+0x10e>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	330b      	adds	r3, #11
 8006b52:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006b54:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	0800be0c 	.word	0x0800be0c
 8006b64:	0800bd94 	.word	0x0800bd94

08006b68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006b7c:	e002      	b.n	8006b84 <follow_path+0x1c>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b2f      	cmp	r3, #47	; 0x2f
 8006b8a:	d0f8      	beq.n	8006b7e <follow_path+0x16>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b5c      	cmp	r3, #92	; 0x5c
 8006b92:	d0f4      	beq.n	8006b7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2200      	movs	r2, #0
 8006b98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b1f      	cmp	r3, #31
 8006ba0:	d80a      	bhi.n	8006bb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2280      	movs	r2, #128	; 0x80
 8006ba6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006baa:	2100      	movs	r1, #0
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff fcdb 	bl	8006568 <dir_sdi>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]
 8006bb6:	e048      	b.n	8006c4a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bb8:	463b      	mov	r3, r7
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff ff3f 	bl	8006a40 <create_name>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d139      	bne.n	8006c40 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff feb0 	bl	8006932 <dir_find>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bdc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d12c      	bne.n	8006c44 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d127      	bne.n	8006c44 <follow_path+0xdc>
 8006bf4:	2305      	movs	r3, #5
 8006bf6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006bf8:	e024      	b.n	8006c44 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006bfa:	7afb      	ldrb	r3, [r7, #11]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d121      	bne.n	8006c48 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	799b      	ldrb	r3, [r3, #6]
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006c10:	2305      	movs	r3, #5
 8006c12:	75fb      	strb	r3, [r7, #23]
 8006c14:	e019      	b.n	8006c4a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	8992      	ldrh	r2, [r2, #12]
 8006c24:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c28:	fb00 f202 	mul.w	r2, r0, r2
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	440b      	add	r3, r1
 8006c30:	4619      	mov	r1, r3
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff fe3e 	bl	80068b4 <ld_clust>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c3e:	e7bb      	b.n	8006bb8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006c40:	bf00      	nop
 8006c42:	e002      	b.n	8006c4a <follow_path+0xe2>
				break;
 8006c44:	bf00      	nop
 8006c46:	e000      	b.n	8006c4a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c48:	bf00      	nop
			}
		}
	}

	return res;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c60:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d031      	beq.n	8006cce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	e002      	b.n	8006c78 <get_ldnumber+0x24>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	3301      	adds	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d903      	bls.n	8006c88 <get_ldnumber+0x34>
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b3a      	cmp	r3, #58	; 0x3a
 8006c86:	d1f4      	bne.n	8006c72 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b3a      	cmp	r3, #58	; 0x3a
 8006c8e:	d11c      	bne.n	8006cca <get_ldnumber+0x76>
			tp = *path;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	60fa      	str	r2, [r7, #12]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	3b30      	subs	r3, #48	; 0x30
 8006ca0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b09      	cmp	r3, #9
 8006ca6:	d80e      	bhi.n	8006cc6 <get_ldnumber+0x72>
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d10a      	bne.n	8006cc6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d107      	bne.n	8006cc6 <get_ldnumber+0x72>
					vol = (int)i;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	e002      	b.n	8006cd0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cca:	2300      	movs	r3, #0
 8006ccc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006cce:	693b      	ldr	r3, [r7, #16]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	70da      	strb	r2, [r3, #3]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff f88e 	bl	8005e18 <move_window>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <check_fs+0x2a>
 8006d02:	2304      	movs	r3, #4
 8006d04:	e038      	b.n	8006d78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3334      	adds	r3, #52	; 0x34
 8006d0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe ff1a 	bl	8005b48 <ld_word>
 8006d14:	4603      	mov	r3, r0
 8006d16:	461a      	mov	r2, r3
 8006d18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d001      	beq.n	8006d24 <check_fs+0x48>
 8006d20:	2303      	movs	r3, #3
 8006d22:	e029      	b.n	8006d78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d2a:	2be9      	cmp	r3, #233	; 0xe9
 8006d2c:	d009      	beq.n	8006d42 <check_fs+0x66>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d34:	2beb      	cmp	r3, #235	; 0xeb
 8006d36:	d11e      	bne.n	8006d76 <check_fs+0x9a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006d3e:	2b90      	cmp	r3, #144	; 0x90
 8006d40:	d119      	bne.n	8006d76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3334      	adds	r3, #52	; 0x34
 8006d46:	3336      	adds	r3, #54	; 0x36
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe ff15 	bl	8005b78 <ld_dword>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d54:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <check_fs+0xa4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <check_fs+0x82>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e00c      	b.n	8006d78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3334      	adds	r3, #52	; 0x34
 8006d62:	3352      	adds	r3, #82	; 0x52
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe ff07 	bl	8005b78 <ld_dword>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4a05      	ldr	r2, [pc, #20]	; (8006d84 <check_fs+0xa8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d101      	bne.n	8006d76 <check_fs+0x9a>
 8006d72:	2300      	movs	r3, #0
 8006d74:	e000      	b.n	8006d78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d76:	2302      	movs	r3, #2
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	00544146 	.word	0x00544146
 8006d84:	33544146 	.word	0x33544146

08006d88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b096      	sub	sp, #88	; 0x58
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff ff59 	bl	8006c54 <get_ldnumber>
 8006da2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da01      	bge.n	8006dae <find_volume+0x26>
 8006daa:	230b      	movs	r3, #11
 8006dac:	e262      	b.n	8007274 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dae:	4a9f      	ldr	r2, [pc, #636]	; (800702c <find_volume+0x2a4>)
 8006db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <find_volume+0x3a>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	e258      	b.n	8007274 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dc6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01a      	beq.n	8006e0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe fe15 	bl	8005a0c <disk_status>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006de8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10c      	bne.n	8006e0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <find_volume+0x82>
 8006dfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006e06:	230a      	movs	r3, #10
 8006e08:	e234      	b.n	8007274 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e232      	b.n	8007274 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fe0d 	bl	8005a40 <disk_initialize>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e21b      	b.n	8007274 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <find_volume+0xca>
 8006e42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e4e:	230a      	movs	r3, #10
 8006e50:	e210      	b.n	8007274 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	7858      	ldrb	r0, [r3, #1]
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	330c      	adds	r3, #12
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2102      	movs	r1, #2
 8006e5e:	f7fe fe55 	bl	8005b0c <disk_ioctl>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <find_volume+0xe4>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e203      	b.n	8007274 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	899b      	ldrh	r3, [r3, #12]
 8006e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e74:	d80d      	bhi.n	8006e92 <find_volume+0x10a>
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	899b      	ldrh	r3, [r3, #12]
 8006e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e7e:	d308      	bcc.n	8006e92 <find_volume+0x10a>
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	899b      	ldrh	r3, [r3, #12]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	899b      	ldrh	r3, [r3, #12]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <find_volume+0x10e>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e1ee      	b.n	8007274 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006e9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e9e:	f7ff ff1d 	bl	8006cdc <check_fs>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d149      	bne.n	8006f44 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006eb4:	e01e      	b.n	8006ef4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006ec4:	4413      	add	r3, r2
 8006ec6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	3304      	adds	r3, #4
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d006      	beq.n	8006ee0 <find_volume+0x158>
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fe4e 	bl	8005b78 <ld_dword>
 8006edc:	4602      	mov	r2, r0
 8006ede:	e000      	b.n	8006ee2 <find_volume+0x15a>
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	3358      	adds	r3, #88	; 0x58
 8006ee8:	443b      	add	r3, r7
 8006eea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d9dd      	bls.n	8006eb6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006efa:	2300      	movs	r3, #0
 8006efc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <find_volume+0x182>
 8006f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f06:	3b01      	subs	r3, #1
 8006f08:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	3358      	adds	r3, #88	; 0x58
 8006f10:	443b      	add	r3, r7
 8006f12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f16:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <find_volume+0x1a2>
 8006f1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f22:	f7ff fedb 	bl	8006cdc <check_fs>
 8006f26:	4603      	mov	r3, r0
 8006f28:	e000      	b.n	8006f2c <find_volume+0x1a4>
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d905      	bls.n	8006f44 <find_volume+0x1bc>
 8006f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d9e2      	bls.n	8006f0a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d101      	bne.n	8006f50 <find_volume+0x1c8>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e191      	b.n	8007274 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d901      	bls.n	8006f5c <find_volume+0x1d4>
 8006f58:	230d      	movs	r3, #13
 8006f5a:	e18b      	b.n	8007274 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	3334      	adds	r3, #52	; 0x34
 8006f60:	330b      	adds	r3, #11
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe fdf0 	bl	8005b48 <ld_word>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	899b      	ldrh	r3, [r3, #12]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d001      	beq.n	8006f78 <find_volume+0x1f0>
 8006f74:	230d      	movs	r3, #13
 8006f76:	e17d      	b.n	8007274 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	3334      	adds	r3, #52	; 0x34
 8006f7c:	3316      	adds	r3, #22
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fde2 	bl	8005b48 <ld_word>
 8006f84:	4603      	mov	r3, r0
 8006f86:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <find_volume+0x214>
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	3334      	adds	r3, #52	; 0x34
 8006f92:	3324      	adds	r3, #36	; 0x24
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe fdef 	bl	8005b78 <ld_dword>
 8006f9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fa0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fae:	789b      	ldrb	r3, [r3, #2]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d005      	beq.n	8006fc0 <find_volume+0x238>
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	789b      	ldrb	r3, [r3, #2]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d001      	beq.n	8006fc0 <find_volume+0x238>
 8006fbc:	230d      	movs	r3, #13
 8006fbe:	e159      	b.n	8007274 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	789b      	ldrb	r3, [r3, #2]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc8:	fb02 f303 	mul.w	r3, r2, r3
 8006fcc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	895b      	ldrh	r3, [r3, #10]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d008      	beq.n	8006ff4 <find_volume+0x26c>
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	895b      	ldrh	r3, [r3, #10]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	895b      	ldrh	r3, [r3, #10]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <find_volume+0x270>
 8006ff4:	230d      	movs	r3, #13
 8006ff6:	e13d      	b.n	8007274 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	3334      	adds	r3, #52	; 0x34
 8006ffc:	3311      	adds	r3, #17
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fda2 	bl	8005b48 <ld_word>
 8007004:	4603      	mov	r3, r0
 8007006:	461a      	mov	r2, r3
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	891b      	ldrh	r3, [r3, #8]
 8007010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007012:	8992      	ldrh	r2, [r2, #12]
 8007014:	0952      	lsrs	r2, r2, #5
 8007016:	b292      	uxth	r2, r2
 8007018:	fbb3 f1f2 	udiv	r1, r3, r2
 800701c:	fb01 f202 	mul.w	r2, r1, r2
 8007020:	1a9b      	subs	r3, r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <find_volume+0x2a8>
 8007028:	230d      	movs	r3, #13
 800702a:	e123      	b.n	8007274 <find_volume+0x4ec>
 800702c:	200013c8 	.word	0x200013c8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	3334      	adds	r3, #52	; 0x34
 8007034:	3313      	adds	r3, #19
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fd86 	bl	8005b48 <ld_word>
 800703c:	4603      	mov	r3, r0
 800703e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <find_volume+0x2cc>
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	3334      	adds	r3, #52	; 0x34
 800704a:	3320      	adds	r3, #32
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fd93 	bl	8005b78 <ld_dword>
 8007052:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	3334      	adds	r3, #52	; 0x34
 8007058:	330e      	adds	r3, #14
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fd74 	bl	8005b48 <ld_word>
 8007060:	4603      	mov	r3, r0
 8007062:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007064:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <find_volume+0x2e6>
 800706a:	230d      	movs	r3, #13
 800706c:	e102      	b.n	8007274 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800706e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007072:	4413      	add	r3, r2
 8007074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007076:	8911      	ldrh	r1, [r2, #8]
 8007078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800707a:	8992      	ldrh	r2, [r2, #12]
 800707c:	0952      	lsrs	r2, r2, #5
 800707e:	b292      	uxth	r2, r2
 8007080:	fbb1 f2f2 	udiv	r2, r1, r2
 8007084:	b292      	uxth	r2, r2
 8007086:	4413      	add	r3, r2
 8007088:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800708a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	429a      	cmp	r2, r3
 8007090:	d201      	bcs.n	8007096 <find_volume+0x30e>
 8007092:	230d      	movs	r3, #13
 8007094:	e0ee      	b.n	8007274 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709e:	8952      	ldrh	r2, [r2, #10]
 80070a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <find_volume+0x328>
 80070ac:	230d      	movs	r3, #13
 80070ae:	e0e1      	b.n	8007274 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80070b0:	2303      	movs	r3, #3
 80070b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80070bc:	4293      	cmp	r3, r2
 80070be:	d802      	bhi.n	80070c6 <find_volume+0x33e>
 80070c0:	2302      	movs	r3, #2
 80070c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d802      	bhi.n	80070d6 <find_volume+0x34e>
 80070d0:	2301      	movs	r3, #1
 80070d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	1c9a      	adds	r2, r3, #2
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070e2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80070e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070e8:	441a      	add	r2, r3
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80070ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	441a      	add	r2, r3
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80070f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d11e      	bne.n	800713e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	3334      	adds	r3, #52	; 0x34
 8007104:	332a      	adds	r3, #42	; 0x2a
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe fd1e 	bl	8005b48 <ld_word>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <find_volume+0x38e>
 8007112:	230d      	movs	r3, #13
 8007114:	e0ae      	b.n	8007274 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	891b      	ldrh	r3, [r3, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <find_volume+0x39a>
 800711e:	230d      	movs	r3, #13
 8007120:	e0a8      	b.n	8007274 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	3334      	adds	r3, #52	; 0x34
 8007126:	332c      	adds	r3, #44	; 0x2c
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fd25 	bl	8005b78 <ld_dword>
 800712e:	4602      	mov	r2, r0
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	647b      	str	r3, [r7, #68]	; 0x44
 800713c:	e01f      	b.n	800717e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	891b      	ldrh	r3, [r3, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <find_volume+0x3c2>
 8007146:	230d      	movs	r3, #13
 8007148:	e094      	b.n	8007274 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800714e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007150:	441a      	add	r2, r3
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800715a:	2b02      	cmp	r3, #2
 800715c:	d103      	bne.n	8007166 <find_volume+0x3de>
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	e00a      	b.n	800717c <find_volume+0x3f4>
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	699a      	ldr	r2, [r3, #24]
 800716a:	4613      	mov	r3, r2
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	4413      	add	r3, r2
 8007170:	085a      	lsrs	r2, r3, #1
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800717c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	899b      	ldrh	r3, [r3, #12]
 8007186:	4619      	mov	r1, r3
 8007188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800718a:	440b      	add	r3, r1
 800718c:	3b01      	subs	r3, #1
 800718e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007190:	8989      	ldrh	r1, [r1, #12]
 8007192:	fbb3 f3f1 	udiv	r3, r3, r1
 8007196:	429a      	cmp	r2, r3
 8007198:	d201      	bcs.n	800719e <find_volume+0x416>
 800719a:	230d      	movs	r3, #13
 800719c:	e06a      	b.n	8007274 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295
 80071a4:	615a      	str	r2, [r3, #20]
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	2280      	movs	r2, #128	; 0x80
 80071b2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80071b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d149      	bne.n	8007250 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80071bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071be:	3334      	adds	r3, #52	; 0x34
 80071c0:	3330      	adds	r3, #48	; 0x30
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe fcc0 	bl	8005b48 <ld_word>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d140      	bne.n	8007250 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80071ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d0:	3301      	adds	r3, #1
 80071d2:	4619      	mov	r1, r3
 80071d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071d6:	f7fe fe1f 	bl	8005e18 <move_window>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d137      	bne.n	8007250 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	2200      	movs	r2, #0
 80071e4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	3334      	adds	r3, #52	; 0x34
 80071ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe fcaa 	bl	8005b48 <ld_word>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d127      	bne.n	8007250 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	3334      	adds	r3, #52	; 0x34
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fcb7 	bl	8005b78 <ld_dword>
 800720a:	4603      	mov	r3, r0
 800720c:	4a1b      	ldr	r2, [pc, #108]	; (800727c <find_volume+0x4f4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d11e      	bne.n	8007250 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	3334      	adds	r3, #52	; 0x34
 8007216:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fcac 	bl	8005b78 <ld_dword>
 8007220:	4603      	mov	r3, r0
 8007222:	4a17      	ldr	r2, [pc, #92]	; (8007280 <find_volume+0x4f8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d113      	bne.n	8007250 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722a:	3334      	adds	r3, #52	; 0x34
 800722c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fca1 	bl	8005b78 <ld_dword>
 8007236:	4602      	mov	r2, r0
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	3334      	adds	r3, #52	; 0x34
 8007240:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fc97 	bl	8005b78 <ld_dword>
 800724a:	4602      	mov	r2, r0
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007256:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007258:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <find_volume+0x4fc>)
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	3301      	adds	r3, #1
 800725e:	b29a      	uxth	r2, r3
 8007260:	4b08      	ldr	r3, [pc, #32]	; (8007284 <find_volume+0x4fc>)
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	4b07      	ldr	r3, [pc, #28]	; (8007284 <find_volume+0x4fc>)
 8007266:	881a      	ldrh	r2, [r3, #0]
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800726c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800726e:	f7fe fd6b 	bl	8005d48 <clear_lock>
#endif
	return FR_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3758      	adds	r7, #88	; 0x58
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	41615252 	.word	0x41615252
 8007280:	61417272 	.word	0x61417272
 8007284:	200013cc 	.word	0x200013cc

08007288 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800729a:	f107 0310 	add.w	r3, r7, #16
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fcd8 	bl	8006c54 <get_ldnumber>
 80072a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	da01      	bge.n	80072b0 <f_mount+0x28>
 80072ac:	230b      	movs	r3, #11
 80072ae:	e02b      	b.n	8007308 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80072b0:	4a17      	ldr	r2, [pc, #92]	; (8007310 <f_mount+0x88>)
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80072c0:	69b8      	ldr	r0, [r7, #24]
 80072c2:	f7fe fd41 	bl	8005d48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	490d      	ldr	r1, [pc, #52]	; (8007310 <f_mount+0x88>)
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <f_mount+0x66>
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d001      	beq.n	80072f2 <f_mount+0x6a>
 80072ee:	2300      	movs	r3, #0
 80072f0:	e00a      	b.n	8007308 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80072f2:	f107 010c 	add.w	r1, r7, #12
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	2200      	movs	r2, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff fd43 	bl	8006d88 <find_volume>
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007306:	7dfb      	ldrb	r3, [r7, #23]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	200013c8 	.word	0x200013c8

08007314 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b096      	sub	sp, #88	; 0x58
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800731c:	f107 0108 	add.w	r1, r7, #8
 8007320:	1d3b      	adds	r3, r7, #4
 8007322:	2202      	movs	r2, #2
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fd2f 	bl	8006d88 <find_volume>
 800732a:	4603      	mov	r3, r0
 800732c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8007334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007338:	2b00      	cmp	r3, #0
 800733a:	f040 80f2 	bne.w	8007522 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	f107 030c 	add.w	r3, r7, #12
 8007344:	4611      	mov	r1, r2
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff fc0e 	bl	8006b68 <follow_path>
 800734c:	4603      	mov	r3, r0
 800734e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8007352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <f_mkdir+0x4c>
 800735a:	2308      	movs	r3, #8
 800735c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8007360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007364:	2b04      	cmp	r3, #4
 8007366:	f040 80dc 	bne.w	8007522 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800736a:	f107 030c 	add.w	r3, r7, #12
 800736e:	2100      	movs	r1, #0
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff f861 	bl	8006438 <create_chain>
 8007376:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	895b      	ldrh	r3, [r3, #10]
 800737c:	461a      	mov	r2, r3
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	899b      	ldrh	r3, [r3, #12]
 8007382:	fb02 f303 	mul.w	r3, r2, r3
 8007386:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800738e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <f_mkdir+0x86>
 8007394:	2307      	movs	r3, #7
 8007396:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800739a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800739c:	2b01      	cmp	r3, #1
 800739e:	d102      	bne.n	80073a6 <f_mkdir+0x92>
 80073a0:	2302      	movs	r3, #2
 80073a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80073a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ac:	d102      	bne.n	80073b4 <f_mkdir+0xa0>
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80073b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <f_mkdir+0xb6>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fce6 	bl	8005d90 <sync_window>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80073ca:	f7fe f8eb 	bl	80055a4 <get_fattime>
 80073ce:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80073d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d16c      	bne.n	80074b2 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe fdb9 	bl	8005f54 <clust2sect>
 80073e2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	3334      	adds	r3, #52	; 0x34
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	899b      	ldrh	r3, [r3, #12]
 80073ee:	461a      	mov	r2, r3
 80073f0:	2100      	movs	r1, #0
 80073f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80073f4:	f7fe fc4b 	bl	8005c8e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80073f8:	220b      	movs	r2, #11
 80073fa:	2120      	movs	r1, #32
 80073fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80073fe:	f7fe fc46 	bl	8005c8e <mem_set>
					dir[DIR_Name] = '.';
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	222e      	movs	r2, #46	; 0x2e
 8007406:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	330b      	adds	r3, #11
 800740c:	2210      	movs	r2, #16
 800740e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8007410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007412:	3316      	adds	r3, #22
 8007414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fbec 	bl	8005bf4 <st_dword>
					st_clust(fs, dir, dcl);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fa65 	bl	80068f2 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8007428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742a:	3320      	adds	r3, #32
 800742c:	2220      	movs	r2, #32
 800742e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe fc0b 	bl	8005c4c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8007436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007438:	3321      	adds	r3, #33	; 0x21
 800743a:	222e      	movs	r2, #46	; 0x2e
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b03      	cmp	r3, #3
 8007448:	d106      	bne.n	8007458 <f_mkdir+0x144>
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007450:	429a      	cmp	r2, r3
 8007452:	d101      	bne.n	8007458 <f_mkdir+0x144>
 8007454:	2300      	movs	r3, #0
 8007456:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8007458:	68b8      	ldr	r0, [r7, #8]
 800745a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745c:	3320      	adds	r3, #32
 800745e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007460:	4619      	mov	r1, r3
 8007462:	f7ff fa46 	bl	80068f2 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	895b      	ldrh	r3, [r3, #10]
 800746a:	653b      	str	r3, [r7, #80]	; 0x50
 800746c:	e01c      	b.n	80074a8 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800746e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2201      	movs	r2, #1
 800747c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe fc85 	bl	8005d90 <sync_window>
 8007486:	4603      	mov	r3, r0
 8007488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800748c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10d      	bne.n	80074b0 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	899b      	ldrh	r3, [r3, #12]
 8007498:	461a      	mov	r2, r3
 800749a:	2100      	movs	r1, #0
 800749c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800749e:	f7fe fbf6 	bl	8005c8e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80074a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a4:	3b01      	subs	r3, #1
 80074a6:	653b      	str	r3, [r7, #80]	; 0x50
 80074a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1df      	bne.n	800746e <f_mkdir+0x15a>
 80074ae:	e000      	b.n	80074b2 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80074b0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80074b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d107      	bne.n	80074ca <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff fa8c 	bl	80069dc <dir_register>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80074ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d120      	bne.n	8007514 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	3316      	adds	r3, #22
 80074da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe fb89 	bl	8005bf4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fa02 	bl	80068f2 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80074ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f0:	330b      	adds	r3, #11
 80074f2:	2210      	movs	r2, #16
 80074f4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2201      	movs	r2, #1
 80074fa:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80074fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10e      	bne.n	8007522 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fcb4 	bl	8005e74 <sync_fs>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007512:	e006      	b.n	8007522 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8007514:	f107 030c 	add.w	r3, r7, #12
 8007518:	2200      	movs	r2, #0
 800751a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe ff26 	bl	800636e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007522:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8007526:	4618      	mov	r0, r3
 8007528:	3758      	adds	r7, #88	; 0x58
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800753e:	2301      	movs	r3, #1
 8007540:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007546:	4b1f      	ldr	r3, [pc, #124]	; (80075c4 <FATFS_LinkDriverEx+0x94>)
 8007548:	7a5b      	ldrb	r3, [r3, #9]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d131      	bne.n	80075b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007550:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <FATFS_LinkDriverEx+0x94>)
 8007552:	7a5b      	ldrb	r3, [r3, #9]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	4b1a      	ldr	r3, [pc, #104]	; (80075c4 <FATFS_LinkDriverEx+0x94>)
 800755a:	2100      	movs	r1, #0
 800755c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800755e:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <FATFS_LinkDriverEx+0x94>)
 8007560:	7a5b      	ldrb	r3, [r3, #9]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	4a17      	ldr	r2, [pc, #92]	; (80075c4 <FATFS_LinkDriverEx+0x94>)
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800756e:	4b15      	ldr	r3, [pc, #84]	; (80075c4 <FATFS_LinkDriverEx+0x94>)
 8007570:	7a5b      	ldrb	r3, [r3, #9]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	461a      	mov	r2, r3
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <FATFS_LinkDriverEx+0x94>)
 8007578:	4413      	add	r3, r2
 800757a:	79fa      	ldrb	r2, [r7, #7]
 800757c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800757e:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <FATFS_LinkDriverEx+0x94>)
 8007580:	7a5b      	ldrb	r3, [r3, #9]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	b2d1      	uxtb	r1, r2
 8007588:	4a0e      	ldr	r2, [pc, #56]	; (80075c4 <FATFS_LinkDriverEx+0x94>)
 800758a:	7251      	strb	r1, [r2, #9]
 800758c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800758e:	7dbb      	ldrb	r3, [r7, #22]
 8007590:	3330      	adds	r3, #48	; 0x30
 8007592:	b2da      	uxtb	r2, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	3301      	adds	r3, #1
 800759c:	223a      	movs	r2, #58	; 0x3a
 800759e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	3302      	adds	r3, #2
 80075a4:	222f      	movs	r2, #47	; 0x2f
 80075a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	3303      	adds	r3, #3
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	200013f0 	.word	0x200013f0

080075c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80075d2:	2200      	movs	r2, #0
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff ffaa 	bl	8007530 <FATFS_LinkDriverEx>
 80075dc:	4603      	mov	r3, r0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <malloc>:
 80075e8:	4b02      	ldr	r3, [pc, #8]	; (80075f4 <malloc+0xc>)
 80075ea:	4601      	mov	r1, r0
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	f000 b823 	b.w	8007638 <_malloc_r>
 80075f2:	bf00      	nop
 80075f4:	20000064 	.word	0x20000064

080075f8 <sbrk_aligned>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	4e0e      	ldr	r6, [pc, #56]	; (8007634 <sbrk_aligned+0x3c>)
 80075fc:	460c      	mov	r4, r1
 80075fe:	6831      	ldr	r1, [r6, #0]
 8007600:	4605      	mov	r5, r0
 8007602:	b911      	cbnz	r1, 800760a <sbrk_aligned+0x12>
 8007604:	f001 f86e 	bl	80086e4 <_sbrk_r>
 8007608:	6030      	str	r0, [r6, #0]
 800760a:	4621      	mov	r1, r4
 800760c:	4628      	mov	r0, r5
 800760e:	f001 f869 	bl	80086e4 <_sbrk_r>
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	d00a      	beq.n	800762c <sbrk_aligned+0x34>
 8007616:	1cc4      	adds	r4, r0, #3
 8007618:	f024 0403 	bic.w	r4, r4, #3
 800761c:	42a0      	cmp	r0, r4
 800761e:	d007      	beq.n	8007630 <sbrk_aligned+0x38>
 8007620:	1a21      	subs	r1, r4, r0
 8007622:	4628      	mov	r0, r5
 8007624:	f001 f85e 	bl	80086e4 <_sbrk_r>
 8007628:	3001      	adds	r0, #1
 800762a:	d101      	bne.n	8007630 <sbrk_aligned+0x38>
 800762c:	f04f 34ff 	mov.w	r4, #4294967295
 8007630:	4620      	mov	r0, r4
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	20001400 	.word	0x20001400

08007638 <_malloc_r>:
 8007638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800763c:	1ccd      	adds	r5, r1, #3
 800763e:	f025 0503 	bic.w	r5, r5, #3
 8007642:	3508      	adds	r5, #8
 8007644:	2d0c      	cmp	r5, #12
 8007646:	bf38      	it	cc
 8007648:	250c      	movcc	r5, #12
 800764a:	2d00      	cmp	r5, #0
 800764c:	4607      	mov	r7, r0
 800764e:	db01      	blt.n	8007654 <_malloc_r+0x1c>
 8007650:	42a9      	cmp	r1, r5
 8007652:	d905      	bls.n	8007660 <_malloc_r+0x28>
 8007654:	230c      	movs	r3, #12
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	2600      	movs	r6, #0
 800765a:	4630      	mov	r0, r6
 800765c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007660:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007734 <_malloc_r+0xfc>
 8007664:	f000 f868 	bl	8007738 <__malloc_lock>
 8007668:	f8d8 3000 	ldr.w	r3, [r8]
 800766c:	461c      	mov	r4, r3
 800766e:	bb5c      	cbnz	r4, 80076c8 <_malloc_r+0x90>
 8007670:	4629      	mov	r1, r5
 8007672:	4638      	mov	r0, r7
 8007674:	f7ff ffc0 	bl	80075f8 <sbrk_aligned>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	4604      	mov	r4, r0
 800767c:	d155      	bne.n	800772a <_malloc_r+0xf2>
 800767e:	f8d8 4000 	ldr.w	r4, [r8]
 8007682:	4626      	mov	r6, r4
 8007684:	2e00      	cmp	r6, #0
 8007686:	d145      	bne.n	8007714 <_malloc_r+0xdc>
 8007688:	2c00      	cmp	r4, #0
 800768a:	d048      	beq.n	800771e <_malloc_r+0xe6>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	4631      	mov	r1, r6
 8007690:	4638      	mov	r0, r7
 8007692:	eb04 0903 	add.w	r9, r4, r3
 8007696:	f001 f825 	bl	80086e4 <_sbrk_r>
 800769a:	4581      	cmp	r9, r0
 800769c:	d13f      	bne.n	800771e <_malloc_r+0xe6>
 800769e:	6821      	ldr	r1, [r4, #0]
 80076a0:	1a6d      	subs	r5, r5, r1
 80076a2:	4629      	mov	r1, r5
 80076a4:	4638      	mov	r0, r7
 80076a6:	f7ff ffa7 	bl	80075f8 <sbrk_aligned>
 80076aa:	3001      	adds	r0, #1
 80076ac:	d037      	beq.n	800771e <_malloc_r+0xe6>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	442b      	add	r3, r5
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	f8d8 3000 	ldr.w	r3, [r8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d038      	beq.n	800772e <_malloc_r+0xf6>
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	42a2      	cmp	r2, r4
 80076c0:	d12b      	bne.n	800771a <_malloc_r+0xe2>
 80076c2:	2200      	movs	r2, #0
 80076c4:	605a      	str	r2, [r3, #4]
 80076c6:	e00f      	b.n	80076e8 <_malloc_r+0xb0>
 80076c8:	6822      	ldr	r2, [r4, #0]
 80076ca:	1b52      	subs	r2, r2, r5
 80076cc:	d41f      	bmi.n	800770e <_malloc_r+0xd6>
 80076ce:	2a0b      	cmp	r2, #11
 80076d0:	d917      	bls.n	8007702 <_malloc_r+0xca>
 80076d2:	1961      	adds	r1, r4, r5
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	6025      	str	r5, [r4, #0]
 80076d8:	bf18      	it	ne
 80076da:	6059      	strne	r1, [r3, #4]
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	bf08      	it	eq
 80076e0:	f8c8 1000 	streq.w	r1, [r8]
 80076e4:	5162      	str	r2, [r4, r5]
 80076e6:	604b      	str	r3, [r1, #4]
 80076e8:	4638      	mov	r0, r7
 80076ea:	f104 060b 	add.w	r6, r4, #11
 80076ee:	f000 f829 	bl	8007744 <__malloc_unlock>
 80076f2:	f026 0607 	bic.w	r6, r6, #7
 80076f6:	1d23      	adds	r3, r4, #4
 80076f8:	1af2      	subs	r2, r6, r3
 80076fa:	d0ae      	beq.n	800765a <_malloc_r+0x22>
 80076fc:	1b9b      	subs	r3, r3, r6
 80076fe:	50a3      	str	r3, [r4, r2]
 8007700:	e7ab      	b.n	800765a <_malloc_r+0x22>
 8007702:	42a3      	cmp	r3, r4
 8007704:	6862      	ldr	r2, [r4, #4]
 8007706:	d1dd      	bne.n	80076c4 <_malloc_r+0x8c>
 8007708:	f8c8 2000 	str.w	r2, [r8]
 800770c:	e7ec      	b.n	80076e8 <_malloc_r+0xb0>
 800770e:	4623      	mov	r3, r4
 8007710:	6864      	ldr	r4, [r4, #4]
 8007712:	e7ac      	b.n	800766e <_malloc_r+0x36>
 8007714:	4634      	mov	r4, r6
 8007716:	6876      	ldr	r6, [r6, #4]
 8007718:	e7b4      	b.n	8007684 <_malloc_r+0x4c>
 800771a:	4613      	mov	r3, r2
 800771c:	e7cc      	b.n	80076b8 <_malloc_r+0x80>
 800771e:	230c      	movs	r3, #12
 8007720:	603b      	str	r3, [r7, #0]
 8007722:	4638      	mov	r0, r7
 8007724:	f000 f80e 	bl	8007744 <__malloc_unlock>
 8007728:	e797      	b.n	800765a <_malloc_r+0x22>
 800772a:	6025      	str	r5, [r4, #0]
 800772c:	e7dc      	b.n	80076e8 <_malloc_r+0xb0>
 800772e:	605b      	str	r3, [r3, #4]
 8007730:	deff      	udf	#255	; 0xff
 8007732:	bf00      	nop
 8007734:	200013fc 	.word	0x200013fc

08007738 <__malloc_lock>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__malloc_lock+0x8>)
 800773a:	f001 b81f 	b.w	800877c <__retarget_lock_acquire_recursive>
 800773e:	bf00      	nop
 8007740:	20001544 	.word	0x20001544

08007744 <__malloc_unlock>:
 8007744:	4801      	ldr	r0, [pc, #4]	; (800774c <__malloc_unlock+0x8>)
 8007746:	f001 b81a 	b.w	800877e <__retarget_lock_release_recursive>
 800774a:	bf00      	nop
 800774c:	20001544 	.word	0x20001544

08007750 <__cvt>:
 8007750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007754:	ec55 4b10 	vmov	r4, r5, d0
 8007758:	2d00      	cmp	r5, #0
 800775a:	460e      	mov	r6, r1
 800775c:	4619      	mov	r1, r3
 800775e:	462b      	mov	r3, r5
 8007760:	bfbb      	ittet	lt
 8007762:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007766:	461d      	movlt	r5, r3
 8007768:	2300      	movge	r3, #0
 800776a:	232d      	movlt	r3, #45	; 0x2d
 800776c:	700b      	strb	r3, [r1, #0]
 800776e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007770:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007774:	4691      	mov	r9, r2
 8007776:	f023 0820 	bic.w	r8, r3, #32
 800777a:	bfbc      	itt	lt
 800777c:	4622      	movlt	r2, r4
 800777e:	4614      	movlt	r4, r2
 8007780:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007784:	d005      	beq.n	8007792 <__cvt+0x42>
 8007786:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800778a:	d100      	bne.n	800778e <__cvt+0x3e>
 800778c:	3601      	adds	r6, #1
 800778e:	2102      	movs	r1, #2
 8007790:	e000      	b.n	8007794 <__cvt+0x44>
 8007792:	2103      	movs	r1, #3
 8007794:	ab03      	add	r3, sp, #12
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	ab02      	add	r3, sp, #8
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	ec45 4b10 	vmov	d0, r4, r5
 80077a0:	4653      	mov	r3, sl
 80077a2:	4632      	mov	r2, r6
 80077a4:	f001 f87c 	bl	80088a0 <_dtoa_r>
 80077a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077ac:	4607      	mov	r7, r0
 80077ae:	d102      	bne.n	80077b6 <__cvt+0x66>
 80077b0:	f019 0f01 	tst.w	r9, #1
 80077b4:	d022      	beq.n	80077fc <__cvt+0xac>
 80077b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077ba:	eb07 0906 	add.w	r9, r7, r6
 80077be:	d110      	bne.n	80077e2 <__cvt+0x92>
 80077c0:	783b      	ldrb	r3, [r7, #0]
 80077c2:	2b30      	cmp	r3, #48	; 0x30
 80077c4:	d10a      	bne.n	80077dc <__cvt+0x8c>
 80077c6:	2200      	movs	r2, #0
 80077c8:	2300      	movs	r3, #0
 80077ca:	4620      	mov	r0, r4
 80077cc:	4629      	mov	r1, r5
 80077ce:	f7f9 f983 	bl	8000ad8 <__aeabi_dcmpeq>
 80077d2:	b918      	cbnz	r0, 80077dc <__cvt+0x8c>
 80077d4:	f1c6 0601 	rsb	r6, r6, #1
 80077d8:	f8ca 6000 	str.w	r6, [sl]
 80077dc:	f8da 3000 	ldr.w	r3, [sl]
 80077e0:	4499      	add	r9, r3
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f9 f975 	bl	8000ad8 <__aeabi_dcmpeq>
 80077ee:	b108      	cbz	r0, 80077f4 <__cvt+0xa4>
 80077f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80077f4:	2230      	movs	r2, #48	; 0x30
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	454b      	cmp	r3, r9
 80077fa:	d307      	bcc.n	800780c <__cvt+0xbc>
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007800:	1bdb      	subs	r3, r3, r7
 8007802:	4638      	mov	r0, r7
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	b004      	add	sp, #16
 8007808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780c:	1c59      	adds	r1, r3, #1
 800780e:	9103      	str	r1, [sp, #12]
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	e7f0      	b.n	80077f6 <__cvt+0xa6>

08007814 <__exponent>:
 8007814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007816:	4603      	mov	r3, r0
 8007818:	2900      	cmp	r1, #0
 800781a:	bfb8      	it	lt
 800781c:	4249      	neglt	r1, r1
 800781e:	f803 2b02 	strb.w	r2, [r3], #2
 8007822:	bfb4      	ite	lt
 8007824:	222d      	movlt	r2, #45	; 0x2d
 8007826:	222b      	movge	r2, #43	; 0x2b
 8007828:	2909      	cmp	r1, #9
 800782a:	7042      	strb	r2, [r0, #1]
 800782c:	dd2a      	ble.n	8007884 <__exponent+0x70>
 800782e:	f10d 0207 	add.w	r2, sp, #7
 8007832:	4617      	mov	r7, r2
 8007834:	260a      	movs	r6, #10
 8007836:	4694      	mov	ip, r2
 8007838:	fb91 f5f6 	sdiv	r5, r1, r6
 800783c:	fb06 1415 	mls	r4, r6, r5, r1
 8007840:	3430      	adds	r4, #48	; 0x30
 8007842:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007846:	460c      	mov	r4, r1
 8007848:	2c63      	cmp	r4, #99	; 0x63
 800784a:	f102 32ff 	add.w	r2, r2, #4294967295
 800784e:	4629      	mov	r1, r5
 8007850:	dcf1      	bgt.n	8007836 <__exponent+0x22>
 8007852:	3130      	adds	r1, #48	; 0x30
 8007854:	f1ac 0402 	sub.w	r4, ip, #2
 8007858:	f802 1c01 	strb.w	r1, [r2, #-1]
 800785c:	1c41      	adds	r1, r0, #1
 800785e:	4622      	mov	r2, r4
 8007860:	42ba      	cmp	r2, r7
 8007862:	d30a      	bcc.n	800787a <__exponent+0x66>
 8007864:	f10d 0209 	add.w	r2, sp, #9
 8007868:	eba2 020c 	sub.w	r2, r2, ip
 800786c:	42bc      	cmp	r4, r7
 800786e:	bf88      	it	hi
 8007870:	2200      	movhi	r2, #0
 8007872:	4413      	add	r3, r2
 8007874:	1a18      	subs	r0, r3, r0
 8007876:	b003      	add	sp, #12
 8007878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800787a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800787e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007882:	e7ed      	b.n	8007860 <__exponent+0x4c>
 8007884:	2330      	movs	r3, #48	; 0x30
 8007886:	3130      	adds	r1, #48	; 0x30
 8007888:	7083      	strb	r3, [r0, #2]
 800788a:	70c1      	strb	r1, [r0, #3]
 800788c:	1d03      	adds	r3, r0, #4
 800788e:	e7f1      	b.n	8007874 <__exponent+0x60>

08007890 <_printf_float>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	ed2d 8b02 	vpush	{d8}
 8007898:	b08d      	sub	sp, #52	; 0x34
 800789a:	460c      	mov	r4, r1
 800789c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078a0:	4616      	mov	r6, r2
 80078a2:	461f      	mov	r7, r3
 80078a4:	4605      	mov	r5, r0
 80078a6:	f000 fee5 	bl	8008674 <_localeconv_r>
 80078aa:	f8d0 a000 	ldr.w	sl, [r0]
 80078ae:	4650      	mov	r0, sl
 80078b0:	f7f8 fce6 	bl	8000280 <strlen>
 80078b4:	2300      	movs	r3, #0
 80078b6:	930a      	str	r3, [sp, #40]	; 0x28
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	f8d8 3000 	ldr.w	r3, [r8]
 80078c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078c4:	3307      	adds	r3, #7
 80078c6:	f023 0307 	bic.w	r3, r3, #7
 80078ca:	f103 0208 	add.w	r2, r3, #8
 80078ce:	f8c8 2000 	str.w	r2, [r8]
 80078d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078da:	9307      	str	r3, [sp, #28]
 80078dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80078e0:	ee08 0a10 	vmov	s16, r0
 80078e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80078e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ec:	4b9e      	ldr	r3, [pc, #632]	; (8007b68 <_printf_float+0x2d8>)
 80078ee:	f04f 32ff 	mov.w	r2, #4294967295
 80078f2:	f7f9 f923 	bl	8000b3c <__aeabi_dcmpun>
 80078f6:	bb88      	cbnz	r0, 800795c <_printf_float+0xcc>
 80078f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078fc:	4b9a      	ldr	r3, [pc, #616]	; (8007b68 <_printf_float+0x2d8>)
 80078fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007902:	f7f9 f8fd 	bl	8000b00 <__aeabi_dcmple>
 8007906:	bb48      	cbnz	r0, 800795c <_printf_float+0xcc>
 8007908:	2200      	movs	r2, #0
 800790a:	2300      	movs	r3, #0
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	f7f9 f8ec 	bl	8000aec <__aeabi_dcmplt>
 8007914:	b110      	cbz	r0, 800791c <_printf_float+0x8c>
 8007916:	232d      	movs	r3, #45	; 0x2d
 8007918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800791c:	4a93      	ldr	r2, [pc, #588]	; (8007b6c <_printf_float+0x2dc>)
 800791e:	4b94      	ldr	r3, [pc, #592]	; (8007b70 <_printf_float+0x2e0>)
 8007920:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007924:	bf94      	ite	ls
 8007926:	4690      	movls	r8, r2
 8007928:	4698      	movhi	r8, r3
 800792a:	2303      	movs	r3, #3
 800792c:	6123      	str	r3, [r4, #16]
 800792e:	9b05      	ldr	r3, [sp, #20]
 8007930:	f023 0304 	bic.w	r3, r3, #4
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	f04f 0900 	mov.w	r9, #0
 800793a:	9700      	str	r7, [sp, #0]
 800793c:	4633      	mov	r3, r6
 800793e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007940:	4621      	mov	r1, r4
 8007942:	4628      	mov	r0, r5
 8007944:	f000 f9da 	bl	8007cfc <_printf_common>
 8007948:	3001      	adds	r0, #1
 800794a:	f040 8090 	bne.w	8007a6e <_printf_float+0x1de>
 800794e:	f04f 30ff 	mov.w	r0, #4294967295
 8007952:	b00d      	add	sp, #52	; 0x34
 8007954:	ecbd 8b02 	vpop	{d8}
 8007958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795c:	4642      	mov	r2, r8
 800795e:	464b      	mov	r3, r9
 8007960:	4640      	mov	r0, r8
 8007962:	4649      	mov	r1, r9
 8007964:	f7f9 f8ea 	bl	8000b3c <__aeabi_dcmpun>
 8007968:	b140      	cbz	r0, 800797c <_printf_float+0xec>
 800796a:	464b      	mov	r3, r9
 800796c:	2b00      	cmp	r3, #0
 800796e:	bfbc      	itt	lt
 8007970:	232d      	movlt	r3, #45	; 0x2d
 8007972:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007976:	4a7f      	ldr	r2, [pc, #508]	; (8007b74 <_printf_float+0x2e4>)
 8007978:	4b7f      	ldr	r3, [pc, #508]	; (8007b78 <_printf_float+0x2e8>)
 800797a:	e7d1      	b.n	8007920 <_printf_float+0x90>
 800797c:	6863      	ldr	r3, [r4, #4]
 800797e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007982:	9206      	str	r2, [sp, #24]
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	d13f      	bne.n	8007a08 <_printf_float+0x178>
 8007988:	2306      	movs	r3, #6
 800798a:	6063      	str	r3, [r4, #4]
 800798c:	9b05      	ldr	r3, [sp, #20]
 800798e:	6861      	ldr	r1, [r4, #4]
 8007990:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007994:	2300      	movs	r3, #0
 8007996:	9303      	str	r3, [sp, #12]
 8007998:	ab0a      	add	r3, sp, #40	; 0x28
 800799a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800799e:	ab09      	add	r3, sp, #36	; 0x24
 80079a0:	ec49 8b10 	vmov	d0, r8, r9
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	6022      	str	r2, [r4, #0]
 80079a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7ff fecf 	bl	8007750 <__cvt>
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079b6:	2b47      	cmp	r3, #71	; 0x47
 80079b8:	4680      	mov	r8, r0
 80079ba:	d108      	bne.n	80079ce <_printf_float+0x13e>
 80079bc:	1cc8      	adds	r0, r1, #3
 80079be:	db02      	blt.n	80079c6 <_printf_float+0x136>
 80079c0:	6863      	ldr	r3, [r4, #4]
 80079c2:	4299      	cmp	r1, r3
 80079c4:	dd41      	ble.n	8007a4a <_printf_float+0x1ba>
 80079c6:	f1ab 0302 	sub.w	r3, fp, #2
 80079ca:	fa5f fb83 	uxtb.w	fp, r3
 80079ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079d2:	d820      	bhi.n	8007a16 <_printf_float+0x186>
 80079d4:	3901      	subs	r1, #1
 80079d6:	465a      	mov	r2, fp
 80079d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079dc:	9109      	str	r1, [sp, #36]	; 0x24
 80079de:	f7ff ff19 	bl	8007814 <__exponent>
 80079e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079e4:	1813      	adds	r3, r2, r0
 80079e6:	2a01      	cmp	r2, #1
 80079e8:	4681      	mov	r9, r0
 80079ea:	6123      	str	r3, [r4, #16]
 80079ec:	dc02      	bgt.n	80079f4 <_printf_float+0x164>
 80079ee:	6822      	ldr	r2, [r4, #0]
 80079f0:	07d2      	lsls	r2, r2, #31
 80079f2:	d501      	bpl.n	80079f8 <_printf_float+0x168>
 80079f4:	3301      	adds	r3, #1
 80079f6:	6123      	str	r3, [r4, #16]
 80079f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d09c      	beq.n	800793a <_printf_float+0xaa>
 8007a00:	232d      	movs	r3, #45	; 0x2d
 8007a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a06:	e798      	b.n	800793a <_printf_float+0xaa>
 8007a08:	9a06      	ldr	r2, [sp, #24]
 8007a0a:	2a47      	cmp	r2, #71	; 0x47
 8007a0c:	d1be      	bne.n	800798c <_printf_float+0xfc>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1bc      	bne.n	800798c <_printf_float+0xfc>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e7b9      	b.n	800798a <_printf_float+0xfa>
 8007a16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a1a:	d118      	bne.n	8007a4e <_printf_float+0x1be>
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	6863      	ldr	r3, [r4, #4]
 8007a20:	dd0b      	ble.n	8007a3a <_printf_float+0x1aa>
 8007a22:	6121      	str	r1, [r4, #16]
 8007a24:	b913      	cbnz	r3, 8007a2c <_printf_float+0x19c>
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	07d0      	lsls	r0, r2, #31
 8007a2a:	d502      	bpl.n	8007a32 <_printf_float+0x1a2>
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	440b      	add	r3, r1
 8007a30:	6123      	str	r3, [r4, #16]
 8007a32:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a34:	f04f 0900 	mov.w	r9, #0
 8007a38:	e7de      	b.n	80079f8 <_printf_float+0x168>
 8007a3a:	b913      	cbnz	r3, 8007a42 <_printf_float+0x1b2>
 8007a3c:	6822      	ldr	r2, [r4, #0]
 8007a3e:	07d2      	lsls	r2, r2, #31
 8007a40:	d501      	bpl.n	8007a46 <_printf_float+0x1b6>
 8007a42:	3302      	adds	r3, #2
 8007a44:	e7f4      	b.n	8007a30 <_printf_float+0x1a0>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e7f2      	b.n	8007a30 <_printf_float+0x1a0>
 8007a4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a50:	4299      	cmp	r1, r3
 8007a52:	db05      	blt.n	8007a60 <_printf_float+0x1d0>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	6121      	str	r1, [r4, #16]
 8007a58:	07d8      	lsls	r0, r3, #31
 8007a5a:	d5ea      	bpl.n	8007a32 <_printf_float+0x1a2>
 8007a5c:	1c4b      	adds	r3, r1, #1
 8007a5e:	e7e7      	b.n	8007a30 <_printf_float+0x1a0>
 8007a60:	2900      	cmp	r1, #0
 8007a62:	bfd4      	ite	le
 8007a64:	f1c1 0202 	rsble	r2, r1, #2
 8007a68:	2201      	movgt	r2, #1
 8007a6a:	4413      	add	r3, r2
 8007a6c:	e7e0      	b.n	8007a30 <_printf_float+0x1a0>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	055a      	lsls	r2, r3, #21
 8007a72:	d407      	bmi.n	8007a84 <_printf_float+0x1f4>
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	4642      	mov	r2, r8
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d12c      	bne.n	8007adc <_printf_float+0x24c>
 8007a82:	e764      	b.n	800794e <_printf_float+0xbe>
 8007a84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a88:	f240 80e0 	bls.w	8007c4c <_printf_float+0x3bc>
 8007a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a90:	2200      	movs	r2, #0
 8007a92:	2300      	movs	r3, #0
 8007a94:	f7f9 f820 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d034      	beq.n	8007b06 <_printf_float+0x276>
 8007a9c:	4a37      	ldr	r2, [pc, #220]	; (8007b7c <_printf_float+0x2ec>)
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	47b8      	blx	r7
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f43f af51 	beq.w	800794e <_printf_float+0xbe>
 8007aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	db02      	blt.n	8007aba <_printf_float+0x22a>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	07d8      	lsls	r0, r3, #31
 8007ab8:	d510      	bpl.n	8007adc <_printf_float+0x24c>
 8007aba:	ee18 3a10 	vmov	r3, s16
 8007abe:	4652      	mov	r2, sl
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b8      	blx	r7
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	f43f af41 	beq.w	800794e <_printf_float+0xbe>
 8007acc:	f04f 0800 	mov.w	r8, #0
 8007ad0:	f104 091a 	add.w	r9, r4, #26
 8007ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	4543      	cmp	r3, r8
 8007ada:	dc09      	bgt.n	8007af0 <_printf_float+0x260>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	079b      	lsls	r3, r3, #30
 8007ae0:	f100 8107 	bmi.w	8007cf2 <_printf_float+0x462>
 8007ae4:	68e0      	ldr	r0, [r4, #12]
 8007ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae8:	4298      	cmp	r0, r3
 8007aea:	bfb8      	it	lt
 8007aec:	4618      	movlt	r0, r3
 8007aee:	e730      	b.n	8007952 <_printf_float+0xc2>
 8007af0:	2301      	movs	r3, #1
 8007af2:	464a      	mov	r2, r9
 8007af4:	4631      	mov	r1, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	f43f af27 	beq.w	800794e <_printf_float+0xbe>
 8007b00:	f108 0801 	add.w	r8, r8, #1
 8007b04:	e7e6      	b.n	8007ad4 <_printf_float+0x244>
 8007b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	dc39      	bgt.n	8007b80 <_printf_float+0x2f0>
 8007b0c:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <_printf_float+0x2ec>)
 8007b0e:	2301      	movs	r3, #1
 8007b10:	4631      	mov	r1, r6
 8007b12:	4628      	mov	r0, r5
 8007b14:	47b8      	blx	r7
 8007b16:	3001      	adds	r0, #1
 8007b18:	f43f af19 	beq.w	800794e <_printf_float+0xbe>
 8007b1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d102      	bne.n	8007b2a <_printf_float+0x29a>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	07d9      	lsls	r1, r3, #31
 8007b28:	d5d8      	bpl.n	8007adc <_printf_float+0x24c>
 8007b2a:	ee18 3a10 	vmov	r3, s16
 8007b2e:	4652      	mov	r2, sl
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b8      	blx	r7
 8007b36:	3001      	adds	r0, #1
 8007b38:	f43f af09 	beq.w	800794e <_printf_float+0xbe>
 8007b3c:	f04f 0900 	mov.w	r9, #0
 8007b40:	f104 0a1a 	add.w	sl, r4, #26
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	425b      	negs	r3, r3
 8007b48:	454b      	cmp	r3, r9
 8007b4a:	dc01      	bgt.n	8007b50 <_printf_float+0x2c0>
 8007b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4e:	e792      	b.n	8007a76 <_printf_float+0x1e6>
 8007b50:	2301      	movs	r3, #1
 8007b52:	4652      	mov	r2, sl
 8007b54:	4631      	mov	r1, r6
 8007b56:	4628      	mov	r0, r5
 8007b58:	47b8      	blx	r7
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	f43f aef7 	beq.w	800794e <_printf_float+0xbe>
 8007b60:	f109 0901 	add.w	r9, r9, #1
 8007b64:	e7ee      	b.n	8007b44 <_printf_float+0x2b4>
 8007b66:	bf00      	nop
 8007b68:	7fefffff 	.word	0x7fefffff
 8007b6c:	0800be8c 	.word	0x0800be8c
 8007b70:	0800be90 	.word	0x0800be90
 8007b74:	0800be94 	.word	0x0800be94
 8007b78:	0800be98 	.word	0x0800be98
 8007b7c:	0800be9c 	.word	0x0800be9c
 8007b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b84:	429a      	cmp	r2, r3
 8007b86:	bfa8      	it	ge
 8007b88:	461a      	movge	r2, r3
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	4691      	mov	r9, r2
 8007b8e:	dc37      	bgt.n	8007c00 <_printf_float+0x370>
 8007b90:	f04f 0b00 	mov.w	fp, #0
 8007b94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b98:	f104 021a 	add.w	r2, r4, #26
 8007b9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b9e:	9305      	str	r3, [sp, #20]
 8007ba0:	eba3 0309 	sub.w	r3, r3, r9
 8007ba4:	455b      	cmp	r3, fp
 8007ba6:	dc33      	bgt.n	8007c10 <_printf_float+0x380>
 8007ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bac:	429a      	cmp	r2, r3
 8007bae:	db3b      	blt.n	8007c28 <_printf_float+0x398>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	07da      	lsls	r2, r3, #31
 8007bb4:	d438      	bmi.n	8007c28 <_printf_float+0x398>
 8007bb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007bba:	eba2 0903 	sub.w	r9, r2, r3
 8007bbe:	9b05      	ldr	r3, [sp, #20]
 8007bc0:	1ad2      	subs	r2, r2, r3
 8007bc2:	4591      	cmp	r9, r2
 8007bc4:	bfa8      	it	ge
 8007bc6:	4691      	movge	r9, r2
 8007bc8:	f1b9 0f00 	cmp.w	r9, #0
 8007bcc:	dc35      	bgt.n	8007c3a <_printf_float+0x3aa>
 8007bce:	f04f 0800 	mov.w	r8, #0
 8007bd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bd6:	f104 0a1a 	add.w	sl, r4, #26
 8007bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bde:	1a9b      	subs	r3, r3, r2
 8007be0:	eba3 0309 	sub.w	r3, r3, r9
 8007be4:	4543      	cmp	r3, r8
 8007be6:	f77f af79 	ble.w	8007adc <_printf_float+0x24c>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4652      	mov	r2, sl
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	f43f aeaa 	beq.w	800794e <_printf_float+0xbe>
 8007bfa:	f108 0801 	add.w	r8, r8, #1
 8007bfe:	e7ec      	b.n	8007bda <_printf_float+0x34a>
 8007c00:	4613      	mov	r3, r2
 8007c02:	4631      	mov	r1, r6
 8007c04:	4642      	mov	r2, r8
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b8      	blx	r7
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d1c0      	bne.n	8007b90 <_printf_float+0x300>
 8007c0e:	e69e      	b.n	800794e <_printf_float+0xbe>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	9205      	str	r2, [sp, #20]
 8007c18:	47b8      	blx	r7
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	f43f ae97 	beq.w	800794e <_printf_float+0xbe>
 8007c20:	9a05      	ldr	r2, [sp, #20]
 8007c22:	f10b 0b01 	add.w	fp, fp, #1
 8007c26:	e7b9      	b.n	8007b9c <_printf_float+0x30c>
 8007c28:	ee18 3a10 	vmov	r3, s16
 8007c2c:	4652      	mov	r2, sl
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b8      	blx	r7
 8007c34:	3001      	adds	r0, #1
 8007c36:	d1be      	bne.n	8007bb6 <_printf_float+0x326>
 8007c38:	e689      	b.n	800794e <_printf_float+0xbe>
 8007c3a:	9a05      	ldr	r2, [sp, #20]
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	4442      	add	r2, r8
 8007c40:	4631      	mov	r1, r6
 8007c42:	4628      	mov	r0, r5
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	d1c1      	bne.n	8007bce <_printf_float+0x33e>
 8007c4a:	e680      	b.n	800794e <_printf_float+0xbe>
 8007c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c4e:	2a01      	cmp	r2, #1
 8007c50:	dc01      	bgt.n	8007c56 <_printf_float+0x3c6>
 8007c52:	07db      	lsls	r3, r3, #31
 8007c54:	d53a      	bpl.n	8007ccc <_printf_float+0x43c>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4642      	mov	r2, r8
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	f43f ae74 	beq.w	800794e <_printf_float+0xbe>
 8007c66:	ee18 3a10 	vmov	r3, s16
 8007c6a:	4652      	mov	r2, sl
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	4628      	mov	r0, r5
 8007c70:	47b8      	blx	r7
 8007c72:	3001      	adds	r0, #1
 8007c74:	f43f ae6b 	beq.w	800794e <_printf_float+0xbe>
 8007c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007c84:	f7f8 ff28 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c88:	b9d8      	cbnz	r0, 8007cc2 <_printf_float+0x432>
 8007c8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c8e:	f108 0201 	add.w	r2, r8, #1
 8007c92:	4631      	mov	r1, r6
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b8      	blx	r7
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d10e      	bne.n	8007cba <_printf_float+0x42a>
 8007c9c:	e657      	b.n	800794e <_printf_float+0xbe>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4652      	mov	r2, sl
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f43f ae50 	beq.w	800794e <_printf_float+0xbe>
 8007cae:	f108 0801 	add.w	r8, r8, #1
 8007cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	4543      	cmp	r3, r8
 8007cb8:	dcf1      	bgt.n	8007c9e <_printf_float+0x40e>
 8007cba:	464b      	mov	r3, r9
 8007cbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cc0:	e6da      	b.n	8007a78 <_printf_float+0x1e8>
 8007cc2:	f04f 0800 	mov.w	r8, #0
 8007cc6:	f104 0a1a 	add.w	sl, r4, #26
 8007cca:	e7f2      	b.n	8007cb2 <_printf_float+0x422>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4642      	mov	r2, r8
 8007cd0:	e7df      	b.n	8007c92 <_printf_float+0x402>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	464a      	mov	r2, r9
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b8      	blx	r7
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f43f ae36 	beq.w	800794e <_printf_float+0xbe>
 8007ce2:	f108 0801 	add.w	r8, r8, #1
 8007ce6:	68e3      	ldr	r3, [r4, #12]
 8007ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cea:	1a5b      	subs	r3, r3, r1
 8007cec:	4543      	cmp	r3, r8
 8007cee:	dcf0      	bgt.n	8007cd2 <_printf_float+0x442>
 8007cf0:	e6f8      	b.n	8007ae4 <_printf_float+0x254>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	f104 0919 	add.w	r9, r4, #25
 8007cfa:	e7f4      	b.n	8007ce6 <_printf_float+0x456>

08007cfc <_printf_common>:
 8007cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	4616      	mov	r6, r2
 8007d02:	4699      	mov	r9, r3
 8007d04:	688a      	ldr	r2, [r1, #8]
 8007d06:	690b      	ldr	r3, [r1, #16]
 8007d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	bfb8      	it	lt
 8007d10:	4613      	movlt	r3, r2
 8007d12:	6033      	str	r3, [r6, #0]
 8007d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d18:	4607      	mov	r7, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	b10a      	cbz	r2, 8007d22 <_printf_common+0x26>
 8007d1e:	3301      	adds	r3, #1
 8007d20:	6033      	str	r3, [r6, #0]
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	0699      	lsls	r1, r3, #26
 8007d26:	bf42      	ittt	mi
 8007d28:	6833      	ldrmi	r3, [r6, #0]
 8007d2a:	3302      	addmi	r3, #2
 8007d2c:	6033      	strmi	r3, [r6, #0]
 8007d2e:	6825      	ldr	r5, [r4, #0]
 8007d30:	f015 0506 	ands.w	r5, r5, #6
 8007d34:	d106      	bne.n	8007d44 <_printf_common+0x48>
 8007d36:	f104 0a19 	add.w	sl, r4, #25
 8007d3a:	68e3      	ldr	r3, [r4, #12]
 8007d3c:	6832      	ldr	r2, [r6, #0]
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	42ab      	cmp	r3, r5
 8007d42:	dc26      	bgt.n	8007d92 <_printf_common+0x96>
 8007d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d48:	1e13      	subs	r3, r2, #0
 8007d4a:	6822      	ldr	r2, [r4, #0]
 8007d4c:	bf18      	it	ne
 8007d4e:	2301      	movne	r3, #1
 8007d50:	0692      	lsls	r2, r2, #26
 8007d52:	d42b      	bmi.n	8007dac <_printf_common+0xb0>
 8007d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d58:	4649      	mov	r1, r9
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	47c0      	blx	r8
 8007d5e:	3001      	adds	r0, #1
 8007d60:	d01e      	beq.n	8007da0 <_printf_common+0xa4>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	6922      	ldr	r2, [r4, #16]
 8007d66:	f003 0306 	and.w	r3, r3, #6
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	bf02      	ittt	eq
 8007d6e:	68e5      	ldreq	r5, [r4, #12]
 8007d70:	6833      	ldreq	r3, [r6, #0]
 8007d72:	1aed      	subeq	r5, r5, r3
 8007d74:	68a3      	ldr	r3, [r4, #8]
 8007d76:	bf0c      	ite	eq
 8007d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d7c:	2500      	movne	r5, #0
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	bfc4      	itt	gt
 8007d82:	1a9b      	subgt	r3, r3, r2
 8007d84:	18ed      	addgt	r5, r5, r3
 8007d86:	2600      	movs	r6, #0
 8007d88:	341a      	adds	r4, #26
 8007d8a:	42b5      	cmp	r5, r6
 8007d8c:	d11a      	bne.n	8007dc4 <_printf_common+0xc8>
 8007d8e:	2000      	movs	r0, #0
 8007d90:	e008      	b.n	8007da4 <_printf_common+0xa8>
 8007d92:	2301      	movs	r3, #1
 8007d94:	4652      	mov	r2, sl
 8007d96:	4649      	mov	r1, r9
 8007d98:	4638      	mov	r0, r7
 8007d9a:	47c0      	blx	r8
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d103      	bne.n	8007da8 <_printf_common+0xac>
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da8:	3501      	adds	r5, #1
 8007daa:	e7c6      	b.n	8007d3a <_printf_common+0x3e>
 8007dac:	18e1      	adds	r1, r4, r3
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	2030      	movs	r0, #48	; 0x30
 8007db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007db6:	4422      	add	r2, r4
 8007db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dc0:	3302      	adds	r3, #2
 8007dc2:	e7c7      	b.n	8007d54 <_printf_common+0x58>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	4649      	mov	r1, r9
 8007dca:	4638      	mov	r0, r7
 8007dcc:	47c0      	blx	r8
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d0e6      	beq.n	8007da0 <_printf_common+0xa4>
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	e7d9      	b.n	8007d8a <_printf_common+0x8e>
	...

08007dd8 <_printf_i>:
 8007dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ddc:	7e0f      	ldrb	r7, [r1, #24]
 8007dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007de0:	2f78      	cmp	r7, #120	; 0x78
 8007de2:	4691      	mov	r9, r2
 8007de4:	4680      	mov	r8, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	469a      	mov	sl, r3
 8007dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dee:	d807      	bhi.n	8007e00 <_printf_i+0x28>
 8007df0:	2f62      	cmp	r7, #98	; 0x62
 8007df2:	d80a      	bhi.n	8007e0a <_printf_i+0x32>
 8007df4:	2f00      	cmp	r7, #0
 8007df6:	f000 80d4 	beq.w	8007fa2 <_printf_i+0x1ca>
 8007dfa:	2f58      	cmp	r7, #88	; 0x58
 8007dfc:	f000 80c0 	beq.w	8007f80 <_printf_i+0x1a8>
 8007e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e08:	e03a      	b.n	8007e80 <_printf_i+0xa8>
 8007e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e0e:	2b15      	cmp	r3, #21
 8007e10:	d8f6      	bhi.n	8007e00 <_printf_i+0x28>
 8007e12:	a101      	add	r1, pc, #4	; (adr r1, 8007e18 <_printf_i+0x40>)
 8007e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e18:	08007e71 	.word	0x08007e71
 8007e1c:	08007e85 	.word	0x08007e85
 8007e20:	08007e01 	.word	0x08007e01
 8007e24:	08007e01 	.word	0x08007e01
 8007e28:	08007e01 	.word	0x08007e01
 8007e2c:	08007e01 	.word	0x08007e01
 8007e30:	08007e85 	.word	0x08007e85
 8007e34:	08007e01 	.word	0x08007e01
 8007e38:	08007e01 	.word	0x08007e01
 8007e3c:	08007e01 	.word	0x08007e01
 8007e40:	08007e01 	.word	0x08007e01
 8007e44:	08007f89 	.word	0x08007f89
 8007e48:	08007eb1 	.word	0x08007eb1
 8007e4c:	08007f43 	.word	0x08007f43
 8007e50:	08007e01 	.word	0x08007e01
 8007e54:	08007e01 	.word	0x08007e01
 8007e58:	08007fab 	.word	0x08007fab
 8007e5c:	08007e01 	.word	0x08007e01
 8007e60:	08007eb1 	.word	0x08007eb1
 8007e64:	08007e01 	.word	0x08007e01
 8007e68:	08007e01 	.word	0x08007e01
 8007e6c:	08007f4b 	.word	0x08007f4b
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	1d1a      	adds	r2, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	602a      	str	r2, [r5, #0]
 8007e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e80:	2301      	movs	r3, #1
 8007e82:	e09f      	b.n	8007fc4 <_printf_i+0x1ec>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	682b      	ldr	r3, [r5, #0]
 8007e88:	0607      	lsls	r7, r0, #24
 8007e8a:	f103 0104 	add.w	r1, r3, #4
 8007e8e:	6029      	str	r1, [r5, #0]
 8007e90:	d501      	bpl.n	8007e96 <_printf_i+0xbe>
 8007e92:	681e      	ldr	r6, [r3, #0]
 8007e94:	e003      	b.n	8007e9e <_printf_i+0xc6>
 8007e96:	0646      	lsls	r6, r0, #25
 8007e98:	d5fb      	bpl.n	8007e92 <_printf_i+0xba>
 8007e9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	da03      	bge.n	8007eaa <_printf_i+0xd2>
 8007ea2:	232d      	movs	r3, #45	; 0x2d
 8007ea4:	4276      	negs	r6, r6
 8007ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eaa:	485a      	ldr	r0, [pc, #360]	; (8008014 <_printf_i+0x23c>)
 8007eac:	230a      	movs	r3, #10
 8007eae:	e012      	b.n	8007ed6 <_printf_i+0xfe>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	6820      	ldr	r0, [r4, #0]
 8007eb4:	1d19      	adds	r1, r3, #4
 8007eb6:	6029      	str	r1, [r5, #0]
 8007eb8:	0605      	lsls	r5, r0, #24
 8007eba:	d501      	bpl.n	8007ec0 <_printf_i+0xe8>
 8007ebc:	681e      	ldr	r6, [r3, #0]
 8007ebe:	e002      	b.n	8007ec6 <_printf_i+0xee>
 8007ec0:	0641      	lsls	r1, r0, #25
 8007ec2:	d5fb      	bpl.n	8007ebc <_printf_i+0xe4>
 8007ec4:	881e      	ldrh	r6, [r3, #0]
 8007ec6:	4853      	ldr	r0, [pc, #332]	; (8008014 <_printf_i+0x23c>)
 8007ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8007eca:	bf0c      	ite	eq
 8007ecc:	2308      	moveq	r3, #8
 8007ece:	230a      	movne	r3, #10
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ed6:	6865      	ldr	r5, [r4, #4]
 8007ed8:	60a5      	str	r5, [r4, #8]
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	bfa2      	ittt	ge
 8007ede:	6821      	ldrge	r1, [r4, #0]
 8007ee0:	f021 0104 	bicge.w	r1, r1, #4
 8007ee4:	6021      	strge	r1, [r4, #0]
 8007ee6:	b90e      	cbnz	r6, 8007eec <_printf_i+0x114>
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	d04b      	beq.n	8007f84 <_printf_i+0x1ac>
 8007eec:	4615      	mov	r5, r2
 8007eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ef6:	5dc7      	ldrb	r7, [r0, r7]
 8007ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007efc:	4637      	mov	r7, r6
 8007efe:	42bb      	cmp	r3, r7
 8007f00:	460e      	mov	r6, r1
 8007f02:	d9f4      	bls.n	8007eee <_printf_i+0x116>
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d10b      	bne.n	8007f20 <_printf_i+0x148>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	07de      	lsls	r6, r3, #31
 8007f0c:	d508      	bpl.n	8007f20 <_printf_i+0x148>
 8007f0e:	6923      	ldr	r3, [r4, #16]
 8007f10:	6861      	ldr	r1, [r4, #4]
 8007f12:	4299      	cmp	r1, r3
 8007f14:	bfde      	ittt	le
 8007f16:	2330      	movle	r3, #48	; 0x30
 8007f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f20:	1b52      	subs	r2, r2, r5
 8007f22:	6122      	str	r2, [r4, #16]
 8007f24:	f8cd a000 	str.w	sl, [sp]
 8007f28:	464b      	mov	r3, r9
 8007f2a:	aa03      	add	r2, sp, #12
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f7ff fee4 	bl	8007cfc <_printf_common>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d14a      	bne.n	8007fce <_printf_i+0x1f6>
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	b004      	add	sp, #16
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	f043 0320 	orr.w	r3, r3, #32
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	4833      	ldr	r0, [pc, #204]	; (8008018 <_printf_i+0x240>)
 8007f4c:	2778      	movs	r7, #120	; 0x78
 8007f4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	6829      	ldr	r1, [r5, #0]
 8007f56:	061f      	lsls	r7, r3, #24
 8007f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f5c:	d402      	bmi.n	8007f64 <_printf_i+0x18c>
 8007f5e:	065f      	lsls	r7, r3, #25
 8007f60:	bf48      	it	mi
 8007f62:	b2b6      	uxthmi	r6, r6
 8007f64:	07df      	lsls	r7, r3, #31
 8007f66:	bf48      	it	mi
 8007f68:	f043 0320 	orrmi.w	r3, r3, #32
 8007f6c:	6029      	str	r1, [r5, #0]
 8007f6e:	bf48      	it	mi
 8007f70:	6023      	strmi	r3, [r4, #0]
 8007f72:	b91e      	cbnz	r6, 8007f7c <_printf_i+0x1a4>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	f023 0320 	bic.w	r3, r3, #32
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	e7a7      	b.n	8007ed0 <_printf_i+0xf8>
 8007f80:	4824      	ldr	r0, [pc, #144]	; (8008014 <_printf_i+0x23c>)
 8007f82:	e7e4      	b.n	8007f4e <_printf_i+0x176>
 8007f84:	4615      	mov	r5, r2
 8007f86:	e7bd      	b.n	8007f04 <_printf_i+0x12c>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	6826      	ldr	r6, [r4, #0]
 8007f8c:	6961      	ldr	r1, [r4, #20]
 8007f8e:	1d18      	adds	r0, r3, #4
 8007f90:	6028      	str	r0, [r5, #0]
 8007f92:	0635      	lsls	r5, r6, #24
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	d501      	bpl.n	8007f9c <_printf_i+0x1c4>
 8007f98:	6019      	str	r1, [r3, #0]
 8007f9a:	e002      	b.n	8007fa2 <_printf_i+0x1ca>
 8007f9c:	0670      	lsls	r0, r6, #25
 8007f9e:	d5fb      	bpl.n	8007f98 <_printf_i+0x1c0>
 8007fa0:	8019      	strh	r1, [r3, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	4615      	mov	r5, r2
 8007fa8:	e7bc      	b.n	8007f24 <_printf_i+0x14c>
 8007faa:	682b      	ldr	r3, [r5, #0]
 8007fac:	1d1a      	adds	r2, r3, #4
 8007fae:	602a      	str	r2, [r5, #0]
 8007fb0:	681d      	ldr	r5, [r3, #0]
 8007fb2:	6862      	ldr	r2, [r4, #4]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7f8 f912 	bl	80001e0 <memchr>
 8007fbc:	b108      	cbz	r0, 8007fc2 <_printf_i+0x1ea>
 8007fbe:	1b40      	subs	r0, r0, r5
 8007fc0:	6060      	str	r0, [r4, #4]
 8007fc2:	6863      	ldr	r3, [r4, #4]
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fcc:	e7aa      	b.n	8007f24 <_printf_i+0x14c>
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d0ad      	beq.n	8007f38 <_printf_i+0x160>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	079b      	lsls	r3, r3, #30
 8007fe0:	d413      	bmi.n	800800a <_printf_i+0x232>
 8007fe2:	68e0      	ldr	r0, [r4, #12]
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	bfb8      	it	lt
 8007fea:	4618      	movlt	r0, r3
 8007fec:	e7a6      	b.n	8007f3c <_printf_i+0x164>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	47d0      	blx	sl
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d09d      	beq.n	8007f38 <_printf_i+0x160>
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	68e3      	ldr	r3, [r4, #12]
 8008000:	9903      	ldr	r1, [sp, #12]
 8008002:	1a5b      	subs	r3, r3, r1
 8008004:	42ab      	cmp	r3, r5
 8008006:	dcf2      	bgt.n	8007fee <_printf_i+0x216>
 8008008:	e7eb      	b.n	8007fe2 <_printf_i+0x20a>
 800800a:	2500      	movs	r5, #0
 800800c:	f104 0619 	add.w	r6, r4, #25
 8008010:	e7f5      	b.n	8007ffe <_printf_i+0x226>
 8008012:	bf00      	nop
 8008014:	0800be9e 	.word	0x0800be9e
 8008018:	0800beaf 	.word	0x0800beaf

0800801c <_scanf_float>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	b087      	sub	sp, #28
 8008022:	4617      	mov	r7, r2
 8008024:	9303      	str	r3, [sp, #12]
 8008026:	688b      	ldr	r3, [r1, #8]
 8008028:	1e5a      	subs	r2, r3, #1
 800802a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800802e:	bf83      	ittte	hi
 8008030:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008034:	195b      	addhi	r3, r3, r5
 8008036:	9302      	strhi	r3, [sp, #8]
 8008038:	2300      	movls	r3, #0
 800803a:	bf86      	itte	hi
 800803c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008040:	608b      	strhi	r3, [r1, #8]
 8008042:	9302      	strls	r3, [sp, #8]
 8008044:	680b      	ldr	r3, [r1, #0]
 8008046:	468b      	mov	fp, r1
 8008048:	2500      	movs	r5, #0
 800804a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800804e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008052:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008056:	4680      	mov	r8, r0
 8008058:	460c      	mov	r4, r1
 800805a:	465e      	mov	r6, fp
 800805c:	46aa      	mov	sl, r5
 800805e:	46a9      	mov	r9, r5
 8008060:	9501      	str	r5, [sp, #4]
 8008062:	68a2      	ldr	r2, [r4, #8]
 8008064:	b152      	cbz	r2, 800807c <_scanf_float+0x60>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b4e      	cmp	r3, #78	; 0x4e
 800806c:	d864      	bhi.n	8008138 <_scanf_float+0x11c>
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	d83c      	bhi.n	80080ec <_scanf_float+0xd0>
 8008072:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008076:	b2c8      	uxtb	r0, r1
 8008078:	280e      	cmp	r0, #14
 800807a:	d93a      	bls.n	80080f2 <_scanf_float+0xd6>
 800807c:	f1b9 0f00 	cmp.w	r9, #0
 8008080:	d003      	beq.n	800808a <_scanf_float+0x6e>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800808e:	f1ba 0f01 	cmp.w	sl, #1
 8008092:	f200 8113 	bhi.w	80082bc <_scanf_float+0x2a0>
 8008096:	455e      	cmp	r6, fp
 8008098:	f200 8105 	bhi.w	80082a6 <_scanf_float+0x28a>
 800809c:	2501      	movs	r5, #1
 800809e:	4628      	mov	r0, r5
 80080a0:	b007      	add	sp, #28
 80080a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80080aa:	2a0d      	cmp	r2, #13
 80080ac:	d8e6      	bhi.n	800807c <_scanf_float+0x60>
 80080ae:	a101      	add	r1, pc, #4	; (adr r1, 80080b4 <_scanf_float+0x98>)
 80080b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80080b4:	080081f3 	.word	0x080081f3
 80080b8:	0800807d 	.word	0x0800807d
 80080bc:	0800807d 	.word	0x0800807d
 80080c0:	0800807d 	.word	0x0800807d
 80080c4:	08008253 	.word	0x08008253
 80080c8:	0800822b 	.word	0x0800822b
 80080cc:	0800807d 	.word	0x0800807d
 80080d0:	0800807d 	.word	0x0800807d
 80080d4:	08008201 	.word	0x08008201
 80080d8:	0800807d 	.word	0x0800807d
 80080dc:	0800807d 	.word	0x0800807d
 80080e0:	0800807d 	.word	0x0800807d
 80080e4:	0800807d 	.word	0x0800807d
 80080e8:	080081b9 	.word	0x080081b9
 80080ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80080f0:	e7db      	b.n	80080aa <_scanf_float+0x8e>
 80080f2:	290e      	cmp	r1, #14
 80080f4:	d8c2      	bhi.n	800807c <_scanf_float+0x60>
 80080f6:	a001      	add	r0, pc, #4	; (adr r0, 80080fc <_scanf_float+0xe0>)
 80080f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80080fc:	080081ab 	.word	0x080081ab
 8008100:	0800807d 	.word	0x0800807d
 8008104:	080081ab 	.word	0x080081ab
 8008108:	0800823f 	.word	0x0800823f
 800810c:	0800807d 	.word	0x0800807d
 8008110:	08008159 	.word	0x08008159
 8008114:	08008195 	.word	0x08008195
 8008118:	08008195 	.word	0x08008195
 800811c:	08008195 	.word	0x08008195
 8008120:	08008195 	.word	0x08008195
 8008124:	08008195 	.word	0x08008195
 8008128:	08008195 	.word	0x08008195
 800812c:	08008195 	.word	0x08008195
 8008130:	08008195 	.word	0x08008195
 8008134:	08008195 	.word	0x08008195
 8008138:	2b6e      	cmp	r3, #110	; 0x6e
 800813a:	d809      	bhi.n	8008150 <_scanf_float+0x134>
 800813c:	2b60      	cmp	r3, #96	; 0x60
 800813e:	d8b2      	bhi.n	80080a6 <_scanf_float+0x8a>
 8008140:	2b54      	cmp	r3, #84	; 0x54
 8008142:	d077      	beq.n	8008234 <_scanf_float+0x218>
 8008144:	2b59      	cmp	r3, #89	; 0x59
 8008146:	d199      	bne.n	800807c <_scanf_float+0x60>
 8008148:	2d07      	cmp	r5, #7
 800814a:	d197      	bne.n	800807c <_scanf_float+0x60>
 800814c:	2508      	movs	r5, #8
 800814e:	e029      	b.n	80081a4 <_scanf_float+0x188>
 8008150:	2b74      	cmp	r3, #116	; 0x74
 8008152:	d06f      	beq.n	8008234 <_scanf_float+0x218>
 8008154:	2b79      	cmp	r3, #121	; 0x79
 8008156:	e7f6      	b.n	8008146 <_scanf_float+0x12a>
 8008158:	6821      	ldr	r1, [r4, #0]
 800815a:	05c8      	lsls	r0, r1, #23
 800815c:	d51a      	bpl.n	8008194 <_scanf_float+0x178>
 800815e:	9b02      	ldr	r3, [sp, #8]
 8008160:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008164:	6021      	str	r1, [r4, #0]
 8008166:	f109 0901 	add.w	r9, r9, #1
 800816a:	b11b      	cbz	r3, 8008174 <_scanf_float+0x158>
 800816c:	3b01      	subs	r3, #1
 800816e:	3201      	adds	r2, #1
 8008170:	9302      	str	r3, [sp, #8]
 8008172:	60a2      	str	r2, [r4, #8]
 8008174:	68a3      	ldr	r3, [r4, #8]
 8008176:	3b01      	subs	r3, #1
 8008178:	60a3      	str	r3, [r4, #8]
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	3301      	adds	r3, #1
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3b01      	subs	r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	607b      	str	r3, [r7, #4]
 8008188:	f340 8084 	ble.w	8008294 <_scanf_float+0x278>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	3301      	adds	r3, #1
 8008190:	603b      	str	r3, [r7, #0]
 8008192:	e766      	b.n	8008062 <_scanf_float+0x46>
 8008194:	eb1a 0f05 	cmn.w	sl, r5
 8008198:	f47f af70 	bne.w	800807c <_scanf_float+0x60>
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	f806 3b01 	strb.w	r3, [r6], #1
 80081a8:	e7e4      	b.n	8008174 <_scanf_float+0x158>
 80081aa:	6822      	ldr	r2, [r4, #0]
 80081ac:	0610      	lsls	r0, r2, #24
 80081ae:	f57f af65 	bpl.w	800807c <_scanf_float+0x60>
 80081b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081b6:	e7f4      	b.n	80081a2 <_scanf_float+0x186>
 80081b8:	f1ba 0f00 	cmp.w	sl, #0
 80081bc:	d10e      	bne.n	80081dc <_scanf_float+0x1c0>
 80081be:	f1b9 0f00 	cmp.w	r9, #0
 80081c2:	d10e      	bne.n	80081e2 <_scanf_float+0x1c6>
 80081c4:	6822      	ldr	r2, [r4, #0]
 80081c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80081ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80081ce:	d108      	bne.n	80081e2 <_scanf_float+0x1c6>
 80081d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	f04f 0a01 	mov.w	sl, #1
 80081da:	e7e3      	b.n	80081a4 <_scanf_float+0x188>
 80081dc:	f1ba 0f02 	cmp.w	sl, #2
 80081e0:	d055      	beq.n	800828e <_scanf_float+0x272>
 80081e2:	2d01      	cmp	r5, #1
 80081e4:	d002      	beq.n	80081ec <_scanf_float+0x1d0>
 80081e6:	2d04      	cmp	r5, #4
 80081e8:	f47f af48 	bne.w	800807c <_scanf_float+0x60>
 80081ec:	3501      	adds	r5, #1
 80081ee:	b2ed      	uxtb	r5, r5
 80081f0:	e7d8      	b.n	80081a4 <_scanf_float+0x188>
 80081f2:	f1ba 0f01 	cmp.w	sl, #1
 80081f6:	f47f af41 	bne.w	800807c <_scanf_float+0x60>
 80081fa:	f04f 0a02 	mov.w	sl, #2
 80081fe:	e7d1      	b.n	80081a4 <_scanf_float+0x188>
 8008200:	b97d      	cbnz	r5, 8008222 <_scanf_float+0x206>
 8008202:	f1b9 0f00 	cmp.w	r9, #0
 8008206:	f47f af3c 	bne.w	8008082 <_scanf_float+0x66>
 800820a:	6822      	ldr	r2, [r4, #0]
 800820c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008210:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008214:	f47f af39 	bne.w	800808a <_scanf_float+0x6e>
 8008218:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800821c:	6022      	str	r2, [r4, #0]
 800821e:	2501      	movs	r5, #1
 8008220:	e7c0      	b.n	80081a4 <_scanf_float+0x188>
 8008222:	2d03      	cmp	r5, #3
 8008224:	d0e2      	beq.n	80081ec <_scanf_float+0x1d0>
 8008226:	2d05      	cmp	r5, #5
 8008228:	e7de      	b.n	80081e8 <_scanf_float+0x1cc>
 800822a:	2d02      	cmp	r5, #2
 800822c:	f47f af26 	bne.w	800807c <_scanf_float+0x60>
 8008230:	2503      	movs	r5, #3
 8008232:	e7b7      	b.n	80081a4 <_scanf_float+0x188>
 8008234:	2d06      	cmp	r5, #6
 8008236:	f47f af21 	bne.w	800807c <_scanf_float+0x60>
 800823a:	2507      	movs	r5, #7
 800823c:	e7b2      	b.n	80081a4 <_scanf_float+0x188>
 800823e:	6822      	ldr	r2, [r4, #0]
 8008240:	0591      	lsls	r1, r2, #22
 8008242:	f57f af1b 	bpl.w	800807c <_scanf_float+0x60>
 8008246:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800824a:	6022      	str	r2, [r4, #0]
 800824c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008250:	e7a8      	b.n	80081a4 <_scanf_float+0x188>
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008258:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800825c:	d006      	beq.n	800826c <_scanf_float+0x250>
 800825e:	0550      	lsls	r0, r2, #21
 8008260:	f57f af0c 	bpl.w	800807c <_scanf_float+0x60>
 8008264:	f1b9 0f00 	cmp.w	r9, #0
 8008268:	f43f af0f 	beq.w	800808a <_scanf_float+0x6e>
 800826c:	0591      	lsls	r1, r2, #22
 800826e:	bf58      	it	pl
 8008270:	9901      	ldrpl	r1, [sp, #4]
 8008272:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008276:	bf58      	it	pl
 8008278:	eba9 0101 	subpl.w	r1, r9, r1
 800827c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008280:	bf58      	it	pl
 8008282:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008286:	6022      	str	r2, [r4, #0]
 8008288:	f04f 0900 	mov.w	r9, #0
 800828c:	e78a      	b.n	80081a4 <_scanf_float+0x188>
 800828e:	f04f 0a03 	mov.w	sl, #3
 8008292:	e787      	b.n	80081a4 <_scanf_float+0x188>
 8008294:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008298:	4639      	mov	r1, r7
 800829a:	4640      	mov	r0, r8
 800829c:	4798      	blx	r3
 800829e:	2800      	cmp	r0, #0
 80082a0:	f43f aedf 	beq.w	8008062 <_scanf_float+0x46>
 80082a4:	e6ea      	b.n	800807c <_scanf_float+0x60>
 80082a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082ae:	463a      	mov	r2, r7
 80082b0:	4640      	mov	r0, r8
 80082b2:	4798      	blx	r3
 80082b4:	6923      	ldr	r3, [r4, #16]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	6123      	str	r3, [r4, #16]
 80082ba:	e6ec      	b.n	8008096 <_scanf_float+0x7a>
 80082bc:	1e6b      	subs	r3, r5, #1
 80082be:	2b06      	cmp	r3, #6
 80082c0:	d825      	bhi.n	800830e <_scanf_float+0x2f2>
 80082c2:	2d02      	cmp	r5, #2
 80082c4:	d836      	bhi.n	8008334 <_scanf_float+0x318>
 80082c6:	455e      	cmp	r6, fp
 80082c8:	f67f aee8 	bls.w	800809c <_scanf_float+0x80>
 80082cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082d4:	463a      	mov	r2, r7
 80082d6:	4640      	mov	r0, r8
 80082d8:	4798      	blx	r3
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	3b01      	subs	r3, #1
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	e7f1      	b.n	80082c6 <_scanf_float+0x2aa>
 80082e2:	9802      	ldr	r0, [sp, #8]
 80082e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80082ec:	9002      	str	r0, [sp, #8]
 80082ee:	463a      	mov	r2, r7
 80082f0:	4640      	mov	r0, r8
 80082f2:	4798      	blx	r3
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	6123      	str	r3, [r4, #16]
 80082fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082fe:	fa5f fa8a 	uxtb.w	sl, sl
 8008302:	f1ba 0f02 	cmp.w	sl, #2
 8008306:	d1ec      	bne.n	80082e2 <_scanf_float+0x2c6>
 8008308:	3d03      	subs	r5, #3
 800830a:	b2ed      	uxtb	r5, r5
 800830c:	1b76      	subs	r6, r6, r5
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	05da      	lsls	r2, r3, #23
 8008312:	d52f      	bpl.n	8008374 <_scanf_float+0x358>
 8008314:	055b      	lsls	r3, r3, #21
 8008316:	d510      	bpl.n	800833a <_scanf_float+0x31e>
 8008318:	455e      	cmp	r6, fp
 800831a:	f67f aebf 	bls.w	800809c <_scanf_float+0x80>
 800831e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008326:	463a      	mov	r2, r7
 8008328:	4640      	mov	r0, r8
 800832a:	4798      	blx	r3
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	3b01      	subs	r3, #1
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	e7f1      	b.n	8008318 <_scanf_float+0x2fc>
 8008334:	46aa      	mov	sl, r5
 8008336:	9602      	str	r6, [sp, #8]
 8008338:	e7df      	b.n	80082fa <_scanf_float+0x2de>
 800833a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	2965      	cmp	r1, #101	; 0x65
 8008342:	f103 33ff 	add.w	r3, r3, #4294967295
 8008346:	f106 35ff 	add.w	r5, r6, #4294967295
 800834a:	6123      	str	r3, [r4, #16]
 800834c:	d00c      	beq.n	8008368 <_scanf_float+0x34c>
 800834e:	2945      	cmp	r1, #69	; 0x45
 8008350:	d00a      	beq.n	8008368 <_scanf_float+0x34c>
 8008352:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008356:	463a      	mov	r2, r7
 8008358:	4640      	mov	r0, r8
 800835a:	4798      	blx	r3
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008362:	3b01      	subs	r3, #1
 8008364:	1eb5      	subs	r5, r6, #2
 8008366:	6123      	str	r3, [r4, #16]
 8008368:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800836c:	463a      	mov	r2, r7
 800836e:	4640      	mov	r0, r8
 8008370:	4798      	blx	r3
 8008372:	462e      	mov	r6, r5
 8008374:	6825      	ldr	r5, [r4, #0]
 8008376:	f015 0510 	ands.w	r5, r5, #16
 800837a:	d158      	bne.n	800842e <_scanf_float+0x412>
 800837c:	7035      	strb	r5, [r6, #0]
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008388:	d11c      	bne.n	80083c4 <_scanf_float+0x3a8>
 800838a:	9b01      	ldr	r3, [sp, #4]
 800838c:	454b      	cmp	r3, r9
 800838e:	eba3 0209 	sub.w	r2, r3, r9
 8008392:	d124      	bne.n	80083de <_scanf_float+0x3c2>
 8008394:	2200      	movs	r2, #0
 8008396:	4659      	mov	r1, fp
 8008398:	4640      	mov	r0, r8
 800839a:	f002 fb79 	bl	800aa90 <_strtod_r>
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	6821      	ldr	r1, [r4, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f011 0f02 	tst.w	r1, #2
 80083a8:	ec57 6b10 	vmov	r6, r7, d0
 80083ac:	f103 0204 	add.w	r2, r3, #4
 80083b0:	d020      	beq.n	80083f4 <_scanf_float+0x3d8>
 80083b2:	9903      	ldr	r1, [sp, #12]
 80083b4:	600a      	str	r2, [r1, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	e9c3 6700 	strd	r6, r7, [r3]
 80083bc:	68e3      	ldr	r3, [r4, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60e3      	str	r3, [r4, #12]
 80083c2:	e66c      	b.n	800809e <_scanf_float+0x82>
 80083c4:	9b04      	ldr	r3, [sp, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0e4      	beq.n	8008394 <_scanf_float+0x378>
 80083ca:	9905      	ldr	r1, [sp, #20]
 80083cc:	230a      	movs	r3, #10
 80083ce:	462a      	mov	r2, r5
 80083d0:	3101      	adds	r1, #1
 80083d2:	4640      	mov	r0, r8
 80083d4:	f002 fbe4 	bl	800aba0 <_strtol_r>
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	9e05      	ldr	r6, [sp, #20]
 80083dc:	1ac2      	subs	r2, r0, r3
 80083de:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80083e2:	429e      	cmp	r6, r3
 80083e4:	bf28      	it	cs
 80083e6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80083ea:	4912      	ldr	r1, [pc, #72]	; (8008434 <_scanf_float+0x418>)
 80083ec:	4630      	mov	r0, r6
 80083ee:	f000 f8d5 	bl	800859c <siprintf>
 80083f2:	e7cf      	b.n	8008394 <_scanf_float+0x378>
 80083f4:	f011 0f04 	tst.w	r1, #4
 80083f8:	9903      	ldr	r1, [sp, #12]
 80083fa:	600a      	str	r2, [r1, #0]
 80083fc:	d1db      	bne.n	80083b6 <_scanf_float+0x39a>
 80083fe:	f8d3 8000 	ldr.w	r8, [r3]
 8008402:	ee10 2a10 	vmov	r2, s0
 8008406:	ee10 0a10 	vmov	r0, s0
 800840a:	463b      	mov	r3, r7
 800840c:	4639      	mov	r1, r7
 800840e:	f7f8 fb95 	bl	8000b3c <__aeabi_dcmpun>
 8008412:	b128      	cbz	r0, 8008420 <_scanf_float+0x404>
 8008414:	4808      	ldr	r0, [pc, #32]	; (8008438 <_scanf_float+0x41c>)
 8008416:	f000 f9b3 	bl	8008780 <nanf>
 800841a:	ed88 0a00 	vstr	s0, [r8]
 800841e:	e7cd      	b.n	80083bc <_scanf_float+0x3a0>
 8008420:	4630      	mov	r0, r6
 8008422:	4639      	mov	r1, r7
 8008424:	f7f8 fbe8 	bl	8000bf8 <__aeabi_d2f>
 8008428:	f8c8 0000 	str.w	r0, [r8]
 800842c:	e7c6      	b.n	80083bc <_scanf_float+0x3a0>
 800842e:	2500      	movs	r5, #0
 8008430:	e635      	b.n	800809e <_scanf_float+0x82>
 8008432:	bf00      	nop
 8008434:	0800bec0 	.word	0x0800bec0
 8008438:	0800c255 	.word	0x0800c255

0800843c <std>:
 800843c:	2300      	movs	r3, #0
 800843e:	b510      	push	{r4, lr}
 8008440:	4604      	mov	r4, r0
 8008442:	e9c0 3300 	strd	r3, r3, [r0]
 8008446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800844a:	6083      	str	r3, [r0, #8]
 800844c:	8181      	strh	r1, [r0, #12]
 800844e:	6643      	str	r3, [r0, #100]	; 0x64
 8008450:	81c2      	strh	r2, [r0, #14]
 8008452:	6183      	str	r3, [r0, #24]
 8008454:	4619      	mov	r1, r3
 8008456:	2208      	movs	r2, #8
 8008458:	305c      	adds	r0, #92	; 0x5c
 800845a:	f000 f902 	bl	8008662 <memset>
 800845e:	4b05      	ldr	r3, [pc, #20]	; (8008474 <std+0x38>)
 8008460:	6263      	str	r3, [r4, #36]	; 0x24
 8008462:	4b05      	ldr	r3, [pc, #20]	; (8008478 <std+0x3c>)
 8008464:	62a3      	str	r3, [r4, #40]	; 0x28
 8008466:	4b05      	ldr	r3, [pc, #20]	; (800847c <std+0x40>)
 8008468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800846a:	4b05      	ldr	r3, [pc, #20]	; (8008480 <std+0x44>)
 800846c:	6224      	str	r4, [r4, #32]
 800846e:	6323      	str	r3, [r4, #48]	; 0x30
 8008470:	bd10      	pop	{r4, pc}
 8008472:	bf00      	nop
 8008474:	080085dd 	.word	0x080085dd
 8008478:	080085ff 	.word	0x080085ff
 800847c:	08008637 	.word	0x08008637
 8008480:	0800865b 	.word	0x0800865b

08008484 <stdio_exit_handler>:
 8008484:	4a02      	ldr	r2, [pc, #8]	; (8008490 <stdio_exit_handler+0xc>)
 8008486:	4903      	ldr	r1, [pc, #12]	; (8008494 <stdio_exit_handler+0x10>)
 8008488:	4803      	ldr	r0, [pc, #12]	; (8008498 <stdio_exit_handler+0x14>)
 800848a:	f000 b869 	b.w	8008560 <_fwalk_sglue>
 800848e:	bf00      	nop
 8008490:	2000000c 	.word	0x2000000c
 8008494:	0800af61 	.word	0x0800af61
 8008498:	20000018 	.word	0x20000018

0800849c <cleanup_stdio>:
 800849c:	6841      	ldr	r1, [r0, #4]
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <cleanup_stdio+0x34>)
 80084a0:	4299      	cmp	r1, r3
 80084a2:	b510      	push	{r4, lr}
 80084a4:	4604      	mov	r4, r0
 80084a6:	d001      	beq.n	80084ac <cleanup_stdio+0x10>
 80084a8:	f002 fd5a 	bl	800af60 <_fflush_r>
 80084ac:	68a1      	ldr	r1, [r4, #8]
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <cleanup_stdio+0x38>)
 80084b0:	4299      	cmp	r1, r3
 80084b2:	d002      	beq.n	80084ba <cleanup_stdio+0x1e>
 80084b4:	4620      	mov	r0, r4
 80084b6:	f002 fd53 	bl	800af60 <_fflush_r>
 80084ba:	68e1      	ldr	r1, [r4, #12]
 80084bc:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <cleanup_stdio+0x3c>)
 80084be:	4299      	cmp	r1, r3
 80084c0:	d004      	beq.n	80084cc <cleanup_stdio+0x30>
 80084c2:	4620      	mov	r0, r4
 80084c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c8:	f002 bd4a 	b.w	800af60 <_fflush_r>
 80084cc:	bd10      	pop	{r4, pc}
 80084ce:	bf00      	nop
 80084d0:	20001404 	.word	0x20001404
 80084d4:	2000146c 	.word	0x2000146c
 80084d8:	200014d4 	.word	0x200014d4

080084dc <global_stdio_init.part.0>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	4b0b      	ldr	r3, [pc, #44]	; (800850c <global_stdio_init.part.0+0x30>)
 80084e0:	4c0b      	ldr	r4, [pc, #44]	; (8008510 <global_stdio_init.part.0+0x34>)
 80084e2:	4a0c      	ldr	r2, [pc, #48]	; (8008514 <global_stdio_init.part.0+0x38>)
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	4620      	mov	r0, r4
 80084e8:	2200      	movs	r2, #0
 80084ea:	2104      	movs	r1, #4
 80084ec:	f7ff ffa6 	bl	800843c <std>
 80084f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80084f4:	2201      	movs	r2, #1
 80084f6:	2109      	movs	r1, #9
 80084f8:	f7ff ffa0 	bl	800843c <std>
 80084fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008500:	2202      	movs	r2, #2
 8008502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008506:	2112      	movs	r1, #18
 8008508:	f7ff bf98 	b.w	800843c <std>
 800850c:	2000153c 	.word	0x2000153c
 8008510:	20001404 	.word	0x20001404
 8008514:	08008485 	.word	0x08008485

08008518 <__sfp_lock_acquire>:
 8008518:	4801      	ldr	r0, [pc, #4]	; (8008520 <__sfp_lock_acquire+0x8>)
 800851a:	f000 b92f 	b.w	800877c <__retarget_lock_acquire_recursive>
 800851e:	bf00      	nop
 8008520:	20001545 	.word	0x20001545

08008524 <__sfp_lock_release>:
 8008524:	4801      	ldr	r0, [pc, #4]	; (800852c <__sfp_lock_release+0x8>)
 8008526:	f000 b92a 	b.w	800877e <__retarget_lock_release_recursive>
 800852a:	bf00      	nop
 800852c:	20001545 	.word	0x20001545

08008530 <__sinit>:
 8008530:	b510      	push	{r4, lr}
 8008532:	4604      	mov	r4, r0
 8008534:	f7ff fff0 	bl	8008518 <__sfp_lock_acquire>
 8008538:	6a23      	ldr	r3, [r4, #32]
 800853a:	b11b      	cbz	r3, 8008544 <__sinit+0x14>
 800853c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008540:	f7ff bff0 	b.w	8008524 <__sfp_lock_release>
 8008544:	4b04      	ldr	r3, [pc, #16]	; (8008558 <__sinit+0x28>)
 8008546:	6223      	str	r3, [r4, #32]
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <__sinit+0x2c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1f5      	bne.n	800853c <__sinit+0xc>
 8008550:	f7ff ffc4 	bl	80084dc <global_stdio_init.part.0>
 8008554:	e7f2      	b.n	800853c <__sinit+0xc>
 8008556:	bf00      	nop
 8008558:	0800849d 	.word	0x0800849d
 800855c:	2000153c 	.word	0x2000153c

08008560 <_fwalk_sglue>:
 8008560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008564:	4607      	mov	r7, r0
 8008566:	4688      	mov	r8, r1
 8008568:	4614      	mov	r4, r2
 800856a:	2600      	movs	r6, #0
 800856c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008570:	f1b9 0901 	subs.w	r9, r9, #1
 8008574:	d505      	bpl.n	8008582 <_fwalk_sglue+0x22>
 8008576:	6824      	ldr	r4, [r4, #0]
 8008578:	2c00      	cmp	r4, #0
 800857a:	d1f7      	bne.n	800856c <_fwalk_sglue+0xc>
 800857c:	4630      	mov	r0, r6
 800857e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008582:	89ab      	ldrh	r3, [r5, #12]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d907      	bls.n	8008598 <_fwalk_sglue+0x38>
 8008588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800858c:	3301      	adds	r3, #1
 800858e:	d003      	beq.n	8008598 <_fwalk_sglue+0x38>
 8008590:	4629      	mov	r1, r5
 8008592:	4638      	mov	r0, r7
 8008594:	47c0      	blx	r8
 8008596:	4306      	orrs	r6, r0
 8008598:	3568      	adds	r5, #104	; 0x68
 800859a:	e7e9      	b.n	8008570 <_fwalk_sglue+0x10>

0800859c <siprintf>:
 800859c:	b40e      	push	{r1, r2, r3}
 800859e:	b500      	push	{lr}
 80085a0:	b09c      	sub	sp, #112	; 0x70
 80085a2:	ab1d      	add	r3, sp, #116	; 0x74
 80085a4:	9002      	str	r0, [sp, #8]
 80085a6:	9006      	str	r0, [sp, #24]
 80085a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085ac:	4809      	ldr	r0, [pc, #36]	; (80085d4 <siprintf+0x38>)
 80085ae:	9107      	str	r1, [sp, #28]
 80085b0:	9104      	str	r1, [sp, #16]
 80085b2:	4909      	ldr	r1, [pc, #36]	; (80085d8 <siprintf+0x3c>)
 80085b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b8:	9105      	str	r1, [sp, #20]
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	a902      	add	r1, sp, #8
 80085c0:	f002 fb4a 	bl	800ac58 <_svfiprintf_r>
 80085c4:	9b02      	ldr	r3, [sp, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	b01c      	add	sp, #112	; 0x70
 80085cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085d0:	b003      	add	sp, #12
 80085d2:	4770      	bx	lr
 80085d4:	20000064 	.word	0x20000064
 80085d8:	ffff0208 	.word	0xffff0208

080085dc <__sread>:
 80085dc:	b510      	push	{r4, lr}
 80085de:	460c      	mov	r4, r1
 80085e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e4:	f000 f86c 	bl	80086c0 <_read_r>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	bfab      	itete	ge
 80085ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085ee:	89a3      	ldrhlt	r3, [r4, #12]
 80085f0:	181b      	addge	r3, r3, r0
 80085f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085f6:	bfac      	ite	ge
 80085f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80085fa:	81a3      	strhlt	r3, [r4, #12]
 80085fc:	bd10      	pop	{r4, pc}

080085fe <__swrite>:
 80085fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008602:	461f      	mov	r7, r3
 8008604:	898b      	ldrh	r3, [r1, #12]
 8008606:	05db      	lsls	r3, r3, #23
 8008608:	4605      	mov	r5, r0
 800860a:	460c      	mov	r4, r1
 800860c:	4616      	mov	r6, r2
 800860e:	d505      	bpl.n	800861c <__swrite+0x1e>
 8008610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008614:	2302      	movs	r3, #2
 8008616:	2200      	movs	r2, #0
 8008618:	f000 f840 	bl	800869c <_lseek_r>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	4632      	mov	r2, r6
 800862a:	463b      	mov	r3, r7
 800862c:	4628      	mov	r0, r5
 800862e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008632:	f000 b867 	b.w	8008704 <_write_r>

08008636 <__sseek>:
 8008636:	b510      	push	{r4, lr}
 8008638:	460c      	mov	r4, r1
 800863a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800863e:	f000 f82d 	bl	800869c <_lseek_r>
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	bf15      	itete	ne
 8008648:	6560      	strne	r0, [r4, #84]	; 0x54
 800864a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800864e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008652:	81a3      	strheq	r3, [r4, #12]
 8008654:	bf18      	it	ne
 8008656:	81a3      	strhne	r3, [r4, #12]
 8008658:	bd10      	pop	{r4, pc}

0800865a <__sclose>:
 800865a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800865e:	f000 b80d 	b.w	800867c <_close_r>

08008662 <memset>:
 8008662:	4402      	add	r2, r0
 8008664:	4603      	mov	r3, r0
 8008666:	4293      	cmp	r3, r2
 8008668:	d100      	bne.n	800866c <memset+0xa>
 800866a:	4770      	bx	lr
 800866c:	f803 1b01 	strb.w	r1, [r3], #1
 8008670:	e7f9      	b.n	8008666 <memset+0x4>
	...

08008674 <_localeconv_r>:
 8008674:	4800      	ldr	r0, [pc, #0]	; (8008678 <_localeconv_r+0x4>)
 8008676:	4770      	bx	lr
 8008678:	20000158 	.word	0x20000158

0800867c <_close_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d06      	ldr	r5, [pc, #24]	; (8008698 <_close_r+0x1c>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7f9 f849 	bl	800171e <_close>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_close_r+0x1a>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_close_r+0x1a>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	20001540 	.word	0x20001540

0800869c <_lseek_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4d07      	ldr	r5, [pc, #28]	; (80086bc <_lseek_r+0x20>)
 80086a0:	4604      	mov	r4, r0
 80086a2:	4608      	mov	r0, r1
 80086a4:	4611      	mov	r1, r2
 80086a6:	2200      	movs	r2, #0
 80086a8:	602a      	str	r2, [r5, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	f7f9 f85e 	bl	800176c <_lseek>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_lseek_r+0x1e>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_lseek_r+0x1e>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	20001540 	.word	0x20001540

080086c0 <_read_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d07      	ldr	r5, [pc, #28]	; (80086e0 <_read_r+0x20>)
 80086c4:	4604      	mov	r4, r0
 80086c6:	4608      	mov	r0, r1
 80086c8:	4611      	mov	r1, r2
 80086ca:	2200      	movs	r2, #0
 80086cc:	602a      	str	r2, [r5, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	f7f8 ffec 	bl	80016ac <_read>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d102      	bne.n	80086de <_read_r+0x1e>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	b103      	cbz	r3, 80086de <_read_r+0x1e>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	20001540 	.word	0x20001540

080086e4 <_sbrk_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d06      	ldr	r5, [pc, #24]	; (8008700 <_sbrk_r+0x1c>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	602b      	str	r3, [r5, #0]
 80086f0:	f7f9 f84a 	bl	8001788 <_sbrk>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_sbrk_r+0x1a>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_sbrk_r+0x1a>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	20001540 	.word	0x20001540

08008704 <_write_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4d07      	ldr	r5, [pc, #28]	; (8008724 <_write_r+0x20>)
 8008708:	4604      	mov	r4, r0
 800870a:	4608      	mov	r0, r1
 800870c:	4611      	mov	r1, r2
 800870e:	2200      	movs	r2, #0
 8008710:	602a      	str	r2, [r5, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	f7f8 ffe7 	bl	80016e6 <_write>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_write_r+0x1e>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_write_r+0x1e>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	20001540 	.word	0x20001540

08008728 <__errno>:
 8008728:	4b01      	ldr	r3, [pc, #4]	; (8008730 <__errno+0x8>)
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20000064 	.word	0x20000064

08008734 <__libc_init_array>:
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	4d0d      	ldr	r5, [pc, #52]	; (800876c <__libc_init_array+0x38>)
 8008738:	4c0d      	ldr	r4, [pc, #52]	; (8008770 <__libc_init_array+0x3c>)
 800873a:	1b64      	subs	r4, r4, r5
 800873c:	10a4      	asrs	r4, r4, #2
 800873e:	2600      	movs	r6, #0
 8008740:	42a6      	cmp	r6, r4
 8008742:	d109      	bne.n	8008758 <__libc_init_array+0x24>
 8008744:	4d0b      	ldr	r5, [pc, #44]	; (8008774 <__libc_init_array+0x40>)
 8008746:	4c0c      	ldr	r4, [pc, #48]	; (8008778 <__libc_init_array+0x44>)
 8008748:	f003 fb12 	bl	800bd70 <_init>
 800874c:	1b64      	subs	r4, r4, r5
 800874e:	10a4      	asrs	r4, r4, #2
 8008750:	2600      	movs	r6, #0
 8008752:	42a6      	cmp	r6, r4
 8008754:	d105      	bne.n	8008762 <__libc_init_array+0x2e>
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	f855 3b04 	ldr.w	r3, [r5], #4
 800875c:	4798      	blx	r3
 800875e:	3601      	adds	r6, #1
 8008760:	e7ee      	b.n	8008740 <__libc_init_array+0xc>
 8008762:	f855 3b04 	ldr.w	r3, [r5], #4
 8008766:	4798      	blx	r3
 8008768:	3601      	adds	r6, #1
 800876a:	e7f2      	b.n	8008752 <__libc_init_array+0x1e>
 800876c:	0800c2c0 	.word	0x0800c2c0
 8008770:	0800c2c0 	.word	0x0800c2c0
 8008774:	0800c2c0 	.word	0x0800c2c0
 8008778:	0800c2c4 	.word	0x0800c2c4

0800877c <__retarget_lock_acquire_recursive>:
 800877c:	4770      	bx	lr

0800877e <__retarget_lock_release_recursive>:
 800877e:	4770      	bx	lr

08008780 <nanf>:
 8008780:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008788 <nanf+0x8>
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	7fc00000 	.word	0x7fc00000

0800878c <quorem>:
 800878c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	6903      	ldr	r3, [r0, #16]
 8008792:	690c      	ldr	r4, [r1, #16]
 8008794:	42a3      	cmp	r3, r4
 8008796:	4607      	mov	r7, r0
 8008798:	db7e      	blt.n	8008898 <quorem+0x10c>
 800879a:	3c01      	subs	r4, #1
 800879c:	f101 0814 	add.w	r8, r1, #20
 80087a0:	f100 0514 	add.w	r5, r0, #20
 80087a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087b2:	3301      	adds	r3, #1
 80087b4:	429a      	cmp	r2, r3
 80087b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087be:	fbb2 f6f3 	udiv	r6, r2, r3
 80087c2:	d331      	bcc.n	8008828 <quorem+0x9c>
 80087c4:	f04f 0e00 	mov.w	lr, #0
 80087c8:	4640      	mov	r0, r8
 80087ca:	46ac      	mov	ip, r5
 80087cc:	46f2      	mov	sl, lr
 80087ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80087d2:	b293      	uxth	r3, r2
 80087d4:	fb06 e303 	mla	r3, r6, r3, lr
 80087d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087dc:	0c1a      	lsrs	r2, r3, #16
 80087de:	b29b      	uxth	r3, r3
 80087e0:	ebaa 0303 	sub.w	r3, sl, r3
 80087e4:	f8dc a000 	ldr.w	sl, [ip]
 80087e8:	fa13 f38a 	uxtah	r3, r3, sl
 80087ec:	fb06 220e 	mla	r2, r6, lr, r2
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	9b00      	ldr	r3, [sp, #0]
 80087f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087f8:	b292      	uxth	r2, r2
 80087fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80087fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008802:	f8bd 3000 	ldrh.w	r3, [sp]
 8008806:	4581      	cmp	r9, r0
 8008808:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800880c:	f84c 3b04 	str.w	r3, [ip], #4
 8008810:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008814:	d2db      	bcs.n	80087ce <quorem+0x42>
 8008816:	f855 300b 	ldr.w	r3, [r5, fp]
 800881a:	b92b      	cbnz	r3, 8008828 <quorem+0x9c>
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	3b04      	subs	r3, #4
 8008820:	429d      	cmp	r5, r3
 8008822:	461a      	mov	r2, r3
 8008824:	d32c      	bcc.n	8008880 <quorem+0xf4>
 8008826:	613c      	str	r4, [r7, #16]
 8008828:	4638      	mov	r0, r7
 800882a:	f001 f93d 	bl	8009aa8 <__mcmp>
 800882e:	2800      	cmp	r0, #0
 8008830:	db22      	blt.n	8008878 <quorem+0xec>
 8008832:	3601      	adds	r6, #1
 8008834:	4629      	mov	r1, r5
 8008836:	2000      	movs	r0, #0
 8008838:	f858 2b04 	ldr.w	r2, [r8], #4
 800883c:	f8d1 c000 	ldr.w	ip, [r1]
 8008840:	b293      	uxth	r3, r2
 8008842:	1ac3      	subs	r3, r0, r3
 8008844:	0c12      	lsrs	r2, r2, #16
 8008846:	fa13 f38c 	uxtah	r3, r3, ip
 800884a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800884e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008852:	b29b      	uxth	r3, r3
 8008854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008858:	45c1      	cmp	r9, r8
 800885a:	f841 3b04 	str.w	r3, [r1], #4
 800885e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008862:	d2e9      	bcs.n	8008838 <quorem+0xac>
 8008864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008868:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800886c:	b922      	cbnz	r2, 8008878 <quorem+0xec>
 800886e:	3b04      	subs	r3, #4
 8008870:	429d      	cmp	r5, r3
 8008872:	461a      	mov	r2, r3
 8008874:	d30a      	bcc.n	800888c <quorem+0x100>
 8008876:	613c      	str	r4, [r7, #16]
 8008878:	4630      	mov	r0, r6
 800887a:	b003      	add	sp, #12
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	6812      	ldr	r2, [r2, #0]
 8008882:	3b04      	subs	r3, #4
 8008884:	2a00      	cmp	r2, #0
 8008886:	d1ce      	bne.n	8008826 <quorem+0x9a>
 8008888:	3c01      	subs	r4, #1
 800888a:	e7c9      	b.n	8008820 <quorem+0x94>
 800888c:	6812      	ldr	r2, [r2, #0]
 800888e:	3b04      	subs	r3, #4
 8008890:	2a00      	cmp	r2, #0
 8008892:	d1f0      	bne.n	8008876 <quorem+0xea>
 8008894:	3c01      	subs	r4, #1
 8008896:	e7eb      	b.n	8008870 <quorem+0xe4>
 8008898:	2000      	movs	r0, #0
 800889a:	e7ee      	b.n	800887a <quorem+0xee>
 800889c:	0000      	movs	r0, r0
	...

080088a0 <_dtoa_r>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	ed2d 8b04 	vpush	{d8-d9}
 80088a8:	69c5      	ldr	r5, [r0, #28]
 80088aa:	b093      	sub	sp, #76	; 0x4c
 80088ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088b0:	ec57 6b10 	vmov	r6, r7, d0
 80088b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088b8:	9107      	str	r1, [sp, #28]
 80088ba:	4604      	mov	r4, r0
 80088bc:	920a      	str	r2, [sp, #40]	; 0x28
 80088be:	930d      	str	r3, [sp, #52]	; 0x34
 80088c0:	b975      	cbnz	r5, 80088e0 <_dtoa_r+0x40>
 80088c2:	2010      	movs	r0, #16
 80088c4:	f7fe fe90 	bl	80075e8 <malloc>
 80088c8:	4602      	mov	r2, r0
 80088ca:	61e0      	str	r0, [r4, #28]
 80088cc:	b920      	cbnz	r0, 80088d8 <_dtoa_r+0x38>
 80088ce:	4bae      	ldr	r3, [pc, #696]	; (8008b88 <_dtoa_r+0x2e8>)
 80088d0:	21ef      	movs	r1, #239	; 0xef
 80088d2:	48ae      	ldr	r0, [pc, #696]	; (8008b8c <_dtoa_r+0x2ec>)
 80088d4:	f002 fbb0 	bl	800b038 <__assert_func>
 80088d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088dc:	6005      	str	r5, [r0, #0]
 80088de:	60c5      	str	r5, [r0, #12]
 80088e0:	69e3      	ldr	r3, [r4, #28]
 80088e2:	6819      	ldr	r1, [r3, #0]
 80088e4:	b151      	cbz	r1, 80088fc <_dtoa_r+0x5c>
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	604a      	str	r2, [r1, #4]
 80088ea:	2301      	movs	r3, #1
 80088ec:	4093      	lsls	r3, r2
 80088ee:	608b      	str	r3, [r1, #8]
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fe53 	bl	800959c <_Bfree>
 80088f6:	69e3      	ldr	r3, [r4, #28]
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	1e3b      	subs	r3, r7, #0
 80088fe:	bfbb      	ittet	lt
 8008900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008904:	9303      	strlt	r3, [sp, #12]
 8008906:	2300      	movge	r3, #0
 8008908:	2201      	movlt	r2, #1
 800890a:	bfac      	ite	ge
 800890c:	f8c8 3000 	strge.w	r3, [r8]
 8008910:	f8c8 2000 	strlt.w	r2, [r8]
 8008914:	4b9e      	ldr	r3, [pc, #632]	; (8008b90 <_dtoa_r+0x2f0>)
 8008916:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800891a:	ea33 0308 	bics.w	r3, r3, r8
 800891e:	d11b      	bne.n	8008958 <_dtoa_r+0xb8>
 8008920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008922:	f242 730f 	movw	r3, #9999	; 0x270f
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800892c:	4333      	orrs	r3, r6
 800892e:	f000 8593 	beq.w	8009458 <_dtoa_r+0xbb8>
 8008932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008934:	b963      	cbnz	r3, 8008950 <_dtoa_r+0xb0>
 8008936:	4b97      	ldr	r3, [pc, #604]	; (8008b94 <_dtoa_r+0x2f4>)
 8008938:	e027      	b.n	800898a <_dtoa_r+0xea>
 800893a:	4b97      	ldr	r3, [pc, #604]	; (8008b98 <_dtoa_r+0x2f8>)
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	9800      	ldr	r0, [sp, #0]
 8008946:	b013      	add	sp, #76	; 0x4c
 8008948:	ecbd 8b04 	vpop	{d8-d9}
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	4b90      	ldr	r3, [pc, #576]	; (8008b94 <_dtoa_r+0x2f4>)
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	3303      	adds	r3, #3
 8008956:	e7f3      	b.n	8008940 <_dtoa_r+0xa0>
 8008958:	ed9d 7b02 	vldr	d7, [sp, #8]
 800895c:	2200      	movs	r2, #0
 800895e:	ec51 0b17 	vmov	r0, r1, d7
 8008962:	eeb0 8a47 	vmov.f32	s16, s14
 8008966:	eef0 8a67 	vmov.f32	s17, s15
 800896a:	2300      	movs	r3, #0
 800896c:	f7f8 f8b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008970:	4681      	mov	r9, r0
 8008972:	b160      	cbz	r0, 800898e <_dtoa_r+0xee>
 8008974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008976:	2301      	movs	r3, #1
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8568 	beq.w	8009452 <_dtoa_r+0xbb2>
 8008982:	4b86      	ldr	r3, [pc, #536]	; (8008b9c <_dtoa_r+0x2fc>)
 8008984:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	3b01      	subs	r3, #1
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	e7da      	b.n	8008944 <_dtoa_r+0xa4>
 800898e:	aa10      	add	r2, sp, #64	; 0x40
 8008990:	a911      	add	r1, sp, #68	; 0x44
 8008992:	4620      	mov	r0, r4
 8008994:	eeb0 0a48 	vmov.f32	s0, s16
 8008998:	eef0 0a68 	vmov.f32	s1, s17
 800899c:	f001 f99a 	bl	8009cd4 <__d2b>
 80089a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80089a4:	4682      	mov	sl, r0
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	d07f      	beq.n	8008aaa <_dtoa_r+0x20a>
 80089aa:	ee18 3a90 	vmov	r3, s17
 80089ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80089b6:	ec51 0b18 	vmov	r0, r1, d8
 80089ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80089be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80089c6:	4619      	mov	r1, r3
 80089c8:	2200      	movs	r2, #0
 80089ca:	4b75      	ldr	r3, [pc, #468]	; (8008ba0 <_dtoa_r+0x300>)
 80089cc:	f7f7 fc64 	bl	8000298 <__aeabi_dsub>
 80089d0:	a367      	add	r3, pc, #412	; (adr r3, 8008b70 <_dtoa_r+0x2d0>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fe17 	bl	8000608 <__aeabi_dmul>
 80089da:	a367      	add	r3, pc, #412	; (adr r3, 8008b78 <_dtoa_r+0x2d8>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 fc5c 	bl	800029c <__adddf3>
 80089e4:	4606      	mov	r6, r0
 80089e6:	4628      	mov	r0, r5
 80089e8:	460f      	mov	r7, r1
 80089ea:	f7f7 fda3 	bl	8000534 <__aeabi_i2d>
 80089ee:	a364      	add	r3, pc, #400	; (adr r3, 8008b80 <_dtoa_r+0x2e0>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	f7f7 fe08 	bl	8000608 <__aeabi_dmul>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f7 fc4c 	bl	800029c <__adddf3>
 8008a04:	4606      	mov	r6, r0
 8008a06:	460f      	mov	r7, r1
 8008a08:	f7f8 f8ae 	bl	8000b68 <__aeabi_d2iz>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4683      	mov	fp, r0
 8008a10:	2300      	movs	r3, #0
 8008a12:	4630      	mov	r0, r6
 8008a14:	4639      	mov	r1, r7
 8008a16:	f7f8 f869 	bl	8000aec <__aeabi_dcmplt>
 8008a1a:	b148      	cbz	r0, 8008a30 <_dtoa_r+0x190>
 8008a1c:	4658      	mov	r0, fp
 8008a1e:	f7f7 fd89 	bl	8000534 <__aeabi_i2d>
 8008a22:	4632      	mov	r2, r6
 8008a24:	463b      	mov	r3, r7
 8008a26:	f7f8 f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a2a:	b908      	cbnz	r0, 8008a30 <_dtoa_r+0x190>
 8008a2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a30:	f1bb 0f16 	cmp.w	fp, #22
 8008a34:	d857      	bhi.n	8008ae6 <_dtoa_r+0x246>
 8008a36:	4b5b      	ldr	r3, [pc, #364]	; (8008ba4 <_dtoa_r+0x304>)
 8008a38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	ec51 0b18 	vmov	r0, r1, d8
 8008a44:	f7f8 f852 	bl	8000aec <__aeabi_dcmplt>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d04e      	beq.n	8008aea <_dtoa_r+0x24a>
 8008a4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a50:	2300      	movs	r3, #0
 8008a52:	930c      	str	r3, [sp, #48]	; 0x30
 8008a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a56:	1b5b      	subs	r3, r3, r5
 8008a58:	1e5a      	subs	r2, r3, #1
 8008a5a:	bf45      	ittet	mi
 8008a5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008a60:	9305      	strmi	r3, [sp, #20]
 8008a62:	2300      	movpl	r3, #0
 8008a64:	2300      	movmi	r3, #0
 8008a66:	9206      	str	r2, [sp, #24]
 8008a68:	bf54      	ite	pl
 8008a6a:	9305      	strpl	r3, [sp, #20]
 8008a6c:	9306      	strmi	r3, [sp, #24]
 8008a6e:	f1bb 0f00 	cmp.w	fp, #0
 8008a72:	db3c      	blt.n	8008aee <_dtoa_r+0x24e>
 8008a74:	9b06      	ldr	r3, [sp, #24]
 8008a76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008a7a:	445b      	add	r3, fp
 8008a7c:	9306      	str	r3, [sp, #24]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9308      	str	r3, [sp, #32]
 8008a82:	9b07      	ldr	r3, [sp, #28]
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	d868      	bhi.n	8008b5a <_dtoa_r+0x2ba>
 8008a88:	2b05      	cmp	r3, #5
 8008a8a:	bfc4      	itt	gt
 8008a8c:	3b04      	subgt	r3, #4
 8008a8e:	9307      	strgt	r3, [sp, #28]
 8008a90:	9b07      	ldr	r3, [sp, #28]
 8008a92:	f1a3 0302 	sub.w	r3, r3, #2
 8008a96:	bfcc      	ite	gt
 8008a98:	2500      	movgt	r5, #0
 8008a9a:	2501      	movle	r5, #1
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	f200 8085 	bhi.w	8008bac <_dtoa_r+0x30c>
 8008aa2:	e8df f003 	tbb	[pc, r3]
 8008aa6:	3b2e      	.short	0x3b2e
 8008aa8:	5839      	.short	0x5839
 8008aaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008aae:	441d      	add	r5, r3
 8008ab0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ab4:	2b20      	cmp	r3, #32
 8008ab6:	bfc1      	itttt	gt
 8008ab8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008abc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ac0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ac4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ac8:	bfd6      	itet	le
 8008aca:	f1c3 0320 	rsble	r3, r3, #32
 8008ace:	ea48 0003 	orrgt.w	r0, r8, r3
 8008ad2:	fa06 f003 	lslle.w	r0, r6, r3
 8008ad6:	f7f7 fd1d 	bl	8000514 <__aeabi_ui2d>
 8008ada:	2201      	movs	r2, #1
 8008adc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ae0:	3d01      	subs	r5, #1
 8008ae2:	920e      	str	r2, [sp, #56]	; 0x38
 8008ae4:	e76f      	b.n	80089c6 <_dtoa_r+0x126>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e7b3      	b.n	8008a52 <_dtoa_r+0x1b2>
 8008aea:	900c      	str	r0, [sp, #48]	; 0x30
 8008aec:	e7b2      	b.n	8008a54 <_dtoa_r+0x1b4>
 8008aee:	9b05      	ldr	r3, [sp, #20]
 8008af0:	eba3 030b 	sub.w	r3, r3, fp
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	f1cb 0300 	rsb	r3, fp, #0
 8008afa:	9308      	str	r3, [sp, #32]
 8008afc:	2300      	movs	r3, #0
 8008afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b00:	e7bf      	b.n	8008a82 <_dtoa_r+0x1e2>
 8008b02:	2300      	movs	r3, #0
 8008b04:	9309      	str	r3, [sp, #36]	; 0x24
 8008b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc52      	bgt.n	8008bb2 <_dtoa_r+0x312>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	461a      	mov	r2, r3
 8008b14:	920a      	str	r2, [sp, #40]	; 0x28
 8008b16:	e00b      	b.n	8008b30 <_dtoa_r+0x290>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e7f3      	b.n	8008b04 <_dtoa_r+0x264>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b22:	445b      	add	r3, fp
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	3301      	adds	r3, #1
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	bfb8      	it	lt
 8008b2e:	2301      	movlt	r3, #1
 8008b30:	69e0      	ldr	r0, [r4, #28]
 8008b32:	2100      	movs	r1, #0
 8008b34:	2204      	movs	r2, #4
 8008b36:	f102 0614 	add.w	r6, r2, #20
 8008b3a:	429e      	cmp	r6, r3
 8008b3c:	d93d      	bls.n	8008bba <_dtoa_r+0x31a>
 8008b3e:	6041      	str	r1, [r0, #4]
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fceb 	bl	800951c <_Balloc>
 8008b46:	9000      	str	r0, [sp, #0]
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d139      	bne.n	8008bc0 <_dtoa_r+0x320>
 8008b4c:	4b16      	ldr	r3, [pc, #88]	; (8008ba8 <_dtoa_r+0x308>)
 8008b4e:	4602      	mov	r2, r0
 8008b50:	f240 11af 	movw	r1, #431	; 0x1af
 8008b54:	e6bd      	b.n	80088d2 <_dtoa_r+0x32>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e7e1      	b.n	8008b1e <_dtoa_r+0x27e>
 8008b5a:	2501      	movs	r5, #1
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9307      	str	r3, [sp, #28]
 8008b60:	9509      	str	r5, [sp, #36]	; 0x24
 8008b62:	f04f 33ff 	mov.w	r3, #4294967295
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2312      	movs	r3, #18
 8008b6e:	e7d1      	b.n	8008b14 <_dtoa_r+0x274>
 8008b70:	636f4361 	.word	0x636f4361
 8008b74:	3fd287a7 	.word	0x3fd287a7
 8008b78:	8b60c8b3 	.word	0x8b60c8b3
 8008b7c:	3fc68a28 	.word	0x3fc68a28
 8008b80:	509f79fb 	.word	0x509f79fb
 8008b84:	3fd34413 	.word	0x3fd34413
 8008b88:	0800bed2 	.word	0x0800bed2
 8008b8c:	0800bee9 	.word	0x0800bee9
 8008b90:	7ff00000 	.word	0x7ff00000
 8008b94:	0800bece 	.word	0x0800bece
 8008b98:	0800bec5 	.word	0x0800bec5
 8008b9c:	0800be9d 	.word	0x0800be9d
 8008ba0:	3ff80000 	.word	0x3ff80000
 8008ba4:	0800bfd8 	.word	0x0800bfd8
 8008ba8:	0800bf41 	.word	0x0800bf41
 8008bac:	2301      	movs	r3, #1
 8008bae:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb0:	e7d7      	b.n	8008b62 <_dtoa_r+0x2c2>
 8008bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	9304      	str	r3, [sp, #16]
 8008bb8:	e7ba      	b.n	8008b30 <_dtoa_r+0x290>
 8008bba:	3101      	adds	r1, #1
 8008bbc:	0052      	lsls	r2, r2, #1
 8008bbe:	e7ba      	b.n	8008b36 <_dtoa_r+0x296>
 8008bc0:	69e3      	ldr	r3, [r4, #28]
 8008bc2:	9a00      	ldr	r2, [sp, #0]
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	9b04      	ldr	r3, [sp, #16]
 8008bc8:	2b0e      	cmp	r3, #14
 8008bca:	f200 80a8 	bhi.w	8008d1e <_dtoa_r+0x47e>
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	f000 80a5 	beq.w	8008d1e <_dtoa_r+0x47e>
 8008bd4:	f1bb 0f00 	cmp.w	fp, #0
 8008bd8:	dd38      	ble.n	8008c4c <_dtoa_r+0x3ac>
 8008bda:	4bc0      	ldr	r3, [pc, #768]	; (8008edc <_dtoa_r+0x63c>)
 8008bdc:	f00b 020f 	and.w	r2, fp, #15
 8008be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008be4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008be8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008bec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008bf0:	d019      	beq.n	8008c26 <_dtoa_r+0x386>
 8008bf2:	4bbb      	ldr	r3, [pc, #748]	; (8008ee0 <_dtoa_r+0x640>)
 8008bf4:	ec51 0b18 	vmov	r0, r1, d8
 8008bf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bfc:	f7f7 fe2e 	bl	800085c <__aeabi_ddiv>
 8008c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c04:	f008 080f 	and.w	r8, r8, #15
 8008c08:	2503      	movs	r5, #3
 8008c0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008ee0 <_dtoa_r+0x640>
 8008c0e:	f1b8 0f00 	cmp.w	r8, #0
 8008c12:	d10a      	bne.n	8008c2a <_dtoa_r+0x38a>
 8008c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c18:	4632      	mov	r2, r6
 8008c1a:	463b      	mov	r3, r7
 8008c1c:	f7f7 fe1e 	bl	800085c <__aeabi_ddiv>
 8008c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c24:	e02b      	b.n	8008c7e <_dtoa_r+0x3de>
 8008c26:	2502      	movs	r5, #2
 8008c28:	e7ef      	b.n	8008c0a <_dtoa_r+0x36a>
 8008c2a:	f018 0f01 	tst.w	r8, #1
 8008c2e:	d008      	beq.n	8008c42 <_dtoa_r+0x3a2>
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c38:	f7f7 fce6 	bl	8000608 <__aeabi_dmul>
 8008c3c:	3501      	adds	r5, #1
 8008c3e:	4606      	mov	r6, r0
 8008c40:	460f      	mov	r7, r1
 8008c42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c46:	f109 0908 	add.w	r9, r9, #8
 8008c4a:	e7e0      	b.n	8008c0e <_dtoa_r+0x36e>
 8008c4c:	f000 809f 	beq.w	8008d8e <_dtoa_r+0x4ee>
 8008c50:	f1cb 0600 	rsb	r6, fp, #0
 8008c54:	4ba1      	ldr	r3, [pc, #644]	; (8008edc <_dtoa_r+0x63c>)
 8008c56:	4fa2      	ldr	r7, [pc, #648]	; (8008ee0 <_dtoa_r+0x640>)
 8008c58:	f006 020f 	and.w	r2, r6, #15
 8008c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	ec51 0b18 	vmov	r0, r1, d8
 8008c68:	f7f7 fcce 	bl	8000608 <__aeabi_dmul>
 8008c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c70:	1136      	asrs	r6, r6, #4
 8008c72:	2300      	movs	r3, #0
 8008c74:	2502      	movs	r5, #2
 8008c76:	2e00      	cmp	r6, #0
 8008c78:	d17e      	bne.n	8008d78 <_dtoa_r+0x4d8>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1d0      	bne.n	8008c20 <_dtoa_r+0x380>
 8008c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 8084 	beq.w	8008d92 <_dtoa_r+0x4f2>
 8008c8a:	4b96      	ldr	r3, [pc, #600]	; (8008ee4 <_dtoa_r+0x644>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	f7f7 ff2b 	bl	8000aec <__aeabi_dcmplt>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d07b      	beq.n	8008d92 <_dtoa_r+0x4f2>
 8008c9a:	9b04      	ldr	r3, [sp, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d078      	beq.n	8008d92 <_dtoa_r+0x4f2>
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dd39      	ble.n	8008d1a <_dtoa_r+0x47a>
 8008ca6:	4b90      	ldr	r3, [pc, #576]	; (8008ee8 <_dtoa_r+0x648>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4640      	mov	r0, r8
 8008cac:	4649      	mov	r1, r9
 8008cae:	f7f7 fcab 	bl	8000608 <__aeabi_dmul>
 8008cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cb6:	9e01      	ldr	r6, [sp, #4]
 8008cb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f7f7 fc36 	bl	8000534 <__aeabi_i2d>
 8008cc8:	4642      	mov	r2, r8
 8008cca:	464b      	mov	r3, r9
 8008ccc:	f7f7 fc9c 	bl	8000608 <__aeabi_dmul>
 8008cd0:	4b86      	ldr	r3, [pc, #536]	; (8008eec <_dtoa_r+0x64c>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f7f7 fae2 	bl	800029c <__adddf3>
 8008cd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce0:	9303      	str	r3, [sp, #12]
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	d158      	bne.n	8008d98 <_dtoa_r+0x4f8>
 8008ce6:	4b82      	ldr	r3, [pc, #520]	; (8008ef0 <_dtoa_r+0x650>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	4640      	mov	r0, r8
 8008cec:	4649      	mov	r1, r9
 8008cee:	f7f7 fad3 	bl	8000298 <__aeabi_dsub>
 8008cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cf6:	4680      	mov	r8, r0
 8008cf8:	4689      	mov	r9, r1
 8008cfa:	f7f7 ff15 	bl	8000b28 <__aeabi_dcmpgt>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	f040 8296 	bne.w	8009230 <_dtoa_r+0x990>
 8008d04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d08:	4640      	mov	r0, r8
 8008d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d0e:	4649      	mov	r1, r9
 8008d10:	f7f7 feec 	bl	8000aec <__aeabi_dcmplt>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f040 8289 	bne.w	800922c <_dtoa_r+0x98c>
 8008d1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f2c0 814e 	blt.w	8008fc2 <_dtoa_r+0x722>
 8008d26:	f1bb 0f0e 	cmp.w	fp, #14
 8008d2a:	f300 814a 	bgt.w	8008fc2 <_dtoa_r+0x722>
 8008d2e:	4b6b      	ldr	r3, [pc, #428]	; (8008edc <_dtoa_r+0x63c>)
 8008d30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f280 80dc 	bge.w	8008ef8 <_dtoa_r+0x658>
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f300 80d8 	bgt.w	8008ef8 <_dtoa_r+0x658>
 8008d48:	f040 826f 	bne.w	800922a <_dtoa_r+0x98a>
 8008d4c:	4b68      	ldr	r3, [pc, #416]	; (8008ef0 <_dtoa_r+0x650>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	4640      	mov	r0, r8
 8008d52:	4649      	mov	r1, r9
 8008d54:	f7f7 fc58 	bl	8000608 <__aeabi_dmul>
 8008d58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d5c:	f7f7 feda 	bl	8000b14 <__aeabi_dcmpge>
 8008d60:	9e04      	ldr	r6, [sp, #16]
 8008d62:	4637      	mov	r7, r6
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f040 8245 	bne.w	80091f4 <_dtoa_r+0x954>
 8008d6a:	9d00      	ldr	r5, [sp, #0]
 8008d6c:	2331      	movs	r3, #49	; 0x31
 8008d6e:	f805 3b01 	strb.w	r3, [r5], #1
 8008d72:	f10b 0b01 	add.w	fp, fp, #1
 8008d76:	e241      	b.n	80091fc <_dtoa_r+0x95c>
 8008d78:	07f2      	lsls	r2, r6, #31
 8008d7a:	d505      	bpl.n	8008d88 <_dtoa_r+0x4e8>
 8008d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d80:	f7f7 fc42 	bl	8000608 <__aeabi_dmul>
 8008d84:	3501      	adds	r5, #1
 8008d86:	2301      	movs	r3, #1
 8008d88:	1076      	asrs	r6, r6, #1
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	e773      	b.n	8008c76 <_dtoa_r+0x3d6>
 8008d8e:	2502      	movs	r5, #2
 8008d90:	e775      	b.n	8008c7e <_dtoa_r+0x3de>
 8008d92:	9e04      	ldr	r6, [sp, #16]
 8008d94:	465f      	mov	r7, fp
 8008d96:	e792      	b.n	8008cbe <_dtoa_r+0x41e>
 8008d98:	9900      	ldr	r1, [sp, #0]
 8008d9a:	4b50      	ldr	r3, [pc, #320]	; (8008edc <_dtoa_r+0x63c>)
 8008d9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008da0:	4431      	add	r1, r6
 8008da2:	9102      	str	r1, [sp, #8]
 8008da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008da6:	eeb0 9a47 	vmov.f32	s18, s14
 8008daa:	eef0 9a67 	vmov.f32	s19, s15
 8008dae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008db2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d044      	beq.n	8008e44 <_dtoa_r+0x5a4>
 8008dba:	494e      	ldr	r1, [pc, #312]	; (8008ef4 <_dtoa_r+0x654>)
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	f7f7 fd4d 	bl	800085c <__aeabi_ddiv>
 8008dc2:	ec53 2b19 	vmov	r2, r3, d9
 8008dc6:	f7f7 fa67 	bl	8000298 <__aeabi_dsub>
 8008dca:	9d00      	ldr	r5, [sp, #0]
 8008dcc:	ec41 0b19 	vmov	d9, r0, r1
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	f7f7 fec8 	bl	8000b68 <__aeabi_d2iz>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	f7f7 fbab 	bl	8000534 <__aeabi_i2d>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4640      	mov	r0, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	f7f7 fa57 	bl	8000298 <__aeabi_dsub>
 8008dea:	3630      	adds	r6, #48	; 0x30
 8008dec:	f805 6b01 	strb.w	r6, [r5], #1
 8008df0:	ec53 2b19 	vmov	r2, r3, d9
 8008df4:	4680      	mov	r8, r0
 8008df6:	4689      	mov	r9, r1
 8008df8:	f7f7 fe78 	bl	8000aec <__aeabi_dcmplt>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d164      	bne.n	8008eca <_dtoa_r+0x62a>
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	4937      	ldr	r1, [pc, #220]	; (8008ee4 <_dtoa_r+0x644>)
 8008e06:	2000      	movs	r0, #0
 8008e08:	f7f7 fa46 	bl	8000298 <__aeabi_dsub>
 8008e0c:	ec53 2b19 	vmov	r2, r3, d9
 8008e10:	f7f7 fe6c 	bl	8000aec <__aeabi_dcmplt>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f040 80b6 	bne.w	8008f86 <_dtoa_r+0x6e6>
 8008e1a:	9b02      	ldr	r3, [sp, #8]
 8008e1c:	429d      	cmp	r5, r3
 8008e1e:	f43f af7c 	beq.w	8008d1a <_dtoa_r+0x47a>
 8008e22:	4b31      	ldr	r3, [pc, #196]	; (8008ee8 <_dtoa_r+0x648>)
 8008e24:	ec51 0b19 	vmov	r0, r1, d9
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f7f7 fbed 	bl	8000608 <__aeabi_dmul>
 8008e2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ee8 <_dtoa_r+0x648>)
 8008e30:	ec41 0b19 	vmov	d9, r0, r1
 8008e34:	2200      	movs	r2, #0
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 fbe5 	bl	8000608 <__aeabi_dmul>
 8008e3e:	4680      	mov	r8, r0
 8008e40:	4689      	mov	r9, r1
 8008e42:	e7c5      	b.n	8008dd0 <_dtoa_r+0x530>
 8008e44:	ec51 0b17 	vmov	r0, r1, d7
 8008e48:	f7f7 fbde 	bl	8000608 <__aeabi_dmul>
 8008e4c:	9b02      	ldr	r3, [sp, #8]
 8008e4e:	9d00      	ldr	r5, [sp, #0]
 8008e50:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e52:	ec41 0b19 	vmov	d9, r0, r1
 8008e56:	4649      	mov	r1, r9
 8008e58:	4640      	mov	r0, r8
 8008e5a:	f7f7 fe85 	bl	8000b68 <__aeabi_d2iz>
 8008e5e:	4606      	mov	r6, r0
 8008e60:	f7f7 fb68 	bl	8000534 <__aeabi_i2d>
 8008e64:	3630      	adds	r6, #48	; 0x30
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	f7f7 fa13 	bl	8000298 <__aeabi_dsub>
 8008e72:	f805 6b01 	strb.w	r6, [r5], #1
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	429d      	cmp	r5, r3
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	4689      	mov	r9, r1
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	d124      	bne.n	8008ece <_dtoa_r+0x62e>
 8008e84:	4b1b      	ldr	r3, [pc, #108]	; (8008ef4 <_dtoa_r+0x654>)
 8008e86:	ec51 0b19 	vmov	r0, r1, d9
 8008e8a:	f7f7 fa07 	bl	800029c <__adddf3>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 fe47 	bl	8000b28 <__aeabi_dcmpgt>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d173      	bne.n	8008f86 <_dtoa_r+0x6e6>
 8008e9e:	ec53 2b19 	vmov	r2, r3, d9
 8008ea2:	4914      	ldr	r1, [pc, #80]	; (8008ef4 <_dtoa_r+0x654>)
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	f7f7 f9f7 	bl	8000298 <__aeabi_dsub>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	f7f7 fe1b 	bl	8000aec <__aeabi_dcmplt>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f43f af2f 	beq.w	8008d1a <_dtoa_r+0x47a>
 8008ebc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ebe:	1e6b      	subs	r3, r5, #1
 8008ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ec2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ec6:	2b30      	cmp	r3, #48	; 0x30
 8008ec8:	d0f8      	beq.n	8008ebc <_dtoa_r+0x61c>
 8008eca:	46bb      	mov	fp, r7
 8008ecc:	e04a      	b.n	8008f64 <_dtoa_r+0x6c4>
 8008ece:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <_dtoa_r+0x648>)
 8008ed0:	f7f7 fb9a 	bl	8000608 <__aeabi_dmul>
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	4689      	mov	r9, r1
 8008ed8:	e7bd      	b.n	8008e56 <_dtoa_r+0x5b6>
 8008eda:	bf00      	nop
 8008edc:	0800bfd8 	.word	0x0800bfd8
 8008ee0:	0800bfb0 	.word	0x0800bfb0
 8008ee4:	3ff00000 	.word	0x3ff00000
 8008ee8:	40240000 	.word	0x40240000
 8008eec:	401c0000 	.word	0x401c0000
 8008ef0:	40140000 	.word	0x40140000
 8008ef4:	3fe00000 	.word	0x3fe00000
 8008ef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008efc:	9d00      	ldr	r5, [sp, #0]
 8008efe:	4642      	mov	r2, r8
 8008f00:	464b      	mov	r3, r9
 8008f02:	4630      	mov	r0, r6
 8008f04:	4639      	mov	r1, r7
 8008f06:	f7f7 fca9 	bl	800085c <__aeabi_ddiv>
 8008f0a:	f7f7 fe2d 	bl	8000b68 <__aeabi_d2iz>
 8008f0e:	9001      	str	r0, [sp, #4]
 8008f10:	f7f7 fb10 	bl	8000534 <__aeabi_i2d>
 8008f14:	4642      	mov	r2, r8
 8008f16:	464b      	mov	r3, r9
 8008f18:	f7f7 fb76 	bl	8000608 <__aeabi_dmul>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 f9b8 	bl	8000298 <__aeabi_dsub>
 8008f28:	9e01      	ldr	r6, [sp, #4]
 8008f2a:	9f04      	ldr	r7, [sp, #16]
 8008f2c:	3630      	adds	r6, #48	; 0x30
 8008f2e:	f805 6b01 	strb.w	r6, [r5], #1
 8008f32:	9e00      	ldr	r6, [sp, #0]
 8008f34:	1bae      	subs	r6, r5, r6
 8008f36:	42b7      	cmp	r7, r6
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	d134      	bne.n	8008fa8 <_dtoa_r+0x708>
 8008f3e:	f7f7 f9ad 	bl	800029c <__adddf3>
 8008f42:	4642      	mov	r2, r8
 8008f44:	464b      	mov	r3, r9
 8008f46:	4606      	mov	r6, r0
 8008f48:	460f      	mov	r7, r1
 8008f4a:	f7f7 fded 	bl	8000b28 <__aeabi_dcmpgt>
 8008f4e:	b9c8      	cbnz	r0, 8008f84 <_dtoa_r+0x6e4>
 8008f50:	4642      	mov	r2, r8
 8008f52:	464b      	mov	r3, r9
 8008f54:	4630      	mov	r0, r6
 8008f56:	4639      	mov	r1, r7
 8008f58:	f7f7 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f5c:	b110      	cbz	r0, 8008f64 <_dtoa_r+0x6c4>
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	07db      	lsls	r3, r3, #31
 8008f62:	d40f      	bmi.n	8008f84 <_dtoa_r+0x6e4>
 8008f64:	4651      	mov	r1, sl
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 fb18 	bl	800959c <_Bfree>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f70:	702b      	strb	r3, [r5, #0]
 8008f72:	f10b 0301 	add.w	r3, fp, #1
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f43f ace2 	beq.w	8008944 <_dtoa_r+0xa4>
 8008f80:	601d      	str	r5, [r3, #0]
 8008f82:	e4df      	b.n	8008944 <_dtoa_r+0xa4>
 8008f84:	465f      	mov	r7, fp
 8008f86:	462b      	mov	r3, r5
 8008f88:	461d      	mov	r5, r3
 8008f8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f8e:	2a39      	cmp	r2, #57	; 0x39
 8008f90:	d106      	bne.n	8008fa0 <_dtoa_r+0x700>
 8008f92:	9a00      	ldr	r2, [sp, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d1f7      	bne.n	8008f88 <_dtoa_r+0x6e8>
 8008f98:	9900      	ldr	r1, [sp, #0]
 8008f9a:	2230      	movs	r2, #48	; 0x30
 8008f9c:	3701      	adds	r7, #1
 8008f9e:	700a      	strb	r2, [r1, #0]
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	3201      	adds	r2, #1
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	e790      	b.n	8008eca <_dtoa_r+0x62a>
 8008fa8:	4ba3      	ldr	r3, [pc, #652]	; (8009238 <_dtoa_r+0x998>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	f7f7 fb2c 	bl	8000608 <__aeabi_dmul>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	460f      	mov	r7, r1
 8008fb8:	f7f7 fd8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d09e      	beq.n	8008efe <_dtoa_r+0x65e>
 8008fc0:	e7d0      	b.n	8008f64 <_dtoa_r+0x6c4>
 8008fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	f000 80ca 	beq.w	800915e <_dtoa_r+0x8be>
 8008fca:	9a07      	ldr	r2, [sp, #28]
 8008fcc:	2a01      	cmp	r2, #1
 8008fce:	f300 80ad 	bgt.w	800912c <_dtoa_r+0x88c>
 8008fd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fd4:	2a00      	cmp	r2, #0
 8008fd6:	f000 80a5 	beq.w	8009124 <_dtoa_r+0x884>
 8008fda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fde:	9e08      	ldr	r6, [sp, #32]
 8008fe0:	9d05      	ldr	r5, [sp, #20]
 8008fe2:	9a05      	ldr	r2, [sp, #20]
 8008fe4:	441a      	add	r2, r3
 8008fe6:	9205      	str	r2, [sp, #20]
 8008fe8:	9a06      	ldr	r2, [sp, #24]
 8008fea:	2101      	movs	r1, #1
 8008fec:	441a      	add	r2, r3
 8008fee:	4620      	mov	r0, r4
 8008ff0:	9206      	str	r2, [sp, #24]
 8008ff2:	f000 fbd3 	bl	800979c <__i2b>
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	b165      	cbz	r5, 8009014 <_dtoa_r+0x774>
 8008ffa:	9b06      	ldr	r3, [sp, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd09      	ble.n	8009014 <_dtoa_r+0x774>
 8009000:	42ab      	cmp	r3, r5
 8009002:	9a05      	ldr	r2, [sp, #20]
 8009004:	bfa8      	it	ge
 8009006:	462b      	movge	r3, r5
 8009008:	1ad2      	subs	r2, r2, r3
 800900a:	9205      	str	r2, [sp, #20]
 800900c:	9a06      	ldr	r2, [sp, #24]
 800900e:	1aed      	subs	r5, r5, r3
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	9306      	str	r3, [sp, #24]
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	b1f3      	cbz	r3, 8009056 <_dtoa_r+0x7b6>
 8009018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80a3 	beq.w	8009166 <_dtoa_r+0x8c6>
 8009020:	2e00      	cmp	r6, #0
 8009022:	dd10      	ble.n	8009046 <_dtoa_r+0x7a6>
 8009024:	4639      	mov	r1, r7
 8009026:	4632      	mov	r2, r6
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fc77 	bl	800991c <__pow5mult>
 800902e:	4652      	mov	r2, sl
 8009030:	4601      	mov	r1, r0
 8009032:	4607      	mov	r7, r0
 8009034:	4620      	mov	r0, r4
 8009036:	f000 fbc7 	bl	80097c8 <__multiply>
 800903a:	4651      	mov	r1, sl
 800903c:	4680      	mov	r8, r0
 800903e:	4620      	mov	r0, r4
 8009040:	f000 faac 	bl	800959c <_Bfree>
 8009044:	46c2      	mov	sl, r8
 8009046:	9b08      	ldr	r3, [sp, #32]
 8009048:	1b9a      	subs	r2, r3, r6
 800904a:	d004      	beq.n	8009056 <_dtoa_r+0x7b6>
 800904c:	4651      	mov	r1, sl
 800904e:	4620      	mov	r0, r4
 8009050:	f000 fc64 	bl	800991c <__pow5mult>
 8009054:	4682      	mov	sl, r0
 8009056:	2101      	movs	r1, #1
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fb9f 	bl	800979c <__i2b>
 800905e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009060:	2b00      	cmp	r3, #0
 8009062:	4606      	mov	r6, r0
 8009064:	f340 8081 	ble.w	800916a <_dtoa_r+0x8ca>
 8009068:	461a      	mov	r2, r3
 800906a:	4601      	mov	r1, r0
 800906c:	4620      	mov	r0, r4
 800906e:	f000 fc55 	bl	800991c <__pow5mult>
 8009072:	9b07      	ldr	r3, [sp, #28]
 8009074:	2b01      	cmp	r3, #1
 8009076:	4606      	mov	r6, r0
 8009078:	dd7a      	ble.n	8009170 <_dtoa_r+0x8d0>
 800907a:	f04f 0800 	mov.w	r8, #0
 800907e:	6933      	ldr	r3, [r6, #16]
 8009080:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009084:	6918      	ldr	r0, [r3, #16]
 8009086:	f000 fb3b 	bl	8009700 <__hi0bits>
 800908a:	f1c0 0020 	rsb	r0, r0, #32
 800908e:	9b06      	ldr	r3, [sp, #24]
 8009090:	4418      	add	r0, r3
 8009092:	f010 001f 	ands.w	r0, r0, #31
 8009096:	f000 8094 	beq.w	80091c2 <_dtoa_r+0x922>
 800909a:	f1c0 0320 	rsb	r3, r0, #32
 800909e:	2b04      	cmp	r3, #4
 80090a0:	f340 8085 	ble.w	80091ae <_dtoa_r+0x90e>
 80090a4:	9b05      	ldr	r3, [sp, #20]
 80090a6:	f1c0 001c 	rsb	r0, r0, #28
 80090aa:	4403      	add	r3, r0
 80090ac:	9305      	str	r3, [sp, #20]
 80090ae:	9b06      	ldr	r3, [sp, #24]
 80090b0:	4403      	add	r3, r0
 80090b2:	4405      	add	r5, r0
 80090b4:	9306      	str	r3, [sp, #24]
 80090b6:	9b05      	ldr	r3, [sp, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dd05      	ble.n	80090c8 <_dtoa_r+0x828>
 80090bc:	4651      	mov	r1, sl
 80090be:	461a      	mov	r2, r3
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fc85 	bl	80099d0 <__lshift>
 80090c6:	4682      	mov	sl, r0
 80090c8:	9b06      	ldr	r3, [sp, #24]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dd05      	ble.n	80090da <_dtoa_r+0x83a>
 80090ce:	4631      	mov	r1, r6
 80090d0:	461a      	mov	r2, r3
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 fc7c 	bl	80099d0 <__lshift>
 80090d8:	4606      	mov	r6, r0
 80090da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d072      	beq.n	80091c6 <_dtoa_r+0x926>
 80090e0:	4631      	mov	r1, r6
 80090e2:	4650      	mov	r0, sl
 80090e4:	f000 fce0 	bl	8009aa8 <__mcmp>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	da6c      	bge.n	80091c6 <_dtoa_r+0x926>
 80090ec:	2300      	movs	r3, #0
 80090ee:	4651      	mov	r1, sl
 80090f0:	220a      	movs	r2, #10
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fa74 	bl	80095e0 <__multadd>
 80090f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090fe:	4682      	mov	sl, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 81b0 	beq.w	8009466 <_dtoa_r+0xbc6>
 8009106:	2300      	movs	r3, #0
 8009108:	4639      	mov	r1, r7
 800910a:	220a      	movs	r2, #10
 800910c:	4620      	mov	r0, r4
 800910e:	f000 fa67 	bl	80095e0 <__multadd>
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	4607      	mov	r7, r0
 8009118:	f300 8096 	bgt.w	8009248 <_dtoa_r+0x9a8>
 800911c:	9b07      	ldr	r3, [sp, #28]
 800911e:	2b02      	cmp	r3, #2
 8009120:	dc59      	bgt.n	80091d6 <_dtoa_r+0x936>
 8009122:	e091      	b.n	8009248 <_dtoa_r+0x9a8>
 8009124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800912a:	e758      	b.n	8008fde <_dtoa_r+0x73e>
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	1e5e      	subs	r6, r3, #1
 8009130:	9b08      	ldr	r3, [sp, #32]
 8009132:	42b3      	cmp	r3, r6
 8009134:	bfbf      	itttt	lt
 8009136:	9b08      	ldrlt	r3, [sp, #32]
 8009138:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800913a:	9608      	strlt	r6, [sp, #32]
 800913c:	1af3      	sublt	r3, r6, r3
 800913e:	bfb4      	ite	lt
 8009140:	18d2      	addlt	r2, r2, r3
 8009142:	1b9e      	subge	r6, r3, r6
 8009144:	9b04      	ldr	r3, [sp, #16]
 8009146:	bfbc      	itt	lt
 8009148:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800914a:	2600      	movlt	r6, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfb7      	itett	lt
 8009150:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009154:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009158:	1a9d      	sublt	r5, r3, r2
 800915a:	2300      	movlt	r3, #0
 800915c:	e741      	b.n	8008fe2 <_dtoa_r+0x742>
 800915e:	9e08      	ldr	r6, [sp, #32]
 8009160:	9d05      	ldr	r5, [sp, #20]
 8009162:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009164:	e748      	b.n	8008ff8 <_dtoa_r+0x758>
 8009166:	9a08      	ldr	r2, [sp, #32]
 8009168:	e770      	b.n	800904c <_dtoa_r+0x7ac>
 800916a:	9b07      	ldr	r3, [sp, #28]
 800916c:	2b01      	cmp	r3, #1
 800916e:	dc19      	bgt.n	80091a4 <_dtoa_r+0x904>
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	b9bb      	cbnz	r3, 80091a4 <_dtoa_r+0x904>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800917a:	b99b      	cbnz	r3, 80091a4 <_dtoa_r+0x904>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009182:	0d1b      	lsrs	r3, r3, #20
 8009184:	051b      	lsls	r3, r3, #20
 8009186:	b183      	cbz	r3, 80091aa <_dtoa_r+0x90a>
 8009188:	9b05      	ldr	r3, [sp, #20]
 800918a:	3301      	adds	r3, #1
 800918c:	9305      	str	r3, [sp, #20]
 800918e:	9b06      	ldr	r3, [sp, #24]
 8009190:	3301      	adds	r3, #1
 8009192:	9306      	str	r3, [sp, #24]
 8009194:	f04f 0801 	mov.w	r8, #1
 8009198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800919a:	2b00      	cmp	r3, #0
 800919c:	f47f af6f 	bne.w	800907e <_dtoa_r+0x7de>
 80091a0:	2001      	movs	r0, #1
 80091a2:	e774      	b.n	800908e <_dtoa_r+0x7ee>
 80091a4:	f04f 0800 	mov.w	r8, #0
 80091a8:	e7f6      	b.n	8009198 <_dtoa_r+0x8f8>
 80091aa:	4698      	mov	r8, r3
 80091ac:	e7f4      	b.n	8009198 <_dtoa_r+0x8f8>
 80091ae:	d082      	beq.n	80090b6 <_dtoa_r+0x816>
 80091b0:	9a05      	ldr	r2, [sp, #20]
 80091b2:	331c      	adds	r3, #28
 80091b4:	441a      	add	r2, r3
 80091b6:	9205      	str	r2, [sp, #20]
 80091b8:	9a06      	ldr	r2, [sp, #24]
 80091ba:	441a      	add	r2, r3
 80091bc:	441d      	add	r5, r3
 80091be:	9206      	str	r2, [sp, #24]
 80091c0:	e779      	b.n	80090b6 <_dtoa_r+0x816>
 80091c2:	4603      	mov	r3, r0
 80091c4:	e7f4      	b.n	80091b0 <_dtoa_r+0x910>
 80091c6:	9b04      	ldr	r3, [sp, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dc37      	bgt.n	800923c <_dtoa_r+0x99c>
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	dd34      	ble.n	800923c <_dtoa_r+0x99c>
 80091d2:	9b04      	ldr	r3, [sp, #16]
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	b963      	cbnz	r3, 80091f4 <_dtoa_r+0x954>
 80091da:	4631      	mov	r1, r6
 80091dc:	2205      	movs	r2, #5
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 f9fe 	bl	80095e0 <__multadd>
 80091e4:	4601      	mov	r1, r0
 80091e6:	4606      	mov	r6, r0
 80091e8:	4650      	mov	r0, sl
 80091ea:	f000 fc5d 	bl	8009aa8 <__mcmp>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f73f adbb 	bgt.w	8008d6a <_dtoa_r+0x4ca>
 80091f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f6:	9d00      	ldr	r5, [sp, #0]
 80091f8:	ea6f 0b03 	mvn.w	fp, r3
 80091fc:	f04f 0800 	mov.w	r8, #0
 8009200:	4631      	mov	r1, r6
 8009202:	4620      	mov	r0, r4
 8009204:	f000 f9ca 	bl	800959c <_Bfree>
 8009208:	2f00      	cmp	r7, #0
 800920a:	f43f aeab 	beq.w	8008f64 <_dtoa_r+0x6c4>
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	d005      	beq.n	8009220 <_dtoa_r+0x980>
 8009214:	45b8      	cmp	r8, r7
 8009216:	d003      	beq.n	8009220 <_dtoa_r+0x980>
 8009218:	4641      	mov	r1, r8
 800921a:	4620      	mov	r0, r4
 800921c:	f000 f9be 	bl	800959c <_Bfree>
 8009220:	4639      	mov	r1, r7
 8009222:	4620      	mov	r0, r4
 8009224:	f000 f9ba 	bl	800959c <_Bfree>
 8009228:	e69c      	b.n	8008f64 <_dtoa_r+0x6c4>
 800922a:	2600      	movs	r6, #0
 800922c:	4637      	mov	r7, r6
 800922e:	e7e1      	b.n	80091f4 <_dtoa_r+0x954>
 8009230:	46bb      	mov	fp, r7
 8009232:	4637      	mov	r7, r6
 8009234:	e599      	b.n	8008d6a <_dtoa_r+0x4ca>
 8009236:	bf00      	nop
 8009238:	40240000 	.word	0x40240000
 800923c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 80c8 	beq.w	80093d4 <_dtoa_r+0xb34>
 8009244:	9b04      	ldr	r3, [sp, #16]
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	2d00      	cmp	r5, #0
 800924a:	dd05      	ble.n	8009258 <_dtoa_r+0x9b8>
 800924c:	4639      	mov	r1, r7
 800924e:	462a      	mov	r2, r5
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fbbd 	bl	80099d0 <__lshift>
 8009256:	4607      	mov	r7, r0
 8009258:	f1b8 0f00 	cmp.w	r8, #0
 800925c:	d05b      	beq.n	8009316 <_dtoa_r+0xa76>
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	4620      	mov	r0, r4
 8009262:	f000 f95b 	bl	800951c <_Balloc>
 8009266:	4605      	mov	r5, r0
 8009268:	b928      	cbnz	r0, 8009276 <_dtoa_r+0x9d6>
 800926a:	4b83      	ldr	r3, [pc, #524]	; (8009478 <_dtoa_r+0xbd8>)
 800926c:	4602      	mov	r2, r0
 800926e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009272:	f7ff bb2e 	b.w	80088d2 <_dtoa_r+0x32>
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	3202      	adds	r2, #2
 800927a:	0092      	lsls	r2, r2, #2
 800927c:	f107 010c 	add.w	r1, r7, #12
 8009280:	300c      	adds	r0, #12
 8009282:	f001 fec1 	bl	800b008 <memcpy>
 8009286:	2201      	movs	r2, #1
 8009288:	4629      	mov	r1, r5
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fba0 	bl	80099d0 <__lshift>
 8009290:	9b00      	ldr	r3, [sp, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800929a:	4413      	add	r3, r2
 800929c:	9308      	str	r3, [sp, #32]
 800929e:	9b02      	ldr	r3, [sp, #8]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	46b8      	mov	r8, r7
 80092a6:	9306      	str	r3, [sp, #24]
 80092a8:	4607      	mov	r7, r0
 80092aa:	9b04      	ldr	r3, [sp, #16]
 80092ac:	4631      	mov	r1, r6
 80092ae:	3b01      	subs	r3, #1
 80092b0:	4650      	mov	r0, sl
 80092b2:	9301      	str	r3, [sp, #4]
 80092b4:	f7ff fa6a 	bl	800878c <quorem>
 80092b8:	4641      	mov	r1, r8
 80092ba:	9002      	str	r0, [sp, #8]
 80092bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80092c0:	4650      	mov	r0, sl
 80092c2:	f000 fbf1 	bl	8009aa8 <__mcmp>
 80092c6:	463a      	mov	r2, r7
 80092c8:	9005      	str	r0, [sp, #20]
 80092ca:	4631      	mov	r1, r6
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fc07 	bl	8009ae0 <__mdiff>
 80092d2:	68c2      	ldr	r2, [r0, #12]
 80092d4:	4605      	mov	r5, r0
 80092d6:	bb02      	cbnz	r2, 800931a <_dtoa_r+0xa7a>
 80092d8:	4601      	mov	r1, r0
 80092da:	4650      	mov	r0, sl
 80092dc:	f000 fbe4 	bl	8009aa8 <__mcmp>
 80092e0:	4602      	mov	r2, r0
 80092e2:	4629      	mov	r1, r5
 80092e4:	4620      	mov	r0, r4
 80092e6:	9209      	str	r2, [sp, #36]	; 0x24
 80092e8:	f000 f958 	bl	800959c <_Bfree>
 80092ec:	9b07      	ldr	r3, [sp, #28]
 80092ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f0:	9d04      	ldr	r5, [sp, #16]
 80092f2:	ea43 0102 	orr.w	r1, r3, r2
 80092f6:	9b06      	ldr	r3, [sp, #24]
 80092f8:	4319      	orrs	r1, r3
 80092fa:	d110      	bne.n	800931e <_dtoa_r+0xa7e>
 80092fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009300:	d029      	beq.n	8009356 <_dtoa_r+0xab6>
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	dd02      	ble.n	800930e <_dtoa_r+0xa6e>
 8009308:	9b02      	ldr	r3, [sp, #8]
 800930a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	f883 9000 	strb.w	r9, [r3]
 8009314:	e774      	b.n	8009200 <_dtoa_r+0x960>
 8009316:	4638      	mov	r0, r7
 8009318:	e7ba      	b.n	8009290 <_dtoa_r+0x9f0>
 800931a:	2201      	movs	r2, #1
 800931c:	e7e1      	b.n	80092e2 <_dtoa_r+0xa42>
 800931e:	9b05      	ldr	r3, [sp, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	db04      	blt.n	800932e <_dtoa_r+0xa8e>
 8009324:	9907      	ldr	r1, [sp, #28]
 8009326:	430b      	orrs	r3, r1
 8009328:	9906      	ldr	r1, [sp, #24]
 800932a:	430b      	orrs	r3, r1
 800932c:	d120      	bne.n	8009370 <_dtoa_r+0xad0>
 800932e:	2a00      	cmp	r2, #0
 8009330:	dded      	ble.n	800930e <_dtoa_r+0xa6e>
 8009332:	4651      	mov	r1, sl
 8009334:	2201      	movs	r2, #1
 8009336:	4620      	mov	r0, r4
 8009338:	f000 fb4a 	bl	80099d0 <__lshift>
 800933c:	4631      	mov	r1, r6
 800933e:	4682      	mov	sl, r0
 8009340:	f000 fbb2 	bl	8009aa8 <__mcmp>
 8009344:	2800      	cmp	r0, #0
 8009346:	dc03      	bgt.n	8009350 <_dtoa_r+0xab0>
 8009348:	d1e1      	bne.n	800930e <_dtoa_r+0xa6e>
 800934a:	f019 0f01 	tst.w	r9, #1
 800934e:	d0de      	beq.n	800930e <_dtoa_r+0xa6e>
 8009350:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009354:	d1d8      	bne.n	8009308 <_dtoa_r+0xa68>
 8009356:	9a01      	ldr	r2, [sp, #4]
 8009358:	2339      	movs	r3, #57	; 0x39
 800935a:	7013      	strb	r3, [r2, #0]
 800935c:	462b      	mov	r3, r5
 800935e:	461d      	mov	r5, r3
 8009360:	3b01      	subs	r3, #1
 8009362:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009366:	2a39      	cmp	r2, #57	; 0x39
 8009368:	d06c      	beq.n	8009444 <_dtoa_r+0xba4>
 800936a:	3201      	adds	r2, #1
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	e747      	b.n	8009200 <_dtoa_r+0x960>
 8009370:	2a00      	cmp	r2, #0
 8009372:	dd07      	ble.n	8009384 <_dtoa_r+0xae4>
 8009374:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009378:	d0ed      	beq.n	8009356 <_dtoa_r+0xab6>
 800937a:	9a01      	ldr	r2, [sp, #4]
 800937c:	f109 0301 	add.w	r3, r9, #1
 8009380:	7013      	strb	r3, [r2, #0]
 8009382:	e73d      	b.n	8009200 <_dtoa_r+0x960>
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	9a08      	ldr	r2, [sp, #32]
 8009388:	f803 9c01 	strb.w	r9, [r3, #-1]
 800938c:	4293      	cmp	r3, r2
 800938e:	d043      	beq.n	8009418 <_dtoa_r+0xb78>
 8009390:	4651      	mov	r1, sl
 8009392:	2300      	movs	r3, #0
 8009394:	220a      	movs	r2, #10
 8009396:	4620      	mov	r0, r4
 8009398:	f000 f922 	bl	80095e0 <__multadd>
 800939c:	45b8      	cmp	r8, r7
 800939e:	4682      	mov	sl, r0
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	f04f 020a 	mov.w	r2, #10
 80093a8:	4641      	mov	r1, r8
 80093aa:	4620      	mov	r0, r4
 80093ac:	d107      	bne.n	80093be <_dtoa_r+0xb1e>
 80093ae:	f000 f917 	bl	80095e0 <__multadd>
 80093b2:	4680      	mov	r8, r0
 80093b4:	4607      	mov	r7, r0
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	3301      	adds	r3, #1
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	e775      	b.n	80092aa <_dtoa_r+0xa0a>
 80093be:	f000 f90f 	bl	80095e0 <__multadd>
 80093c2:	4639      	mov	r1, r7
 80093c4:	4680      	mov	r8, r0
 80093c6:	2300      	movs	r3, #0
 80093c8:	220a      	movs	r2, #10
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 f908 	bl	80095e0 <__multadd>
 80093d0:	4607      	mov	r7, r0
 80093d2:	e7f0      	b.n	80093b6 <_dtoa_r+0xb16>
 80093d4:	9b04      	ldr	r3, [sp, #16]
 80093d6:	9301      	str	r3, [sp, #4]
 80093d8:	9d00      	ldr	r5, [sp, #0]
 80093da:	4631      	mov	r1, r6
 80093dc:	4650      	mov	r0, sl
 80093de:	f7ff f9d5 	bl	800878c <quorem>
 80093e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093e6:	9b00      	ldr	r3, [sp, #0]
 80093e8:	f805 9b01 	strb.w	r9, [r5], #1
 80093ec:	1aea      	subs	r2, r5, r3
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	4293      	cmp	r3, r2
 80093f2:	dd07      	ble.n	8009404 <_dtoa_r+0xb64>
 80093f4:	4651      	mov	r1, sl
 80093f6:	2300      	movs	r3, #0
 80093f8:	220a      	movs	r2, #10
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 f8f0 	bl	80095e0 <__multadd>
 8009400:	4682      	mov	sl, r0
 8009402:	e7ea      	b.n	80093da <_dtoa_r+0xb3a>
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	bfc8      	it	gt
 800940a:	461d      	movgt	r5, r3
 800940c:	9b00      	ldr	r3, [sp, #0]
 800940e:	bfd8      	it	le
 8009410:	2501      	movle	r5, #1
 8009412:	441d      	add	r5, r3
 8009414:	f04f 0800 	mov.w	r8, #0
 8009418:	4651      	mov	r1, sl
 800941a:	2201      	movs	r2, #1
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fad7 	bl	80099d0 <__lshift>
 8009422:	4631      	mov	r1, r6
 8009424:	4682      	mov	sl, r0
 8009426:	f000 fb3f 	bl	8009aa8 <__mcmp>
 800942a:	2800      	cmp	r0, #0
 800942c:	dc96      	bgt.n	800935c <_dtoa_r+0xabc>
 800942e:	d102      	bne.n	8009436 <_dtoa_r+0xb96>
 8009430:	f019 0f01 	tst.w	r9, #1
 8009434:	d192      	bne.n	800935c <_dtoa_r+0xabc>
 8009436:	462b      	mov	r3, r5
 8009438:	461d      	mov	r5, r3
 800943a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800943e:	2a30      	cmp	r2, #48	; 0x30
 8009440:	d0fa      	beq.n	8009438 <_dtoa_r+0xb98>
 8009442:	e6dd      	b.n	8009200 <_dtoa_r+0x960>
 8009444:	9a00      	ldr	r2, [sp, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d189      	bne.n	800935e <_dtoa_r+0xabe>
 800944a:	f10b 0b01 	add.w	fp, fp, #1
 800944e:	2331      	movs	r3, #49	; 0x31
 8009450:	e796      	b.n	8009380 <_dtoa_r+0xae0>
 8009452:	4b0a      	ldr	r3, [pc, #40]	; (800947c <_dtoa_r+0xbdc>)
 8009454:	f7ff ba99 	b.w	800898a <_dtoa_r+0xea>
 8009458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800945a:	2b00      	cmp	r3, #0
 800945c:	f47f aa6d 	bne.w	800893a <_dtoa_r+0x9a>
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <_dtoa_r+0xbe0>)
 8009462:	f7ff ba92 	b.w	800898a <_dtoa_r+0xea>
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	dcb5      	bgt.n	80093d8 <_dtoa_r+0xb38>
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	2b02      	cmp	r3, #2
 8009470:	f73f aeb1 	bgt.w	80091d6 <_dtoa_r+0x936>
 8009474:	e7b0      	b.n	80093d8 <_dtoa_r+0xb38>
 8009476:	bf00      	nop
 8009478:	0800bf41 	.word	0x0800bf41
 800947c:	0800be9c 	.word	0x0800be9c
 8009480:	0800bec5 	.word	0x0800bec5

08009484 <_free_r>:
 8009484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009486:	2900      	cmp	r1, #0
 8009488:	d044      	beq.n	8009514 <_free_r+0x90>
 800948a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948e:	9001      	str	r0, [sp, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	f1a1 0404 	sub.w	r4, r1, #4
 8009496:	bfb8      	it	lt
 8009498:	18e4      	addlt	r4, r4, r3
 800949a:	f7fe f94d 	bl	8007738 <__malloc_lock>
 800949e:	4a1e      	ldr	r2, [pc, #120]	; (8009518 <_free_r+0x94>)
 80094a0:	9801      	ldr	r0, [sp, #4]
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	b933      	cbnz	r3, 80094b4 <_free_r+0x30>
 80094a6:	6063      	str	r3, [r4, #4]
 80094a8:	6014      	str	r4, [r2, #0]
 80094aa:	b003      	add	sp, #12
 80094ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094b0:	f7fe b948 	b.w	8007744 <__malloc_unlock>
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	d908      	bls.n	80094ca <_free_r+0x46>
 80094b8:	6825      	ldr	r5, [r4, #0]
 80094ba:	1961      	adds	r1, r4, r5
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf01      	itttt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	1949      	addeq	r1, r1, r5
 80094c6:	6021      	streq	r1, [r4, #0]
 80094c8:	e7ed      	b.n	80094a6 <_free_r+0x22>
 80094ca:	461a      	mov	r2, r3
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	b10b      	cbz	r3, 80094d4 <_free_r+0x50>
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	d9fa      	bls.n	80094ca <_free_r+0x46>
 80094d4:	6811      	ldr	r1, [r2, #0]
 80094d6:	1855      	adds	r5, r2, r1
 80094d8:	42a5      	cmp	r5, r4
 80094da:	d10b      	bne.n	80094f4 <_free_r+0x70>
 80094dc:	6824      	ldr	r4, [r4, #0]
 80094de:	4421      	add	r1, r4
 80094e0:	1854      	adds	r4, r2, r1
 80094e2:	42a3      	cmp	r3, r4
 80094e4:	6011      	str	r1, [r2, #0]
 80094e6:	d1e0      	bne.n	80094aa <_free_r+0x26>
 80094e8:	681c      	ldr	r4, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	6053      	str	r3, [r2, #4]
 80094ee:	440c      	add	r4, r1
 80094f0:	6014      	str	r4, [r2, #0]
 80094f2:	e7da      	b.n	80094aa <_free_r+0x26>
 80094f4:	d902      	bls.n	80094fc <_free_r+0x78>
 80094f6:	230c      	movs	r3, #12
 80094f8:	6003      	str	r3, [r0, #0]
 80094fa:	e7d6      	b.n	80094aa <_free_r+0x26>
 80094fc:	6825      	ldr	r5, [r4, #0]
 80094fe:	1961      	adds	r1, r4, r5
 8009500:	428b      	cmp	r3, r1
 8009502:	bf04      	itt	eq
 8009504:	6819      	ldreq	r1, [r3, #0]
 8009506:	685b      	ldreq	r3, [r3, #4]
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	bf04      	itt	eq
 800950c:	1949      	addeq	r1, r1, r5
 800950e:	6021      	streq	r1, [r4, #0]
 8009510:	6054      	str	r4, [r2, #4]
 8009512:	e7ca      	b.n	80094aa <_free_r+0x26>
 8009514:	b003      	add	sp, #12
 8009516:	bd30      	pop	{r4, r5, pc}
 8009518:	200013fc 	.word	0x200013fc

0800951c <_Balloc>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	69c6      	ldr	r6, [r0, #28]
 8009520:	4604      	mov	r4, r0
 8009522:	460d      	mov	r5, r1
 8009524:	b976      	cbnz	r6, 8009544 <_Balloc+0x28>
 8009526:	2010      	movs	r0, #16
 8009528:	f7fe f85e 	bl	80075e8 <malloc>
 800952c:	4602      	mov	r2, r0
 800952e:	61e0      	str	r0, [r4, #28]
 8009530:	b920      	cbnz	r0, 800953c <_Balloc+0x20>
 8009532:	4b18      	ldr	r3, [pc, #96]	; (8009594 <_Balloc+0x78>)
 8009534:	4818      	ldr	r0, [pc, #96]	; (8009598 <_Balloc+0x7c>)
 8009536:	216b      	movs	r1, #107	; 0x6b
 8009538:	f001 fd7e 	bl	800b038 <__assert_func>
 800953c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009540:	6006      	str	r6, [r0, #0]
 8009542:	60c6      	str	r6, [r0, #12]
 8009544:	69e6      	ldr	r6, [r4, #28]
 8009546:	68f3      	ldr	r3, [r6, #12]
 8009548:	b183      	cbz	r3, 800956c <_Balloc+0x50>
 800954a:	69e3      	ldr	r3, [r4, #28]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009552:	b9b8      	cbnz	r0, 8009584 <_Balloc+0x68>
 8009554:	2101      	movs	r1, #1
 8009556:	fa01 f605 	lsl.w	r6, r1, r5
 800955a:	1d72      	adds	r2, r6, #5
 800955c:	0092      	lsls	r2, r2, #2
 800955e:	4620      	mov	r0, r4
 8009560:	f001 fd88 	bl	800b074 <_calloc_r>
 8009564:	b160      	cbz	r0, 8009580 <_Balloc+0x64>
 8009566:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800956a:	e00e      	b.n	800958a <_Balloc+0x6e>
 800956c:	2221      	movs	r2, #33	; 0x21
 800956e:	2104      	movs	r1, #4
 8009570:	4620      	mov	r0, r4
 8009572:	f001 fd7f 	bl	800b074 <_calloc_r>
 8009576:	69e3      	ldr	r3, [r4, #28]
 8009578:	60f0      	str	r0, [r6, #12]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e4      	bne.n	800954a <_Balloc+0x2e>
 8009580:	2000      	movs	r0, #0
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	6802      	ldr	r2, [r0, #0]
 8009586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800958a:	2300      	movs	r3, #0
 800958c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009590:	e7f7      	b.n	8009582 <_Balloc+0x66>
 8009592:	bf00      	nop
 8009594:	0800bed2 	.word	0x0800bed2
 8009598:	0800bf52 	.word	0x0800bf52

0800959c <_Bfree>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	69c6      	ldr	r6, [r0, #28]
 80095a0:	4605      	mov	r5, r0
 80095a2:	460c      	mov	r4, r1
 80095a4:	b976      	cbnz	r6, 80095c4 <_Bfree+0x28>
 80095a6:	2010      	movs	r0, #16
 80095a8:	f7fe f81e 	bl	80075e8 <malloc>
 80095ac:	4602      	mov	r2, r0
 80095ae:	61e8      	str	r0, [r5, #28]
 80095b0:	b920      	cbnz	r0, 80095bc <_Bfree+0x20>
 80095b2:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <_Bfree+0x3c>)
 80095b4:	4809      	ldr	r0, [pc, #36]	; (80095dc <_Bfree+0x40>)
 80095b6:	218f      	movs	r1, #143	; 0x8f
 80095b8:	f001 fd3e 	bl	800b038 <__assert_func>
 80095bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095c0:	6006      	str	r6, [r0, #0]
 80095c2:	60c6      	str	r6, [r0, #12]
 80095c4:	b13c      	cbz	r4, 80095d6 <_Bfree+0x3a>
 80095c6:	69eb      	ldr	r3, [r5, #28]
 80095c8:	6862      	ldr	r2, [r4, #4]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095d0:	6021      	str	r1, [r4, #0]
 80095d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	0800bed2 	.word	0x0800bed2
 80095dc:	0800bf52 	.word	0x0800bf52

080095e0 <__multadd>:
 80095e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e4:	690d      	ldr	r5, [r1, #16]
 80095e6:	4607      	mov	r7, r0
 80095e8:	460c      	mov	r4, r1
 80095ea:	461e      	mov	r6, r3
 80095ec:	f101 0c14 	add.w	ip, r1, #20
 80095f0:	2000      	movs	r0, #0
 80095f2:	f8dc 3000 	ldr.w	r3, [ip]
 80095f6:	b299      	uxth	r1, r3
 80095f8:	fb02 6101 	mla	r1, r2, r1, r6
 80095fc:	0c1e      	lsrs	r6, r3, #16
 80095fe:	0c0b      	lsrs	r3, r1, #16
 8009600:	fb02 3306 	mla	r3, r2, r6, r3
 8009604:	b289      	uxth	r1, r1
 8009606:	3001      	adds	r0, #1
 8009608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800960c:	4285      	cmp	r5, r0
 800960e:	f84c 1b04 	str.w	r1, [ip], #4
 8009612:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009616:	dcec      	bgt.n	80095f2 <__multadd+0x12>
 8009618:	b30e      	cbz	r6, 800965e <__multadd+0x7e>
 800961a:	68a3      	ldr	r3, [r4, #8]
 800961c:	42ab      	cmp	r3, r5
 800961e:	dc19      	bgt.n	8009654 <__multadd+0x74>
 8009620:	6861      	ldr	r1, [r4, #4]
 8009622:	4638      	mov	r0, r7
 8009624:	3101      	adds	r1, #1
 8009626:	f7ff ff79 	bl	800951c <_Balloc>
 800962a:	4680      	mov	r8, r0
 800962c:	b928      	cbnz	r0, 800963a <__multadd+0x5a>
 800962e:	4602      	mov	r2, r0
 8009630:	4b0c      	ldr	r3, [pc, #48]	; (8009664 <__multadd+0x84>)
 8009632:	480d      	ldr	r0, [pc, #52]	; (8009668 <__multadd+0x88>)
 8009634:	21ba      	movs	r1, #186	; 0xba
 8009636:	f001 fcff 	bl	800b038 <__assert_func>
 800963a:	6922      	ldr	r2, [r4, #16]
 800963c:	3202      	adds	r2, #2
 800963e:	f104 010c 	add.w	r1, r4, #12
 8009642:	0092      	lsls	r2, r2, #2
 8009644:	300c      	adds	r0, #12
 8009646:	f001 fcdf 	bl	800b008 <memcpy>
 800964a:	4621      	mov	r1, r4
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff ffa5 	bl	800959c <_Bfree>
 8009652:	4644      	mov	r4, r8
 8009654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009658:	3501      	adds	r5, #1
 800965a:	615e      	str	r6, [r3, #20]
 800965c:	6125      	str	r5, [r4, #16]
 800965e:	4620      	mov	r0, r4
 8009660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009664:	0800bf41 	.word	0x0800bf41
 8009668:	0800bf52 	.word	0x0800bf52

0800966c <__s2b>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	460c      	mov	r4, r1
 8009672:	4615      	mov	r5, r2
 8009674:	461f      	mov	r7, r3
 8009676:	2209      	movs	r2, #9
 8009678:	3308      	adds	r3, #8
 800967a:	4606      	mov	r6, r0
 800967c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009680:	2100      	movs	r1, #0
 8009682:	2201      	movs	r2, #1
 8009684:	429a      	cmp	r2, r3
 8009686:	db09      	blt.n	800969c <__s2b+0x30>
 8009688:	4630      	mov	r0, r6
 800968a:	f7ff ff47 	bl	800951c <_Balloc>
 800968e:	b940      	cbnz	r0, 80096a2 <__s2b+0x36>
 8009690:	4602      	mov	r2, r0
 8009692:	4b19      	ldr	r3, [pc, #100]	; (80096f8 <__s2b+0x8c>)
 8009694:	4819      	ldr	r0, [pc, #100]	; (80096fc <__s2b+0x90>)
 8009696:	21d3      	movs	r1, #211	; 0xd3
 8009698:	f001 fcce 	bl	800b038 <__assert_func>
 800969c:	0052      	lsls	r2, r2, #1
 800969e:	3101      	adds	r1, #1
 80096a0:	e7f0      	b.n	8009684 <__s2b+0x18>
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	6143      	str	r3, [r0, #20]
 80096a6:	2d09      	cmp	r5, #9
 80096a8:	f04f 0301 	mov.w	r3, #1
 80096ac:	6103      	str	r3, [r0, #16]
 80096ae:	dd16      	ble.n	80096de <__s2b+0x72>
 80096b0:	f104 0909 	add.w	r9, r4, #9
 80096b4:	46c8      	mov	r8, r9
 80096b6:	442c      	add	r4, r5
 80096b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096bc:	4601      	mov	r1, r0
 80096be:	3b30      	subs	r3, #48	; 0x30
 80096c0:	220a      	movs	r2, #10
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ff8c 	bl	80095e0 <__multadd>
 80096c8:	45a0      	cmp	r8, r4
 80096ca:	d1f5      	bne.n	80096b8 <__s2b+0x4c>
 80096cc:	f1a5 0408 	sub.w	r4, r5, #8
 80096d0:	444c      	add	r4, r9
 80096d2:	1b2d      	subs	r5, r5, r4
 80096d4:	1963      	adds	r3, r4, r5
 80096d6:	42bb      	cmp	r3, r7
 80096d8:	db04      	blt.n	80096e4 <__s2b+0x78>
 80096da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096de:	340a      	adds	r4, #10
 80096e0:	2509      	movs	r5, #9
 80096e2:	e7f6      	b.n	80096d2 <__s2b+0x66>
 80096e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096e8:	4601      	mov	r1, r0
 80096ea:	3b30      	subs	r3, #48	; 0x30
 80096ec:	220a      	movs	r2, #10
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff ff76 	bl	80095e0 <__multadd>
 80096f4:	e7ee      	b.n	80096d4 <__s2b+0x68>
 80096f6:	bf00      	nop
 80096f8:	0800bf41 	.word	0x0800bf41
 80096fc:	0800bf52 	.word	0x0800bf52

08009700 <__hi0bits>:
 8009700:	0c03      	lsrs	r3, r0, #16
 8009702:	041b      	lsls	r3, r3, #16
 8009704:	b9d3      	cbnz	r3, 800973c <__hi0bits+0x3c>
 8009706:	0400      	lsls	r0, r0, #16
 8009708:	2310      	movs	r3, #16
 800970a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800970e:	bf04      	itt	eq
 8009710:	0200      	lsleq	r0, r0, #8
 8009712:	3308      	addeq	r3, #8
 8009714:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009718:	bf04      	itt	eq
 800971a:	0100      	lsleq	r0, r0, #4
 800971c:	3304      	addeq	r3, #4
 800971e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009722:	bf04      	itt	eq
 8009724:	0080      	lsleq	r0, r0, #2
 8009726:	3302      	addeq	r3, #2
 8009728:	2800      	cmp	r0, #0
 800972a:	db05      	blt.n	8009738 <__hi0bits+0x38>
 800972c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009730:	f103 0301 	add.w	r3, r3, #1
 8009734:	bf08      	it	eq
 8009736:	2320      	moveq	r3, #32
 8009738:	4618      	mov	r0, r3
 800973a:	4770      	bx	lr
 800973c:	2300      	movs	r3, #0
 800973e:	e7e4      	b.n	800970a <__hi0bits+0xa>

08009740 <__lo0bits>:
 8009740:	6803      	ldr	r3, [r0, #0]
 8009742:	f013 0207 	ands.w	r2, r3, #7
 8009746:	d00c      	beq.n	8009762 <__lo0bits+0x22>
 8009748:	07d9      	lsls	r1, r3, #31
 800974a:	d422      	bmi.n	8009792 <__lo0bits+0x52>
 800974c:	079a      	lsls	r2, r3, #30
 800974e:	bf49      	itett	mi
 8009750:	085b      	lsrmi	r3, r3, #1
 8009752:	089b      	lsrpl	r3, r3, #2
 8009754:	6003      	strmi	r3, [r0, #0]
 8009756:	2201      	movmi	r2, #1
 8009758:	bf5c      	itt	pl
 800975a:	6003      	strpl	r3, [r0, #0]
 800975c:	2202      	movpl	r2, #2
 800975e:	4610      	mov	r0, r2
 8009760:	4770      	bx	lr
 8009762:	b299      	uxth	r1, r3
 8009764:	b909      	cbnz	r1, 800976a <__lo0bits+0x2a>
 8009766:	0c1b      	lsrs	r3, r3, #16
 8009768:	2210      	movs	r2, #16
 800976a:	b2d9      	uxtb	r1, r3
 800976c:	b909      	cbnz	r1, 8009772 <__lo0bits+0x32>
 800976e:	3208      	adds	r2, #8
 8009770:	0a1b      	lsrs	r3, r3, #8
 8009772:	0719      	lsls	r1, r3, #28
 8009774:	bf04      	itt	eq
 8009776:	091b      	lsreq	r3, r3, #4
 8009778:	3204      	addeq	r2, #4
 800977a:	0799      	lsls	r1, r3, #30
 800977c:	bf04      	itt	eq
 800977e:	089b      	lsreq	r3, r3, #2
 8009780:	3202      	addeq	r2, #2
 8009782:	07d9      	lsls	r1, r3, #31
 8009784:	d403      	bmi.n	800978e <__lo0bits+0x4e>
 8009786:	085b      	lsrs	r3, r3, #1
 8009788:	f102 0201 	add.w	r2, r2, #1
 800978c:	d003      	beq.n	8009796 <__lo0bits+0x56>
 800978e:	6003      	str	r3, [r0, #0]
 8009790:	e7e5      	b.n	800975e <__lo0bits+0x1e>
 8009792:	2200      	movs	r2, #0
 8009794:	e7e3      	b.n	800975e <__lo0bits+0x1e>
 8009796:	2220      	movs	r2, #32
 8009798:	e7e1      	b.n	800975e <__lo0bits+0x1e>
	...

0800979c <__i2b>:
 800979c:	b510      	push	{r4, lr}
 800979e:	460c      	mov	r4, r1
 80097a0:	2101      	movs	r1, #1
 80097a2:	f7ff febb 	bl	800951c <_Balloc>
 80097a6:	4602      	mov	r2, r0
 80097a8:	b928      	cbnz	r0, 80097b6 <__i2b+0x1a>
 80097aa:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <__i2b+0x24>)
 80097ac:	4805      	ldr	r0, [pc, #20]	; (80097c4 <__i2b+0x28>)
 80097ae:	f240 1145 	movw	r1, #325	; 0x145
 80097b2:	f001 fc41 	bl	800b038 <__assert_func>
 80097b6:	2301      	movs	r3, #1
 80097b8:	6144      	str	r4, [r0, #20]
 80097ba:	6103      	str	r3, [r0, #16]
 80097bc:	bd10      	pop	{r4, pc}
 80097be:	bf00      	nop
 80097c0:	0800bf41 	.word	0x0800bf41
 80097c4:	0800bf52 	.word	0x0800bf52

080097c8 <__multiply>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	4691      	mov	r9, r2
 80097ce:	690a      	ldr	r2, [r1, #16]
 80097d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	bfb8      	it	lt
 80097d8:	460b      	movlt	r3, r1
 80097da:	460c      	mov	r4, r1
 80097dc:	bfbc      	itt	lt
 80097de:	464c      	movlt	r4, r9
 80097e0:	4699      	movlt	r9, r3
 80097e2:	6927      	ldr	r7, [r4, #16]
 80097e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097e8:	68a3      	ldr	r3, [r4, #8]
 80097ea:	6861      	ldr	r1, [r4, #4]
 80097ec:	eb07 060a 	add.w	r6, r7, sl
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	b085      	sub	sp, #20
 80097f4:	bfb8      	it	lt
 80097f6:	3101      	addlt	r1, #1
 80097f8:	f7ff fe90 	bl	800951c <_Balloc>
 80097fc:	b930      	cbnz	r0, 800980c <__multiply+0x44>
 80097fe:	4602      	mov	r2, r0
 8009800:	4b44      	ldr	r3, [pc, #272]	; (8009914 <__multiply+0x14c>)
 8009802:	4845      	ldr	r0, [pc, #276]	; (8009918 <__multiply+0x150>)
 8009804:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009808:	f001 fc16 	bl	800b038 <__assert_func>
 800980c:	f100 0514 	add.w	r5, r0, #20
 8009810:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009814:	462b      	mov	r3, r5
 8009816:	2200      	movs	r2, #0
 8009818:	4543      	cmp	r3, r8
 800981a:	d321      	bcc.n	8009860 <__multiply+0x98>
 800981c:	f104 0314 	add.w	r3, r4, #20
 8009820:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009824:	f109 0314 	add.w	r3, r9, #20
 8009828:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800982c:	9202      	str	r2, [sp, #8]
 800982e:	1b3a      	subs	r2, r7, r4
 8009830:	3a15      	subs	r2, #21
 8009832:	f022 0203 	bic.w	r2, r2, #3
 8009836:	3204      	adds	r2, #4
 8009838:	f104 0115 	add.w	r1, r4, #21
 800983c:	428f      	cmp	r7, r1
 800983e:	bf38      	it	cc
 8009840:	2204      	movcc	r2, #4
 8009842:	9201      	str	r2, [sp, #4]
 8009844:	9a02      	ldr	r2, [sp, #8]
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	429a      	cmp	r2, r3
 800984a:	d80c      	bhi.n	8009866 <__multiply+0x9e>
 800984c:	2e00      	cmp	r6, #0
 800984e:	dd03      	ble.n	8009858 <__multiply+0x90>
 8009850:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009854:	2b00      	cmp	r3, #0
 8009856:	d05b      	beq.n	8009910 <__multiply+0x148>
 8009858:	6106      	str	r6, [r0, #16]
 800985a:	b005      	add	sp, #20
 800985c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009860:	f843 2b04 	str.w	r2, [r3], #4
 8009864:	e7d8      	b.n	8009818 <__multiply+0x50>
 8009866:	f8b3 a000 	ldrh.w	sl, [r3]
 800986a:	f1ba 0f00 	cmp.w	sl, #0
 800986e:	d024      	beq.n	80098ba <__multiply+0xf2>
 8009870:	f104 0e14 	add.w	lr, r4, #20
 8009874:	46a9      	mov	r9, r5
 8009876:	f04f 0c00 	mov.w	ip, #0
 800987a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800987e:	f8d9 1000 	ldr.w	r1, [r9]
 8009882:	fa1f fb82 	uxth.w	fp, r2
 8009886:	b289      	uxth	r1, r1
 8009888:	fb0a 110b 	mla	r1, sl, fp, r1
 800988c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009890:	f8d9 2000 	ldr.w	r2, [r9]
 8009894:	4461      	add	r1, ip
 8009896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800989a:	fb0a c20b 	mla	r2, sl, fp, ip
 800989e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098a2:	b289      	uxth	r1, r1
 80098a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098a8:	4577      	cmp	r7, lr
 80098aa:	f849 1b04 	str.w	r1, [r9], #4
 80098ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098b2:	d8e2      	bhi.n	800987a <__multiply+0xb2>
 80098b4:	9a01      	ldr	r2, [sp, #4]
 80098b6:	f845 c002 	str.w	ip, [r5, r2]
 80098ba:	9a03      	ldr	r2, [sp, #12]
 80098bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098c0:	3304      	adds	r3, #4
 80098c2:	f1b9 0f00 	cmp.w	r9, #0
 80098c6:	d021      	beq.n	800990c <__multiply+0x144>
 80098c8:	6829      	ldr	r1, [r5, #0]
 80098ca:	f104 0c14 	add.w	ip, r4, #20
 80098ce:	46ae      	mov	lr, r5
 80098d0:	f04f 0a00 	mov.w	sl, #0
 80098d4:	f8bc b000 	ldrh.w	fp, [ip]
 80098d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098dc:	fb09 220b 	mla	r2, r9, fp, r2
 80098e0:	4452      	add	r2, sl
 80098e2:	b289      	uxth	r1, r1
 80098e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098e8:	f84e 1b04 	str.w	r1, [lr], #4
 80098ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80098f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098f4:	f8be 1000 	ldrh.w	r1, [lr]
 80098f8:	fb09 110a 	mla	r1, r9, sl, r1
 80098fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009900:	4567      	cmp	r7, ip
 8009902:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009906:	d8e5      	bhi.n	80098d4 <__multiply+0x10c>
 8009908:	9a01      	ldr	r2, [sp, #4]
 800990a:	50a9      	str	r1, [r5, r2]
 800990c:	3504      	adds	r5, #4
 800990e:	e799      	b.n	8009844 <__multiply+0x7c>
 8009910:	3e01      	subs	r6, #1
 8009912:	e79b      	b.n	800984c <__multiply+0x84>
 8009914:	0800bf41 	.word	0x0800bf41
 8009918:	0800bf52 	.word	0x0800bf52

0800991c <__pow5mult>:
 800991c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009920:	4615      	mov	r5, r2
 8009922:	f012 0203 	ands.w	r2, r2, #3
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	d007      	beq.n	800993c <__pow5mult+0x20>
 800992c:	4c25      	ldr	r4, [pc, #148]	; (80099c4 <__pow5mult+0xa8>)
 800992e:	3a01      	subs	r2, #1
 8009930:	2300      	movs	r3, #0
 8009932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009936:	f7ff fe53 	bl	80095e0 <__multadd>
 800993a:	4607      	mov	r7, r0
 800993c:	10ad      	asrs	r5, r5, #2
 800993e:	d03d      	beq.n	80099bc <__pow5mult+0xa0>
 8009940:	69f4      	ldr	r4, [r6, #28]
 8009942:	b97c      	cbnz	r4, 8009964 <__pow5mult+0x48>
 8009944:	2010      	movs	r0, #16
 8009946:	f7fd fe4f 	bl	80075e8 <malloc>
 800994a:	4602      	mov	r2, r0
 800994c:	61f0      	str	r0, [r6, #28]
 800994e:	b928      	cbnz	r0, 800995c <__pow5mult+0x40>
 8009950:	4b1d      	ldr	r3, [pc, #116]	; (80099c8 <__pow5mult+0xac>)
 8009952:	481e      	ldr	r0, [pc, #120]	; (80099cc <__pow5mult+0xb0>)
 8009954:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009958:	f001 fb6e 	bl	800b038 <__assert_func>
 800995c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009960:	6004      	str	r4, [r0, #0]
 8009962:	60c4      	str	r4, [r0, #12]
 8009964:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800996c:	b94c      	cbnz	r4, 8009982 <__pow5mult+0x66>
 800996e:	f240 2171 	movw	r1, #625	; 0x271
 8009972:	4630      	mov	r0, r6
 8009974:	f7ff ff12 	bl	800979c <__i2b>
 8009978:	2300      	movs	r3, #0
 800997a:	f8c8 0008 	str.w	r0, [r8, #8]
 800997e:	4604      	mov	r4, r0
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	f04f 0900 	mov.w	r9, #0
 8009986:	07eb      	lsls	r3, r5, #31
 8009988:	d50a      	bpl.n	80099a0 <__pow5mult+0x84>
 800998a:	4639      	mov	r1, r7
 800998c:	4622      	mov	r2, r4
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ff1a 	bl	80097c8 <__multiply>
 8009994:	4639      	mov	r1, r7
 8009996:	4680      	mov	r8, r0
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff fdff 	bl	800959c <_Bfree>
 800999e:	4647      	mov	r7, r8
 80099a0:	106d      	asrs	r5, r5, #1
 80099a2:	d00b      	beq.n	80099bc <__pow5mult+0xa0>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	b938      	cbnz	r0, 80099b8 <__pow5mult+0x9c>
 80099a8:	4622      	mov	r2, r4
 80099aa:	4621      	mov	r1, r4
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7ff ff0b 	bl	80097c8 <__multiply>
 80099b2:	6020      	str	r0, [r4, #0]
 80099b4:	f8c0 9000 	str.w	r9, [r0]
 80099b8:	4604      	mov	r4, r0
 80099ba:	e7e4      	b.n	8009986 <__pow5mult+0x6a>
 80099bc:	4638      	mov	r0, r7
 80099be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c2:	bf00      	nop
 80099c4:	0800c0a0 	.word	0x0800c0a0
 80099c8:	0800bed2 	.word	0x0800bed2
 80099cc:	0800bf52 	.word	0x0800bf52

080099d0 <__lshift>:
 80099d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	460c      	mov	r4, r1
 80099d6:	6849      	ldr	r1, [r1, #4]
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099de:	68a3      	ldr	r3, [r4, #8]
 80099e0:	4607      	mov	r7, r0
 80099e2:	4691      	mov	r9, r2
 80099e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099e8:	f108 0601 	add.w	r6, r8, #1
 80099ec:	42b3      	cmp	r3, r6
 80099ee:	db0b      	blt.n	8009a08 <__lshift+0x38>
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff fd93 	bl	800951c <_Balloc>
 80099f6:	4605      	mov	r5, r0
 80099f8:	b948      	cbnz	r0, 8009a0e <__lshift+0x3e>
 80099fa:	4602      	mov	r2, r0
 80099fc:	4b28      	ldr	r3, [pc, #160]	; (8009aa0 <__lshift+0xd0>)
 80099fe:	4829      	ldr	r0, [pc, #164]	; (8009aa4 <__lshift+0xd4>)
 8009a00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009a04:	f001 fb18 	bl	800b038 <__assert_func>
 8009a08:	3101      	adds	r1, #1
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	e7ee      	b.n	80099ec <__lshift+0x1c>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f100 0114 	add.w	r1, r0, #20
 8009a14:	f100 0210 	add.w	r2, r0, #16
 8009a18:	4618      	mov	r0, r3
 8009a1a:	4553      	cmp	r3, sl
 8009a1c:	db33      	blt.n	8009a86 <__lshift+0xb6>
 8009a1e:	6920      	ldr	r0, [r4, #16]
 8009a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a24:	f104 0314 	add.w	r3, r4, #20
 8009a28:	f019 091f 	ands.w	r9, r9, #31
 8009a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a34:	d02b      	beq.n	8009a8e <__lshift+0xbe>
 8009a36:	f1c9 0e20 	rsb	lr, r9, #32
 8009a3a:	468a      	mov	sl, r1
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	fa00 f009 	lsl.w	r0, r0, r9
 8009a44:	4310      	orrs	r0, r2
 8009a46:	f84a 0b04 	str.w	r0, [sl], #4
 8009a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4e:	459c      	cmp	ip, r3
 8009a50:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a54:	d8f3      	bhi.n	8009a3e <__lshift+0x6e>
 8009a56:	ebac 0304 	sub.w	r3, ip, r4
 8009a5a:	3b15      	subs	r3, #21
 8009a5c:	f023 0303 	bic.w	r3, r3, #3
 8009a60:	3304      	adds	r3, #4
 8009a62:	f104 0015 	add.w	r0, r4, #21
 8009a66:	4584      	cmp	ip, r0
 8009a68:	bf38      	it	cc
 8009a6a:	2304      	movcc	r3, #4
 8009a6c:	50ca      	str	r2, [r1, r3]
 8009a6e:	b10a      	cbz	r2, 8009a74 <__lshift+0xa4>
 8009a70:	f108 0602 	add.w	r6, r8, #2
 8009a74:	3e01      	subs	r6, #1
 8009a76:	4638      	mov	r0, r7
 8009a78:	612e      	str	r6, [r5, #16]
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	f7ff fd8e 	bl	800959c <_Bfree>
 8009a80:	4628      	mov	r0, r5
 8009a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a86:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	e7c5      	b.n	8009a1a <__lshift+0x4a>
 8009a8e:	3904      	subs	r1, #4
 8009a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a94:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a98:	459c      	cmp	ip, r3
 8009a9a:	d8f9      	bhi.n	8009a90 <__lshift+0xc0>
 8009a9c:	e7ea      	b.n	8009a74 <__lshift+0xa4>
 8009a9e:	bf00      	nop
 8009aa0:	0800bf41 	.word	0x0800bf41
 8009aa4:	0800bf52 	.word	0x0800bf52

08009aa8 <__mcmp>:
 8009aa8:	b530      	push	{r4, r5, lr}
 8009aaa:	6902      	ldr	r2, [r0, #16]
 8009aac:	690c      	ldr	r4, [r1, #16]
 8009aae:	1b12      	subs	r2, r2, r4
 8009ab0:	d10e      	bne.n	8009ad0 <__mcmp+0x28>
 8009ab2:	f100 0314 	add.w	r3, r0, #20
 8009ab6:	3114      	adds	r1, #20
 8009ab8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009abc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ac0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ac4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ac8:	42a5      	cmp	r5, r4
 8009aca:	d003      	beq.n	8009ad4 <__mcmp+0x2c>
 8009acc:	d305      	bcc.n	8009ada <__mcmp+0x32>
 8009ace:	2201      	movs	r2, #1
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	bd30      	pop	{r4, r5, pc}
 8009ad4:	4283      	cmp	r3, r0
 8009ad6:	d3f3      	bcc.n	8009ac0 <__mcmp+0x18>
 8009ad8:	e7fa      	b.n	8009ad0 <__mcmp+0x28>
 8009ada:	f04f 32ff 	mov.w	r2, #4294967295
 8009ade:	e7f7      	b.n	8009ad0 <__mcmp+0x28>

08009ae0 <__mdiff>:
 8009ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4620      	mov	r0, r4
 8009aec:	4690      	mov	r8, r2
 8009aee:	f7ff ffdb 	bl	8009aa8 <__mcmp>
 8009af2:	1e05      	subs	r5, r0, #0
 8009af4:	d110      	bne.n	8009b18 <__mdiff+0x38>
 8009af6:	4629      	mov	r1, r5
 8009af8:	4630      	mov	r0, r6
 8009afa:	f7ff fd0f 	bl	800951c <_Balloc>
 8009afe:	b930      	cbnz	r0, 8009b0e <__mdiff+0x2e>
 8009b00:	4b3a      	ldr	r3, [pc, #232]	; (8009bec <__mdiff+0x10c>)
 8009b02:	4602      	mov	r2, r0
 8009b04:	f240 2137 	movw	r1, #567	; 0x237
 8009b08:	4839      	ldr	r0, [pc, #228]	; (8009bf0 <__mdiff+0x110>)
 8009b0a:	f001 fa95 	bl	800b038 <__assert_func>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b18:	bfa4      	itt	ge
 8009b1a:	4643      	movge	r3, r8
 8009b1c:	46a0      	movge	r8, r4
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b24:	bfa6      	itte	ge
 8009b26:	461c      	movge	r4, r3
 8009b28:	2500      	movge	r5, #0
 8009b2a:	2501      	movlt	r5, #1
 8009b2c:	f7ff fcf6 	bl	800951c <_Balloc>
 8009b30:	b920      	cbnz	r0, 8009b3c <__mdiff+0x5c>
 8009b32:	4b2e      	ldr	r3, [pc, #184]	; (8009bec <__mdiff+0x10c>)
 8009b34:	4602      	mov	r2, r0
 8009b36:	f240 2145 	movw	r1, #581	; 0x245
 8009b3a:	e7e5      	b.n	8009b08 <__mdiff+0x28>
 8009b3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b40:	6926      	ldr	r6, [r4, #16]
 8009b42:	60c5      	str	r5, [r0, #12]
 8009b44:	f104 0914 	add.w	r9, r4, #20
 8009b48:	f108 0514 	add.w	r5, r8, #20
 8009b4c:	f100 0e14 	add.w	lr, r0, #20
 8009b50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b58:	f108 0210 	add.w	r2, r8, #16
 8009b5c:	46f2      	mov	sl, lr
 8009b5e:	2100      	movs	r1, #0
 8009b60:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b68:	fa11 f88b 	uxtah	r8, r1, fp
 8009b6c:	b299      	uxth	r1, r3
 8009b6e:	0c1b      	lsrs	r3, r3, #16
 8009b70:	eba8 0801 	sub.w	r8, r8, r1
 8009b74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b7c:	fa1f f888 	uxth.w	r8, r8
 8009b80:	1419      	asrs	r1, r3, #16
 8009b82:	454e      	cmp	r6, r9
 8009b84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b88:	f84a 3b04 	str.w	r3, [sl], #4
 8009b8c:	d8e8      	bhi.n	8009b60 <__mdiff+0x80>
 8009b8e:	1b33      	subs	r3, r6, r4
 8009b90:	3b15      	subs	r3, #21
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	3304      	adds	r3, #4
 8009b98:	3415      	adds	r4, #21
 8009b9a:	42a6      	cmp	r6, r4
 8009b9c:	bf38      	it	cc
 8009b9e:	2304      	movcc	r3, #4
 8009ba0:	441d      	add	r5, r3
 8009ba2:	4473      	add	r3, lr
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	462e      	mov	r6, r5
 8009ba8:	4566      	cmp	r6, ip
 8009baa:	d30e      	bcc.n	8009bca <__mdiff+0xea>
 8009bac:	f10c 0203 	add.w	r2, ip, #3
 8009bb0:	1b52      	subs	r2, r2, r5
 8009bb2:	f022 0203 	bic.w	r2, r2, #3
 8009bb6:	3d03      	subs	r5, #3
 8009bb8:	45ac      	cmp	ip, r5
 8009bba:	bf38      	it	cc
 8009bbc:	2200      	movcc	r2, #0
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009bc4:	b17a      	cbz	r2, 8009be6 <__mdiff+0x106>
 8009bc6:	6107      	str	r7, [r0, #16]
 8009bc8:	e7a4      	b.n	8009b14 <__mdiff+0x34>
 8009bca:	f856 8b04 	ldr.w	r8, [r6], #4
 8009bce:	fa11 f288 	uxtah	r2, r1, r8
 8009bd2:	1414      	asrs	r4, r2, #16
 8009bd4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009bd8:	b292      	uxth	r2, r2
 8009bda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009bde:	f84e 2b04 	str.w	r2, [lr], #4
 8009be2:	1421      	asrs	r1, r4, #16
 8009be4:	e7e0      	b.n	8009ba8 <__mdiff+0xc8>
 8009be6:	3f01      	subs	r7, #1
 8009be8:	e7ea      	b.n	8009bc0 <__mdiff+0xe0>
 8009bea:	bf00      	nop
 8009bec:	0800bf41 	.word	0x0800bf41
 8009bf0:	0800bf52 	.word	0x0800bf52

08009bf4 <__ulp>:
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	ed8d 0b00 	vstr	d0, [sp]
 8009bfa:	9a01      	ldr	r2, [sp, #4]
 8009bfc:	4b0f      	ldr	r3, [pc, #60]	; (8009c3c <__ulp+0x48>)
 8009bfe:	4013      	ands	r3, r2
 8009c00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	dc08      	bgt.n	8009c1a <__ulp+0x26>
 8009c08:	425b      	negs	r3, r3
 8009c0a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009c0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c12:	da04      	bge.n	8009c1e <__ulp+0x2a>
 8009c14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c18:	4113      	asrs	r3, r2
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	e008      	b.n	8009c30 <__ulp+0x3c>
 8009c1e:	f1a2 0314 	sub.w	r3, r2, #20
 8009c22:	2b1e      	cmp	r3, #30
 8009c24:	bfda      	itte	le
 8009c26:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009c2a:	40da      	lsrle	r2, r3
 8009c2c:	2201      	movgt	r2, #1
 8009c2e:	2300      	movs	r3, #0
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	ec41 0b10 	vmov	d0, r0, r1
 8009c38:	b002      	add	sp, #8
 8009c3a:	4770      	bx	lr
 8009c3c:	7ff00000 	.word	0x7ff00000

08009c40 <__b2d>:
 8009c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c44:	6906      	ldr	r6, [r0, #16]
 8009c46:	f100 0814 	add.w	r8, r0, #20
 8009c4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009c4e:	1f37      	subs	r7, r6, #4
 8009c50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009c54:	4610      	mov	r0, r2
 8009c56:	f7ff fd53 	bl	8009700 <__hi0bits>
 8009c5a:	f1c0 0320 	rsb	r3, r0, #32
 8009c5e:	280a      	cmp	r0, #10
 8009c60:	600b      	str	r3, [r1, #0]
 8009c62:	491b      	ldr	r1, [pc, #108]	; (8009cd0 <__b2d+0x90>)
 8009c64:	dc15      	bgt.n	8009c92 <__b2d+0x52>
 8009c66:	f1c0 0c0b 	rsb	ip, r0, #11
 8009c6a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009c6e:	45b8      	cmp	r8, r7
 8009c70:	ea43 0501 	orr.w	r5, r3, r1
 8009c74:	bf34      	ite	cc
 8009c76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009c7a:	2300      	movcs	r3, #0
 8009c7c:	3015      	adds	r0, #21
 8009c7e:	fa02 f000 	lsl.w	r0, r2, r0
 8009c82:	fa23 f30c 	lsr.w	r3, r3, ip
 8009c86:	4303      	orrs	r3, r0
 8009c88:	461c      	mov	r4, r3
 8009c8a:	ec45 4b10 	vmov	d0, r4, r5
 8009c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c92:	45b8      	cmp	r8, r7
 8009c94:	bf3a      	itte	cc
 8009c96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009c9a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009c9e:	2300      	movcs	r3, #0
 8009ca0:	380b      	subs	r0, #11
 8009ca2:	d012      	beq.n	8009cca <__b2d+0x8a>
 8009ca4:	f1c0 0120 	rsb	r1, r0, #32
 8009ca8:	fa23 f401 	lsr.w	r4, r3, r1
 8009cac:	4082      	lsls	r2, r0
 8009cae:	4322      	orrs	r2, r4
 8009cb0:	4547      	cmp	r7, r8
 8009cb2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009cb6:	bf8c      	ite	hi
 8009cb8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009cbc:	2200      	movls	r2, #0
 8009cbe:	4083      	lsls	r3, r0
 8009cc0:	40ca      	lsrs	r2, r1
 8009cc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	e7de      	b.n	8009c88 <__b2d+0x48>
 8009cca:	ea42 0501 	orr.w	r5, r2, r1
 8009cce:	e7db      	b.n	8009c88 <__b2d+0x48>
 8009cd0:	3ff00000 	.word	0x3ff00000

08009cd4 <__d2b>:
 8009cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cd8:	460f      	mov	r7, r1
 8009cda:	2101      	movs	r1, #1
 8009cdc:	ec59 8b10 	vmov	r8, r9, d0
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	f7ff fc1b 	bl	800951c <_Balloc>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	b930      	cbnz	r0, 8009cf8 <__d2b+0x24>
 8009cea:	4602      	mov	r2, r0
 8009cec:	4b24      	ldr	r3, [pc, #144]	; (8009d80 <__d2b+0xac>)
 8009cee:	4825      	ldr	r0, [pc, #148]	; (8009d84 <__d2b+0xb0>)
 8009cf0:	f240 310f 	movw	r1, #783	; 0x30f
 8009cf4:	f001 f9a0 	bl	800b038 <__assert_func>
 8009cf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d00:	bb2d      	cbnz	r5, 8009d4e <__d2b+0x7a>
 8009d02:	9301      	str	r3, [sp, #4]
 8009d04:	f1b8 0300 	subs.w	r3, r8, #0
 8009d08:	d026      	beq.n	8009d58 <__d2b+0x84>
 8009d0a:	4668      	mov	r0, sp
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	f7ff fd17 	bl	8009740 <__lo0bits>
 8009d12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d16:	b1e8      	cbz	r0, 8009d54 <__d2b+0x80>
 8009d18:	f1c0 0320 	rsb	r3, r0, #32
 8009d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d20:	430b      	orrs	r3, r1
 8009d22:	40c2      	lsrs	r2, r0
 8009d24:	6163      	str	r3, [r4, #20]
 8009d26:	9201      	str	r2, [sp, #4]
 8009d28:	9b01      	ldr	r3, [sp, #4]
 8009d2a:	61a3      	str	r3, [r4, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	bf14      	ite	ne
 8009d30:	2202      	movne	r2, #2
 8009d32:	2201      	moveq	r2, #1
 8009d34:	6122      	str	r2, [r4, #16]
 8009d36:	b1bd      	cbz	r5, 8009d68 <__d2b+0x94>
 8009d38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d3c:	4405      	add	r5, r0
 8009d3e:	603d      	str	r5, [r7, #0]
 8009d40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d44:	6030      	str	r0, [r6, #0]
 8009d46:	4620      	mov	r0, r4
 8009d48:	b003      	add	sp, #12
 8009d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d52:	e7d6      	b.n	8009d02 <__d2b+0x2e>
 8009d54:	6161      	str	r1, [r4, #20]
 8009d56:	e7e7      	b.n	8009d28 <__d2b+0x54>
 8009d58:	a801      	add	r0, sp, #4
 8009d5a:	f7ff fcf1 	bl	8009740 <__lo0bits>
 8009d5e:	9b01      	ldr	r3, [sp, #4]
 8009d60:	6163      	str	r3, [r4, #20]
 8009d62:	3020      	adds	r0, #32
 8009d64:	2201      	movs	r2, #1
 8009d66:	e7e5      	b.n	8009d34 <__d2b+0x60>
 8009d68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d70:	6038      	str	r0, [r7, #0]
 8009d72:	6918      	ldr	r0, [r3, #16]
 8009d74:	f7ff fcc4 	bl	8009700 <__hi0bits>
 8009d78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d7c:	e7e2      	b.n	8009d44 <__d2b+0x70>
 8009d7e:	bf00      	nop
 8009d80:	0800bf41 	.word	0x0800bf41
 8009d84:	0800bf52 	.word	0x0800bf52

08009d88 <__ratio>:
 8009d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	4688      	mov	r8, r1
 8009d8e:	4669      	mov	r1, sp
 8009d90:	4681      	mov	r9, r0
 8009d92:	f7ff ff55 	bl	8009c40 <__b2d>
 8009d96:	a901      	add	r1, sp, #4
 8009d98:	4640      	mov	r0, r8
 8009d9a:	ec55 4b10 	vmov	r4, r5, d0
 8009d9e:	f7ff ff4f 	bl	8009c40 <__b2d>
 8009da2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009da6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009daa:	eba3 0c02 	sub.w	ip, r3, r2
 8009dae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009db8:	ec51 0b10 	vmov	r0, r1, d0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	bfd6      	itet	le
 8009dc0:	460a      	movle	r2, r1
 8009dc2:	462a      	movgt	r2, r5
 8009dc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009dc8:	468b      	mov	fp, r1
 8009dca:	462f      	mov	r7, r5
 8009dcc:	bfd4      	ite	le
 8009dce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009dd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	ee10 2a10 	vmov	r2, s0
 8009ddc:	465b      	mov	r3, fp
 8009dde:	4639      	mov	r1, r7
 8009de0:	f7f6 fd3c 	bl	800085c <__aeabi_ddiv>
 8009de4:	ec41 0b10 	vmov	d0, r0, r1
 8009de8:	b003      	add	sp, #12
 8009dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dee <__copybits>:
 8009dee:	3901      	subs	r1, #1
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	1149      	asrs	r1, r1, #5
 8009df4:	6914      	ldr	r4, [r2, #16]
 8009df6:	3101      	adds	r1, #1
 8009df8:	f102 0314 	add.w	r3, r2, #20
 8009dfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e04:	1f05      	subs	r5, r0, #4
 8009e06:	42a3      	cmp	r3, r4
 8009e08:	d30c      	bcc.n	8009e24 <__copybits+0x36>
 8009e0a:	1aa3      	subs	r3, r4, r2
 8009e0c:	3b11      	subs	r3, #17
 8009e0e:	f023 0303 	bic.w	r3, r3, #3
 8009e12:	3211      	adds	r2, #17
 8009e14:	42a2      	cmp	r2, r4
 8009e16:	bf88      	it	hi
 8009e18:	2300      	movhi	r3, #0
 8009e1a:	4418      	add	r0, r3
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4288      	cmp	r0, r1
 8009e20:	d305      	bcc.n	8009e2e <__copybits+0x40>
 8009e22:	bd70      	pop	{r4, r5, r6, pc}
 8009e24:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e28:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e2c:	e7eb      	b.n	8009e06 <__copybits+0x18>
 8009e2e:	f840 3b04 	str.w	r3, [r0], #4
 8009e32:	e7f4      	b.n	8009e1e <__copybits+0x30>

08009e34 <__any_on>:
 8009e34:	f100 0214 	add.w	r2, r0, #20
 8009e38:	6900      	ldr	r0, [r0, #16]
 8009e3a:	114b      	asrs	r3, r1, #5
 8009e3c:	4298      	cmp	r0, r3
 8009e3e:	b510      	push	{r4, lr}
 8009e40:	db11      	blt.n	8009e66 <__any_on+0x32>
 8009e42:	dd0a      	ble.n	8009e5a <__any_on+0x26>
 8009e44:	f011 011f 	ands.w	r1, r1, #31
 8009e48:	d007      	beq.n	8009e5a <__any_on+0x26>
 8009e4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e4e:	fa24 f001 	lsr.w	r0, r4, r1
 8009e52:	fa00 f101 	lsl.w	r1, r0, r1
 8009e56:	428c      	cmp	r4, r1
 8009e58:	d10b      	bne.n	8009e72 <__any_on+0x3e>
 8009e5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d803      	bhi.n	8009e6a <__any_on+0x36>
 8009e62:	2000      	movs	r0, #0
 8009e64:	bd10      	pop	{r4, pc}
 8009e66:	4603      	mov	r3, r0
 8009e68:	e7f7      	b.n	8009e5a <__any_on+0x26>
 8009e6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e6e:	2900      	cmp	r1, #0
 8009e70:	d0f5      	beq.n	8009e5e <__any_on+0x2a>
 8009e72:	2001      	movs	r0, #1
 8009e74:	e7f6      	b.n	8009e64 <__any_on+0x30>

08009e76 <sulp>:
 8009e76:	b570      	push	{r4, r5, r6, lr}
 8009e78:	4604      	mov	r4, r0
 8009e7a:	460d      	mov	r5, r1
 8009e7c:	ec45 4b10 	vmov	d0, r4, r5
 8009e80:	4616      	mov	r6, r2
 8009e82:	f7ff feb7 	bl	8009bf4 <__ulp>
 8009e86:	ec51 0b10 	vmov	r0, r1, d0
 8009e8a:	b17e      	cbz	r6, 8009eac <sulp+0x36>
 8009e8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd09      	ble.n	8009eac <sulp+0x36>
 8009e98:	051b      	lsls	r3, r3, #20
 8009e9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009e9e:	2400      	movs	r4, #0
 8009ea0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	462b      	mov	r3, r5
 8009ea8:	f7f6 fbae 	bl	8000608 <__aeabi_dmul>
 8009eac:	bd70      	pop	{r4, r5, r6, pc}
	...

08009eb0 <_strtod_l>:
 8009eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	ed2d 8b02 	vpush	{d8}
 8009eb8:	b09b      	sub	sp, #108	; 0x6c
 8009eba:	4604      	mov	r4, r0
 8009ebc:	9213      	str	r2, [sp, #76]	; 0x4c
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	9216      	str	r2, [sp, #88]	; 0x58
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	f04f 0800 	mov.w	r8, #0
 8009ec8:	f04f 0900 	mov.w	r9, #0
 8009ecc:	460a      	mov	r2, r1
 8009ece:	9215      	str	r2, [sp, #84]	; 0x54
 8009ed0:	7811      	ldrb	r1, [r2, #0]
 8009ed2:	292b      	cmp	r1, #43	; 0x2b
 8009ed4:	d04c      	beq.n	8009f70 <_strtod_l+0xc0>
 8009ed6:	d83a      	bhi.n	8009f4e <_strtod_l+0x9e>
 8009ed8:	290d      	cmp	r1, #13
 8009eda:	d834      	bhi.n	8009f46 <_strtod_l+0x96>
 8009edc:	2908      	cmp	r1, #8
 8009ede:	d834      	bhi.n	8009f4a <_strtod_l+0x9a>
 8009ee0:	2900      	cmp	r1, #0
 8009ee2:	d03d      	beq.n	8009f60 <_strtod_l+0xb0>
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ee8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009eea:	7832      	ldrb	r2, [r6, #0]
 8009eec:	2a30      	cmp	r2, #48	; 0x30
 8009eee:	f040 80b4 	bne.w	800a05a <_strtod_l+0x1aa>
 8009ef2:	7872      	ldrb	r2, [r6, #1]
 8009ef4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009ef8:	2a58      	cmp	r2, #88	; 0x58
 8009efa:	d170      	bne.n	8009fde <_strtod_l+0x12e>
 8009efc:	9302      	str	r3, [sp, #8]
 8009efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	ab16      	add	r3, sp, #88	; 0x58
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	4a8e      	ldr	r2, [pc, #568]	; (800a140 <_strtod_l+0x290>)
 8009f08:	ab17      	add	r3, sp, #92	; 0x5c
 8009f0a:	a915      	add	r1, sp, #84	; 0x54
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f001 f92f 	bl	800b170 <__gethex>
 8009f12:	f010 070f 	ands.w	r7, r0, #15
 8009f16:	4605      	mov	r5, r0
 8009f18:	d005      	beq.n	8009f26 <_strtod_l+0x76>
 8009f1a:	2f06      	cmp	r7, #6
 8009f1c:	d12a      	bne.n	8009f74 <_strtod_l+0xc4>
 8009f1e:	3601      	adds	r6, #1
 8009f20:	2300      	movs	r3, #0
 8009f22:	9615      	str	r6, [sp, #84]	; 0x54
 8009f24:	930a      	str	r3, [sp, #40]	; 0x28
 8009f26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f040 857f 	bne.w	800aa2c <_strtod_l+0xb7c>
 8009f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f30:	b1db      	cbz	r3, 8009f6a <_strtod_l+0xba>
 8009f32:	4642      	mov	r2, r8
 8009f34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009f38:	ec43 2b10 	vmov	d0, r2, r3
 8009f3c:	b01b      	add	sp, #108	; 0x6c
 8009f3e:	ecbd 8b02 	vpop	{d8}
 8009f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f46:	2920      	cmp	r1, #32
 8009f48:	d1cc      	bne.n	8009ee4 <_strtod_l+0x34>
 8009f4a:	3201      	adds	r2, #1
 8009f4c:	e7bf      	b.n	8009ece <_strtod_l+0x1e>
 8009f4e:	292d      	cmp	r1, #45	; 0x2d
 8009f50:	d1c8      	bne.n	8009ee4 <_strtod_l+0x34>
 8009f52:	2101      	movs	r1, #1
 8009f54:	910a      	str	r1, [sp, #40]	; 0x28
 8009f56:	1c51      	adds	r1, r2, #1
 8009f58:	9115      	str	r1, [sp, #84]	; 0x54
 8009f5a:	7852      	ldrb	r2, [r2, #1]
 8009f5c:	2a00      	cmp	r2, #0
 8009f5e:	d1c3      	bne.n	8009ee8 <_strtod_l+0x38>
 8009f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f62:	9515      	str	r5, [sp, #84]	; 0x54
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f040 855f 	bne.w	800aa28 <_strtod_l+0xb78>
 8009f6a:	4642      	mov	r2, r8
 8009f6c:	464b      	mov	r3, r9
 8009f6e:	e7e3      	b.n	8009f38 <_strtod_l+0x88>
 8009f70:	2100      	movs	r1, #0
 8009f72:	e7ef      	b.n	8009f54 <_strtod_l+0xa4>
 8009f74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f76:	b13a      	cbz	r2, 8009f88 <_strtod_l+0xd8>
 8009f78:	2135      	movs	r1, #53	; 0x35
 8009f7a:	a818      	add	r0, sp, #96	; 0x60
 8009f7c:	f7ff ff37 	bl	8009dee <__copybits>
 8009f80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009f82:	4620      	mov	r0, r4
 8009f84:	f7ff fb0a 	bl	800959c <_Bfree>
 8009f88:	3f01      	subs	r7, #1
 8009f8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f8c:	2f04      	cmp	r7, #4
 8009f8e:	d806      	bhi.n	8009f9e <_strtod_l+0xee>
 8009f90:	e8df f007 	tbb	[pc, r7]
 8009f94:	201d0314 	.word	0x201d0314
 8009f98:	14          	.byte	0x14
 8009f99:	00          	.byte	0x00
 8009f9a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009f9e:	05e9      	lsls	r1, r5, #23
 8009fa0:	bf48      	it	mi
 8009fa2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009fa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009faa:	0d1b      	lsrs	r3, r3, #20
 8009fac:	051b      	lsls	r3, r3, #20
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1b9      	bne.n	8009f26 <_strtod_l+0x76>
 8009fb2:	f7fe fbb9 	bl	8008728 <__errno>
 8009fb6:	2322      	movs	r3, #34	; 0x22
 8009fb8:	6003      	str	r3, [r0, #0]
 8009fba:	e7b4      	b.n	8009f26 <_strtod_l+0x76>
 8009fbc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009fc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009fc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009fc8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009fcc:	e7e7      	b.n	8009f9e <_strtod_l+0xee>
 8009fce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a148 <_strtod_l+0x298>
 8009fd2:	e7e4      	b.n	8009f9e <_strtod_l+0xee>
 8009fd4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009fd8:	f04f 38ff 	mov.w	r8, #4294967295
 8009fdc:	e7df      	b.n	8009f9e <_strtod_l+0xee>
 8009fde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	9215      	str	r2, [sp, #84]	; 0x54
 8009fe4:	785b      	ldrb	r3, [r3, #1]
 8009fe6:	2b30      	cmp	r3, #48	; 0x30
 8009fe8:	d0f9      	beq.n	8009fde <_strtod_l+0x12e>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d09b      	beq.n	8009f26 <_strtod_l+0x76>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f04f 0a00 	mov.w	sl, #0
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ffa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009ffe:	46d3      	mov	fp, sl
 800a000:	220a      	movs	r2, #10
 800a002:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a004:	7806      	ldrb	r6, [r0, #0]
 800a006:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a00a:	b2d9      	uxtb	r1, r3
 800a00c:	2909      	cmp	r1, #9
 800a00e:	d926      	bls.n	800a05e <_strtod_l+0x1ae>
 800a010:	494c      	ldr	r1, [pc, #304]	; (800a144 <_strtod_l+0x294>)
 800a012:	2201      	movs	r2, #1
 800a014:	f000 ffe6 	bl	800afe4 <strncmp>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d030      	beq.n	800a07e <_strtod_l+0x1ce>
 800a01c:	2000      	movs	r0, #0
 800a01e:	4632      	mov	r2, r6
 800a020:	9005      	str	r0, [sp, #20]
 800a022:	465e      	mov	r6, fp
 800a024:	4603      	mov	r3, r0
 800a026:	2a65      	cmp	r2, #101	; 0x65
 800a028:	d001      	beq.n	800a02e <_strtod_l+0x17e>
 800a02a:	2a45      	cmp	r2, #69	; 0x45
 800a02c:	d113      	bne.n	800a056 <_strtod_l+0x1a6>
 800a02e:	b91e      	cbnz	r6, 800a038 <_strtod_l+0x188>
 800a030:	9a04      	ldr	r2, [sp, #16]
 800a032:	4302      	orrs	r2, r0
 800a034:	d094      	beq.n	8009f60 <_strtod_l+0xb0>
 800a036:	2600      	movs	r6, #0
 800a038:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a03a:	1c6a      	adds	r2, r5, #1
 800a03c:	9215      	str	r2, [sp, #84]	; 0x54
 800a03e:	786a      	ldrb	r2, [r5, #1]
 800a040:	2a2b      	cmp	r2, #43	; 0x2b
 800a042:	d074      	beq.n	800a12e <_strtod_l+0x27e>
 800a044:	2a2d      	cmp	r2, #45	; 0x2d
 800a046:	d078      	beq.n	800a13a <_strtod_l+0x28a>
 800a048:	f04f 0c00 	mov.w	ip, #0
 800a04c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a050:	2909      	cmp	r1, #9
 800a052:	d97f      	bls.n	800a154 <_strtod_l+0x2a4>
 800a054:	9515      	str	r5, [sp, #84]	; 0x54
 800a056:	2700      	movs	r7, #0
 800a058:	e09e      	b.n	800a198 <_strtod_l+0x2e8>
 800a05a:	2300      	movs	r3, #0
 800a05c:	e7c8      	b.n	8009ff0 <_strtod_l+0x140>
 800a05e:	f1bb 0f08 	cmp.w	fp, #8
 800a062:	bfd8      	it	le
 800a064:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a066:	f100 0001 	add.w	r0, r0, #1
 800a06a:	bfda      	itte	le
 800a06c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a070:	9309      	strle	r3, [sp, #36]	; 0x24
 800a072:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a076:	f10b 0b01 	add.w	fp, fp, #1
 800a07a:	9015      	str	r0, [sp, #84]	; 0x54
 800a07c:	e7c1      	b.n	800a002 <_strtod_l+0x152>
 800a07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	9215      	str	r2, [sp, #84]	; 0x54
 800a084:	785a      	ldrb	r2, [r3, #1]
 800a086:	f1bb 0f00 	cmp.w	fp, #0
 800a08a:	d037      	beq.n	800a0fc <_strtod_l+0x24c>
 800a08c:	9005      	str	r0, [sp, #20]
 800a08e:	465e      	mov	r6, fp
 800a090:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a094:	2b09      	cmp	r3, #9
 800a096:	d912      	bls.n	800a0be <_strtod_l+0x20e>
 800a098:	2301      	movs	r3, #1
 800a09a:	e7c4      	b.n	800a026 <_strtod_l+0x176>
 800a09c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	9215      	str	r2, [sp, #84]	; 0x54
 800a0a2:	785a      	ldrb	r2, [r3, #1]
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	2a30      	cmp	r2, #48	; 0x30
 800a0a8:	d0f8      	beq.n	800a09c <_strtod_l+0x1ec>
 800a0aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a0ae:	2b08      	cmp	r3, #8
 800a0b0:	f200 84c1 	bhi.w	800aa36 <_strtod_l+0xb86>
 800a0b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0b6:	9005      	str	r0, [sp, #20]
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0bc:	4606      	mov	r6, r0
 800a0be:	3a30      	subs	r2, #48	; 0x30
 800a0c0:	f100 0301 	add.w	r3, r0, #1
 800a0c4:	d014      	beq.n	800a0f0 <_strtod_l+0x240>
 800a0c6:	9905      	ldr	r1, [sp, #20]
 800a0c8:	4419      	add	r1, r3
 800a0ca:	9105      	str	r1, [sp, #20]
 800a0cc:	4633      	mov	r3, r6
 800a0ce:	eb00 0c06 	add.w	ip, r0, r6
 800a0d2:	210a      	movs	r1, #10
 800a0d4:	4563      	cmp	r3, ip
 800a0d6:	d113      	bne.n	800a100 <_strtod_l+0x250>
 800a0d8:	1833      	adds	r3, r6, r0
 800a0da:	2b08      	cmp	r3, #8
 800a0dc:	f106 0601 	add.w	r6, r6, #1
 800a0e0:	4406      	add	r6, r0
 800a0e2:	dc1a      	bgt.n	800a11a <_strtod_l+0x26a>
 800a0e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0e6:	230a      	movs	r3, #10
 800a0e8:	fb03 2301 	mla	r3, r3, r1, r2
 800a0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a0f2:	1c51      	adds	r1, r2, #1
 800a0f4:	9115      	str	r1, [sp, #84]	; 0x54
 800a0f6:	7852      	ldrb	r2, [r2, #1]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	e7c9      	b.n	800a090 <_strtod_l+0x1e0>
 800a0fc:	4658      	mov	r0, fp
 800a0fe:	e7d2      	b.n	800a0a6 <_strtod_l+0x1f6>
 800a100:	2b08      	cmp	r3, #8
 800a102:	f103 0301 	add.w	r3, r3, #1
 800a106:	dc03      	bgt.n	800a110 <_strtod_l+0x260>
 800a108:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a10a:	434f      	muls	r7, r1
 800a10c:	9709      	str	r7, [sp, #36]	; 0x24
 800a10e:	e7e1      	b.n	800a0d4 <_strtod_l+0x224>
 800a110:	2b10      	cmp	r3, #16
 800a112:	bfd8      	it	le
 800a114:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a118:	e7dc      	b.n	800a0d4 <_strtod_l+0x224>
 800a11a:	2e10      	cmp	r6, #16
 800a11c:	bfdc      	itt	le
 800a11e:	230a      	movle	r3, #10
 800a120:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a124:	e7e3      	b.n	800a0ee <_strtod_l+0x23e>
 800a126:	2300      	movs	r3, #0
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	2301      	movs	r3, #1
 800a12c:	e780      	b.n	800a030 <_strtod_l+0x180>
 800a12e:	f04f 0c00 	mov.w	ip, #0
 800a132:	1caa      	adds	r2, r5, #2
 800a134:	9215      	str	r2, [sp, #84]	; 0x54
 800a136:	78aa      	ldrb	r2, [r5, #2]
 800a138:	e788      	b.n	800a04c <_strtod_l+0x19c>
 800a13a:	f04f 0c01 	mov.w	ip, #1
 800a13e:	e7f8      	b.n	800a132 <_strtod_l+0x282>
 800a140:	0800c0b0 	.word	0x0800c0b0
 800a144:	0800c0ac 	.word	0x0800c0ac
 800a148:	7ff00000 	.word	0x7ff00000
 800a14c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a14e:	1c51      	adds	r1, r2, #1
 800a150:	9115      	str	r1, [sp, #84]	; 0x54
 800a152:	7852      	ldrb	r2, [r2, #1]
 800a154:	2a30      	cmp	r2, #48	; 0x30
 800a156:	d0f9      	beq.n	800a14c <_strtod_l+0x29c>
 800a158:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a15c:	2908      	cmp	r1, #8
 800a15e:	f63f af7a 	bhi.w	800a056 <_strtod_l+0x1a6>
 800a162:	3a30      	subs	r2, #48	; 0x30
 800a164:	9208      	str	r2, [sp, #32]
 800a166:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a168:	920c      	str	r2, [sp, #48]	; 0x30
 800a16a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a16c:	1c57      	adds	r7, r2, #1
 800a16e:	9715      	str	r7, [sp, #84]	; 0x54
 800a170:	7852      	ldrb	r2, [r2, #1]
 800a172:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a176:	f1be 0f09 	cmp.w	lr, #9
 800a17a:	d938      	bls.n	800a1ee <_strtod_l+0x33e>
 800a17c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a17e:	1a7f      	subs	r7, r7, r1
 800a180:	2f08      	cmp	r7, #8
 800a182:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a186:	dc03      	bgt.n	800a190 <_strtod_l+0x2e0>
 800a188:	9908      	ldr	r1, [sp, #32]
 800a18a:	428f      	cmp	r7, r1
 800a18c:	bfa8      	it	ge
 800a18e:	460f      	movge	r7, r1
 800a190:	f1bc 0f00 	cmp.w	ip, #0
 800a194:	d000      	beq.n	800a198 <_strtod_l+0x2e8>
 800a196:	427f      	negs	r7, r7
 800a198:	2e00      	cmp	r6, #0
 800a19a:	d14f      	bne.n	800a23c <_strtod_l+0x38c>
 800a19c:	9904      	ldr	r1, [sp, #16]
 800a19e:	4301      	orrs	r1, r0
 800a1a0:	f47f aec1 	bne.w	8009f26 <_strtod_l+0x76>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f47f aedb 	bne.w	8009f60 <_strtod_l+0xb0>
 800a1aa:	2a69      	cmp	r2, #105	; 0x69
 800a1ac:	d029      	beq.n	800a202 <_strtod_l+0x352>
 800a1ae:	dc26      	bgt.n	800a1fe <_strtod_l+0x34e>
 800a1b0:	2a49      	cmp	r2, #73	; 0x49
 800a1b2:	d026      	beq.n	800a202 <_strtod_l+0x352>
 800a1b4:	2a4e      	cmp	r2, #78	; 0x4e
 800a1b6:	f47f aed3 	bne.w	8009f60 <_strtod_l+0xb0>
 800a1ba:	499b      	ldr	r1, [pc, #620]	; (800a428 <_strtod_l+0x578>)
 800a1bc:	a815      	add	r0, sp, #84	; 0x54
 800a1be:	f001 fa17 	bl	800b5f0 <__match>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	f43f aecc 	beq.w	8009f60 <_strtod_l+0xb0>
 800a1c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b28      	cmp	r3, #40	; 0x28
 800a1ce:	d12f      	bne.n	800a230 <_strtod_l+0x380>
 800a1d0:	4996      	ldr	r1, [pc, #600]	; (800a42c <_strtod_l+0x57c>)
 800a1d2:	aa18      	add	r2, sp, #96	; 0x60
 800a1d4:	a815      	add	r0, sp, #84	; 0x54
 800a1d6:	f001 fa1f 	bl	800b618 <__hexnan>
 800a1da:	2805      	cmp	r0, #5
 800a1dc:	d128      	bne.n	800a230 <_strtod_l+0x380>
 800a1de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a1e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a1e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a1ec:	e69b      	b.n	8009f26 <_strtod_l+0x76>
 800a1ee:	9f08      	ldr	r7, [sp, #32]
 800a1f0:	210a      	movs	r1, #10
 800a1f2:	fb01 2107 	mla	r1, r1, r7, r2
 800a1f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a1fa:	9208      	str	r2, [sp, #32]
 800a1fc:	e7b5      	b.n	800a16a <_strtod_l+0x2ba>
 800a1fe:	2a6e      	cmp	r2, #110	; 0x6e
 800a200:	e7d9      	b.n	800a1b6 <_strtod_l+0x306>
 800a202:	498b      	ldr	r1, [pc, #556]	; (800a430 <_strtod_l+0x580>)
 800a204:	a815      	add	r0, sp, #84	; 0x54
 800a206:	f001 f9f3 	bl	800b5f0 <__match>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f43f aea8 	beq.w	8009f60 <_strtod_l+0xb0>
 800a210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a212:	4988      	ldr	r1, [pc, #544]	; (800a434 <_strtod_l+0x584>)
 800a214:	3b01      	subs	r3, #1
 800a216:	a815      	add	r0, sp, #84	; 0x54
 800a218:	9315      	str	r3, [sp, #84]	; 0x54
 800a21a:	f001 f9e9 	bl	800b5f0 <__match>
 800a21e:	b910      	cbnz	r0, 800a226 <_strtod_l+0x376>
 800a220:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a222:	3301      	adds	r3, #1
 800a224:	9315      	str	r3, [sp, #84]	; 0x54
 800a226:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a444 <_strtod_l+0x594>
 800a22a:	f04f 0800 	mov.w	r8, #0
 800a22e:	e67a      	b.n	8009f26 <_strtod_l+0x76>
 800a230:	4881      	ldr	r0, [pc, #516]	; (800a438 <_strtod_l+0x588>)
 800a232:	f000 fef9 	bl	800b028 <nan>
 800a236:	ec59 8b10 	vmov	r8, r9, d0
 800a23a:	e674      	b.n	8009f26 <_strtod_l+0x76>
 800a23c:	9b05      	ldr	r3, [sp, #20]
 800a23e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a240:	1afb      	subs	r3, r7, r3
 800a242:	f1bb 0f00 	cmp.w	fp, #0
 800a246:	bf08      	it	eq
 800a248:	46b3      	moveq	fp, r6
 800a24a:	2e10      	cmp	r6, #16
 800a24c:	9308      	str	r3, [sp, #32]
 800a24e:	4635      	mov	r5, r6
 800a250:	bfa8      	it	ge
 800a252:	2510      	movge	r5, #16
 800a254:	f7f6 f95e 	bl	8000514 <__aeabi_ui2d>
 800a258:	2e09      	cmp	r6, #9
 800a25a:	4680      	mov	r8, r0
 800a25c:	4689      	mov	r9, r1
 800a25e:	dd13      	ble.n	800a288 <_strtod_l+0x3d8>
 800a260:	4b76      	ldr	r3, [pc, #472]	; (800a43c <_strtod_l+0x58c>)
 800a262:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a266:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a26a:	f7f6 f9cd 	bl	8000608 <__aeabi_dmul>
 800a26e:	4680      	mov	r8, r0
 800a270:	4650      	mov	r0, sl
 800a272:	4689      	mov	r9, r1
 800a274:	f7f6 f94e 	bl	8000514 <__aeabi_ui2d>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4640      	mov	r0, r8
 800a27e:	4649      	mov	r1, r9
 800a280:	f7f6 f80c 	bl	800029c <__adddf3>
 800a284:	4680      	mov	r8, r0
 800a286:	4689      	mov	r9, r1
 800a288:	2e0f      	cmp	r6, #15
 800a28a:	dc38      	bgt.n	800a2fe <_strtod_l+0x44e>
 800a28c:	9b08      	ldr	r3, [sp, #32]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f43f ae49 	beq.w	8009f26 <_strtod_l+0x76>
 800a294:	dd24      	ble.n	800a2e0 <_strtod_l+0x430>
 800a296:	2b16      	cmp	r3, #22
 800a298:	dc0b      	bgt.n	800a2b2 <_strtod_l+0x402>
 800a29a:	4968      	ldr	r1, [pc, #416]	; (800a43c <_strtod_l+0x58c>)
 800a29c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	464b      	mov	r3, r9
 800a2a8:	f7f6 f9ae 	bl	8000608 <__aeabi_dmul>
 800a2ac:	4680      	mov	r8, r0
 800a2ae:	4689      	mov	r9, r1
 800a2b0:	e639      	b.n	8009f26 <_strtod_l+0x76>
 800a2b2:	9a08      	ldr	r2, [sp, #32]
 800a2b4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	db20      	blt.n	800a2fe <_strtod_l+0x44e>
 800a2bc:	4c5f      	ldr	r4, [pc, #380]	; (800a43c <_strtod_l+0x58c>)
 800a2be:	f1c6 060f 	rsb	r6, r6, #15
 800a2c2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a2c6:	4642      	mov	r2, r8
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ce:	f7f6 f99b 	bl	8000608 <__aeabi_dmul>
 800a2d2:	9b08      	ldr	r3, [sp, #32]
 800a2d4:	1b9e      	subs	r6, r3, r6
 800a2d6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a2da:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a2de:	e7e3      	b.n	800a2a8 <_strtod_l+0x3f8>
 800a2e0:	9b08      	ldr	r3, [sp, #32]
 800a2e2:	3316      	adds	r3, #22
 800a2e4:	db0b      	blt.n	800a2fe <_strtod_l+0x44e>
 800a2e6:	9b05      	ldr	r3, [sp, #20]
 800a2e8:	1bdf      	subs	r7, r3, r7
 800a2ea:	4b54      	ldr	r3, [pc, #336]	; (800a43c <_strtod_l+0x58c>)
 800a2ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	f7f6 fab0 	bl	800085c <__aeabi_ddiv>
 800a2fc:	e7d6      	b.n	800a2ac <_strtod_l+0x3fc>
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	1b75      	subs	r5, r6, r5
 800a302:	441d      	add	r5, r3
 800a304:	2d00      	cmp	r5, #0
 800a306:	dd70      	ble.n	800a3ea <_strtod_l+0x53a>
 800a308:	f015 030f 	ands.w	r3, r5, #15
 800a30c:	d00a      	beq.n	800a324 <_strtod_l+0x474>
 800a30e:	494b      	ldr	r1, [pc, #300]	; (800a43c <_strtod_l+0x58c>)
 800a310:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a314:	4642      	mov	r2, r8
 800a316:	464b      	mov	r3, r9
 800a318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a31c:	f7f6 f974 	bl	8000608 <__aeabi_dmul>
 800a320:	4680      	mov	r8, r0
 800a322:	4689      	mov	r9, r1
 800a324:	f035 050f 	bics.w	r5, r5, #15
 800a328:	d04d      	beq.n	800a3c6 <_strtod_l+0x516>
 800a32a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a32e:	dd22      	ble.n	800a376 <_strtod_l+0x4c6>
 800a330:	2500      	movs	r5, #0
 800a332:	46ab      	mov	fp, r5
 800a334:	9509      	str	r5, [sp, #36]	; 0x24
 800a336:	9505      	str	r5, [sp, #20]
 800a338:	2322      	movs	r3, #34	; 0x22
 800a33a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a444 <_strtod_l+0x594>
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	f04f 0800 	mov.w	r8, #0
 800a344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a346:	2b00      	cmp	r3, #0
 800a348:	f43f aded 	beq.w	8009f26 <_strtod_l+0x76>
 800a34c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a34e:	4620      	mov	r0, r4
 800a350:	f7ff f924 	bl	800959c <_Bfree>
 800a354:	9905      	ldr	r1, [sp, #20]
 800a356:	4620      	mov	r0, r4
 800a358:	f7ff f920 	bl	800959c <_Bfree>
 800a35c:	4659      	mov	r1, fp
 800a35e:	4620      	mov	r0, r4
 800a360:	f7ff f91c 	bl	800959c <_Bfree>
 800a364:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a366:	4620      	mov	r0, r4
 800a368:	f7ff f918 	bl	800959c <_Bfree>
 800a36c:	4629      	mov	r1, r5
 800a36e:	4620      	mov	r0, r4
 800a370:	f7ff f914 	bl	800959c <_Bfree>
 800a374:	e5d7      	b.n	8009f26 <_strtod_l+0x76>
 800a376:	4b32      	ldr	r3, [pc, #200]	; (800a440 <_strtod_l+0x590>)
 800a378:	9304      	str	r3, [sp, #16]
 800a37a:	2300      	movs	r3, #0
 800a37c:	112d      	asrs	r5, r5, #4
 800a37e:	4640      	mov	r0, r8
 800a380:	4649      	mov	r1, r9
 800a382:	469a      	mov	sl, r3
 800a384:	2d01      	cmp	r5, #1
 800a386:	dc21      	bgt.n	800a3cc <_strtod_l+0x51c>
 800a388:	b10b      	cbz	r3, 800a38e <_strtod_l+0x4de>
 800a38a:	4680      	mov	r8, r0
 800a38c:	4689      	mov	r9, r1
 800a38e:	492c      	ldr	r1, [pc, #176]	; (800a440 <_strtod_l+0x590>)
 800a390:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a394:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a398:	4642      	mov	r2, r8
 800a39a:	464b      	mov	r3, r9
 800a39c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3a0:	f7f6 f932 	bl	8000608 <__aeabi_dmul>
 800a3a4:	4b27      	ldr	r3, [pc, #156]	; (800a444 <_strtod_l+0x594>)
 800a3a6:	460a      	mov	r2, r1
 800a3a8:	400b      	ands	r3, r1
 800a3aa:	4927      	ldr	r1, [pc, #156]	; (800a448 <_strtod_l+0x598>)
 800a3ac:	428b      	cmp	r3, r1
 800a3ae:	4680      	mov	r8, r0
 800a3b0:	d8be      	bhi.n	800a330 <_strtod_l+0x480>
 800a3b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a3b6:	428b      	cmp	r3, r1
 800a3b8:	bf86      	itte	hi
 800a3ba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a44c <_strtod_l+0x59c>
 800a3be:	f04f 38ff 	movhi.w	r8, #4294967295
 800a3c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	e07b      	b.n	800a4c4 <_strtod_l+0x614>
 800a3cc:	07ea      	lsls	r2, r5, #31
 800a3ce:	d505      	bpl.n	800a3dc <_strtod_l+0x52c>
 800a3d0:	9b04      	ldr	r3, [sp, #16]
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f6 f917 	bl	8000608 <__aeabi_dmul>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	9a04      	ldr	r2, [sp, #16]
 800a3de:	3208      	adds	r2, #8
 800a3e0:	f10a 0a01 	add.w	sl, sl, #1
 800a3e4:	106d      	asrs	r5, r5, #1
 800a3e6:	9204      	str	r2, [sp, #16]
 800a3e8:	e7cc      	b.n	800a384 <_strtod_l+0x4d4>
 800a3ea:	d0ec      	beq.n	800a3c6 <_strtod_l+0x516>
 800a3ec:	426d      	negs	r5, r5
 800a3ee:	f015 020f 	ands.w	r2, r5, #15
 800a3f2:	d00a      	beq.n	800a40a <_strtod_l+0x55a>
 800a3f4:	4b11      	ldr	r3, [pc, #68]	; (800a43c <_strtod_l+0x58c>)
 800a3f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f6 fa2b 	bl	800085c <__aeabi_ddiv>
 800a406:	4680      	mov	r8, r0
 800a408:	4689      	mov	r9, r1
 800a40a:	112d      	asrs	r5, r5, #4
 800a40c:	d0db      	beq.n	800a3c6 <_strtod_l+0x516>
 800a40e:	2d1f      	cmp	r5, #31
 800a410:	dd1e      	ble.n	800a450 <_strtod_l+0x5a0>
 800a412:	2500      	movs	r5, #0
 800a414:	46ab      	mov	fp, r5
 800a416:	9509      	str	r5, [sp, #36]	; 0x24
 800a418:	9505      	str	r5, [sp, #20]
 800a41a:	2322      	movs	r3, #34	; 0x22
 800a41c:	f04f 0800 	mov.w	r8, #0
 800a420:	f04f 0900 	mov.w	r9, #0
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	e78d      	b.n	800a344 <_strtod_l+0x494>
 800a428:	0800be99 	.word	0x0800be99
 800a42c:	0800c0c4 	.word	0x0800c0c4
 800a430:	0800be91 	.word	0x0800be91
 800a434:	0800bec8 	.word	0x0800bec8
 800a438:	0800c255 	.word	0x0800c255
 800a43c:	0800bfd8 	.word	0x0800bfd8
 800a440:	0800bfb0 	.word	0x0800bfb0
 800a444:	7ff00000 	.word	0x7ff00000
 800a448:	7ca00000 	.word	0x7ca00000
 800a44c:	7fefffff 	.word	0x7fefffff
 800a450:	f015 0310 	ands.w	r3, r5, #16
 800a454:	bf18      	it	ne
 800a456:	236a      	movne	r3, #106	; 0x6a
 800a458:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a7fc <_strtod_l+0x94c>
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	4640      	mov	r0, r8
 800a460:	4649      	mov	r1, r9
 800a462:	2300      	movs	r3, #0
 800a464:	07ea      	lsls	r2, r5, #31
 800a466:	d504      	bpl.n	800a472 <_strtod_l+0x5c2>
 800a468:	e9da 2300 	ldrd	r2, r3, [sl]
 800a46c:	f7f6 f8cc 	bl	8000608 <__aeabi_dmul>
 800a470:	2301      	movs	r3, #1
 800a472:	106d      	asrs	r5, r5, #1
 800a474:	f10a 0a08 	add.w	sl, sl, #8
 800a478:	d1f4      	bne.n	800a464 <_strtod_l+0x5b4>
 800a47a:	b10b      	cbz	r3, 800a480 <_strtod_l+0x5d0>
 800a47c:	4680      	mov	r8, r0
 800a47e:	4689      	mov	r9, r1
 800a480:	9b04      	ldr	r3, [sp, #16]
 800a482:	b1bb      	cbz	r3, 800a4b4 <_strtod_l+0x604>
 800a484:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a488:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	4649      	mov	r1, r9
 800a490:	dd10      	ble.n	800a4b4 <_strtod_l+0x604>
 800a492:	2b1f      	cmp	r3, #31
 800a494:	f340 811e 	ble.w	800a6d4 <_strtod_l+0x824>
 800a498:	2b34      	cmp	r3, #52	; 0x34
 800a49a:	bfde      	ittt	le
 800a49c:	f04f 33ff 	movle.w	r3, #4294967295
 800a4a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a4a4:	4093      	lslle	r3, r2
 800a4a6:	f04f 0800 	mov.w	r8, #0
 800a4aa:	bfcc      	ite	gt
 800a4ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a4b0:	ea03 0901 	andle.w	r9, r3, r1
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 fb0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d1a6      	bne.n	800a412 <_strtod_l+0x562>
 800a4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ca:	4633      	mov	r3, r6
 800a4cc:	465a      	mov	r2, fp
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f7ff f8cc 	bl	800966c <__s2b>
 800a4d4:	9009      	str	r0, [sp, #36]	; 0x24
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	f43f af2a 	beq.w	800a330 <_strtod_l+0x480>
 800a4dc:	9a08      	ldr	r2, [sp, #32]
 800a4de:	9b05      	ldr	r3, [sp, #20]
 800a4e0:	2a00      	cmp	r2, #0
 800a4e2:	eba3 0307 	sub.w	r3, r3, r7
 800a4e6:	bfa8      	it	ge
 800a4e8:	2300      	movge	r3, #0
 800a4ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a4ec:	2500      	movs	r5, #0
 800a4ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a4f2:	9312      	str	r3, [sp, #72]	; 0x48
 800a4f4:	46ab      	mov	fp, r5
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	6859      	ldr	r1, [r3, #4]
 800a4fc:	f7ff f80e 	bl	800951c <_Balloc>
 800a500:	9005      	str	r0, [sp, #20]
 800a502:	2800      	cmp	r0, #0
 800a504:	f43f af18 	beq.w	800a338 <_strtod_l+0x488>
 800a508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50a:	691a      	ldr	r2, [r3, #16]
 800a50c:	3202      	adds	r2, #2
 800a50e:	f103 010c 	add.w	r1, r3, #12
 800a512:	0092      	lsls	r2, r2, #2
 800a514:	300c      	adds	r0, #12
 800a516:	f000 fd77 	bl	800b008 <memcpy>
 800a51a:	ec49 8b10 	vmov	d0, r8, r9
 800a51e:	aa18      	add	r2, sp, #96	; 0x60
 800a520:	a917      	add	r1, sp, #92	; 0x5c
 800a522:	4620      	mov	r0, r4
 800a524:	f7ff fbd6 	bl	8009cd4 <__d2b>
 800a528:	ec49 8b18 	vmov	d8, r8, r9
 800a52c:	9016      	str	r0, [sp, #88]	; 0x58
 800a52e:	2800      	cmp	r0, #0
 800a530:	f43f af02 	beq.w	800a338 <_strtod_l+0x488>
 800a534:	2101      	movs	r1, #1
 800a536:	4620      	mov	r0, r4
 800a538:	f7ff f930 	bl	800979c <__i2b>
 800a53c:	4683      	mov	fp, r0
 800a53e:	2800      	cmp	r0, #0
 800a540:	f43f aefa 	beq.w	800a338 <_strtod_l+0x488>
 800a544:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a546:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a548:	2e00      	cmp	r6, #0
 800a54a:	bfab      	itete	ge
 800a54c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a54e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a550:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a552:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a556:	bfac      	ite	ge
 800a558:	eb06 0a03 	addge.w	sl, r6, r3
 800a55c:	1b9f      	sublt	r7, r3, r6
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	1af6      	subs	r6, r6, r3
 800a562:	4416      	add	r6, r2
 800a564:	4ba0      	ldr	r3, [pc, #640]	; (800a7e8 <_strtod_l+0x938>)
 800a566:	3e01      	subs	r6, #1
 800a568:	429e      	cmp	r6, r3
 800a56a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a56e:	f280 80c4 	bge.w	800a6fa <_strtod_l+0x84a>
 800a572:	1b9b      	subs	r3, r3, r6
 800a574:	2b1f      	cmp	r3, #31
 800a576:	eba2 0203 	sub.w	r2, r2, r3
 800a57a:	f04f 0101 	mov.w	r1, #1
 800a57e:	f300 80b0 	bgt.w	800a6e2 <_strtod_l+0x832>
 800a582:	fa01 f303 	lsl.w	r3, r1, r3
 800a586:	930e      	str	r3, [sp, #56]	; 0x38
 800a588:	2300      	movs	r3, #0
 800a58a:	930d      	str	r3, [sp, #52]	; 0x34
 800a58c:	eb0a 0602 	add.w	r6, sl, r2
 800a590:	9b04      	ldr	r3, [sp, #16]
 800a592:	45b2      	cmp	sl, r6
 800a594:	4417      	add	r7, r2
 800a596:	441f      	add	r7, r3
 800a598:	4653      	mov	r3, sl
 800a59a:	bfa8      	it	ge
 800a59c:	4633      	movge	r3, r6
 800a59e:	42bb      	cmp	r3, r7
 800a5a0:	bfa8      	it	ge
 800a5a2:	463b      	movge	r3, r7
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	bfc2      	ittt	gt
 800a5a8:	1af6      	subgt	r6, r6, r3
 800a5aa:	1aff      	subgt	r7, r7, r3
 800a5ac:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a5b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	dd17      	ble.n	800a5e6 <_strtod_l+0x736>
 800a5b6:	4659      	mov	r1, fp
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f7ff f9ae 	bl	800991c <__pow5mult>
 800a5c0:	4683      	mov	fp, r0
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	f43f aeb8 	beq.w	800a338 <_strtod_l+0x488>
 800a5c8:	4601      	mov	r1, r0
 800a5ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f7ff f8fb 	bl	80097c8 <__multiply>
 800a5d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f43f aeaf 	beq.w	800a338 <_strtod_l+0x488>
 800a5da:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f7fe ffdd 	bl	800959c <_Bfree>
 800a5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e4:	9316      	str	r3, [sp, #88]	; 0x58
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	f300 808c 	bgt.w	800a704 <_strtod_l+0x854>
 800a5ec:	9b08      	ldr	r3, [sp, #32]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	dd08      	ble.n	800a604 <_strtod_l+0x754>
 800a5f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5f4:	9905      	ldr	r1, [sp, #20]
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f7ff f990 	bl	800991c <__pow5mult>
 800a5fc:	9005      	str	r0, [sp, #20]
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f43f ae9a 	beq.w	800a338 <_strtod_l+0x488>
 800a604:	2f00      	cmp	r7, #0
 800a606:	dd08      	ble.n	800a61a <_strtod_l+0x76a>
 800a608:	9905      	ldr	r1, [sp, #20]
 800a60a:	463a      	mov	r2, r7
 800a60c:	4620      	mov	r0, r4
 800a60e:	f7ff f9df 	bl	80099d0 <__lshift>
 800a612:	9005      	str	r0, [sp, #20]
 800a614:	2800      	cmp	r0, #0
 800a616:	f43f ae8f 	beq.w	800a338 <_strtod_l+0x488>
 800a61a:	f1ba 0f00 	cmp.w	sl, #0
 800a61e:	dd08      	ble.n	800a632 <_strtod_l+0x782>
 800a620:	4659      	mov	r1, fp
 800a622:	4652      	mov	r2, sl
 800a624:	4620      	mov	r0, r4
 800a626:	f7ff f9d3 	bl	80099d0 <__lshift>
 800a62a:	4683      	mov	fp, r0
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f43f ae83 	beq.w	800a338 <_strtod_l+0x488>
 800a632:	9a05      	ldr	r2, [sp, #20]
 800a634:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a636:	4620      	mov	r0, r4
 800a638:	f7ff fa52 	bl	8009ae0 <__mdiff>
 800a63c:	4605      	mov	r5, r0
 800a63e:	2800      	cmp	r0, #0
 800a640:	f43f ae7a 	beq.w	800a338 <_strtod_l+0x488>
 800a644:	68c3      	ldr	r3, [r0, #12]
 800a646:	930b      	str	r3, [sp, #44]	; 0x2c
 800a648:	2300      	movs	r3, #0
 800a64a:	60c3      	str	r3, [r0, #12]
 800a64c:	4659      	mov	r1, fp
 800a64e:	f7ff fa2b 	bl	8009aa8 <__mcmp>
 800a652:	2800      	cmp	r0, #0
 800a654:	da60      	bge.n	800a718 <_strtod_l+0x868>
 800a656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a658:	ea53 0308 	orrs.w	r3, r3, r8
 800a65c:	f040 8084 	bne.w	800a768 <_strtod_l+0x8b8>
 800a660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a664:	2b00      	cmp	r3, #0
 800a666:	d17f      	bne.n	800a768 <_strtod_l+0x8b8>
 800a668:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a66c:	0d1b      	lsrs	r3, r3, #20
 800a66e:	051b      	lsls	r3, r3, #20
 800a670:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a674:	d978      	bls.n	800a768 <_strtod_l+0x8b8>
 800a676:	696b      	ldr	r3, [r5, #20]
 800a678:	b913      	cbnz	r3, 800a680 <_strtod_l+0x7d0>
 800a67a:	692b      	ldr	r3, [r5, #16]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	dd73      	ble.n	800a768 <_strtod_l+0x8b8>
 800a680:	4629      	mov	r1, r5
 800a682:	2201      	movs	r2, #1
 800a684:	4620      	mov	r0, r4
 800a686:	f7ff f9a3 	bl	80099d0 <__lshift>
 800a68a:	4659      	mov	r1, fp
 800a68c:	4605      	mov	r5, r0
 800a68e:	f7ff fa0b 	bl	8009aa8 <__mcmp>
 800a692:	2800      	cmp	r0, #0
 800a694:	dd68      	ble.n	800a768 <_strtod_l+0x8b8>
 800a696:	9904      	ldr	r1, [sp, #16]
 800a698:	4a54      	ldr	r2, [pc, #336]	; (800a7ec <_strtod_l+0x93c>)
 800a69a:	464b      	mov	r3, r9
 800a69c:	2900      	cmp	r1, #0
 800a69e:	f000 8084 	beq.w	800a7aa <_strtod_l+0x8fa>
 800a6a2:	ea02 0109 	and.w	r1, r2, r9
 800a6a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a6aa:	dc7e      	bgt.n	800a7aa <_strtod_l+0x8fa>
 800a6ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a6b0:	f77f aeb3 	ble.w	800a41a <_strtod_l+0x56a>
 800a6b4:	4b4e      	ldr	r3, [pc, #312]	; (800a7f0 <_strtod_l+0x940>)
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f7f5 ffa4 	bl	8000608 <__aeabi_dmul>
 800a6c0:	4b4a      	ldr	r3, [pc, #296]	; (800a7ec <_strtod_l+0x93c>)
 800a6c2:	400b      	ands	r3, r1
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	4689      	mov	r9, r1
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f47f ae3f 	bne.w	800a34c <_strtod_l+0x49c>
 800a6ce:	2322      	movs	r3, #34	; 0x22
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	e63b      	b.n	800a34c <_strtod_l+0x49c>
 800a6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6dc:	ea03 0808 	and.w	r8, r3, r8
 800a6e0:	e6e8      	b.n	800a4b4 <_strtod_l+0x604>
 800a6e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a6e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a6ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a6ee:	36e2      	adds	r6, #226	; 0xe2
 800a6f0:	fa01 f306 	lsl.w	r3, r1, r6
 800a6f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a6f8:	e748      	b.n	800a58c <_strtod_l+0x6dc>
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a702:	e743      	b.n	800a58c <_strtod_l+0x6dc>
 800a704:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a706:	4632      	mov	r2, r6
 800a708:	4620      	mov	r0, r4
 800a70a:	f7ff f961 	bl	80099d0 <__lshift>
 800a70e:	9016      	str	r0, [sp, #88]	; 0x58
 800a710:	2800      	cmp	r0, #0
 800a712:	f47f af6b 	bne.w	800a5ec <_strtod_l+0x73c>
 800a716:	e60f      	b.n	800a338 <_strtod_l+0x488>
 800a718:	46ca      	mov	sl, r9
 800a71a:	d171      	bne.n	800a800 <_strtod_l+0x950>
 800a71c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a71e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a722:	b352      	cbz	r2, 800a77a <_strtod_l+0x8ca>
 800a724:	4a33      	ldr	r2, [pc, #204]	; (800a7f4 <_strtod_l+0x944>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d12a      	bne.n	800a780 <_strtod_l+0x8d0>
 800a72a:	9b04      	ldr	r3, [sp, #16]
 800a72c:	4641      	mov	r1, r8
 800a72e:	b1fb      	cbz	r3, 800a770 <_strtod_l+0x8c0>
 800a730:	4b2e      	ldr	r3, [pc, #184]	; (800a7ec <_strtod_l+0x93c>)
 800a732:	ea09 0303 	and.w	r3, r9, r3
 800a736:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a73a:	f04f 32ff 	mov.w	r2, #4294967295
 800a73e:	d81a      	bhi.n	800a776 <_strtod_l+0x8c6>
 800a740:	0d1b      	lsrs	r3, r3, #20
 800a742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a746:	fa02 f303 	lsl.w	r3, r2, r3
 800a74a:	4299      	cmp	r1, r3
 800a74c:	d118      	bne.n	800a780 <_strtod_l+0x8d0>
 800a74e:	4b2a      	ldr	r3, [pc, #168]	; (800a7f8 <_strtod_l+0x948>)
 800a750:	459a      	cmp	sl, r3
 800a752:	d102      	bne.n	800a75a <_strtod_l+0x8aa>
 800a754:	3101      	adds	r1, #1
 800a756:	f43f adef 	beq.w	800a338 <_strtod_l+0x488>
 800a75a:	4b24      	ldr	r3, [pc, #144]	; (800a7ec <_strtod_l+0x93c>)
 800a75c:	ea0a 0303 	and.w	r3, sl, r3
 800a760:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a764:	f04f 0800 	mov.w	r8, #0
 800a768:	9b04      	ldr	r3, [sp, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1a2      	bne.n	800a6b4 <_strtod_l+0x804>
 800a76e:	e5ed      	b.n	800a34c <_strtod_l+0x49c>
 800a770:	f04f 33ff 	mov.w	r3, #4294967295
 800a774:	e7e9      	b.n	800a74a <_strtod_l+0x89a>
 800a776:	4613      	mov	r3, r2
 800a778:	e7e7      	b.n	800a74a <_strtod_l+0x89a>
 800a77a:	ea53 0308 	orrs.w	r3, r3, r8
 800a77e:	d08a      	beq.n	800a696 <_strtod_l+0x7e6>
 800a780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a782:	b1e3      	cbz	r3, 800a7be <_strtod_l+0x90e>
 800a784:	ea13 0f0a 	tst.w	r3, sl
 800a788:	d0ee      	beq.n	800a768 <_strtod_l+0x8b8>
 800a78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a78c:	9a04      	ldr	r2, [sp, #16]
 800a78e:	4640      	mov	r0, r8
 800a790:	4649      	mov	r1, r9
 800a792:	b1c3      	cbz	r3, 800a7c6 <_strtod_l+0x916>
 800a794:	f7ff fb6f 	bl	8009e76 <sulp>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	ec51 0b18 	vmov	r0, r1, d8
 800a7a0:	f7f5 fd7c 	bl	800029c <__adddf3>
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	4689      	mov	r9, r1
 800a7a8:	e7de      	b.n	800a768 <_strtod_l+0x8b8>
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a7b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a7b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a7b8:	f04f 38ff 	mov.w	r8, #4294967295
 800a7bc:	e7d4      	b.n	800a768 <_strtod_l+0x8b8>
 800a7be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7c0:	ea13 0f08 	tst.w	r3, r8
 800a7c4:	e7e0      	b.n	800a788 <_strtod_l+0x8d8>
 800a7c6:	f7ff fb56 	bl	8009e76 <sulp>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	ec51 0b18 	vmov	r0, r1, d8
 800a7d2:	f7f5 fd61 	bl	8000298 <__aeabi_dsub>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4680      	mov	r8, r0
 800a7dc:	4689      	mov	r9, r1
 800a7de:	f7f6 f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d0c0      	beq.n	800a768 <_strtod_l+0x8b8>
 800a7e6:	e618      	b.n	800a41a <_strtod_l+0x56a>
 800a7e8:	fffffc02 	.word	0xfffffc02
 800a7ec:	7ff00000 	.word	0x7ff00000
 800a7f0:	39500000 	.word	0x39500000
 800a7f4:	000fffff 	.word	0x000fffff
 800a7f8:	7fefffff 	.word	0x7fefffff
 800a7fc:	0800c0d8 	.word	0x0800c0d8
 800a800:	4659      	mov	r1, fp
 800a802:	4628      	mov	r0, r5
 800a804:	f7ff fac0 	bl	8009d88 <__ratio>
 800a808:	ec57 6b10 	vmov	r6, r7, d0
 800a80c:	ee10 0a10 	vmov	r0, s0
 800a810:	2200      	movs	r2, #0
 800a812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a816:	4639      	mov	r1, r7
 800a818:	f7f6 f972 	bl	8000b00 <__aeabi_dcmple>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d071      	beq.n	800a904 <_strtod_l+0xa54>
 800a820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d17c      	bne.n	800a920 <_strtod_l+0xa70>
 800a826:	f1b8 0f00 	cmp.w	r8, #0
 800a82a:	d15a      	bne.n	800a8e2 <_strtod_l+0xa32>
 800a82c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a830:	2b00      	cmp	r3, #0
 800a832:	d15d      	bne.n	800a8f0 <_strtod_l+0xa40>
 800a834:	4b90      	ldr	r3, [pc, #576]	; (800aa78 <_strtod_l+0xbc8>)
 800a836:	2200      	movs	r2, #0
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f6 f956 	bl	8000aec <__aeabi_dcmplt>
 800a840:	2800      	cmp	r0, #0
 800a842:	d15c      	bne.n	800a8fe <_strtod_l+0xa4e>
 800a844:	4630      	mov	r0, r6
 800a846:	4639      	mov	r1, r7
 800a848:	4b8c      	ldr	r3, [pc, #560]	; (800aa7c <_strtod_l+0xbcc>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	f7f5 fedc 	bl	8000608 <__aeabi_dmul>
 800a850:	4606      	mov	r6, r0
 800a852:	460f      	mov	r7, r1
 800a854:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a858:	9606      	str	r6, [sp, #24]
 800a85a:	9307      	str	r3, [sp, #28]
 800a85c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a860:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a864:	4b86      	ldr	r3, [pc, #536]	; (800aa80 <_strtod_l+0xbd0>)
 800a866:	ea0a 0303 	and.w	r3, sl, r3
 800a86a:	930d      	str	r3, [sp, #52]	; 0x34
 800a86c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a86e:	4b85      	ldr	r3, [pc, #532]	; (800aa84 <_strtod_l+0xbd4>)
 800a870:	429a      	cmp	r2, r3
 800a872:	f040 8090 	bne.w	800a996 <_strtod_l+0xae6>
 800a876:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a87a:	ec49 8b10 	vmov	d0, r8, r9
 800a87e:	f7ff f9b9 	bl	8009bf4 <__ulp>
 800a882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a886:	ec51 0b10 	vmov	r0, r1, d0
 800a88a:	f7f5 febd 	bl	8000608 <__aeabi_dmul>
 800a88e:	4642      	mov	r2, r8
 800a890:	464b      	mov	r3, r9
 800a892:	f7f5 fd03 	bl	800029c <__adddf3>
 800a896:	460b      	mov	r3, r1
 800a898:	4979      	ldr	r1, [pc, #484]	; (800aa80 <_strtod_l+0xbd0>)
 800a89a:	4a7b      	ldr	r2, [pc, #492]	; (800aa88 <_strtod_l+0xbd8>)
 800a89c:	4019      	ands	r1, r3
 800a89e:	4291      	cmp	r1, r2
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	d944      	bls.n	800a92e <_strtod_l+0xa7e>
 800a8a4:	ee18 2a90 	vmov	r2, s17
 800a8a8:	4b78      	ldr	r3, [pc, #480]	; (800aa8c <_strtod_l+0xbdc>)
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d104      	bne.n	800a8b8 <_strtod_l+0xa08>
 800a8ae:	ee18 3a10 	vmov	r3, s16
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	f43f ad40 	beq.w	800a338 <_strtod_l+0x488>
 800a8b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800aa8c <_strtod_l+0xbdc>
 800a8bc:	f04f 38ff 	mov.w	r8, #4294967295
 800a8c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f7fe fe6a 	bl	800959c <_Bfree>
 800a8c8:	9905      	ldr	r1, [sp, #20]
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f7fe fe66 	bl	800959c <_Bfree>
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f7fe fe62 	bl	800959c <_Bfree>
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f7fe fe5e 	bl	800959c <_Bfree>
 800a8e0:	e609      	b.n	800a4f6 <_strtod_l+0x646>
 800a8e2:	f1b8 0f01 	cmp.w	r8, #1
 800a8e6:	d103      	bne.n	800a8f0 <_strtod_l+0xa40>
 800a8e8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ec:	f43f ad95 	beq.w	800a41a <_strtod_l+0x56a>
 800a8f0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800aa48 <_strtod_l+0xb98>
 800a8f4:	4f60      	ldr	r7, [pc, #384]	; (800aa78 <_strtod_l+0xbc8>)
 800a8f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8fa:	2600      	movs	r6, #0
 800a8fc:	e7ae      	b.n	800a85c <_strtod_l+0x9ac>
 800a8fe:	4f5f      	ldr	r7, [pc, #380]	; (800aa7c <_strtod_l+0xbcc>)
 800a900:	2600      	movs	r6, #0
 800a902:	e7a7      	b.n	800a854 <_strtod_l+0x9a4>
 800a904:	4b5d      	ldr	r3, [pc, #372]	; (800aa7c <_strtod_l+0xbcc>)
 800a906:	4630      	mov	r0, r6
 800a908:	4639      	mov	r1, r7
 800a90a:	2200      	movs	r2, #0
 800a90c:	f7f5 fe7c 	bl	8000608 <__aeabi_dmul>
 800a910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a912:	4606      	mov	r6, r0
 800a914:	460f      	mov	r7, r1
 800a916:	2b00      	cmp	r3, #0
 800a918:	d09c      	beq.n	800a854 <_strtod_l+0x9a4>
 800a91a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a91e:	e79d      	b.n	800a85c <_strtod_l+0x9ac>
 800a920:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800aa50 <_strtod_l+0xba0>
 800a924:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a928:	ec57 6b17 	vmov	r6, r7, d7
 800a92c:	e796      	b.n	800a85c <_strtod_l+0x9ac>
 800a92e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a932:	9b04      	ldr	r3, [sp, #16]
 800a934:	46ca      	mov	sl, r9
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1c2      	bne.n	800a8c0 <_strtod_l+0xa10>
 800a93a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a93e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a940:	0d1b      	lsrs	r3, r3, #20
 800a942:	051b      	lsls	r3, r3, #20
 800a944:	429a      	cmp	r2, r3
 800a946:	d1bb      	bne.n	800a8c0 <_strtod_l+0xa10>
 800a948:	4630      	mov	r0, r6
 800a94a:	4639      	mov	r1, r7
 800a94c:	f7f6 f9bc 	bl	8000cc8 <__aeabi_d2lz>
 800a950:	f7f5 fe2c 	bl	80005ac <__aeabi_l2d>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4630      	mov	r0, r6
 800a95a:	4639      	mov	r1, r7
 800a95c:	f7f5 fc9c 	bl	8000298 <__aeabi_dsub>
 800a960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a962:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a966:	ea43 0308 	orr.w	r3, r3, r8
 800a96a:	4313      	orrs	r3, r2
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	d054      	beq.n	800aa1c <_strtod_l+0xb6c>
 800a972:	a339      	add	r3, pc, #228	; (adr r3, 800aa58 <_strtod_l+0xba8>)
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	f7f6 f8b8 	bl	8000aec <__aeabi_dcmplt>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	f47f ace5 	bne.w	800a34c <_strtod_l+0x49c>
 800a982:	a337      	add	r3, pc, #220	; (adr r3, 800aa60 <_strtod_l+0xbb0>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	4630      	mov	r0, r6
 800a98a:	4639      	mov	r1, r7
 800a98c:	f7f6 f8cc 	bl	8000b28 <__aeabi_dcmpgt>
 800a990:	2800      	cmp	r0, #0
 800a992:	d095      	beq.n	800a8c0 <_strtod_l+0xa10>
 800a994:	e4da      	b.n	800a34c <_strtod_l+0x49c>
 800a996:	9b04      	ldr	r3, [sp, #16]
 800a998:	b333      	cbz	r3, 800a9e8 <_strtod_l+0xb38>
 800a99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a99c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a9a0:	d822      	bhi.n	800a9e8 <_strtod_l+0xb38>
 800a9a2:	a331      	add	r3, pc, #196	; (adr r3, 800aa68 <_strtod_l+0xbb8>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	f7f6 f8a8 	bl	8000b00 <__aeabi_dcmple>
 800a9b0:	b1a0      	cbz	r0, 800a9dc <_strtod_l+0xb2c>
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7f6 f8ff 	bl	8000bb8 <__aeabi_d2uiz>
 800a9ba:	2801      	cmp	r0, #1
 800a9bc:	bf38      	it	cc
 800a9be:	2001      	movcc	r0, #1
 800a9c0:	f7f5 fda8 	bl	8000514 <__aeabi_ui2d>
 800a9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	460f      	mov	r7, r1
 800a9ca:	bb23      	cbnz	r3, 800aa16 <_strtod_l+0xb66>
 800a9cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9d0:	9010      	str	r0, [sp, #64]	; 0x40
 800a9d2:	9311      	str	r3, [sp, #68]	; 0x44
 800a9d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a9dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a9ec:	eeb0 0a48 	vmov.f32	s0, s16
 800a9f0:	eef0 0a68 	vmov.f32	s1, s17
 800a9f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a9f8:	f7ff f8fc 	bl	8009bf4 <__ulp>
 800a9fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aa00:	ec53 2b10 	vmov	r2, r3, d0
 800aa04:	f7f5 fe00 	bl	8000608 <__aeabi_dmul>
 800aa08:	ec53 2b18 	vmov	r2, r3, d8
 800aa0c:	f7f5 fc46 	bl	800029c <__adddf3>
 800aa10:	4680      	mov	r8, r0
 800aa12:	4689      	mov	r9, r1
 800aa14:	e78d      	b.n	800a932 <_strtod_l+0xa82>
 800aa16:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800aa1a:	e7db      	b.n	800a9d4 <_strtod_l+0xb24>
 800aa1c:	a314      	add	r3, pc, #80	; (adr r3, 800aa70 <_strtod_l+0xbc0>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f6 f863 	bl	8000aec <__aeabi_dcmplt>
 800aa26:	e7b3      	b.n	800a990 <_strtod_l+0xae0>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	930a      	str	r3, [sp, #40]	; 0x28
 800aa2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa30:	6013      	str	r3, [r2, #0]
 800aa32:	f7ff ba7c 	b.w	8009f2e <_strtod_l+0x7e>
 800aa36:	2a65      	cmp	r2, #101	; 0x65
 800aa38:	f43f ab75 	beq.w	800a126 <_strtod_l+0x276>
 800aa3c:	2a45      	cmp	r2, #69	; 0x45
 800aa3e:	f43f ab72 	beq.w	800a126 <_strtod_l+0x276>
 800aa42:	2301      	movs	r3, #1
 800aa44:	f7ff bbaa 	b.w	800a19c <_strtod_l+0x2ec>
 800aa48:	00000000 	.word	0x00000000
 800aa4c:	bff00000 	.word	0xbff00000
 800aa50:	00000000 	.word	0x00000000
 800aa54:	3ff00000 	.word	0x3ff00000
 800aa58:	94a03595 	.word	0x94a03595
 800aa5c:	3fdfffff 	.word	0x3fdfffff
 800aa60:	35afe535 	.word	0x35afe535
 800aa64:	3fe00000 	.word	0x3fe00000
 800aa68:	ffc00000 	.word	0xffc00000
 800aa6c:	41dfffff 	.word	0x41dfffff
 800aa70:	94a03595 	.word	0x94a03595
 800aa74:	3fcfffff 	.word	0x3fcfffff
 800aa78:	3ff00000 	.word	0x3ff00000
 800aa7c:	3fe00000 	.word	0x3fe00000
 800aa80:	7ff00000 	.word	0x7ff00000
 800aa84:	7fe00000 	.word	0x7fe00000
 800aa88:	7c9fffff 	.word	0x7c9fffff
 800aa8c:	7fefffff 	.word	0x7fefffff

0800aa90 <_strtod_r>:
 800aa90:	4b01      	ldr	r3, [pc, #4]	; (800aa98 <_strtod_r+0x8>)
 800aa92:	f7ff ba0d 	b.w	8009eb0 <_strtod_l>
 800aa96:	bf00      	nop
 800aa98:	20000068 	.word	0x20000068

0800aa9c <_strtol_l.constprop.0>:
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa2:	d001      	beq.n	800aaa8 <_strtol_l.constprop.0+0xc>
 800aaa4:	2b24      	cmp	r3, #36	; 0x24
 800aaa6:	d906      	bls.n	800aab6 <_strtol_l.constprop.0+0x1a>
 800aaa8:	f7fd fe3e 	bl	8008728 <__errno>
 800aaac:	2316      	movs	r3, #22
 800aaae:	6003      	str	r3, [r0, #0]
 800aab0:	2000      	movs	r0, #0
 800aab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ab9c <_strtol_l.constprop.0+0x100>
 800aaba:	460d      	mov	r5, r1
 800aabc:	462e      	mov	r6, r5
 800aabe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aac2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800aac6:	f017 0708 	ands.w	r7, r7, #8
 800aaca:	d1f7      	bne.n	800aabc <_strtol_l.constprop.0+0x20>
 800aacc:	2c2d      	cmp	r4, #45	; 0x2d
 800aace:	d132      	bne.n	800ab36 <_strtol_l.constprop.0+0x9a>
 800aad0:	782c      	ldrb	r4, [r5, #0]
 800aad2:	2701      	movs	r7, #1
 800aad4:	1cb5      	adds	r5, r6, #2
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d05b      	beq.n	800ab92 <_strtol_l.constprop.0+0xf6>
 800aada:	2b10      	cmp	r3, #16
 800aadc:	d109      	bne.n	800aaf2 <_strtol_l.constprop.0+0x56>
 800aade:	2c30      	cmp	r4, #48	; 0x30
 800aae0:	d107      	bne.n	800aaf2 <_strtol_l.constprop.0+0x56>
 800aae2:	782c      	ldrb	r4, [r5, #0]
 800aae4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aae8:	2c58      	cmp	r4, #88	; 0x58
 800aaea:	d14d      	bne.n	800ab88 <_strtol_l.constprop.0+0xec>
 800aaec:	786c      	ldrb	r4, [r5, #1]
 800aaee:	2310      	movs	r3, #16
 800aaf0:	3502      	adds	r5, #2
 800aaf2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aaf6:	f108 38ff 	add.w	r8, r8, #4294967295
 800aafa:	f04f 0e00 	mov.w	lr, #0
 800aafe:	fbb8 f9f3 	udiv	r9, r8, r3
 800ab02:	4676      	mov	r6, lr
 800ab04:	fb03 8a19 	mls	sl, r3, r9, r8
 800ab08:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ab0c:	f1bc 0f09 	cmp.w	ip, #9
 800ab10:	d816      	bhi.n	800ab40 <_strtol_l.constprop.0+0xa4>
 800ab12:	4664      	mov	r4, ip
 800ab14:	42a3      	cmp	r3, r4
 800ab16:	dd24      	ble.n	800ab62 <_strtol_l.constprop.0+0xc6>
 800ab18:	f1be 3fff 	cmp.w	lr, #4294967295
 800ab1c:	d008      	beq.n	800ab30 <_strtol_l.constprop.0+0x94>
 800ab1e:	45b1      	cmp	r9, r6
 800ab20:	d31c      	bcc.n	800ab5c <_strtol_l.constprop.0+0xc0>
 800ab22:	d101      	bne.n	800ab28 <_strtol_l.constprop.0+0x8c>
 800ab24:	45a2      	cmp	sl, r4
 800ab26:	db19      	blt.n	800ab5c <_strtol_l.constprop.0+0xc0>
 800ab28:	fb06 4603 	mla	r6, r6, r3, r4
 800ab2c:	f04f 0e01 	mov.w	lr, #1
 800ab30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab34:	e7e8      	b.n	800ab08 <_strtol_l.constprop.0+0x6c>
 800ab36:	2c2b      	cmp	r4, #43	; 0x2b
 800ab38:	bf04      	itt	eq
 800ab3a:	782c      	ldrbeq	r4, [r5, #0]
 800ab3c:	1cb5      	addeq	r5, r6, #2
 800ab3e:	e7ca      	b.n	800aad6 <_strtol_l.constprop.0+0x3a>
 800ab40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ab44:	f1bc 0f19 	cmp.w	ip, #25
 800ab48:	d801      	bhi.n	800ab4e <_strtol_l.constprop.0+0xb2>
 800ab4a:	3c37      	subs	r4, #55	; 0x37
 800ab4c:	e7e2      	b.n	800ab14 <_strtol_l.constprop.0+0x78>
 800ab4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ab52:	f1bc 0f19 	cmp.w	ip, #25
 800ab56:	d804      	bhi.n	800ab62 <_strtol_l.constprop.0+0xc6>
 800ab58:	3c57      	subs	r4, #87	; 0x57
 800ab5a:	e7db      	b.n	800ab14 <_strtol_l.constprop.0+0x78>
 800ab5c:	f04f 3eff 	mov.w	lr, #4294967295
 800ab60:	e7e6      	b.n	800ab30 <_strtol_l.constprop.0+0x94>
 800ab62:	f1be 3fff 	cmp.w	lr, #4294967295
 800ab66:	d105      	bne.n	800ab74 <_strtol_l.constprop.0+0xd8>
 800ab68:	2322      	movs	r3, #34	; 0x22
 800ab6a:	6003      	str	r3, [r0, #0]
 800ab6c:	4646      	mov	r6, r8
 800ab6e:	b942      	cbnz	r2, 800ab82 <_strtol_l.constprop.0+0xe6>
 800ab70:	4630      	mov	r0, r6
 800ab72:	e79e      	b.n	800aab2 <_strtol_l.constprop.0+0x16>
 800ab74:	b107      	cbz	r7, 800ab78 <_strtol_l.constprop.0+0xdc>
 800ab76:	4276      	negs	r6, r6
 800ab78:	2a00      	cmp	r2, #0
 800ab7a:	d0f9      	beq.n	800ab70 <_strtol_l.constprop.0+0xd4>
 800ab7c:	f1be 0f00 	cmp.w	lr, #0
 800ab80:	d000      	beq.n	800ab84 <_strtol_l.constprop.0+0xe8>
 800ab82:	1e69      	subs	r1, r5, #1
 800ab84:	6011      	str	r1, [r2, #0]
 800ab86:	e7f3      	b.n	800ab70 <_strtol_l.constprop.0+0xd4>
 800ab88:	2430      	movs	r4, #48	; 0x30
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1b1      	bne.n	800aaf2 <_strtol_l.constprop.0+0x56>
 800ab8e:	2308      	movs	r3, #8
 800ab90:	e7af      	b.n	800aaf2 <_strtol_l.constprop.0+0x56>
 800ab92:	2c30      	cmp	r4, #48	; 0x30
 800ab94:	d0a5      	beq.n	800aae2 <_strtol_l.constprop.0+0x46>
 800ab96:	230a      	movs	r3, #10
 800ab98:	e7ab      	b.n	800aaf2 <_strtol_l.constprop.0+0x56>
 800ab9a:	bf00      	nop
 800ab9c:	0800c101 	.word	0x0800c101

0800aba0 <_strtol_r>:
 800aba0:	f7ff bf7c 	b.w	800aa9c <_strtol_l.constprop.0>

0800aba4 <__ssputs_r>:
 800aba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba8:	688e      	ldr	r6, [r1, #8]
 800abaa:	461f      	mov	r7, r3
 800abac:	42be      	cmp	r6, r7
 800abae:	680b      	ldr	r3, [r1, #0]
 800abb0:	4682      	mov	sl, r0
 800abb2:	460c      	mov	r4, r1
 800abb4:	4690      	mov	r8, r2
 800abb6:	d82c      	bhi.n	800ac12 <__ssputs_r+0x6e>
 800abb8:	898a      	ldrh	r2, [r1, #12]
 800abba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abbe:	d026      	beq.n	800ac0e <__ssputs_r+0x6a>
 800abc0:	6965      	ldr	r5, [r4, #20]
 800abc2:	6909      	ldr	r1, [r1, #16]
 800abc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abc8:	eba3 0901 	sub.w	r9, r3, r1
 800abcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abd0:	1c7b      	adds	r3, r7, #1
 800abd2:	444b      	add	r3, r9
 800abd4:	106d      	asrs	r5, r5, #1
 800abd6:	429d      	cmp	r5, r3
 800abd8:	bf38      	it	cc
 800abda:	461d      	movcc	r5, r3
 800abdc:	0553      	lsls	r3, r2, #21
 800abde:	d527      	bpl.n	800ac30 <__ssputs_r+0x8c>
 800abe0:	4629      	mov	r1, r5
 800abe2:	f7fc fd29 	bl	8007638 <_malloc_r>
 800abe6:	4606      	mov	r6, r0
 800abe8:	b360      	cbz	r0, 800ac44 <__ssputs_r+0xa0>
 800abea:	6921      	ldr	r1, [r4, #16]
 800abec:	464a      	mov	r2, r9
 800abee:	f000 fa0b 	bl	800b008 <memcpy>
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	6126      	str	r6, [r4, #16]
 800ac00:	6165      	str	r5, [r4, #20]
 800ac02:	444e      	add	r6, r9
 800ac04:	eba5 0509 	sub.w	r5, r5, r9
 800ac08:	6026      	str	r6, [r4, #0]
 800ac0a:	60a5      	str	r5, [r4, #8]
 800ac0c:	463e      	mov	r6, r7
 800ac0e:	42be      	cmp	r6, r7
 800ac10:	d900      	bls.n	800ac14 <__ssputs_r+0x70>
 800ac12:	463e      	mov	r6, r7
 800ac14:	6820      	ldr	r0, [r4, #0]
 800ac16:	4632      	mov	r2, r6
 800ac18:	4641      	mov	r1, r8
 800ac1a:	f000 f9c9 	bl	800afb0 <memmove>
 800ac1e:	68a3      	ldr	r3, [r4, #8]
 800ac20:	1b9b      	subs	r3, r3, r6
 800ac22:	60a3      	str	r3, [r4, #8]
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	4433      	add	r3, r6
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac30:	462a      	mov	r2, r5
 800ac32:	f000 fd9e 	bl	800b772 <_realloc_r>
 800ac36:	4606      	mov	r6, r0
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d1e0      	bne.n	800abfe <__ssputs_r+0x5a>
 800ac3c:	6921      	ldr	r1, [r4, #16]
 800ac3e:	4650      	mov	r0, sl
 800ac40:	f7fe fc20 	bl	8009484 <_free_r>
 800ac44:	230c      	movs	r3, #12
 800ac46:	f8ca 3000 	str.w	r3, [sl]
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac50:	81a3      	strh	r3, [r4, #12]
 800ac52:	f04f 30ff 	mov.w	r0, #4294967295
 800ac56:	e7e9      	b.n	800ac2c <__ssputs_r+0x88>

0800ac58 <_svfiprintf_r>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	4698      	mov	r8, r3
 800ac5e:	898b      	ldrh	r3, [r1, #12]
 800ac60:	061b      	lsls	r3, r3, #24
 800ac62:	b09d      	sub	sp, #116	; 0x74
 800ac64:	4607      	mov	r7, r0
 800ac66:	460d      	mov	r5, r1
 800ac68:	4614      	mov	r4, r2
 800ac6a:	d50e      	bpl.n	800ac8a <_svfiprintf_r+0x32>
 800ac6c:	690b      	ldr	r3, [r1, #16]
 800ac6e:	b963      	cbnz	r3, 800ac8a <_svfiprintf_r+0x32>
 800ac70:	2140      	movs	r1, #64	; 0x40
 800ac72:	f7fc fce1 	bl	8007638 <_malloc_r>
 800ac76:	6028      	str	r0, [r5, #0]
 800ac78:	6128      	str	r0, [r5, #16]
 800ac7a:	b920      	cbnz	r0, 800ac86 <_svfiprintf_r+0x2e>
 800ac7c:	230c      	movs	r3, #12
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	f04f 30ff 	mov.w	r0, #4294967295
 800ac84:	e0d0      	b.n	800ae28 <_svfiprintf_r+0x1d0>
 800ac86:	2340      	movs	r3, #64	; 0x40
 800ac88:	616b      	str	r3, [r5, #20]
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8e:	2320      	movs	r3, #32
 800ac90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac98:	2330      	movs	r3, #48	; 0x30
 800ac9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ae40 <_svfiprintf_r+0x1e8>
 800ac9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aca2:	f04f 0901 	mov.w	r9, #1
 800aca6:	4623      	mov	r3, r4
 800aca8:	469a      	mov	sl, r3
 800acaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acae:	b10a      	cbz	r2, 800acb4 <_svfiprintf_r+0x5c>
 800acb0:	2a25      	cmp	r2, #37	; 0x25
 800acb2:	d1f9      	bne.n	800aca8 <_svfiprintf_r+0x50>
 800acb4:	ebba 0b04 	subs.w	fp, sl, r4
 800acb8:	d00b      	beq.n	800acd2 <_svfiprintf_r+0x7a>
 800acba:	465b      	mov	r3, fp
 800acbc:	4622      	mov	r2, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	4638      	mov	r0, r7
 800acc2:	f7ff ff6f 	bl	800aba4 <__ssputs_r>
 800acc6:	3001      	adds	r0, #1
 800acc8:	f000 80a9 	beq.w	800ae1e <_svfiprintf_r+0x1c6>
 800accc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acce:	445a      	add	r2, fp
 800acd0:	9209      	str	r2, [sp, #36]	; 0x24
 800acd2:	f89a 3000 	ldrb.w	r3, [sl]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 80a1 	beq.w	800ae1e <_svfiprintf_r+0x1c6>
 800acdc:	2300      	movs	r3, #0
 800acde:	f04f 32ff 	mov.w	r2, #4294967295
 800ace2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ace6:	f10a 0a01 	add.w	sl, sl, #1
 800acea:	9304      	str	r3, [sp, #16]
 800acec:	9307      	str	r3, [sp, #28]
 800acee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acf2:	931a      	str	r3, [sp, #104]	; 0x68
 800acf4:	4654      	mov	r4, sl
 800acf6:	2205      	movs	r2, #5
 800acf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acfc:	4850      	ldr	r0, [pc, #320]	; (800ae40 <_svfiprintf_r+0x1e8>)
 800acfe:	f7f5 fa6f 	bl	80001e0 <memchr>
 800ad02:	9a04      	ldr	r2, [sp, #16]
 800ad04:	b9d8      	cbnz	r0, 800ad3e <_svfiprintf_r+0xe6>
 800ad06:	06d0      	lsls	r0, r2, #27
 800ad08:	bf44      	itt	mi
 800ad0a:	2320      	movmi	r3, #32
 800ad0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad10:	0711      	lsls	r1, r2, #28
 800ad12:	bf44      	itt	mi
 800ad14:	232b      	movmi	r3, #43	; 0x2b
 800ad16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad20:	d015      	beq.n	800ad4e <_svfiprintf_r+0xf6>
 800ad22:	9a07      	ldr	r2, [sp, #28]
 800ad24:	4654      	mov	r4, sl
 800ad26:	2000      	movs	r0, #0
 800ad28:	f04f 0c0a 	mov.w	ip, #10
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad32:	3b30      	subs	r3, #48	; 0x30
 800ad34:	2b09      	cmp	r3, #9
 800ad36:	d94d      	bls.n	800add4 <_svfiprintf_r+0x17c>
 800ad38:	b1b0      	cbz	r0, 800ad68 <_svfiprintf_r+0x110>
 800ad3a:	9207      	str	r2, [sp, #28]
 800ad3c:	e014      	b.n	800ad68 <_svfiprintf_r+0x110>
 800ad3e:	eba0 0308 	sub.w	r3, r0, r8
 800ad42:	fa09 f303 	lsl.w	r3, r9, r3
 800ad46:	4313      	orrs	r3, r2
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	46a2      	mov	sl, r4
 800ad4c:	e7d2      	b.n	800acf4 <_svfiprintf_r+0x9c>
 800ad4e:	9b03      	ldr	r3, [sp, #12]
 800ad50:	1d19      	adds	r1, r3, #4
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	9103      	str	r1, [sp, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	bfbb      	ittet	lt
 800ad5a:	425b      	neglt	r3, r3
 800ad5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad60:	9307      	strge	r3, [sp, #28]
 800ad62:	9307      	strlt	r3, [sp, #28]
 800ad64:	bfb8      	it	lt
 800ad66:	9204      	strlt	r2, [sp, #16]
 800ad68:	7823      	ldrb	r3, [r4, #0]
 800ad6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad6c:	d10c      	bne.n	800ad88 <_svfiprintf_r+0x130>
 800ad6e:	7863      	ldrb	r3, [r4, #1]
 800ad70:	2b2a      	cmp	r3, #42	; 0x2a
 800ad72:	d134      	bne.n	800adde <_svfiprintf_r+0x186>
 800ad74:	9b03      	ldr	r3, [sp, #12]
 800ad76:	1d1a      	adds	r2, r3, #4
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	9203      	str	r2, [sp, #12]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	bfb8      	it	lt
 800ad80:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad84:	3402      	adds	r4, #2
 800ad86:	9305      	str	r3, [sp, #20]
 800ad88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ae50 <_svfiprintf_r+0x1f8>
 800ad8c:	7821      	ldrb	r1, [r4, #0]
 800ad8e:	2203      	movs	r2, #3
 800ad90:	4650      	mov	r0, sl
 800ad92:	f7f5 fa25 	bl	80001e0 <memchr>
 800ad96:	b138      	cbz	r0, 800ada8 <_svfiprintf_r+0x150>
 800ad98:	9b04      	ldr	r3, [sp, #16]
 800ad9a:	eba0 000a 	sub.w	r0, r0, sl
 800ad9e:	2240      	movs	r2, #64	; 0x40
 800ada0:	4082      	lsls	r2, r0
 800ada2:	4313      	orrs	r3, r2
 800ada4:	3401      	adds	r4, #1
 800ada6:	9304      	str	r3, [sp, #16]
 800ada8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adac:	4825      	ldr	r0, [pc, #148]	; (800ae44 <_svfiprintf_r+0x1ec>)
 800adae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adb2:	2206      	movs	r2, #6
 800adb4:	f7f5 fa14 	bl	80001e0 <memchr>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d038      	beq.n	800ae2e <_svfiprintf_r+0x1d6>
 800adbc:	4b22      	ldr	r3, [pc, #136]	; (800ae48 <_svfiprintf_r+0x1f0>)
 800adbe:	bb1b      	cbnz	r3, 800ae08 <_svfiprintf_r+0x1b0>
 800adc0:	9b03      	ldr	r3, [sp, #12]
 800adc2:	3307      	adds	r3, #7
 800adc4:	f023 0307 	bic.w	r3, r3, #7
 800adc8:	3308      	adds	r3, #8
 800adca:	9303      	str	r3, [sp, #12]
 800adcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adce:	4433      	add	r3, r6
 800add0:	9309      	str	r3, [sp, #36]	; 0x24
 800add2:	e768      	b.n	800aca6 <_svfiprintf_r+0x4e>
 800add4:	fb0c 3202 	mla	r2, ip, r2, r3
 800add8:	460c      	mov	r4, r1
 800adda:	2001      	movs	r0, #1
 800addc:	e7a6      	b.n	800ad2c <_svfiprintf_r+0xd4>
 800adde:	2300      	movs	r3, #0
 800ade0:	3401      	adds	r4, #1
 800ade2:	9305      	str	r3, [sp, #20]
 800ade4:	4619      	mov	r1, r3
 800ade6:	f04f 0c0a 	mov.w	ip, #10
 800adea:	4620      	mov	r0, r4
 800adec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adf0:	3a30      	subs	r2, #48	; 0x30
 800adf2:	2a09      	cmp	r2, #9
 800adf4:	d903      	bls.n	800adfe <_svfiprintf_r+0x1a6>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0c6      	beq.n	800ad88 <_svfiprintf_r+0x130>
 800adfa:	9105      	str	r1, [sp, #20]
 800adfc:	e7c4      	b.n	800ad88 <_svfiprintf_r+0x130>
 800adfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae02:	4604      	mov	r4, r0
 800ae04:	2301      	movs	r3, #1
 800ae06:	e7f0      	b.n	800adea <_svfiprintf_r+0x192>
 800ae08:	ab03      	add	r3, sp, #12
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	462a      	mov	r2, r5
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <_svfiprintf_r+0x1f4>)
 800ae10:	a904      	add	r1, sp, #16
 800ae12:	4638      	mov	r0, r7
 800ae14:	f7fc fd3c 	bl	8007890 <_printf_float>
 800ae18:	1c42      	adds	r2, r0, #1
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	d1d6      	bne.n	800adcc <_svfiprintf_r+0x174>
 800ae1e:	89ab      	ldrh	r3, [r5, #12]
 800ae20:	065b      	lsls	r3, r3, #25
 800ae22:	f53f af2d 	bmi.w	800ac80 <_svfiprintf_r+0x28>
 800ae26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae28:	b01d      	add	sp, #116	; 0x74
 800ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2e:	ab03      	add	r3, sp, #12
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	462a      	mov	r2, r5
 800ae34:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <_svfiprintf_r+0x1f4>)
 800ae36:	a904      	add	r1, sp, #16
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f7fc ffcd 	bl	8007dd8 <_printf_i>
 800ae3e:	e7eb      	b.n	800ae18 <_svfiprintf_r+0x1c0>
 800ae40:	0800c201 	.word	0x0800c201
 800ae44:	0800c20b 	.word	0x0800c20b
 800ae48:	08007891 	.word	0x08007891
 800ae4c:	0800aba5 	.word	0x0800aba5
 800ae50:	0800c207 	.word	0x0800c207

0800ae54 <__sflush_r>:
 800ae54:	898a      	ldrh	r2, [r1, #12]
 800ae56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	0710      	lsls	r0, r2, #28
 800ae5e:	460c      	mov	r4, r1
 800ae60:	d458      	bmi.n	800af14 <__sflush_r+0xc0>
 800ae62:	684b      	ldr	r3, [r1, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	dc05      	bgt.n	800ae74 <__sflush_r+0x20>
 800ae68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	dc02      	bgt.n	800ae74 <__sflush_r+0x20>
 800ae6e:	2000      	movs	r0, #0
 800ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae76:	2e00      	cmp	r6, #0
 800ae78:	d0f9      	beq.n	800ae6e <__sflush_r+0x1a>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae80:	682f      	ldr	r7, [r5, #0]
 800ae82:	6a21      	ldr	r1, [r4, #32]
 800ae84:	602b      	str	r3, [r5, #0]
 800ae86:	d032      	beq.n	800aeee <__sflush_r+0x9a>
 800ae88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae8a:	89a3      	ldrh	r3, [r4, #12]
 800ae8c:	075a      	lsls	r2, r3, #29
 800ae8e:	d505      	bpl.n	800ae9c <__sflush_r+0x48>
 800ae90:	6863      	ldr	r3, [r4, #4]
 800ae92:	1ac0      	subs	r0, r0, r3
 800ae94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae96:	b10b      	cbz	r3, 800ae9c <__sflush_r+0x48>
 800ae98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae9a:	1ac0      	subs	r0, r0, r3
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4602      	mov	r2, r0
 800aea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aea2:	6a21      	ldr	r1, [r4, #32]
 800aea4:	4628      	mov	r0, r5
 800aea6:	47b0      	blx	r6
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	d106      	bne.n	800aebc <__sflush_r+0x68>
 800aeae:	6829      	ldr	r1, [r5, #0]
 800aeb0:	291d      	cmp	r1, #29
 800aeb2:	d82b      	bhi.n	800af0c <__sflush_r+0xb8>
 800aeb4:	4a29      	ldr	r2, [pc, #164]	; (800af5c <__sflush_r+0x108>)
 800aeb6:	410a      	asrs	r2, r1
 800aeb8:	07d6      	lsls	r6, r2, #31
 800aeba:	d427      	bmi.n	800af0c <__sflush_r+0xb8>
 800aebc:	2200      	movs	r2, #0
 800aebe:	6062      	str	r2, [r4, #4]
 800aec0:	04d9      	lsls	r1, r3, #19
 800aec2:	6922      	ldr	r2, [r4, #16]
 800aec4:	6022      	str	r2, [r4, #0]
 800aec6:	d504      	bpl.n	800aed2 <__sflush_r+0x7e>
 800aec8:	1c42      	adds	r2, r0, #1
 800aeca:	d101      	bne.n	800aed0 <__sflush_r+0x7c>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b903      	cbnz	r3, 800aed2 <__sflush_r+0x7e>
 800aed0:	6560      	str	r0, [r4, #84]	; 0x54
 800aed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aed4:	602f      	str	r7, [r5, #0]
 800aed6:	2900      	cmp	r1, #0
 800aed8:	d0c9      	beq.n	800ae6e <__sflush_r+0x1a>
 800aeda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aede:	4299      	cmp	r1, r3
 800aee0:	d002      	beq.n	800aee8 <__sflush_r+0x94>
 800aee2:	4628      	mov	r0, r5
 800aee4:	f7fe face 	bl	8009484 <_free_r>
 800aee8:	2000      	movs	r0, #0
 800aeea:	6360      	str	r0, [r4, #52]	; 0x34
 800aeec:	e7c0      	b.n	800ae70 <__sflush_r+0x1c>
 800aeee:	2301      	movs	r3, #1
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b0      	blx	r6
 800aef4:	1c41      	adds	r1, r0, #1
 800aef6:	d1c8      	bne.n	800ae8a <__sflush_r+0x36>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d0c5      	beq.n	800ae8a <__sflush_r+0x36>
 800aefe:	2b1d      	cmp	r3, #29
 800af00:	d001      	beq.n	800af06 <__sflush_r+0xb2>
 800af02:	2b16      	cmp	r3, #22
 800af04:	d101      	bne.n	800af0a <__sflush_r+0xb6>
 800af06:	602f      	str	r7, [r5, #0]
 800af08:	e7b1      	b.n	800ae6e <__sflush_r+0x1a>
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af10:	81a3      	strh	r3, [r4, #12]
 800af12:	e7ad      	b.n	800ae70 <__sflush_r+0x1c>
 800af14:	690f      	ldr	r7, [r1, #16]
 800af16:	2f00      	cmp	r7, #0
 800af18:	d0a9      	beq.n	800ae6e <__sflush_r+0x1a>
 800af1a:	0793      	lsls	r3, r2, #30
 800af1c:	680e      	ldr	r6, [r1, #0]
 800af1e:	bf08      	it	eq
 800af20:	694b      	ldreq	r3, [r1, #20]
 800af22:	600f      	str	r7, [r1, #0]
 800af24:	bf18      	it	ne
 800af26:	2300      	movne	r3, #0
 800af28:	eba6 0807 	sub.w	r8, r6, r7
 800af2c:	608b      	str	r3, [r1, #8]
 800af2e:	f1b8 0f00 	cmp.w	r8, #0
 800af32:	dd9c      	ble.n	800ae6e <__sflush_r+0x1a>
 800af34:	6a21      	ldr	r1, [r4, #32]
 800af36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af38:	4643      	mov	r3, r8
 800af3a:	463a      	mov	r2, r7
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b0      	blx	r6
 800af40:	2800      	cmp	r0, #0
 800af42:	dc06      	bgt.n	800af52 <__sflush_r+0xfe>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af4a:	81a3      	strh	r3, [r4, #12]
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295
 800af50:	e78e      	b.n	800ae70 <__sflush_r+0x1c>
 800af52:	4407      	add	r7, r0
 800af54:	eba8 0800 	sub.w	r8, r8, r0
 800af58:	e7e9      	b.n	800af2e <__sflush_r+0xda>
 800af5a:	bf00      	nop
 800af5c:	dfbffffe 	.word	0xdfbffffe

0800af60 <_fflush_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	690b      	ldr	r3, [r1, #16]
 800af64:	4605      	mov	r5, r0
 800af66:	460c      	mov	r4, r1
 800af68:	b913      	cbnz	r3, 800af70 <_fflush_r+0x10>
 800af6a:	2500      	movs	r5, #0
 800af6c:	4628      	mov	r0, r5
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	b118      	cbz	r0, 800af7a <_fflush_r+0x1a>
 800af72:	6a03      	ldr	r3, [r0, #32]
 800af74:	b90b      	cbnz	r3, 800af7a <_fflush_r+0x1a>
 800af76:	f7fd fadb 	bl	8008530 <__sinit>
 800af7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0f3      	beq.n	800af6a <_fflush_r+0xa>
 800af82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af84:	07d0      	lsls	r0, r2, #31
 800af86:	d404      	bmi.n	800af92 <_fflush_r+0x32>
 800af88:	0599      	lsls	r1, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_fflush_r+0x32>
 800af8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af8e:	f7fd fbf5 	bl	800877c <__retarget_lock_acquire_recursive>
 800af92:	4628      	mov	r0, r5
 800af94:	4621      	mov	r1, r4
 800af96:	f7ff ff5d 	bl	800ae54 <__sflush_r>
 800af9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af9c:	07da      	lsls	r2, r3, #31
 800af9e:	4605      	mov	r5, r0
 800afa0:	d4e4      	bmi.n	800af6c <_fflush_r+0xc>
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	059b      	lsls	r3, r3, #22
 800afa6:	d4e1      	bmi.n	800af6c <_fflush_r+0xc>
 800afa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afaa:	f7fd fbe8 	bl	800877e <__retarget_lock_release_recursive>
 800afae:	e7dd      	b.n	800af6c <_fflush_r+0xc>

0800afb0 <memmove>:
 800afb0:	4288      	cmp	r0, r1
 800afb2:	b510      	push	{r4, lr}
 800afb4:	eb01 0402 	add.w	r4, r1, r2
 800afb8:	d902      	bls.n	800afc0 <memmove+0x10>
 800afba:	4284      	cmp	r4, r0
 800afbc:	4623      	mov	r3, r4
 800afbe:	d807      	bhi.n	800afd0 <memmove+0x20>
 800afc0:	1e43      	subs	r3, r0, #1
 800afc2:	42a1      	cmp	r1, r4
 800afc4:	d008      	beq.n	800afd8 <memmove+0x28>
 800afc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afce:	e7f8      	b.n	800afc2 <memmove+0x12>
 800afd0:	4402      	add	r2, r0
 800afd2:	4601      	mov	r1, r0
 800afd4:	428a      	cmp	r2, r1
 800afd6:	d100      	bne.n	800afda <memmove+0x2a>
 800afd8:	bd10      	pop	{r4, pc}
 800afda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afe2:	e7f7      	b.n	800afd4 <memmove+0x24>

0800afe4 <strncmp>:
 800afe4:	b510      	push	{r4, lr}
 800afe6:	b16a      	cbz	r2, 800b004 <strncmp+0x20>
 800afe8:	3901      	subs	r1, #1
 800afea:	1884      	adds	r4, r0, r2
 800afec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d103      	bne.n	800b000 <strncmp+0x1c>
 800aff8:	42a0      	cmp	r0, r4
 800affa:	d001      	beq.n	800b000 <strncmp+0x1c>
 800affc:	2a00      	cmp	r2, #0
 800affe:	d1f5      	bne.n	800afec <strncmp+0x8>
 800b000:	1ad0      	subs	r0, r2, r3
 800b002:	bd10      	pop	{r4, pc}
 800b004:	4610      	mov	r0, r2
 800b006:	e7fc      	b.n	800b002 <strncmp+0x1e>

0800b008 <memcpy>:
 800b008:	440a      	add	r2, r1
 800b00a:	4291      	cmp	r1, r2
 800b00c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b010:	d100      	bne.n	800b014 <memcpy+0xc>
 800b012:	4770      	bx	lr
 800b014:	b510      	push	{r4, lr}
 800b016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b01e:	4291      	cmp	r1, r2
 800b020:	d1f9      	bne.n	800b016 <memcpy+0xe>
 800b022:	bd10      	pop	{r4, pc}
 800b024:	0000      	movs	r0, r0
	...

0800b028 <nan>:
 800b028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b030 <nan+0x8>
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	00000000 	.word	0x00000000
 800b034:	7ff80000 	.word	0x7ff80000

0800b038 <__assert_func>:
 800b038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b03a:	4614      	mov	r4, r2
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b09      	ldr	r3, [pc, #36]	; (800b064 <__assert_func+0x2c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4605      	mov	r5, r0
 800b044:	68d8      	ldr	r0, [r3, #12]
 800b046:	b14c      	cbz	r4, 800b05c <__assert_func+0x24>
 800b048:	4b07      	ldr	r3, [pc, #28]	; (800b068 <__assert_func+0x30>)
 800b04a:	9100      	str	r1, [sp, #0]
 800b04c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b050:	4906      	ldr	r1, [pc, #24]	; (800b06c <__assert_func+0x34>)
 800b052:	462b      	mov	r3, r5
 800b054:	f000 fbca 	bl	800b7ec <fiprintf>
 800b058:	f000 fbda 	bl	800b810 <abort>
 800b05c:	4b04      	ldr	r3, [pc, #16]	; (800b070 <__assert_func+0x38>)
 800b05e:	461c      	mov	r4, r3
 800b060:	e7f3      	b.n	800b04a <__assert_func+0x12>
 800b062:	bf00      	nop
 800b064:	20000064 	.word	0x20000064
 800b068:	0800c21a 	.word	0x0800c21a
 800b06c:	0800c227 	.word	0x0800c227
 800b070:	0800c255 	.word	0x0800c255

0800b074 <_calloc_r>:
 800b074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b076:	fba1 2402 	umull	r2, r4, r1, r2
 800b07a:	b94c      	cbnz	r4, 800b090 <_calloc_r+0x1c>
 800b07c:	4611      	mov	r1, r2
 800b07e:	9201      	str	r2, [sp, #4]
 800b080:	f7fc fada 	bl	8007638 <_malloc_r>
 800b084:	9a01      	ldr	r2, [sp, #4]
 800b086:	4605      	mov	r5, r0
 800b088:	b930      	cbnz	r0, 800b098 <_calloc_r+0x24>
 800b08a:	4628      	mov	r0, r5
 800b08c:	b003      	add	sp, #12
 800b08e:	bd30      	pop	{r4, r5, pc}
 800b090:	220c      	movs	r2, #12
 800b092:	6002      	str	r2, [r0, #0]
 800b094:	2500      	movs	r5, #0
 800b096:	e7f8      	b.n	800b08a <_calloc_r+0x16>
 800b098:	4621      	mov	r1, r4
 800b09a:	f7fd fae2 	bl	8008662 <memset>
 800b09e:	e7f4      	b.n	800b08a <_calloc_r+0x16>

0800b0a0 <rshift>:
 800b0a0:	6903      	ldr	r3, [r0, #16]
 800b0a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b0ae:	f100 0414 	add.w	r4, r0, #20
 800b0b2:	dd45      	ble.n	800b140 <rshift+0xa0>
 800b0b4:	f011 011f 	ands.w	r1, r1, #31
 800b0b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b0bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b0c0:	d10c      	bne.n	800b0dc <rshift+0x3c>
 800b0c2:	f100 0710 	add.w	r7, r0, #16
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	42b1      	cmp	r1, r6
 800b0ca:	d334      	bcc.n	800b136 <rshift+0x96>
 800b0cc:	1a9b      	subs	r3, r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	1eea      	subs	r2, r5, #3
 800b0d2:	4296      	cmp	r6, r2
 800b0d4:	bf38      	it	cc
 800b0d6:	2300      	movcc	r3, #0
 800b0d8:	4423      	add	r3, r4
 800b0da:	e015      	b.n	800b108 <rshift+0x68>
 800b0dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b0e0:	f1c1 0820 	rsb	r8, r1, #32
 800b0e4:	40cf      	lsrs	r7, r1
 800b0e6:	f105 0e04 	add.w	lr, r5, #4
 800b0ea:	46a1      	mov	r9, r4
 800b0ec:	4576      	cmp	r6, lr
 800b0ee:	46f4      	mov	ip, lr
 800b0f0:	d815      	bhi.n	800b11e <rshift+0x7e>
 800b0f2:	1a9a      	subs	r2, r3, r2
 800b0f4:	0092      	lsls	r2, r2, #2
 800b0f6:	3a04      	subs	r2, #4
 800b0f8:	3501      	adds	r5, #1
 800b0fa:	42ae      	cmp	r6, r5
 800b0fc:	bf38      	it	cc
 800b0fe:	2200      	movcc	r2, #0
 800b100:	18a3      	adds	r3, r4, r2
 800b102:	50a7      	str	r7, [r4, r2]
 800b104:	b107      	cbz	r7, 800b108 <rshift+0x68>
 800b106:	3304      	adds	r3, #4
 800b108:	1b1a      	subs	r2, r3, r4
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b110:	bf08      	it	eq
 800b112:	2300      	moveq	r3, #0
 800b114:	6102      	str	r2, [r0, #16]
 800b116:	bf08      	it	eq
 800b118:	6143      	streq	r3, [r0, #20]
 800b11a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b11e:	f8dc c000 	ldr.w	ip, [ip]
 800b122:	fa0c fc08 	lsl.w	ip, ip, r8
 800b126:	ea4c 0707 	orr.w	r7, ip, r7
 800b12a:	f849 7b04 	str.w	r7, [r9], #4
 800b12e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b132:	40cf      	lsrs	r7, r1
 800b134:	e7da      	b.n	800b0ec <rshift+0x4c>
 800b136:	f851 cb04 	ldr.w	ip, [r1], #4
 800b13a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b13e:	e7c3      	b.n	800b0c8 <rshift+0x28>
 800b140:	4623      	mov	r3, r4
 800b142:	e7e1      	b.n	800b108 <rshift+0x68>

0800b144 <__hexdig_fun>:
 800b144:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b148:	2b09      	cmp	r3, #9
 800b14a:	d802      	bhi.n	800b152 <__hexdig_fun+0xe>
 800b14c:	3820      	subs	r0, #32
 800b14e:	b2c0      	uxtb	r0, r0
 800b150:	4770      	bx	lr
 800b152:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b156:	2b05      	cmp	r3, #5
 800b158:	d801      	bhi.n	800b15e <__hexdig_fun+0x1a>
 800b15a:	3847      	subs	r0, #71	; 0x47
 800b15c:	e7f7      	b.n	800b14e <__hexdig_fun+0xa>
 800b15e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b162:	2b05      	cmp	r3, #5
 800b164:	d801      	bhi.n	800b16a <__hexdig_fun+0x26>
 800b166:	3827      	subs	r0, #39	; 0x27
 800b168:	e7f1      	b.n	800b14e <__hexdig_fun+0xa>
 800b16a:	2000      	movs	r0, #0
 800b16c:	4770      	bx	lr
	...

0800b170 <__gethex>:
 800b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b174:	4617      	mov	r7, r2
 800b176:	680a      	ldr	r2, [r1, #0]
 800b178:	b085      	sub	sp, #20
 800b17a:	f102 0b02 	add.w	fp, r2, #2
 800b17e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b182:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b186:	4681      	mov	r9, r0
 800b188:	468a      	mov	sl, r1
 800b18a:	9302      	str	r3, [sp, #8]
 800b18c:	32fe      	adds	r2, #254	; 0xfe
 800b18e:	eb02 030b 	add.w	r3, r2, fp
 800b192:	46d8      	mov	r8, fp
 800b194:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b198:	9301      	str	r3, [sp, #4]
 800b19a:	2830      	cmp	r0, #48	; 0x30
 800b19c:	d0f7      	beq.n	800b18e <__gethex+0x1e>
 800b19e:	f7ff ffd1 	bl	800b144 <__hexdig_fun>
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d138      	bne.n	800b21a <__gethex+0xaa>
 800b1a8:	49a7      	ldr	r1, [pc, #668]	; (800b448 <__gethex+0x2d8>)
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	4640      	mov	r0, r8
 800b1ae:	f7ff ff19 	bl	800afe4 <strncmp>
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d169      	bne.n	800b28c <__gethex+0x11c>
 800b1b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b1bc:	465d      	mov	r5, fp
 800b1be:	f7ff ffc1 	bl	800b144 <__hexdig_fun>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d064      	beq.n	800b290 <__gethex+0x120>
 800b1c6:	465a      	mov	r2, fp
 800b1c8:	7810      	ldrb	r0, [r2, #0]
 800b1ca:	2830      	cmp	r0, #48	; 0x30
 800b1cc:	4690      	mov	r8, r2
 800b1ce:	f102 0201 	add.w	r2, r2, #1
 800b1d2:	d0f9      	beq.n	800b1c8 <__gethex+0x58>
 800b1d4:	f7ff ffb6 	bl	800b144 <__hexdig_fun>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	fab0 f480 	clz	r4, r0
 800b1de:	0964      	lsrs	r4, r4, #5
 800b1e0:	465e      	mov	r6, fp
 800b1e2:	9301      	str	r3, [sp, #4]
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	4615      	mov	r5, r2
 800b1e8:	3201      	adds	r2, #1
 800b1ea:	7828      	ldrb	r0, [r5, #0]
 800b1ec:	f7ff ffaa 	bl	800b144 <__hexdig_fun>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d1f8      	bne.n	800b1e6 <__gethex+0x76>
 800b1f4:	4994      	ldr	r1, [pc, #592]	; (800b448 <__gethex+0x2d8>)
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	f7ff fef3 	bl	800afe4 <strncmp>
 800b1fe:	b978      	cbnz	r0, 800b220 <__gethex+0xb0>
 800b200:	b946      	cbnz	r6, 800b214 <__gethex+0xa4>
 800b202:	1c6e      	adds	r6, r5, #1
 800b204:	4632      	mov	r2, r6
 800b206:	4615      	mov	r5, r2
 800b208:	3201      	adds	r2, #1
 800b20a:	7828      	ldrb	r0, [r5, #0]
 800b20c:	f7ff ff9a 	bl	800b144 <__hexdig_fun>
 800b210:	2800      	cmp	r0, #0
 800b212:	d1f8      	bne.n	800b206 <__gethex+0x96>
 800b214:	1b73      	subs	r3, r6, r5
 800b216:	009e      	lsls	r6, r3, #2
 800b218:	e004      	b.n	800b224 <__gethex+0xb4>
 800b21a:	2400      	movs	r4, #0
 800b21c:	4626      	mov	r6, r4
 800b21e:	e7e1      	b.n	800b1e4 <__gethex+0x74>
 800b220:	2e00      	cmp	r6, #0
 800b222:	d1f7      	bne.n	800b214 <__gethex+0xa4>
 800b224:	782b      	ldrb	r3, [r5, #0]
 800b226:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b22a:	2b50      	cmp	r3, #80	; 0x50
 800b22c:	d13d      	bne.n	800b2aa <__gethex+0x13a>
 800b22e:	786b      	ldrb	r3, [r5, #1]
 800b230:	2b2b      	cmp	r3, #43	; 0x2b
 800b232:	d02f      	beq.n	800b294 <__gethex+0x124>
 800b234:	2b2d      	cmp	r3, #45	; 0x2d
 800b236:	d031      	beq.n	800b29c <__gethex+0x12c>
 800b238:	1c69      	adds	r1, r5, #1
 800b23a:	f04f 0b00 	mov.w	fp, #0
 800b23e:	7808      	ldrb	r0, [r1, #0]
 800b240:	f7ff ff80 	bl	800b144 <__hexdig_fun>
 800b244:	1e42      	subs	r2, r0, #1
 800b246:	b2d2      	uxtb	r2, r2
 800b248:	2a18      	cmp	r2, #24
 800b24a:	d82e      	bhi.n	800b2aa <__gethex+0x13a>
 800b24c:	f1a0 0210 	sub.w	r2, r0, #16
 800b250:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b254:	f7ff ff76 	bl	800b144 <__hexdig_fun>
 800b258:	f100 3cff 	add.w	ip, r0, #4294967295
 800b25c:	fa5f fc8c 	uxtb.w	ip, ip
 800b260:	f1bc 0f18 	cmp.w	ip, #24
 800b264:	d91d      	bls.n	800b2a2 <__gethex+0x132>
 800b266:	f1bb 0f00 	cmp.w	fp, #0
 800b26a:	d000      	beq.n	800b26e <__gethex+0xfe>
 800b26c:	4252      	negs	r2, r2
 800b26e:	4416      	add	r6, r2
 800b270:	f8ca 1000 	str.w	r1, [sl]
 800b274:	b1dc      	cbz	r4, 800b2ae <__gethex+0x13e>
 800b276:	9b01      	ldr	r3, [sp, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	bf14      	ite	ne
 800b27c:	f04f 0800 	movne.w	r8, #0
 800b280:	f04f 0806 	moveq.w	r8, #6
 800b284:	4640      	mov	r0, r8
 800b286:	b005      	add	sp, #20
 800b288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28c:	4645      	mov	r5, r8
 800b28e:	4626      	mov	r6, r4
 800b290:	2401      	movs	r4, #1
 800b292:	e7c7      	b.n	800b224 <__gethex+0xb4>
 800b294:	f04f 0b00 	mov.w	fp, #0
 800b298:	1ca9      	adds	r1, r5, #2
 800b29a:	e7d0      	b.n	800b23e <__gethex+0xce>
 800b29c:	f04f 0b01 	mov.w	fp, #1
 800b2a0:	e7fa      	b.n	800b298 <__gethex+0x128>
 800b2a2:	230a      	movs	r3, #10
 800b2a4:	fb03 0002 	mla	r0, r3, r2, r0
 800b2a8:	e7d0      	b.n	800b24c <__gethex+0xdc>
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	e7e0      	b.n	800b270 <__gethex+0x100>
 800b2ae:	eba5 0308 	sub.w	r3, r5, r8
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	2b07      	cmp	r3, #7
 800b2b8:	dc0a      	bgt.n	800b2d0 <__gethex+0x160>
 800b2ba:	4648      	mov	r0, r9
 800b2bc:	f7fe f92e 	bl	800951c <_Balloc>
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	b940      	cbnz	r0, 800b2d6 <__gethex+0x166>
 800b2c4:	4b61      	ldr	r3, [pc, #388]	; (800b44c <__gethex+0x2dc>)
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	21e4      	movs	r1, #228	; 0xe4
 800b2ca:	4861      	ldr	r0, [pc, #388]	; (800b450 <__gethex+0x2e0>)
 800b2cc:	f7ff feb4 	bl	800b038 <__assert_func>
 800b2d0:	3101      	adds	r1, #1
 800b2d2:	105b      	asrs	r3, r3, #1
 800b2d4:	e7ef      	b.n	800b2b6 <__gethex+0x146>
 800b2d6:	f100 0a14 	add.w	sl, r0, #20
 800b2da:	2300      	movs	r3, #0
 800b2dc:	495a      	ldr	r1, [pc, #360]	; (800b448 <__gethex+0x2d8>)
 800b2de:	f8cd a004 	str.w	sl, [sp, #4]
 800b2e2:	469b      	mov	fp, r3
 800b2e4:	45a8      	cmp	r8, r5
 800b2e6:	d342      	bcc.n	800b36e <__gethex+0x1fe>
 800b2e8:	9801      	ldr	r0, [sp, #4]
 800b2ea:	f840 bb04 	str.w	fp, [r0], #4
 800b2ee:	eba0 000a 	sub.w	r0, r0, sl
 800b2f2:	1080      	asrs	r0, r0, #2
 800b2f4:	6120      	str	r0, [r4, #16]
 800b2f6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b2fa:	4658      	mov	r0, fp
 800b2fc:	f7fe fa00 	bl	8009700 <__hi0bits>
 800b300:	683d      	ldr	r5, [r7, #0]
 800b302:	eba8 0000 	sub.w	r0, r8, r0
 800b306:	42a8      	cmp	r0, r5
 800b308:	dd59      	ble.n	800b3be <__gethex+0x24e>
 800b30a:	eba0 0805 	sub.w	r8, r0, r5
 800b30e:	4641      	mov	r1, r8
 800b310:	4620      	mov	r0, r4
 800b312:	f7fe fd8f 	bl	8009e34 <__any_on>
 800b316:	4683      	mov	fp, r0
 800b318:	b1b8      	cbz	r0, 800b34a <__gethex+0x1da>
 800b31a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b31e:	1159      	asrs	r1, r3, #5
 800b320:	f003 021f 	and.w	r2, r3, #31
 800b324:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b328:	f04f 0b01 	mov.w	fp, #1
 800b32c:	fa0b f202 	lsl.w	r2, fp, r2
 800b330:	420a      	tst	r2, r1
 800b332:	d00a      	beq.n	800b34a <__gethex+0x1da>
 800b334:	455b      	cmp	r3, fp
 800b336:	dd06      	ble.n	800b346 <__gethex+0x1d6>
 800b338:	f1a8 0102 	sub.w	r1, r8, #2
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7fe fd79 	bl	8009e34 <__any_on>
 800b342:	2800      	cmp	r0, #0
 800b344:	d138      	bne.n	800b3b8 <__gethex+0x248>
 800b346:	f04f 0b02 	mov.w	fp, #2
 800b34a:	4641      	mov	r1, r8
 800b34c:	4620      	mov	r0, r4
 800b34e:	f7ff fea7 	bl	800b0a0 <rshift>
 800b352:	4446      	add	r6, r8
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	42b3      	cmp	r3, r6
 800b358:	da41      	bge.n	800b3de <__gethex+0x26e>
 800b35a:	4621      	mov	r1, r4
 800b35c:	4648      	mov	r0, r9
 800b35e:	f7fe f91d 	bl	800959c <_Bfree>
 800b362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b364:	2300      	movs	r3, #0
 800b366:	6013      	str	r3, [r2, #0]
 800b368:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b36c:	e78a      	b.n	800b284 <__gethex+0x114>
 800b36e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b372:	2a2e      	cmp	r2, #46	; 0x2e
 800b374:	d014      	beq.n	800b3a0 <__gethex+0x230>
 800b376:	2b20      	cmp	r3, #32
 800b378:	d106      	bne.n	800b388 <__gethex+0x218>
 800b37a:	9b01      	ldr	r3, [sp, #4]
 800b37c:	f843 bb04 	str.w	fp, [r3], #4
 800b380:	f04f 0b00 	mov.w	fp, #0
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	465b      	mov	r3, fp
 800b388:	7828      	ldrb	r0, [r5, #0]
 800b38a:	9303      	str	r3, [sp, #12]
 800b38c:	f7ff feda 	bl	800b144 <__hexdig_fun>
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	f000 000f 	and.w	r0, r0, #15
 800b396:	4098      	lsls	r0, r3
 800b398:	ea4b 0b00 	orr.w	fp, fp, r0
 800b39c:	3304      	adds	r3, #4
 800b39e:	e7a1      	b.n	800b2e4 <__gethex+0x174>
 800b3a0:	45a8      	cmp	r8, r5
 800b3a2:	d8e8      	bhi.n	800b376 <__gethex+0x206>
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	9303      	str	r3, [sp, #12]
 800b3aa:	f7ff fe1b 	bl	800afe4 <strncmp>
 800b3ae:	4926      	ldr	r1, [pc, #152]	; (800b448 <__gethex+0x2d8>)
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d1df      	bne.n	800b376 <__gethex+0x206>
 800b3b6:	e795      	b.n	800b2e4 <__gethex+0x174>
 800b3b8:	f04f 0b03 	mov.w	fp, #3
 800b3bc:	e7c5      	b.n	800b34a <__gethex+0x1da>
 800b3be:	da0b      	bge.n	800b3d8 <__gethex+0x268>
 800b3c0:	eba5 0800 	sub.w	r8, r5, r0
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	4642      	mov	r2, r8
 800b3c8:	4648      	mov	r0, r9
 800b3ca:	f7fe fb01 	bl	80099d0 <__lshift>
 800b3ce:	eba6 0608 	sub.w	r6, r6, r8
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	f100 0a14 	add.w	sl, r0, #20
 800b3d8:	f04f 0b00 	mov.w	fp, #0
 800b3dc:	e7ba      	b.n	800b354 <__gethex+0x1e4>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	42b3      	cmp	r3, r6
 800b3e2:	dd73      	ble.n	800b4cc <__gethex+0x35c>
 800b3e4:	1b9e      	subs	r6, r3, r6
 800b3e6:	42b5      	cmp	r5, r6
 800b3e8:	dc34      	bgt.n	800b454 <__gethex+0x2e4>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d023      	beq.n	800b438 <__gethex+0x2c8>
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d025      	beq.n	800b440 <__gethex+0x2d0>
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d115      	bne.n	800b424 <__gethex+0x2b4>
 800b3f8:	42b5      	cmp	r5, r6
 800b3fa:	d113      	bne.n	800b424 <__gethex+0x2b4>
 800b3fc:	2d01      	cmp	r5, #1
 800b3fe:	d10b      	bne.n	800b418 <__gethex+0x2a8>
 800b400:	9a02      	ldr	r2, [sp, #8]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	2301      	movs	r3, #1
 800b408:	6123      	str	r3, [r4, #16]
 800b40a:	f8ca 3000 	str.w	r3, [sl]
 800b40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b410:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b414:	601c      	str	r4, [r3, #0]
 800b416:	e735      	b.n	800b284 <__gethex+0x114>
 800b418:	1e69      	subs	r1, r5, #1
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7fe fd0a 	bl	8009e34 <__any_on>
 800b420:	2800      	cmp	r0, #0
 800b422:	d1ed      	bne.n	800b400 <__gethex+0x290>
 800b424:	4621      	mov	r1, r4
 800b426:	4648      	mov	r0, r9
 800b428:	f7fe f8b8 	bl	800959c <_Bfree>
 800b42c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b42e:	2300      	movs	r3, #0
 800b430:	6013      	str	r3, [r2, #0]
 800b432:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b436:	e725      	b.n	800b284 <__gethex+0x114>
 800b438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1f2      	bne.n	800b424 <__gethex+0x2b4>
 800b43e:	e7df      	b.n	800b400 <__gethex+0x290>
 800b440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1dc      	bne.n	800b400 <__gethex+0x290>
 800b446:	e7ed      	b.n	800b424 <__gethex+0x2b4>
 800b448:	0800c0ac 	.word	0x0800c0ac
 800b44c:	0800bf41 	.word	0x0800bf41
 800b450:	0800c256 	.word	0x0800c256
 800b454:	f106 38ff 	add.w	r8, r6, #4294967295
 800b458:	f1bb 0f00 	cmp.w	fp, #0
 800b45c:	d133      	bne.n	800b4c6 <__gethex+0x356>
 800b45e:	f1b8 0f00 	cmp.w	r8, #0
 800b462:	d004      	beq.n	800b46e <__gethex+0x2fe>
 800b464:	4641      	mov	r1, r8
 800b466:	4620      	mov	r0, r4
 800b468:	f7fe fce4 	bl	8009e34 <__any_on>
 800b46c:	4683      	mov	fp, r0
 800b46e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b472:	2301      	movs	r3, #1
 800b474:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b478:	f008 081f 	and.w	r8, r8, #31
 800b47c:	fa03 f308 	lsl.w	r3, r3, r8
 800b480:	4213      	tst	r3, r2
 800b482:	4631      	mov	r1, r6
 800b484:	4620      	mov	r0, r4
 800b486:	bf18      	it	ne
 800b488:	f04b 0b02 	orrne.w	fp, fp, #2
 800b48c:	1bad      	subs	r5, r5, r6
 800b48e:	f7ff fe07 	bl	800b0a0 <rshift>
 800b492:	687e      	ldr	r6, [r7, #4]
 800b494:	f04f 0802 	mov.w	r8, #2
 800b498:	f1bb 0f00 	cmp.w	fp, #0
 800b49c:	d04a      	beq.n	800b534 <__gethex+0x3c4>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d016      	beq.n	800b4d2 <__gethex+0x362>
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d018      	beq.n	800b4da <__gethex+0x36a>
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d109      	bne.n	800b4c0 <__gethex+0x350>
 800b4ac:	f01b 0f02 	tst.w	fp, #2
 800b4b0:	d006      	beq.n	800b4c0 <__gethex+0x350>
 800b4b2:	f8da 3000 	ldr.w	r3, [sl]
 800b4b6:	ea4b 0b03 	orr.w	fp, fp, r3
 800b4ba:	f01b 0f01 	tst.w	fp, #1
 800b4be:	d10f      	bne.n	800b4e0 <__gethex+0x370>
 800b4c0:	f048 0810 	orr.w	r8, r8, #16
 800b4c4:	e036      	b.n	800b534 <__gethex+0x3c4>
 800b4c6:	f04f 0b01 	mov.w	fp, #1
 800b4ca:	e7d0      	b.n	800b46e <__gethex+0x2fe>
 800b4cc:	f04f 0801 	mov.w	r8, #1
 800b4d0:	e7e2      	b.n	800b498 <__gethex+0x328>
 800b4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4d4:	f1c3 0301 	rsb	r3, r3, #1
 800b4d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d0ef      	beq.n	800b4c0 <__gethex+0x350>
 800b4e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b4e4:	f104 0214 	add.w	r2, r4, #20
 800b4e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	4694      	mov	ip, r2
 800b4f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b4fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b4fe:	d01e      	beq.n	800b53e <__gethex+0x3ce>
 800b500:	3101      	adds	r1, #1
 800b502:	f8cc 1000 	str.w	r1, [ip]
 800b506:	f1b8 0f02 	cmp.w	r8, #2
 800b50a:	f104 0214 	add.w	r2, r4, #20
 800b50e:	d13d      	bne.n	800b58c <__gethex+0x41c>
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	3b01      	subs	r3, #1
 800b514:	42ab      	cmp	r3, r5
 800b516:	d10b      	bne.n	800b530 <__gethex+0x3c0>
 800b518:	1169      	asrs	r1, r5, #5
 800b51a:	2301      	movs	r3, #1
 800b51c:	f005 051f 	and.w	r5, r5, #31
 800b520:	fa03 f505 	lsl.w	r5, r3, r5
 800b524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b528:	421d      	tst	r5, r3
 800b52a:	bf18      	it	ne
 800b52c:	f04f 0801 	movne.w	r8, #1
 800b530:	f048 0820 	orr.w	r8, r8, #32
 800b534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b536:	601c      	str	r4, [r3, #0]
 800b538:	9b02      	ldr	r3, [sp, #8]
 800b53a:	601e      	str	r6, [r3, #0]
 800b53c:	e6a2      	b.n	800b284 <__gethex+0x114>
 800b53e:	4290      	cmp	r0, r2
 800b540:	f842 3c04 	str.w	r3, [r2, #-4]
 800b544:	d8d6      	bhi.n	800b4f4 <__gethex+0x384>
 800b546:	68a2      	ldr	r2, [r4, #8]
 800b548:	4593      	cmp	fp, r2
 800b54a:	db17      	blt.n	800b57c <__gethex+0x40c>
 800b54c:	6861      	ldr	r1, [r4, #4]
 800b54e:	4648      	mov	r0, r9
 800b550:	3101      	adds	r1, #1
 800b552:	f7fd ffe3 	bl	800951c <_Balloc>
 800b556:	4682      	mov	sl, r0
 800b558:	b918      	cbnz	r0, 800b562 <__gethex+0x3f2>
 800b55a:	4b1b      	ldr	r3, [pc, #108]	; (800b5c8 <__gethex+0x458>)
 800b55c:	4602      	mov	r2, r0
 800b55e:	2184      	movs	r1, #132	; 0x84
 800b560:	e6b3      	b.n	800b2ca <__gethex+0x15a>
 800b562:	6922      	ldr	r2, [r4, #16]
 800b564:	3202      	adds	r2, #2
 800b566:	f104 010c 	add.w	r1, r4, #12
 800b56a:	0092      	lsls	r2, r2, #2
 800b56c:	300c      	adds	r0, #12
 800b56e:	f7ff fd4b 	bl	800b008 <memcpy>
 800b572:	4621      	mov	r1, r4
 800b574:	4648      	mov	r0, r9
 800b576:	f7fe f811 	bl	800959c <_Bfree>
 800b57a:	4654      	mov	r4, sl
 800b57c:	6922      	ldr	r2, [r4, #16]
 800b57e:	1c51      	adds	r1, r2, #1
 800b580:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b584:	6121      	str	r1, [r4, #16]
 800b586:	2101      	movs	r1, #1
 800b588:	6151      	str	r1, [r2, #20]
 800b58a:	e7bc      	b.n	800b506 <__gethex+0x396>
 800b58c:	6921      	ldr	r1, [r4, #16]
 800b58e:	4559      	cmp	r1, fp
 800b590:	dd0b      	ble.n	800b5aa <__gethex+0x43a>
 800b592:	2101      	movs	r1, #1
 800b594:	4620      	mov	r0, r4
 800b596:	f7ff fd83 	bl	800b0a0 <rshift>
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	3601      	adds	r6, #1
 800b59e:	42b3      	cmp	r3, r6
 800b5a0:	f6ff aedb 	blt.w	800b35a <__gethex+0x1ea>
 800b5a4:	f04f 0801 	mov.w	r8, #1
 800b5a8:	e7c2      	b.n	800b530 <__gethex+0x3c0>
 800b5aa:	f015 051f 	ands.w	r5, r5, #31
 800b5ae:	d0f9      	beq.n	800b5a4 <__gethex+0x434>
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	441a      	add	r2, r3
 800b5b4:	f1c5 0520 	rsb	r5, r5, #32
 800b5b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b5bc:	f7fe f8a0 	bl	8009700 <__hi0bits>
 800b5c0:	42a8      	cmp	r0, r5
 800b5c2:	dbe6      	blt.n	800b592 <__gethex+0x422>
 800b5c4:	e7ee      	b.n	800b5a4 <__gethex+0x434>
 800b5c6:	bf00      	nop
 800b5c8:	0800bf41 	.word	0x0800bf41

0800b5cc <L_shift>:
 800b5cc:	f1c2 0208 	rsb	r2, r2, #8
 800b5d0:	0092      	lsls	r2, r2, #2
 800b5d2:	b570      	push	{r4, r5, r6, lr}
 800b5d4:	f1c2 0620 	rsb	r6, r2, #32
 800b5d8:	6843      	ldr	r3, [r0, #4]
 800b5da:	6804      	ldr	r4, [r0, #0]
 800b5dc:	fa03 f506 	lsl.w	r5, r3, r6
 800b5e0:	432c      	orrs	r4, r5
 800b5e2:	40d3      	lsrs	r3, r2
 800b5e4:	6004      	str	r4, [r0, #0]
 800b5e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b5ea:	4288      	cmp	r0, r1
 800b5ec:	d3f4      	bcc.n	800b5d8 <L_shift+0xc>
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}

0800b5f0 <__match>:
 800b5f0:	b530      	push	{r4, r5, lr}
 800b5f2:	6803      	ldr	r3, [r0, #0]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5fa:	b914      	cbnz	r4, 800b602 <__match+0x12>
 800b5fc:	6003      	str	r3, [r0, #0]
 800b5fe:	2001      	movs	r0, #1
 800b600:	bd30      	pop	{r4, r5, pc}
 800b602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b606:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b60a:	2d19      	cmp	r5, #25
 800b60c:	bf98      	it	ls
 800b60e:	3220      	addls	r2, #32
 800b610:	42a2      	cmp	r2, r4
 800b612:	d0f0      	beq.n	800b5f6 <__match+0x6>
 800b614:	2000      	movs	r0, #0
 800b616:	e7f3      	b.n	800b600 <__match+0x10>

0800b618 <__hexnan>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	680b      	ldr	r3, [r1, #0]
 800b61e:	6801      	ldr	r1, [r0, #0]
 800b620:	115e      	asrs	r6, r3, #5
 800b622:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b626:	f013 031f 	ands.w	r3, r3, #31
 800b62a:	b087      	sub	sp, #28
 800b62c:	bf18      	it	ne
 800b62e:	3604      	addne	r6, #4
 800b630:	2500      	movs	r5, #0
 800b632:	1f37      	subs	r7, r6, #4
 800b634:	4682      	mov	sl, r0
 800b636:	4690      	mov	r8, r2
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b63e:	46b9      	mov	r9, r7
 800b640:	463c      	mov	r4, r7
 800b642:	9502      	str	r5, [sp, #8]
 800b644:	46ab      	mov	fp, r5
 800b646:	784a      	ldrb	r2, [r1, #1]
 800b648:	1c4b      	adds	r3, r1, #1
 800b64a:	9303      	str	r3, [sp, #12]
 800b64c:	b342      	cbz	r2, 800b6a0 <__hexnan+0x88>
 800b64e:	4610      	mov	r0, r2
 800b650:	9105      	str	r1, [sp, #20]
 800b652:	9204      	str	r2, [sp, #16]
 800b654:	f7ff fd76 	bl	800b144 <__hexdig_fun>
 800b658:	2800      	cmp	r0, #0
 800b65a:	d14f      	bne.n	800b6fc <__hexnan+0xe4>
 800b65c:	9a04      	ldr	r2, [sp, #16]
 800b65e:	9905      	ldr	r1, [sp, #20]
 800b660:	2a20      	cmp	r2, #32
 800b662:	d818      	bhi.n	800b696 <__hexnan+0x7e>
 800b664:	9b02      	ldr	r3, [sp, #8]
 800b666:	459b      	cmp	fp, r3
 800b668:	dd13      	ble.n	800b692 <__hexnan+0x7a>
 800b66a:	454c      	cmp	r4, r9
 800b66c:	d206      	bcs.n	800b67c <__hexnan+0x64>
 800b66e:	2d07      	cmp	r5, #7
 800b670:	dc04      	bgt.n	800b67c <__hexnan+0x64>
 800b672:	462a      	mov	r2, r5
 800b674:	4649      	mov	r1, r9
 800b676:	4620      	mov	r0, r4
 800b678:	f7ff ffa8 	bl	800b5cc <L_shift>
 800b67c:	4544      	cmp	r4, r8
 800b67e:	d950      	bls.n	800b722 <__hexnan+0x10a>
 800b680:	2300      	movs	r3, #0
 800b682:	f1a4 0904 	sub.w	r9, r4, #4
 800b686:	f844 3c04 	str.w	r3, [r4, #-4]
 800b68a:	f8cd b008 	str.w	fp, [sp, #8]
 800b68e:	464c      	mov	r4, r9
 800b690:	461d      	mov	r5, r3
 800b692:	9903      	ldr	r1, [sp, #12]
 800b694:	e7d7      	b.n	800b646 <__hexnan+0x2e>
 800b696:	2a29      	cmp	r2, #41	; 0x29
 800b698:	d155      	bne.n	800b746 <__hexnan+0x12e>
 800b69a:	3102      	adds	r1, #2
 800b69c:	f8ca 1000 	str.w	r1, [sl]
 800b6a0:	f1bb 0f00 	cmp.w	fp, #0
 800b6a4:	d04f      	beq.n	800b746 <__hexnan+0x12e>
 800b6a6:	454c      	cmp	r4, r9
 800b6a8:	d206      	bcs.n	800b6b8 <__hexnan+0xa0>
 800b6aa:	2d07      	cmp	r5, #7
 800b6ac:	dc04      	bgt.n	800b6b8 <__hexnan+0xa0>
 800b6ae:	462a      	mov	r2, r5
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f7ff ff8a 	bl	800b5cc <L_shift>
 800b6b8:	4544      	cmp	r4, r8
 800b6ba:	d934      	bls.n	800b726 <__hexnan+0x10e>
 800b6bc:	f1a8 0204 	sub.w	r2, r8, #4
 800b6c0:	4623      	mov	r3, r4
 800b6c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b6c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b6ca:	429f      	cmp	r7, r3
 800b6cc:	d2f9      	bcs.n	800b6c2 <__hexnan+0xaa>
 800b6ce:	1b3b      	subs	r3, r7, r4
 800b6d0:	f023 0303 	bic.w	r3, r3, #3
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	3e03      	subs	r6, #3
 800b6d8:	3401      	adds	r4, #1
 800b6da:	42a6      	cmp	r6, r4
 800b6dc:	bf38      	it	cc
 800b6de:	2304      	movcc	r3, #4
 800b6e0:	4443      	add	r3, r8
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f843 2b04 	str.w	r2, [r3], #4
 800b6e8:	429f      	cmp	r7, r3
 800b6ea:	d2fb      	bcs.n	800b6e4 <__hexnan+0xcc>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	b91b      	cbnz	r3, 800b6f8 <__hexnan+0xe0>
 800b6f0:	4547      	cmp	r7, r8
 800b6f2:	d126      	bne.n	800b742 <__hexnan+0x12a>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	603b      	str	r3, [r7, #0]
 800b6f8:	2005      	movs	r0, #5
 800b6fa:	e025      	b.n	800b748 <__hexnan+0x130>
 800b6fc:	3501      	adds	r5, #1
 800b6fe:	2d08      	cmp	r5, #8
 800b700:	f10b 0b01 	add.w	fp, fp, #1
 800b704:	dd06      	ble.n	800b714 <__hexnan+0xfc>
 800b706:	4544      	cmp	r4, r8
 800b708:	d9c3      	bls.n	800b692 <__hexnan+0x7a>
 800b70a:	2300      	movs	r3, #0
 800b70c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b710:	2501      	movs	r5, #1
 800b712:	3c04      	subs	r4, #4
 800b714:	6822      	ldr	r2, [r4, #0]
 800b716:	f000 000f 	and.w	r0, r0, #15
 800b71a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b71e:	6020      	str	r0, [r4, #0]
 800b720:	e7b7      	b.n	800b692 <__hexnan+0x7a>
 800b722:	2508      	movs	r5, #8
 800b724:	e7b5      	b.n	800b692 <__hexnan+0x7a>
 800b726:	9b01      	ldr	r3, [sp, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0df      	beq.n	800b6ec <__hexnan+0xd4>
 800b72c:	f1c3 0320 	rsb	r3, r3, #32
 800b730:	f04f 32ff 	mov.w	r2, #4294967295
 800b734:	40da      	lsrs	r2, r3
 800b736:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b73a:	4013      	ands	r3, r2
 800b73c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b740:	e7d4      	b.n	800b6ec <__hexnan+0xd4>
 800b742:	3f04      	subs	r7, #4
 800b744:	e7d2      	b.n	800b6ec <__hexnan+0xd4>
 800b746:	2004      	movs	r0, #4
 800b748:	b007      	add	sp, #28
 800b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b74e <__ascii_mbtowc>:
 800b74e:	b082      	sub	sp, #8
 800b750:	b901      	cbnz	r1, 800b754 <__ascii_mbtowc+0x6>
 800b752:	a901      	add	r1, sp, #4
 800b754:	b142      	cbz	r2, 800b768 <__ascii_mbtowc+0x1a>
 800b756:	b14b      	cbz	r3, 800b76c <__ascii_mbtowc+0x1e>
 800b758:	7813      	ldrb	r3, [r2, #0]
 800b75a:	600b      	str	r3, [r1, #0]
 800b75c:	7812      	ldrb	r2, [r2, #0]
 800b75e:	1e10      	subs	r0, r2, #0
 800b760:	bf18      	it	ne
 800b762:	2001      	movne	r0, #1
 800b764:	b002      	add	sp, #8
 800b766:	4770      	bx	lr
 800b768:	4610      	mov	r0, r2
 800b76a:	e7fb      	b.n	800b764 <__ascii_mbtowc+0x16>
 800b76c:	f06f 0001 	mvn.w	r0, #1
 800b770:	e7f8      	b.n	800b764 <__ascii_mbtowc+0x16>

0800b772 <_realloc_r>:
 800b772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b776:	4680      	mov	r8, r0
 800b778:	4614      	mov	r4, r2
 800b77a:	460e      	mov	r6, r1
 800b77c:	b921      	cbnz	r1, 800b788 <_realloc_r+0x16>
 800b77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b782:	4611      	mov	r1, r2
 800b784:	f7fb bf58 	b.w	8007638 <_malloc_r>
 800b788:	b92a      	cbnz	r2, 800b796 <_realloc_r+0x24>
 800b78a:	f7fd fe7b 	bl	8009484 <_free_r>
 800b78e:	4625      	mov	r5, r4
 800b790:	4628      	mov	r0, r5
 800b792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b796:	f000 f842 	bl	800b81e <_malloc_usable_size_r>
 800b79a:	4284      	cmp	r4, r0
 800b79c:	4607      	mov	r7, r0
 800b79e:	d802      	bhi.n	800b7a6 <_realloc_r+0x34>
 800b7a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7a4:	d812      	bhi.n	800b7cc <_realloc_r+0x5a>
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4640      	mov	r0, r8
 800b7aa:	f7fb ff45 	bl	8007638 <_malloc_r>
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d0ed      	beq.n	800b790 <_realloc_r+0x1e>
 800b7b4:	42bc      	cmp	r4, r7
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	bf28      	it	cs
 800b7bc:	463a      	movcs	r2, r7
 800b7be:	f7ff fc23 	bl	800b008 <memcpy>
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	f7fd fe5d 	bl	8009484 <_free_r>
 800b7ca:	e7e1      	b.n	800b790 <_realloc_r+0x1e>
 800b7cc:	4635      	mov	r5, r6
 800b7ce:	e7df      	b.n	800b790 <_realloc_r+0x1e>

0800b7d0 <__ascii_wctomb>:
 800b7d0:	b149      	cbz	r1, 800b7e6 <__ascii_wctomb+0x16>
 800b7d2:	2aff      	cmp	r2, #255	; 0xff
 800b7d4:	bf85      	ittet	hi
 800b7d6:	238a      	movhi	r3, #138	; 0x8a
 800b7d8:	6003      	strhi	r3, [r0, #0]
 800b7da:	700a      	strbls	r2, [r1, #0]
 800b7dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b7e0:	bf98      	it	ls
 800b7e2:	2001      	movls	r0, #1
 800b7e4:	4770      	bx	lr
 800b7e6:	4608      	mov	r0, r1
 800b7e8:	4770      	bx	lr
	...

0800b7ec <fiprintf>:
 800b7ec:	b40e      	push	{r1, r2, r3}
 800b7ee:	b503      	push	{r0, r1, lr}
 800b7f0:	4601      	mov	r1, r0
 800b7f2:	ab03      	add	r3, sp, #12
 800b7f4:	4805      	ldr	r0, [pc, #20]	; (800b80c <fiprintf+0x20>)
 800b7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7fa:	6800      	ldr	r0, [r0, #0]
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	f000 f83f 	bl	800b880 <_vfiprintf_r>
 800b802:	b002      	add	sp, #8
 800b804:	f85d eb04 	ldr.w	lr, [sp], #4
 800b808:	b003      	add	sp, #12
 800b80a:	4770      	bx	lr
 800b80c:	20000064 	.word	0x20000064

0800b810 <abort>:
 800b810:	b508      	push	{r3, lr}
 800b812:	2006      	movs	r0, #6
 800b814:	f000 fa0c 	bl	800bc30 <raise>
 800b818:	2001      	movs	r0, #1
 800b81a:	f7f5 ff3d 	bl	8001698 <_exit>

0800b81e <_malloc_usable_size_r>:
 800b81e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b822:	1f18      	subs	r0, r3, #4
 800b824:	2b00      	cmp	r3, #0
 800b826:	bfbc      	itt	lt
 800b828:	580b      	ldrlt	r3, [r1, r0]
 800b82a:	18c0      	addlt	r0, r0, r3
 800b82c:	4770      	bx	lr

0800b82e <__sfputc_r>:
 800b82e:	6893      	ldr	r3, [r2, #8]
 800b830:	3b01      	subs	r3, #1
 800b832:	2b00      	cmp	r3, #0
 800b834:	b410      	push	{r4}
 800b836:	6093      	str	r3, [r2, #8]
 800b838:	da08      	bge.n	800b84c <__sfputc_r+0x1e>
 800b83a:	6994      	ldr	r4, [r2, #24]
 800b83c:	42a3      	cmp	r3, r4
 800b83e:	db01      	blt.n	800b844 <__sfputc_r+0x16>
 800b840:	290a      	cmp	r1, #10
 800b842:	d103      	bne.n	800b84c <__sfputc_r+0x1e>
 800b844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b848:	f000 b934 	b.w	800bab4 <__swbuf_r>
 800b84c:	6813      	ldr	r3, [r2, #0]
 800b84e:	1c58      	adds	r0, r3, #1
 800b850:	6010      	str	r0, [r2, #0]
 800b852:	7019      	strb	r1, [r3, #0]
 800b854:	4608      	mov	r0, r1
 800b856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <__sfputs_r>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	4606      	mov	r6, r0
 800b860:	460f      	mov	r7, r1
 800b862:	4614      	mov	r4, r2
 800b864:	18d5      	adds	r5, r2, r3
 800b866:	42ac      	cmp	r4, r5
 800b868:	d101      	bne.n	800b86e <__sfputs_r+0x12>
 800b86a:	2000      	movs	r0, #0
 800b86c:	e007      	b.n	800b87e <__sfputs_r+0x22>
 800b86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b872:	463a      	mov	r2, r7
 800b874:	4630      	mov	r0, r6
 800b876:	f7ff ffda 	bl	800b82e <__sfputc_r>
 800b87a:	1c43      	adds	r3, r0, #1
 800b87c:	d1f3      	bne.n	800b866 <__sfputs_r+0xa>
 800b87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b880 <_vfiprintf_r>:
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	460d      	mov	r5, r1
 800b886:	b09d      	sub	sp, #116	; 0x74
 800b888:	4614      	mov	r4, r2
 800b88a:	4698      	mov	r8, r3
 800b88c:	4606      	mov	r6, r0
 800b88e:	b118      	cbz	r0, 800b898 <_vfiprintf_r+0x18>
 800b890:	6a03      	ldr	r3, [r0, #32]
 800b892:	b90b      	cbnz	r3, 800b898 <_vfiprintf_r+0x18>
 800b894:	f7fc fe4c 	bl	8008530 <__sinit>
 800b898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b89a:	07d9      	lsls	r1, r3, #31
 800b89c:	d405      	bmi.n	800b8aa <_vfiprintf_r+0x2a>
 800b89e:	89ab      	ldrh	r3, [r5, #12]
 800b8a0:	059a      	lsls	r2, r3, #22
 800b8a2:	d402      	bmi.n	800b8aa <_vfiprintf_r+0x2a>
 800b8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8a6:	f7fc ff69 	bl	800877c <__retarget_lock_acquire_recursive>
 800b8aa:	89ab      	ldrh	r3, [r5, #12]
 800b8ac:	071b      	lsls	r3, r3, #28
 800b8ae:	d501      	bpl.n	800b8b4 <_vfiprintf_r+0x34>
 800b8b0:	692b      	ldr	r3, [r5, #16]
 800b8b2:	b99b      	cbnz	r3, 800b8dc <_vfiprintf_r+0x5c>
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f000 f93a 	bl	800bb30 <__swsetup_r>
 800b8bc:	b170      	cbz	r0, 800b8dc <_vfiprintf_r+0x5c>
 800b8be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c0:	07dc      	lsls	r4, r3, #31
 800b8c2:	d504      	bpl.n	800b8ce <_vfiprintf_r+0x4e>
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	b01d      	add	sp, #116	; 0x74
 800b8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ce:	89ab      	ldrh	r3, [r5, #12]
 800b8d0:	0598      	lsls	r0, r3, #22
 800b8d2:	d4f7      	bmi.n	800b8c4 <_vfiprintf_r+0x44>
 800b8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d6:	f7fc ff52 	bl	800877e <__retarget_lock_release_recursive>
 800b8da:	e7f3      	b.n	800b8c4 <_vfiprintf_r+0x44>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e0:	2320      	movs	r3, #32
 800b8e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8ea:	2330      	movs	r3, #48	; 0x30
 800b8ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800baa0 <_vfiprintf_r+0x220>
 800b8f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8f4:	f04f 0901 	mov.w	r9, #1
 800b8f8:	4623      	mov	r3, r4
 800b8fa:	469a      	mov	sl, r3
 800b8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b900:	b10a      	cbz	r2, 800b906 <_vfiprintf_r+0x86>
 800b902:	2a25      	cmp	r2, #37	; 0x25
 800b904:	d1f9      	bne.n	800b8fa <_vfiprintf_r+0x7a>
 800b906:	ebba 0b04 	subs.w	fp, sl, r4
 800b90a:	d00b      	beq.n	800b924 <_vfiprintf_r+0xa4>
 800b90c:	465b      	mov	r3, fp
 800b90e:	4622      	mov	r2, r4
 800b910:	4629      	mov	r1, r5
 800b912:	4630      	mov	r0, r6
 800b914:	f7ff ffa2 	bl	800b85c <__sfputs_r>
 800b918:	3001      	adds	r0, #1
 800b91a:	f000 80a9 	beq.w	800ba70 <_vfiprintf_r+0x1f0>
 800b91e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b920:	445a      	add	r2, fp
 800b922:	9209      	str	r2, [sp, #36]	; 0x24
 800b924:	f89a 3000 	ldrb.w	r3, [sl]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 80a1 	beq.w	800ba70 <_vfiprintf_r+0x1f0>
 800b92e:	2300      	movs	r3, #0
 800b930:	f04f 32ff 	mov.w	r2, #4294967295
 800b934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b938:	f10a 0a01 	add.w	sl, sl, #1
 800b93c:	9304      	str	r3, [sp, #16]
 800b93e:	9307      	str	r3, [sp, #28]
 800b940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b944:	931a      	str	r3, [sp, #104]	; 0x68
 800b946:	4654      	mov	r4, sl
 800b948:	2205      	movs	r2, #5
 800b94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b94e:	4854      	ldr	r0, [pc, #336]	; (800baa0 <_vfiprintf_r+0x220>)
 800b950:	f7f4 fc46 	bl	80001e0 <memchr>
 800b954:	9a04      	ldr	r2, [sp, #16]
 800b956:	b9d8      	cbnz	r0, 800b990 <_vfiprintf_r+0x110>
 800b958:	06d1      	lsls	r1, r2, #27
 800b95a:	bf44      	itt	mi
 800b95c:	2320      	movmi	r3, #32
 800b95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b962:	0713      	lsls	r3, r2, #28
 800b964:	bf44      	itt	mi
 800b966:	232b      	movmi	r3, #43	; 0x2b
 800b968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b96c:	f89a 3000 	ldrb.w	r3, [sl]
 800b970:	2b2a      	cmp	r3, #42	; 0x2a
 800b972:	d015      	beq.n	800b9a0 <_vfiprintf_r+0x120>
 800b974:	9a07      	ldr	r2, [sp, #28]
 800b976:	4654      	mov	r4, sl
 800b978:	2000      	movs	r0, #0
 800b97a:	f04f 0c0a 	mov.w	ip, #10
 800b97e:	4621      	mov	r1, r4
 800b980:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b984:	3b30      	subs	r3, #48	; 0x30
 800b986:	2b09      	cmp	r3, #9
 800b988:	d94d      	bls.n	800ba26 <_vfiprintf_r+0x1a6>
 800b98a:	b1b0      	cbz	r0, 800b9ba <_vfiprintf_r+0x13a>
 800b98c:	9207      	str	r2, [sp, #28]
 800b98e:	e014      	b.n	800b9ba <_vfiprintf_r+0x13a>
 800b990:	eba0 0308 	sub.w	r3, r0, r8
 800b994:	fa09 f303 	lsl.w	r3, r9, r3
 800b998:	4313      	orrs	r3, r2
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	46a2      	mov	sl, r4
 800b99e:	e7d2      	b.n	800b946 <_vfiprintf_r+0xc6>
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	1d19      	adds	r1, r3, #4
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	9103      	str	r1, [sp, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bfbb      	ittet	lt
 800b9ac:	425b      	neglt	r3, r3
 800b9ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b9b2:	9307      	strge	r3, [sp, #28]
 800b9b4:	9307      	strlt	r3, [sp, #28]
 800b9b6:	bfb8      	it	lt
 800b9b8:	9204      	strlt	r2, [sp, #16]
 800b9ba:	7823      	ldrb	r3, [r4, #0]
 800b9bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b9be:	d10c      	bne.n	800b9da <_vfiprintf_r+0x15a>
 800b9c0:	7863      	ldrb	r3, [r4, #1]
 800b9c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9c4:	d134      	bne.n	800ba30 <_vfiprintf_r+0x1b0>
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	1d1a      	adds	r2, r3, #4
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	9203      	str	r2, [sp, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	bfb8      	it	lt
 800b9d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9d6:	3402      	adds	r4, #2
 800b9d8:	9305      	str	r3, [sp, #20]
 800b9da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bab0 <_vfiprintf_r+0x230>
 800b9de:	7821      	ldrb	r1, [r4, #0]
 800b9e0:	2203      	movs	r2, #3
 800b9e2:	4650      	mov	r0, sl
 800b9e4:	f7f4 fbfc 	bl	80001e0 <memchr>
 800b9e8:	b138      	cbz	r0, 800b9fa <_vfiprintf_r+0x17a>
 800b9ea:	9b04      	ldr	r3, [sp, #16]
 800b9ec:	eba0 000a 	sub.w	r0, r0, sl
 800b9f0:	2240      	movs	r2, #64	; 0x40
 800b9f2:	4082      	lsls	r2, r0
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	3401      	adds	r4, #1
 800b9f8:	9304      	str	r3, [sp, #16]
 800b9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fe:	4829      	ldr	r0, [pc, #164]	; (800baa4 <_vfiprintf_r+0x224>)
 800ba00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba04:	2206      	movs	r2, #6
 800ba06:	f7f4 fbeb 	bl	80001e0 <memchr>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d03f      	beq.n	800ba8e <_vfiprintf_r+0x20e>
 800ba0e:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <_vfiprintf_r+0x228>)
 800ba10:	bb1b      	cbnz	r3, 800ba5a <_vfiprintf_r+0x1da>
 800ba12:	9b03      	ldr	r3, [sp, #12]
 800ba14:	3307      	adds	r3, #7
 800ba16:	f023 0307 	bic.w	r3, r3, #7
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	9303      	str	r3, [sp, #12]
 800ba1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba20:	443b      	add	r3, r7
 800ba22:	9309      	str	r3, [sp, #36]	; 0x24
 800ba24:	e768      	b.n	800b8f8 <_vfiprintf_r+0x78>
 800ba26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	2001      	movs	r0, #1
 800ba2e:	e7a6      	b.n	800b97e <_vfiprintf_r+0xfe>
 800ba30:	2300      	movs	r3, #0
 800ba32:	3401      	adds	r4, #1
 800ba34:	9305      	str	r3, [sp, #20]
 800ba36:	4619      	mov	r1, r3
 800ba38:	f04f 0c0a 	mov.w	ip, #10
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba42:	3a30      	subs	r2, #48	; 0x30
 800ba44:	2a09      	cmp	r2, #9
 800ba46:	d903      	bls.n	800ba50 <_vfiprintf_r+0x1d0>
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d0c6      	beq.n	800b9da <_vfiprintf_r+0x15a>
 800ba4c:	9105      	str	r1, [sp, #20]
 800ba4e:	e7c4      	b.n	800b9da <_vfiprintf_r+0x15a>
 800ba50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba54:	4604      	mov	r4, r0
 800ba56:	2301      	movs	r3, #1
 800ba58:	e7f0      	b.n	800ba3c <_vfiprintf_r+0x1bc>
 800ba5a:	ab03      	add	r3, sp, #12
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	462a      	mov	r2, r5
 800ba60:	4b12      	ldr	r3, [pc, #72]	; (800baac <_vfiprintf_r+0x22c>)
 800ba62:	a904      	add	r1, sp, #16
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7fb ff13 	bl	8007890 <_printf_float>
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	1c78      	adds	r0, r7, #1
 800ba6e:	d1d6      	bne.n	800ba1e <_vfiprintf_r+0x19e>
 800ba70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba72:	07d9      	lsls	r1, r3, #31
 800ba74:	d405      	bmi.n	800ba82 <_vfiprintf_r+0x202>
 800ba76:	89ab      	ldrh	r3, [r5, #12]
 800ba78:	059a      	lsls	r2, r3, #22
 800ba7a:	d402      	bmi.n	800ba82 <_vfiprintf_r+0x202>
 800ba7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba7e:	f7fc fe7e 	bl	800877e <__retarget_lock_release_recursive>
 800ba82:	89ab      	ldrh	r3, [r5, #12]
 800ba84:	065b      	lsls	r3, r3, #25
 800ba86:	f53f af1d 	bmi.w	800b8c4 <_vfiprintf_r+0x44>
 800ba8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba8c:	e71c      	b.n	800b8c8 <_vfiprintf_r+0x48>
 800ba8e:	ab03      	add	r3, sp, #12
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	462a      	mov	r2, r5
 800ba94:	4b05      	ldr	r3, [pc, #20]	; (800baac <_vfiprintf_r+0x22c>)
 800ba96:	a904      	add	r1, sp, #16
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f7fc f99d 	bl	8007dd8 <_printf_i>
 800ba9e:	e7e4      	b.n	800ba6a <_vfiprintf_r+0x1ea>
 800baa0:	0800c201 	.word	0x0800c201
 800baa4:	0800c20b 	.word	0x0800c20b
 800baa8:	08007891 	.word	0x08007891
 800baac:	0800b85d 	.word	0x0800b85d
 800bab0:	0800c207 	.word	0x0800c207

0800bab4 <__swbuf_r>:
 800bab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab6:	460e      	mov	r6, r1
 800bab8:	4614      	mov	r4, r2
 800baba:	4605      	mov	r5, r0
 800babc:	b118      	cbz	r0, 800bac6 <__swbuf_r+0x12>
 800babe:	6a03      	ldr	r3, [r0, #32]
 800bac0:	b90b      	cbnz	r3, 800bac6 <__swbuf_r+0x12>
 800bac2:	f7fc fd35 	bl	8008530 <__sinit>
 800bac6:	69a3      	ldr	r3, [r4, #24]
 800bac8:	60a3      	str	r3, [r4, #8]
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	071a      	lsls	r2, r3, #28
 800bace:	d525      	bpl.n	800bb1c <__swbuf_r+0x68>
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	b31b      	cbz	r3, 800bb1c <__swbuf_r+0x68>
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	6922      	ldr	r2, [r4, #16]
 800bad8:	1a98      	subs	r0, r3, r2
 800bada:	6963      	ldr	r3, [r4, #20]
 800badc:	b2f6      	uxtb	r6, r6
 800bade:	4283      	cmp	r3, r0
 800bae0:	4637      	mov	r7, r6
 800bae2:	dc04      	bgt.n	800baee <__swbuf_r+0x3a>
 800bae4:	4621      	mov	r1, r4
 800bae6:	4628      	mov	r0, r5
 800bae8:	f7ff fa3a 	bl	800af60 <_fflush_r>
 800baec:	b9e0      	cbnz	r0, 800bb28 <__swbuf_r+0x74>
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	60a3      	str	r3, [r4, #8]
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	6022      	str	r2, [r4, #0]
 800bafa:	701e      	strb	r6, [r3, #0]
 800bafc:	6962      	ldr	r2, [r4, #20]
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d004      	beq.n	800bb0e <__swbuf_r+0x5a>
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	07db      	lsls	r3, r3, #31
 800bb08:	d506      	bpl.n	800bb18 <__swbuf_r+0x64>
 800bb0a:	2e0a      	cmp	r6, #10
 800bb0c:	d104      	bne.n	800bb18 <__swbuf_r+0x64>
 800bb0e:	4621      	mov	r1, r4
 800bb10:	4628      	mov	r0, r5
 800bb12:	f7ff fa25 	bl	800af60 <_fflush_r>
 800bb16:	b938      	cbnz	r0, 800bb28 <__swbuf_r+0x74>
 800bb18:	4638      	mov	r0, r7
 800bb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f000 f806 	bl	800bb30 <__swsetup_r>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d0d5      	beq.n	800bad4 <__swbuf_r+0x20>
 800bb28:	f04f 37ff 	mov.w	r7, #4294967295
 800bb2c:	e7f4      	b.n	800bb18 <__swbuf_r+0x64>
	...

0800bb30 <__swsetup_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4b2a      	ldr	r3, [pc, #168]	; (800bbdc <__swsetup_r+0xac>)
 800bb34:	4605      	mov	r5, r0
 800bb36:	6818      	ldr	r0, [r3, #0]
 800bb38:	460c      	mov	r4, r1
 800bb3a:	b118      	cbz	r0, 800bb44 <__swsetup_r+0x14>
 800bb3c:	6a03      	ldr	r3, [r0, #32]
 800bb3e:	b90b      	cbnz	r3, 800bb44 <__swsetup_r+0x14>
 800bb40:	f7fc fcf6 	bl	8008530 <__sinit>
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb4a:	0718      	lsls	r0, r3, #28
 800bb4c:	d422      	bmi.n	800bb94 <__swsetup_r+0x64>
 800bb4e:	06d9      	lsls	r1, r3, #27
 800bb50:	d407      	bmi.n	800bb62 <__swsetup_r+0x32>
 800bb52:	2309      	movs	r3, #9
 800bb54:	602b      	str	r3, [r5, #0]
 800bb56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb5a:	81a3      	strh	r3, [r4, #12]
 800bb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb60:	e034      	b.n	800bbcc <__swsetup_r+0x9c>
 800bb62:	0758      	lsls	r0, r3, #29
 800bb64:	d512      	bpl.n	800bb8c <__swsetup_r+0x5c>
 800bb66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb68:	b141      	cbz	r1, 800bb7c <__swsetup_r+0x4c>
 800bb6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb6e:	4299      	cmp	r1, r3
 800bb70:	d002      	beq.n	800bb78 <__swsetup_r+0x48>
 800bb72:	4628      	mov	r0, r5
 800bb74:	f7fd fc86 	bl	8009484 <_free_r>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	6363      	str	r3, [r4, #52]	; 0x34
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb82:	81a3      	strh	r3, [r4, #12]
 800bb84:	2300      	movs	r3, #0
 800bb86:	6063      	str	r3, [r4, #4]
 800bb88:	6923      	ldr	r3, [r4, #16]
 800bb8a:	6023      	str	r3, [r4, #0]
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	f043 0308 	orr.w	r3, r3, #8
 800bb92:	81a3      	strh	r3, [r4, #12]
 800bb94:	6923      	ldr	r3, [r4, #16]
 800bb96:	b94b      	cbnz	r3, 800bbac <__swsetup_r+0x7c>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bba2:	d003      	beq.n	800bbac <__swsetup_r+0x7c>
 800bba4:	4621      	mov	r1, r4
 800bba6:	4628      	mov	r0, r5
 800bba8:	f000 f884 	bl	800bcb4 <__smakebuf_r>
 800bbac:	89a0      	ldrh	r0, [r4, #12]
 800bbae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbb2:	f010 0301 	ands.w	r3, r0, #1
 800bbb6:	d00a      	beq.n	800bbce <__swsetup_r+0x9e>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	60a3      	str	r3, [r4, #8]
 800bbbc:	6963      	ldr	r3, [r4, #20]
 800bbbe:	425b      	negs	r3, r3
 800bbc0:	61a3      	str	r3, [r4, #24]
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	b943      	cbnz	r3, 800bbd8 <__swsetup_r+0xa8>
 800bbc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbca:	d1c4      	bne.n	800bb56 <__swsetup_r+0x26>
 800bbcc:	bd38      	pop	{r3, r4, r5, pc}
 800bbce:	0781      	lsls	r1, r0, #30
 800bbd0:	bf58      	it	pl
 800bbd2:	6963      	ldrpl	r3, [r4, #20]
 800bbd4:	60a3      	str	r3, [r4, #8]
 800bbd6:	e7f4      	b.n	800bbc2 <__swsetup_r+0x92>
 800bbd8:	2000      	movs	r0, #0
 800bbda:	e7f7      	b.n	800bbcc <__swsetup_r+0x9c>
 800bbdc:	20000064 	.word	0x20000064

0800bbe0 <_raise_r>:
 800bbe0:	291f      	cmp	r1, #31
 800bbe2:	b538      	push	{r3, r4, r5, lr}
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	d904      	bls.n	800bbf4 <_raise_r+0x14>
 800bbea:	2316      	movs	r3, #22
 800bbec:	6003      	str	r3, [r0, #0]
 800bbee:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bbf6:	b112      	cbz	r2, 800bbfe <_raise_r+0x1e>
 800bbf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbfc:	b94b      	cbnz	r3, 800bc12 <_raise_r+0x32>
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f000 f830 	bl	800bc64 <_getpid_r>
 800bc04:	462a      	mov	r2, r5
 800bc06:	4601      	mov	r1, r0
 800bc08:	4620      	mov	r0, r4
 800bc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc0e:	f000 b817 	b.w	800bc40 <_kill_r>
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d00a      	beq.n	800bc2c <_raise_r+0x4c>
 800bc16:	1c59      	adds	r1, r3, #1
 800bc18:	d103      	bne.n	800bc22 <_raise_r+0x42>
 800bc1a:	2316      	movs	r3, #22
 800bc1c:	6003      	str	r3, [r0, #0]
 800bc1e:	2001      	movs	r0, #1
 800bc20:	e7e7      	b.n	800bbf2 <_raise_r+0x12>
 800bc22:	2400      	movs	r4, #0
 800bc24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc28:	4628      	mov	r0, r5
 800bc2a:	4798      	blx	r3
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	e7e0      	b.n	800bbf2 <_raise_r+0x12>

0800bc30 <raise>:
 800bc30:	4b02      	ldr	r3, [pc, #8]	; (800bc3c <raise+0xc>)
 800bc32:	4601      	mov	r1, r0
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	f7ff bfd3 	b.w	800bbe0 <_raise_r>
 800bc3a:	bf00      	nop
 800bc3c:	20000064 	.word	0x20000064

0800bc40 <_kill_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d07      	ldr	r5, [pc, #28]	; (800bc60 <_kill_r+0x20>)
 800bc44:	2300      	movs	r3, #0
 800bc46:	4604      	mov	r4, r0
 800bc48:	4608      	mov	r0, r1
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	602b      	str	r3, [r5, #0]
 800bc4e:	f7f5 fd13 	bl	8001678 <_kill>
 800bc52:	1c43      	adds	r3, r0, #1
 800bc54:	d102      	bne.n	800bc5c <_kill_r+0x1c>
 800bc56:	682b      	ldr	r3, [r5, #0]
 800bc58:	b103      	cbz	r3, 800bc5c <_kill_r+0x1c>
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
 800bc5e:	bf00      	nop
 800bc60:	20001540 	.word	0x20001540

0800bc64 <_getpid_r>:
 800bc64:	f7f5 bd00 	b.w	8001668 <_getpid>

0800bc68 <__swhatbuf_r>:
 800bc68:	b570      	push	{r4, r5, r6, lr}
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc70:	2900      	cmp	r1, #0
 800bc72:	b096      	sub	sp, #88	; 0x58
 800bc74:	4615      	mov	r5, r2
 800bc76:	461e      	mov	r6, r3
 800bc78:	da0d      	bge.n	800bc96 <__swhatbuf_r+0x2e>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bc80:	f04f 0100 	mov.w	r1, #0
 800bc84:	bf0c      	ite	eq
 800bc86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bc8a:	2340      	movne	r3, #64	; 0x40
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	6031      	str	r1, [r6, #0]
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	b016      	add	sp, #88	; 0x58
 800bc94:	bd70      	pop	{r4, r5, r6, pc}
 800bc96:	466a      	mov	r2, sp
 800bc98:	f000 f848 	bl	800bd2c <_fstat_r>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	dbec      	blt.n	800bc7a <__swhatbuf_r+0x12>
 800bca0:	9901      	ldr	r1, [sp, #4]
 800bca2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bca6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcaa:	4259      	negs	r1, r3
 800bcac:	4159      	adcs	r1, r3
 800bcae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcb2:	e7eb      	b.n	800bc8c <__swhatbuf_r+0x24>

0800bcb4 <__smakebuf_r>:
 800bcb4:	898b      	ldrh	r3, [r1, #12]
 800bcb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcb8:	079d      	lsls	r5, r3, #30
 800bcba:	4606      	mov	r6, r0
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	d507      	bpl.n	800bcd0 <__smakebuf_r+0x1c>
 800bcc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	6123      	str	r3, [r4, #16]
 800bcc8:	2301      	movs	r3, #1
 800bcca:	6163      	str	r3, [r4, #20]
 800bccc:	b002      	add	sp, #8
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	ab01      	add	r3, sp, #4
 800bcd2:	466a      	mov	r2, sp
 800bcd4:	f7ff ffc8 	bl	800bc68 <__swhatbuf_r>
 800bcd8:	9900      	ldr	r1, [sp, #0]
 800bcda:	4605      	mov	r5, r0
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7fb fcab 	bl	8007638 <_malloc_r>
 800bce2:	b948      	cbnz	r0, 800bcf8 <__smakebuf_r+0x44>
 800bce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bce8:	059a      	lsls	r2, r3, #22
 800bcea:	d4ef      	bmi.n	800bccc <__smakebuf_r+0x18>
 800bcec:	f023 0303 	bic.w	r3, r3, #3
 800bcf0:	f043 0302 	orr.w	r3, r3, #2
 800bcf4:	81a3      	strh	r3, [r4, #12]
 800bcf6:	e7e3      	b.n	800bcc0 <__smakebuf_r+0xc>
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	6020      	str	r0, [r4, #0]
 800bcfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd00:	81a3      	strh	r3, [r4, #12]
 800bd02:	9b00      	ldr	r3, [sp, #0]
 800bd04:	6163      	str	r3, [r4, #20]
 800bd06:	9b01      	ldr	r3, [sp, #4]
 800bd08:	6120      	str	r0, [r4, #16]
 800bd0a:	b15b      	cbz	r3, 800bd24 <__smakebuf_r+0x70>
 800bd0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd10:	4630      	mov	r0, r6
 800bd12:	f000 f81d 	bl	800bd50 <_isatty_r>
 800bd16:	b128      	cbz	r0, 800bd24 <__smakebuf_r+0x70>
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	f023 0303 	bic.w	r3, r3, #3
 800bd1e:	f043 0301 	orr.w	r3, r3, #1
 800bd22:	81a3      	strh	r3, [r4, #12]
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	431d      	orrs	r5, r3
 800bd28:	81a5      	strh	r5, [r4, #12]
 800bd2a:	e7cf      	b.n	800bccc <__smakebuf_r+0x18>

0800bd2c <_fstat_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	; (800bd4c <_fstat_r+0x20>)
 800bd30:	2300      	movs	r3, #0
 800bd32:	4604      	mov	r4, r0
 800bd34:	4608      	mov	r0, r1
 800bd36:	4611      	mov	r1, r2
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	f7f5 fcfc 	bl	8001736 <_fstat>
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	d102      	bne.n	800bd48 <_fstat_r+0x1c>
 800bd42:	682b      	ldr	r3, [r5, #0]
 800bd44:	b103      	cbz	r3, 800bd48 <_fstat_r+0x1c>
 800bd46:	6023      	str	r3, [r4, #0]
 800bd48:	bd38      	pop	{r3, r4, r5, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20001540 	.word	0x20001540

0800bd50 <_isatty_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d06      	ldr	r5, [pc, #24]	; (800bd6c <_isatty_r+0x1c>)
 800bd54:	2300      	movs	r3, #0
 800bd56:	4604      	mov	r4, r0
 800bd58:	4608      	mov	r0, r1
 800bd5a:	602b      	str	r3, [r5, #0]
 800bd5c:	f7f5 fcfb 	bl	8001756 <_isatty>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_isatty_r+0x1a>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_isatty_r+0x1a>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	20001540 	.word	0x20001540

0800bd70 <_init>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	bf00      	nop
 800bd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd76:	bc08      	pop	{r3}
 800bd78:	469e      	mov	lr, r3
 800bd7a:	4770      	bx	lr

0800bd7c <_fini>:
 800bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7e:	bf00      	nop
 800bd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd82:	bc08      	pop	{r3}
 800bd84:	469e      	mov	lr, r3
 800bd86:	4770      	bx	lr
