
SDIO_SDcardOps_Driver-APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070fc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08007290  08007290  00017290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d8  080073d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e0  080073e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080073e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  2000000c  080073f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  080073f4  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c44c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ab  00000000  00000000  0002c4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  0002e878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000870  00000000  00000000  0002f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c59  00000000  00000000  0002fc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3ef  00000000  00000000  00032889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088dc1  00000000  00000000  00041c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d04  00000000  00000000  000caa3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000cd740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007278 	.word	0x08007278

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08007278 	.word	0x08007278

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b970 	b.w	80004dc <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	460f      	mov	r7, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d965      	bls.n	80002f6 <__udivmoddi4+0xe2>
 800022a:	fab2 f382 	clz	r3, r2
 800022e:	b143      	cbz	r3, 8000242 <__udivmoddi4+0x2e>
 8000230:	fa02 fc03 	lsl.w	ip, r2, r3
 8000234:	f1c3 0220 	rsb	r2, r3, #32
 8000238:	409f      	lsls	r7, r3
 800023a:	fa20 f202 	lsr.w	r2, r0, r2
 800023e:	4317      	orrs	r7, r2
 8000240:	409c      	lsls	r4, r3
 8000242:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000246:	fa1f f58c 	uxth.w	r5, ip
 800024a:	fbb7 f1fe 	udiv	r1, r7, lr
 800024e:	0c22      	lsrs	r2, r4, #16
 8000250:	fb0e 7711 	mls	r7, lr, r1, r7
 8000254:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000258:	fb01 f005 	mul.w	r0, r1, r5
 800025c:	4290      	cmp	r0, r2
 800025e:	d90a      	bls.n	8000276 <__udivmoddi4+0x62>
 8000260:	eb1c 0202 	adds.w	r2, ip, r2
 8000264:	f101 37ff 	add.w	r7, r1, #4294967295
 8000268:	f080 811c 	bcs.w	80004a4 <__udivmoddi4+0x290>
 800026c:	4290      	cmp	r0, r2
 800026e:	f240 8119 	bls.w	80004a4 <__udivmoddi4+0x290>
 8000272:	3902      	subs	r1, #2
 8000274:	4462      	add	r2, ip
 8000276:	1a12      	subs	r2, r2, r0
 8000278:	b2a4      	uxth	r4, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000286:	fb00 f505 	mul.w	r5, r0, r5
 800028a:	42a5      	cmp	r5, r4
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x90>
 800028e:	eb1c 0404 	adds.w	r4, ip, r4
 8000292:	f100 32ff 	add.w	r2, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x294>
 800029a:	42a5      	cmp	r5, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x294>
 80002a0:	4464      	add	r4, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11e      	cbz	r6, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40dc      	lsrs	r4, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	e9c6 4300 	strd	r4, r3, [r6]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0xbc>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80ed 	beq.w	800049e <__udivmoddi4+0x28a>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d149      	bne.n	800036c <__udivmoddi4+0x158>
 80002d8:	42ab      	cmp	r3, r5
 80002da:	d302      	bcc.n	80002e2 <__udivmoddi4+0xce>
 80002dc:	4282      	cmp	r2, r0
 80002de:	f200 80f8 	bhi.w	80004d2 <__udivmoddi4+0x2be>
 80002e2:	1a84      	subs	r4, r0, r2
 80002e4:	eb65 0203 	sbc.w	r2, r5, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	4617      	mov	r7, r2
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d0e2      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	e9c6 4700 	strd	r4, r7, [r6]
 80002f4:	e7df      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xe6>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x210>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2101      	movs	r1, #1
 8000310:	fbb2 f5f7 	udiv	r5, r2, r7
 8000314:	fb07 2015 	mls	r0, r7, r5, r2
 8000318:	0c22      	lsrs	r2, r4, #16
 800031a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031e:	fb0e f005 	mul.w	r0, lr, r5
 8000322:	4290      	cmp	r0, r2
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x124>
 8000326:	eb1c 0202 	adds.w	r2, ip, r2
 800032a:	f105 38ff 	add.w	r8, r5, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4290      	cmp	r0, r2
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2b8>
 8000336:	4645      	mov	r5, r8
 8000338:	1a12      	subs	r2, r2, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000340:	fb07 2210 	mls	r2, r7, r0, r2
 8000344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x14e>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x14c>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2c2>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036a:	e79f      	b.n	80002ac <__udivmoddi4+0x98>
 800036c:	f1c1 0720 	rsb	r7, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa05 f401 	lsl.w	r4, r5, r1
 800037e:	fa20 f307 	lsr.w	r3, r0, r7
 8000382:	40fd      	lsrs	r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	fa1f fe8c 	uxth.w	lr, ip
 8000392:	fb09 5518 	mls	r5, r9, r8, r5
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb08 f50e 	mul.w	r5, r8, lr
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	fa00 f001 	lsl.w	r0, r0, r1
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2b4>
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2b4>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	b29d      	uxth	r5, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2ac>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2ac>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f2:	fba3 9502 	umull	r9, r5, r3, r2
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46ae      	mov	lr, r5
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x29c>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x298>
 8000404:	b156      	cbz	r6, 800041c <__udivmoddi4+0x208>
 8000406:	ebb0 0208 	subs.w	r2, r0, r8
 800040a:	eb64 040e 	sbc.w	r4, r4, lr
 800040e:	fa04 f707 	lsl.w	r7, r4, r7
 8000412:	40ca      	lsrs	r2, r1
 8000414:	40cc      	lsrs	r4, r1
 8000416:	4317      	orrs	r7, r2
 8000418:	e9c6 7400 	strd	r7, r4, [r6]
 800041c:	4618      	mov	r0, r3
 800041e:	2100      	movs	r1, #0
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	f1c3 0120 	rsb	r1, r3, #32
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	fa20 f201 	lsr.w	r2, r0, r1
 8000430:	fa25 f101 	lsr.w	r1, r5, r1
 8000434:	409d      	lsls	r5, r3
 8000436:	432a      	orrs	r2, r5
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1510 	mls	r5, r7, r0, r1
 8000448:	0c11      	lsrs	r1, r2, #16
 800044a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044e:	fb00 f50e 	mul.w	r5, r0, lr
 8000452:	428d      	cmp	r5, r1
 8000454:	fa04 f403 	lsl.w	r4, r4, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x258>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000464:	428d      	cmp	r5, r1
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 8000468:	3802      	subs	r0, #2
 800046a:	4461      	add	r1, ip
 800046c:	1b49      	subs	r1, r1, r5
 800046e:	b292      	uxth	r2, r2
 8000470:	fbb1 f5f7 	udiv	r5, r1, r7
 8000474:	fb07 1115 	mls	r1, r7, r5, r1
 8000478:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047c:	fb05 f10e 	mul.w	r1, r5, lr
 8000480:	4291      	cmp	r1, r2
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x282>
 8000484:	eb1c 0202 	adds.w	r2, ip, r2
 8000488:	f105 38ff 	add.w	r8, r5, #4294967295
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800048e:	4291      	cmp	r1, r2
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2a8>
 8000492:	3d02      	subs	r5, #2
 8000494:	4462      	add	r2, ip
 8000496:	1a52      	subs	r2, r2, r1
 8000498:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0xfc>
 800049e:	4631      	mov	r1, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e708      	b.n	80002b6 <__udivmoddi4+0xa2>
 80004a4:	4639      	mov	r1, r7
 80004a6:	e6e6      	b.n	8000276 <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x90>
 80004ac:	4548      	cmp	r0, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b8:	3b01      	subs	r3, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004bc:	4645      	mov	r5, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x282>
 80004c0:	462b      	mov	r3, r5
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x258>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x124>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e70a      	b.n	80002ec <__udivmoddi4+0xd8>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x14e>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b5b0      	push	{r4, r5, r7, lr}
 80004e2:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80004e6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code, ??neyi döndürüyor ? */
	uint32_t byteswritten, bytesread; /* File write/read counts, nreye nasıl yazılıo edilio ? */
	uint8_t wtext[] = "TAISAT SDIO Subsystem unit is working good"; /* File write buffer as 1byte */
 80004e8:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <main+0xd0>)
 80004ea:	f507 7401 	add.w	r4, r7, #516	; 0x204
 80004ee:	461d      	mov	r5, r3
 80004f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004fc:	c403      	stmia	r4!, {r0, r1}
 80004fe:	8022      	strh	r2, [r4, #0]
 8000500:	3402      	adds	r4, #2
 8000502:	0c13      	lsrs	r3, r2, #16
 8000504:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fae9 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f85b 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f90d 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000512:	f000 f8e3 	bl	80006dc <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000516:	f000 f8bf 	bl	8000698 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800051a:	f003 fedd 	bl	80042d8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800051e:	2200      	movs	r2, #0
 8000520:	4924      	ldr	r1, [pc, #144]	; (80005b4 <main+0xd4>)
 8000522:	4825      	ldr	r0, [pc, #148]	; (80005b8 <main+0xd8>)
 8000524:	f005 fdd2 	bl	80060cc <f_mount>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <main+0x54>
      {
          Error_Handler();
 800052e:	f000 f933 	bl	8000798 <Error_Handler>
 8000532:	e037      	b.n	80005a4 <main+0xc4>
      }
      else
      {
          if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800053a:	9200      	str	r2, [sp, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	2107      	movs	r1, #7
 8000540:	481c      	ldr	r0, [pc, #112]	; (80005b4 <main+0xd4>)
 8000542:	f006 f9e5 	bl	8006910 <f_mkfs>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <main+0x72>
          {
              Error_Handler();
 800054c:	f000 f924 	bl	8000798 <Error_Handler>
 8000550:	e028      	b.n	80005a4 <main+0xc4>
          }
          else
          {
              //Open file for writing (Create)
              if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000552:	220a      	movs	r2, #10
 8000554:	4919      	ldr	r1, [pc, #100]	; (80005bc <main+0xdc>)
 8000556:	481a      	ldr	r0, [pc, #104]	; (80005c0 <main+0xe0>)
 8000558:	f005 fdfe 	bl	8006158 <f_open>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <main+0x88>
              {
                  Error_Handler();
 8000562:	f000 f919 	bl	8000798 <Error_Handler>
 8000566:	e01d      	b.n	80005a4 <main+0xc4>
              {



                  //Write to the text file
                  res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8000568:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fe31 	bl	80001d4 <strlen>
 8000572:	4602      	mov	r2, r0
 8000574:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000578:	f507 7101 	add.w	r1, r7, #516	; 0x204
 800057c:	4810      	ldr	r0, [pc, #64]	; (80005c0 <main+0xe0>)
 800057e:	f005 ffa9 	bl	80064d4 <f_write>
 8000582:	4603      	mov	r3, r0
 8000584:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
                  if((byteswritten == 0) || (res != FR_OK))
 8000588:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800058c:	2b00      	cmp	r3, #0
 800058e:	d003      	beq.n	8000598 <main+0xb8>
 8000590:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <main+0xbe>
                  {
                      Error_Handler();
 8000598:	f000 f8fe 	bl	8000798 <Error_Handler>
 800059c:	e002      	b.n	80005a4 <main+0xc4>
                  else
                  {



                      f_close(&SDFile);
 800059e:	4808      	ldr	r0, [pc, #32]	; (80005c0 <main+0xe0>)
 80005a0:	f006 f98b 	bl	80068ba <f_close>
                  }
              }
          }
      }
      f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2100      	movs	r1, #0
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <main+0xd8>)
 80005aa:	f005 fd8f 	bl	80060cc <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0xce>
 80005b0:	0800729c 	.word	0x0800729c
 80005b4:	20000174 	.word	0x20000174
 80005b8:	20000178 	.word	0x20000178
 80005bc:	08007290 	.word	0x08007290
 80005c0:	200003a8 	.word	0x200003a8

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 fe23 	bl	800721e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <SystemClock_Config+0xd0>)
 8000612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000638:	2310      	movs	r3, #16
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800063c:	23c0      	movs	r3, #192	; 0xc0
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f87d 	bl	800174c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000658:	f000 f89e 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fae0 	bl	8001c3c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f889 	bl	8000798 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_SDIO_SD_Init+0x3c>)
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <MX_SDIO_SD_Init+0x40>)
 80006a0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_SDIO_SD_Init+0x3c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_SDIO_SD_Init+0x3c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_SDIO_SD_Init+0x3c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_SDIO_SD_Init+0x3c>)
 80006b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ba:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <MX_SDIO_SD_Init+0x3c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <MX_SDIO_SD_Init+0x3c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000028 	.word	0x20000028
 80006d8:	40012c00 	.word	0x40012c00

080006dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_DMA_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_DMA_Init+0x4c>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_DMA_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	203b      	movs	r0, #59	; 0x3b
 8000704:	f000 fb5b 	bl	8000dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000708:	203b      	movs	r0, #59	; 0x3b
 800070a:	f000 fb74 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2045      	movs	r0, #69	; 0x45
 8000714:	f000 fb53 	bl	8000dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000718:	2045      	movs	r0, #69	; 0x45
 800071a:	f000 fb6c 	bl	8000df6 <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_GPIO_Init+0x68>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <MX_GPIO_Init+0x68>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_GPIO_Init+0x68>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_GPIO_Init+0x68>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <MX_GPIO_Init+0x68>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_GPIO_Init+0x68>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_GPIO_Init+0x68>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <MX_GPIO_Init+0x68>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_GPIO_Init+0x68>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a68      	ldr	r2, [pc, #416]	; (80009b4 <HAL_SD_MspInit+0x1c0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	f040 80c9 	bne.w	80009aa <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	4b66      	ldr	r3, [pc, #408]	; (80009b8 <HAL_SD_MspInit+0x1c4>)
 800081e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000820:	4a65      	ldr	r2, [pc, #404]	; (80009b8 <HAL_SD_MspInit+0x1c4>)
 8000822:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000826:	6453      	str	r3, [r2, #68]	; 0x44
 8000828:	4b63      	ldr	r3, [pc, #396]	; (80009b8 <HAL_SD_MspInit+0x1c4>)
 800082a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	4b5f      	ldr	r3, [pc, #380]	; (80009b8 <HAL_SD_MspInit+0x1c4>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a5e      	ldr	r2, [pc, #376]	; (80009b8 <HAL_SD_MspInit+0x1c4>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
 8000844:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <HAL_SD_MspInit+0x1c4>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b58      	ldr	r3, [pc, #352]	; (80009b8 <HAL_SD_MspInit+0x1c4>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	4a57      	ldr	r2, [pc, #348]	; (80009b8 <HAL_SD_MspInit+0x1c4>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	6313      	str	r3, [r2, #48]	; 0x30
 8000860:	4b55      	ldr	r3, [pc, #340]	; (80009b8 <HAL_SD_MspInit+0x1c4>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800086c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000870:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800087e:	230c      	movs	r3, #12
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	484c      	ldr	r0, [pc, #304]	; (80009bc <HAL_SD_MspInit+0x1c8>)
 800088a:	f000 fddb 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800088e:	2304      	movs	r3, #4
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800089e:	230c      	movs	r3, #12
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4845      	ldr	r0, [pc, #276]	; (80009c0 <HAL_SD_MspInit+0x1cc>)
 80008aa:	f000 fdcb 	bl	8001444 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80008ae:	4b45      	ldr	r3, [pc, #276]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008b0:	4a45      	ldr	r2, [pc, #276]	; (80009c8 <HAL_SD_MspInit+0x1d4>)
 80008b2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80008b4:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ba:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008bc:	4b41      	ldr	r3, [pc, #260]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c8:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ce:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008d6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008d8:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008de:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80008e0:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008e6:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008ec:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008f2:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80008f8:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 80008fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000900:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 8000902:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000906:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000908:	482e      	ldr	r0, [pc, #184]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 800090a:	f000 fa8f 	bl	8000e2c <HAL_DMA_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000914:	f7ff ff40 	bl	8000798 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a2a      	ldr	r2, [pc, #168]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 800091c:	641a      	str	r2, [r3, #64]	; 0x40
 800091e:	4a29      	ldr	r2, [pc, #164]	; (80009c4 <HAL_SD_MspInit+0x1d0>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000926:	4a2a      	ldr	r2, [pc, #168]	; (80009d0 <HAL_SD_MspInit+0x1dc>)
 8000928:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 800092c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000930:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000944:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800094c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000950:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000954:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000958:	2220      	movs	r2, #32
 800095a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000964:	2204      	movs	r2, #4
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 800096a:	2203      	movs	r2, #3
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000970:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000978:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800097c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800097e:	4813      	ldr	r0, [pc, #76]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000980:	f000 fa54 	bl	8000e2c <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800098a:	f7ff ff05 	bl	8000798 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000992:	63da      	str	r2, [r3, #60]	; 0x3c
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_SD_MspInit+0x1d8>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2031      	movs	r0, #49	; 0x31
 80009a0:	f000 fa0d 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80009a4:	2031      	movs	r0, #49	; 0x31
 80009a6:	f000 fa26 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40012c00 	.word	0x40012c00
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020c00 	.word	0x40020c00
 80009c4:	200000ac 	.word	0x200000ac
 80009c8:	40026458 	.word	0x40026458
 80009cc:	2000010c 	.word	0x2000010c
 80009d0:	400264a0 	.word	0x400264a0

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f8ae 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <SDIO_IRQHandler+0x10>)
 8000a2e:	f001 fec5 	bl	80027bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000028 	.word	0x20000028

08000a3c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <DMA2_Stream3_IRQHandler+0x10>)
 8000a42:	f000 fac3 	bl	8000fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000ac 	.word	0x200000ac

08000a50 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <DMA2_Stream6_IRQHandler+0x10>)
 8000a56:	f000 fab9 	bl	8000fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000010c 	.word	0x2000010c

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8e:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa4:	4c0b      	ldr	r4, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab2:	f7ff ffd7 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f006 fbbb 	bl	8007230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aba:	f7ff fd11 	bl	80004e0 <main>
  bx  lr    
 8000abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000acc:	080073e8 	.word	0x080073e8
  ldr r2, =_sbss
 8000ad0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad4:	2000060c 	.word	0x2000060c

08000ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC_IRQHandler>
	...

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <HAL_Init+0x40>)
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_Init+0x40>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x40>)
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f94f 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe48 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f967 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f92f 	bl	8000dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	2000016c 	.word	0x2000016c

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	2000016c 	.word	0x2000016c

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff ffee 	bl	8000ba8 <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffde 	bl	8000ba8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff29 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff3e 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff31 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa2 	bl	8000d64 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff feb6 	bl	8000ba8 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d101      	bne.n	8000e48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e099      	b.n	8000f7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0201 	bic.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e68:	e00f      	b.n	8000e8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e6a:	f7ff fe9d 	bl	8000ba8 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b05      	cmp	r3, #5
 8000e76:	d908      	bls.n	8000e8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2203      	movs	r2, #3
 8000e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e078      	b.n	8000f7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e8      	bne.n	8000e6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <HAL_DMA_Init+0x158>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d107      	bne.n	8000ef4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4313      	orrs	r3, r2
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f023 0307 	bic.w	r3, r3, #7
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d117      	bne.n	8000f4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00e      	beq.n	8000f4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 fa0b 	bl	800134c <DMA_CheckFifoParam>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d008      	beq.n	8000f4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2240      	movs	r2, #64	; 0x40
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e016      	b.n	8000f7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f9c2 	bl	80012e0 <DMA_CalcBaseAndBitshift>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f64:	223f      	movs	r2, #63	; 0x3f
 8000f66:	409a      	lsls	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	f010803f 	.word	0xf010803f

08000f88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d004      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00c      	b.n	8000fc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2205      	movs	r2, #5
 8000faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fd8:	4b8e      	ldr	r3, [pc, #568]	; (8001214 <HAL_DMA_IRQHandler+0x248>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a8e      	ldr	r2, [pc, #568]	; (8001218 <HAL_DMA_IRQHandler+0x24c>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	0a9b      	lsrs	r3, r3, #10
 8000fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01a      	beq.n	8001038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0204 	bic.w	r2, r2, #4
 800101e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001024:	2208      	movs	r2, #8
 8001026:	409a      	lsls	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103c:	2201      	movs	r2, #1
 800103e:	409a      	lsls	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4013      	ands	r3, r2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d012      	beq.n	800106e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00b      	beq.n	800106e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105a:	2201      	movs	r2, #1
 800105c:	409a      	lsls	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001066:	f043 0202 	orr.w	r2, r3, #2
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001072:	2204      	movs	r2, #4
 8001074:	409a      	lsls	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d012      	beq.n	80010a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001090:	2204      	movs	r2, #4
 8001092:	409a      	lsls	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109c:	f043 0204 	orr.w	r2, r3, #4
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a8:	2210      	movs	r2, #16
 80010aa:	409a      	lsls	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d043      	beq.n	800113c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d03c      	beq.n	800113c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c6:	2210      	movs	r2, #16
 80010c8:	409a      	lsls	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d018      	beq.n	800110e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d108      	bne.n	80010fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d024      	beq.n	800113c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	4798      	blx	r3
 80010fa:	e01f      	b.n	800113c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001100:	2b00      	cmp	r3, #0
 8001102:	d01b      	beq.n	800113c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	4798      	blx	r3
 800110c:	e016      	b.n	800113c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001118:	2b00      	cmp	r3, #0
 800111a:	d107      	bne.n	800112c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0208 	bic.w	r2, r2, #8
 800112a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001140:	2220      	movs	r2, #32
 8001142:	409a      	lsls	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 808f 	beq.w	800126c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8087 	beq.w	800126c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001162:	2220      	movs	r2, #32
 8001164:	409a      	lsls	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b05      	cmp	r3, #5
 8001174:	d136      	bne.n	80011e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0216 	bic.w	r2, r2, #22
 8001184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	2b00      	cmp	r3, #0
 800119c:	d103      	bne.n	80011a6 <HAL_DMA_IRQHandler+0x1da>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0208 	bic.w	r2, r2, #8
 80011b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ba:	223f      	movs	r2, #63	; 0x3f
 80011bc:	409a      	lsls	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d07e      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	4798      	blx	r3
        }
        return;
 80011e2:	e079      	b.n	80012d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d01d      	beq.n	800122e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10d      	bne.n	800121c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	2b00      	cmp	r3, #0
 8001206:	d031      	beq.n	800126c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	4798      	blx	r3
 8001210:	e02c      	b.n	800126c <HAL_DMA_IRQHandler+0x2a0>
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000
 8001218:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001220:	2b00      	cmp	r3, #0
 8001222:	d023      	beq.n	800126c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	4798      	blx	r3
 800122c:	e01e      	b.n	800126c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10f      	bne.n	800125c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0210 	bic.w	r2, r2, #16
 800124a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001270:	2b00      	cmp	r3, #0
 8001272:	d032      	beq.n	80012da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d022      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2205      	movs	r2, #5
 8001284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	3301      	adds	r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d307      	bcc.n	80012b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f2      	bne.n	8001298 <HAL_DMA_IRQHandler+0x2cc>
 80012b2:	e000      	b.n	80012b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80012b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	4798      	blx	r3
 80012d6:	e000      	b.n	80012da <HAL_DMA_IRQHandler+0x30e>
        return;
 80012d8:	bf00      	nop
    }
  }
}
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3b10      	subs	r3, #16
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <DMA_CalcBaseAndBitshift+0x64>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <DMA_CalcBaseAndBitshift+0x68>)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d909      	bls.n	8001322 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001316:	f023 0303 	bic.w	r3, r3, #3
 800131a:	1d1a      	adds	r2, r3, #4
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	659a      	str	r2, [r3, #88]	; 0x58
 8001320:	e007      	b.n	8001332 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800132a:	f023 0303 	bic.w	r3, r3, #3
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	aaaaaaab 	.word	0xaaaaaaab
 8001348:	0800731c 	.word	0x0800731c

0800134c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d11f      	bne.n	80013a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b03      	cmp	r3, #3
 800136a:	d856      	bhi.n	800141a <DMA_CheckFifoParam+0xce>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <DMA_CheckFifoParam+0x28>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001385 	.word	0x08001385
 8001378:	08001397 	.word	0x08001397
 800137c:	08001385 	.word	0x08001385
 8001380:	0800141b 	.word	0x0800141b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d046      	beq.n	800141e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001394:	e043      	b.n	800141e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800139e:	d140      	bne.n	8001422 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013a4:	e03d      	b.n	8001422 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ae:	d121      	bne.n	80013f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d837      	bhi.n	8001426 <DMA_CheckFifoParam+0xda>
 80013b6:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <DMA_CheckFifoParam+0x70>)
 80013b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013bc:	080013cd 	.word	0x080013cd
 80013c0:	080013d3 	.word	0x080013d3
 80013c4:	080013cd 	.word	0x080013cd
 80013c8:	080013e5 	.word	0x080013e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
      break;
 80013d0:	e030      	b.n	8001434 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d025      	beq.n	800142a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013e2:	e022      	b.n	800142a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013ec:	d11f      	bne.n	800142e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013f2:	e01c      	b.n	800142e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d903      	bls.n	8001402 <DMA_CheckFifoParam+0xb6>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d003      	beq.n	8001408 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001400:	e018      	b.n	8001434 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
      break;
 8001406:	e015      	b.n	8001434 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00e      	beq.n	8001432 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
      break;
 8001418:	e00b      	b.n	8001432 <DMA_CheckFifoParam+0xe6>
      break;
 800141a:	bf00      	nop
 800141c:	e00a      	b.n	8001434 <DMA_CheckFifoParam+0xe8>
      break;
 800141e:	bf00      	nop
 8001420:	e008      	b.n	8001434 <DMA_CheckFifoParam+0xe8>
      break;
 8001422:	bf00      	nop
 8001424:	e006      	b.n	8001434 <DMA_CheckFifoParam+0xe8>
      break;
 8001426:	bf00      	nop
 8001428:	e004      	b.n	8001434 <DMA_CheckFifoParam+0xe8>
      break;
 800142a:	bf00      	nop
 800142c:	e002      	b.n	8001434 <DMA_CheckFifoParam+0xe8>
      break;   
 800142e:	bf00      	nop
 8001430:	e000      	b.n	8001434 <DMA_CheckFifoParam+0xe8>
      break;
 8001432:	bf00      	nop
    }
  } 
  
  return status; 
 8001434:	7bfb      	ldrb	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e159      	b.n	8001714 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8148 	bne.w	800170e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d005      	beq.n	8001496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001492:	2b02      	cmp	r3, #2
 8001494:	d130      	bne.n	80014f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 0201 	and.w	r2, r3, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b03      	cmp	r3, #3
 8001502:	d017      	beq.n	8001534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d123      	bne.n	8001588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a2 	beq.w	800170e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b57      	ldr	r3, [pc, #348]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a56      	ldr	r2, [pc, #344]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b54      	ldr	r3, [pc, #336]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e6:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_GPIO_Init+0x2ec>)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a49      	ldr	r2, [pc, #292]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x202>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_GPIO_Init+0x2f4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x1fe>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a47      	ldr	r2, [pc, #284]	; (800173c <HAL_GPIO_Init+0x2f8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x1fa>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <HAL_GPIO_Init+0x2fc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x1f6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a45      	ldr	r2, [pc, #276]	; (8001744 <HAL_GPIO_Init+0x300>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x1f2>
 8001632:	2304      	movs	r3, #4
 8001634:	e008      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001636:	2307      	movs	r3, #7
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x204>
 800163a:	2303      	movs	r3, #3
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x204>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001646:	2300      	movs	r3, #0
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001658:	4935      	ldr	r1, [pc, #212]	; (8001730 <HAL_GPIO_Init+0x2ec>)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <HAL_GPIO_Init+0x304>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168a:	4a2f      	ldr	r2, [pc, #188]	; (8001748 <HAL_GPIO_Init+0x304>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_GPIO_Init+0x304>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b4:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_GPIO_Init+0x304>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	f67f aea2 	bls.w	8001460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40013800 	.word	0x40013800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40021000 	.word	0x40021000
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e267      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d075      	beq.n	8001856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800176a:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d00c      	beq.n	8001790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001776:	4b85      	ldr	r3, [pc, #532]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800177e:	2b08      	cmp	r3, #8
 8001780:	d112      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4b82      	ldr	r3, [pc, #520]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178e:	d10b      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	4b7e      	ldr	r3, [pc, #504]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d05b      	beq.n	8001854 <HAL_RCC_OscConfig+0x108>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d157      	bne.n	8001854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e242      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x74>
 80017b2:	4b76      	ldr	r3, [pc, #472]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a75      	ldr	r2, [pc, #468]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e01d      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b70      	ldr	r3, [pc, #448]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6f      	ldr	r2, [pc, #444]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6d      	ldr	r3, [pc, #436]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6c      	ldr	r2, [pc, #432]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017e4:	4b69      	ldr	r3, [pc, #420]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a68      	ldr	r2, [pc, #416]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b66      	ldr	r3, [pc, #408]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a65      	ldr	r2, [pc, #404]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff f9d0 	bl	8000ba8 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff f9cc 	bl	8000ba8 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e207      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b5b      	ldr	r3, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0xc0>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff f9bc 	bl	8000ba8 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff f9b8 	bl	8000ba8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1f3      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0xe8>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001876:	2b08      	cmp	r3, #8
 8001878:	d11c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b44      	ldr	r3, [pc, #272]	; (800198c <HAL_RCC_OscConfig+0x240>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d116      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e1c7      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4937      	ldr	r1, [pc, #220]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	e03a      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_RCC_OscConfig+0x244>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff f971 	bl	8000ba8 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff f96d 	bl	8000ba8 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1a8      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4925      	ldr	r1, [pc, #148]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_OscConfig+0x244>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f950 	bl	8000ba8 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff f94c 	bl	8000ba8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e187      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d036      	beq.n	80019a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_RCC_OscConfig+0x248>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff f930 	bl	8000ba8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff f92c 	bl	8000ba8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e167      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x200>
 800196a:	e01b      	b.n	80019a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_RCC_OscConfig+0x248>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff f919 	bl	8000ba8 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	e00e      	b.n	8001998 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff f915 	bl	8000ba8 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d907      	bls.n	8001998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e150      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 800198c:	40023800 	.word	0x40023800
 8001990:	42470000 	.word	0x42470000
 8001994:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b88      	ldr	r3, [pc, #544]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ea      	bne.n	800197a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8097 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b81      	ldr	r3, [pc, #516]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b7d      	ldr	r3, [pc, #500]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a7c      	ldr	r2, [pc, #496]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b7a      	ldr	r3, [pc, #488]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b77      	ldr	r3, [pc, #476]	; (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b74      	ldr	r3, [pc, #464]	; (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a73      	ldr	r2, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff f8d5 	bl	8000ba8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7ff f8d1 	bl	8000ba8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e10c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x474>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2ea>
 8001a28:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2c:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6713      	str	r3, [r2, #112]	; 0x70
 8001a34:	e01c      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x30c>
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	4a5e      	ldr	r2, [pc, #376]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	4a5b      	ldr	r2, [pc, #364]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6713      	str	r3, [r2, #112]	; 0x70
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a58:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	; 0x70
 8001a64:	4b55      	ldr	r3, [pc, #340]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a54      	ldr	r2, [pc, #336]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f023 0304 	bic.w	r3, r3, #4
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d015      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f896 	bl	8000ba8 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff f892 	bl	8000ba8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0cb      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0ee      	beq.n	8001a80 <HAL_RCC_OscConfig+0x334>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f880 	bl	8000ba8 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff f87c 	bl	8000ba8 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0b5      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ee      	bne.n	8001aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	4a38      	ldr	r2, [pc, #224]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a1 	beq.w	8001c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d05c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d141      	bne.n	8001b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f850 	bl	8000ba8 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff f84c 	bl	8000ba8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e087      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	019b      	lsls	r3, r3, #6
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	491b      	ldr	r1, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f825 	bl	8000ba8 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff f821 	bl	8000ba8 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e05c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x416>
 8001b80:	e054      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff f80e 	bl	8000ba8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f80a 	bl	8000ba8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e045      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x444>
 8001bae:	e03d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e038      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x4ec>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d028      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d121      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11a      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d111      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	3b01      	subs	r3, #1
 8001c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0cc      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b68      	ldr	r3, [pc, #416]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d90c      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c90:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	494d      	ldr	r1, [pc, #308]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d044      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d119      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e067      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4934      	ldr	r1, [pc, #208]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7fe ff3c 	bl	8000ba8 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7fe ff38 	bl	8000ba8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d20c      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e032      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4916      	ldr	r1, [pc, #88]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490e      	ldr	r1, [pc, #56]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dc2:	f000 f821 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	490a      	ldr	r1, [pc, #40]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fe9c 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	0800730c 	.word	0x0800730c
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e0c:	b090      	sub	sp, #64	; 0x40
 8001e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
 8001e14:	2300      	movs	r3, #0
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e20:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d00d      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	f200 80a1 	bhi.w	8001f74 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x34>
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e3a:	e09b      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e40:	e09b      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e46:	e098      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e48:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d028      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	2200      	movs	r2, #0
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	627a      	str	r2, [r7, #36]	; 0x24
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e70:	2100      	movs	r1, #0
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e74:	fb03 f201 	mul.w	r2, r3, r1
 8001e78:	2300      	movs	r3, #0
 8001e7a:	fb00 f303 	mul.w	r3, r0, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a43      	ldr	r2, [pc, #268]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e82:	fba0 1202 	umull	r1, r2, r0, r2
 8001e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e88:	460a      	mov	r2, r1
 8001e8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e8e:	4413      	add	r3, r2
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	2200      	movs	r2, #0
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	61fa      	str	r2, [r7, #28]
 8001e9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ea2:	f7fe f99f 	bl	80001e4 <__aeabi_uldivmod>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4613      	mov	r3, r2
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eae:	e053      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	617a      	str	r2, [r7, #20]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ec2:	f04f 0b00 	mov.w	fp, #0
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	465b      	mov	r3, fp
 8001eca:	f04f 0000 	mov.w	r0, #0
 8001ece:	f04f 0100 	mov.w	r1, #0
 8001ed2:	0159      	lsls	r1, r3, #5
 8001ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed8:	0150      	lsls	r0, r2, #5
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	ebb2 080a 	subs.w	r8, r2, sl
 8001ee2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ef2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ef6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001efa:	ebb2 0408 	subs.w	r4, r2, r8
 8001efe:	eb63 0509 	sbc.w	r5, r3, r9
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	00eb      	lsls	r3, r5, #3
 8001f0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f10:	00e2      	lsls	r2, r4, #3
 8001f12:	4614      	mov	r4, r2
 8001f14:	461d      	mov	r5, r3
 8001f16:	eb14 030a 	adds.w	r3, r4, sl
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	eb45 030b 	adc.w	r3, r5, fp
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f2e:	4629      	mov	r1, r5
 8001f30:	028b      	lsls	r3, r1, #10
 8001f32:	4621      	mov	r1, r4
 8001f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f38:	4621      	mov	r1, r4
 8001f3a:	028a      	lsls	r2, r1, #10
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	2200      	movs	r2, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	60fa      	str	r2, [r7, #12]
 8001f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f4c:	f7fe f94a 	bl	80001e4 <__aeabi_uldivmod>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4613      	mov	r3, r2
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	3301      	adds	r3, #1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f72:	e002      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3740      	adds	r7, #64	; 0x40
 8001f80:	46bd      	mov	sp, r7
 8001f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	00f42400 	.word	0x00f42400
 8001f90:	017d7840 	.word	0x017d7840

08001f94 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e022      	b.n	8001fec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7fe fc1b 	bl	80007f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f814 	bl	8001ff4 <HAL_SD_InitCard>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00a      	b.n	8001fec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b08e      	sub	sp, #56	; 0x38
 8001ff8:	af04      	add	r7, sp, #16
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002010:	2376      	movs	r3, #118	; 0x76
 8002012:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681d      	ldr	r5, [r3, #0]
 8002018:	466c      	mov	r4, sp
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202c:	4628      	mov	r0, r5
 800202e:	f001 fbe0 	bl	80037f2 <SDIO_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e04f      	b.n	80020e4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002044:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_SD_InitCard+0xf8>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f001 fc18 	bl	8003884 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_SD_InitCard+0xf8>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800205a:	2002      	movs	r0, #2
 800205c:	f7fe fdb0 	bl	8000bc0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f001 f901 	bl	8003268 <SD_PowerON>
 8002066:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e02e      	b.n	80020e4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f001 f820 	bl	80030cc <SD_InitCard>
 800208c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e01b      	b.n	80020e4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 fc77 	bl	80039a8 <SDMMC_CmdBlockLength>
 80020ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00f      	beq.n	80020e2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_SD_InitCard+0xfc>)
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bdb0      	pop	{r4, r5, r7, pc}
 80020ec:	422580a0 	.word	0x422580a0
 80020f0:	004005ff 	.word	0x004005ff

080020f4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b092      	sub	sp, #72	; 0x48
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002102:	f7fe fd51 	bl	8000ba8 <HAL_GetTick>
 8002106:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d107      	bne.n	8002126 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1bd      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	f040 81b0 	bne.w	8002494 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800213a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	429a      	cmp	r2, r3
 8002146:	d907      	bls.n	8002158 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e1a4      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2203      	movs	r2, #3
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	2b01      	cmp	r3, #1
 800216e:	d002      	beq.n	8002176 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002172:	025b      	lsls	r3, r3, #9
 8002174:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	025b      	lsls	r3, r3, #9
 8002180:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002182:	2390      	movs	r3, #144	; 0x90
 8002184:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002186:	2302      	movs	r3, #2
 8002188:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f107 0214 	add.w	r2, r7, #20
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f001 fbd7 	bl	8003950 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d90a      	bls.n	80021be <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2202      	movs	r2, #2
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fc3b 	bl	8003a30 <SDMMC_CmdReadMultiBlock>
 80021ba:	6478      	str	r0, [r7, #68]	; 0x44
 80021bc:	e009      	b.n	80021d2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 fc0e 	bl	80039ec <SDMMC_CmdReadSingleBlock>
 80021d0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80021d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d012      	beq.n	80021fe <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a7a      	ldr	r2, [pc, #488]	; (80023c8 <HAL_SD_ReadBlocks+0x2d4>)
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e151      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002202:	e061      	b.n	80022c8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03c      	beq.n	800228c <HAL_SD_ReadBlocks+0x198>
 8002212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d039      	beq.n	800228c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002218:	2300      	movs	r3, #0
 800221a:	643b      	str	r3, [r7, #64]	; 0x40
 800221c:	e033      	b.n	8002286 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f001 fb10 	bl	8003848 <SDIO_ReadFIFO>
 8002228:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	b2da      	uxtb	r2, r3
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002234:	3301      	adds	r3, #1
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800223a:	3b01      	subs	r3, #1
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	b2da      	uxtb	r2, r3
 8002244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002246:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	3301      	adds	r3, #1
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800224e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002250:	3b01      	subs	r3, #1
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	b2da      	uxtb	r2, r3
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002260:	3301      	adds	r3, #1
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002266:	3b01      	subs	r3, #1
 8002268:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	0e1b      	lsrs	r3, r3, #24
 800226e:	b2da      	uxtb	r2, r3
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	3301      	adds	r3, #1
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800227a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227c:	3b01      	subs	r3, #1
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002282:	3301      	adds	r3, #1
 8002284:	643b      	str	r3, [r7, #64]	; 0x40
 8002286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002288:	2b07      	cmp	r3, #7
 800228a:	d9c8      	bls.n	800221e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800228c:	f7fe fc8c 	bl	8000ba8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002298:	429a      	cmp	r2, r3
 800229a:	d902      	bls.n	80022a2 <HAL_SD_ReadBlocks+0x1ae>
 800229c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d112      	bne.n	80022c8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a48      	ldr	r2, [pc, #288]	; (80023c8 <HAL_SD_ReadBlocks+0x2d4>)
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0ec      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ce:	f240 332a 	movw	r3, #810	; 0x32a
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d095      	beq.n	8002204 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d022      	beq.n	800232c <HAL_SD_ReadBlocks+0x238>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d91f      	bls.n	800232c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d01b      	beq.n	800232c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fbff 	bl	8003afc <SDMMC_CmdStopTransfer>
 80022fe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002302:	2b00      	cmp	r3, #0
 8002304:	d012      	beq.n	800232c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <HAL_SD_ReadBlocks+0x2d4>)
 800230c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002314:	431a      	orrs	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0ba      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d012      	beq.n	8002360 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <HAL_SD_ReadBlocks+0x2d4>)
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	f043 0208 	orr.w	r2, r3, #8
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0a0      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d012      	beq.n	8002394 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <HAL_SD_ReadBlocks+0x2d4>)
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	f043 0202 	orr.w	r2, r3, #2
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e086      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d063      	beq.n	800246a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <HAL_SD_ReadBlocks+0x2d4>)
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e06c      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
 80023c8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 fa39 	bl	8003848 <SDIO_ReadFIFO>
 80023d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023de:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	3301      	adds	r3, #1
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80023e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e8:	3b01      	subs	r3, #1
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	3301      	adds	r3, #1
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80023fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fe:	3b01      	subs	r3, #1
 8002400:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	b2da      	uxtb	r2, r3
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	3301      	adds	r3, #1
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002414:	3b01      	subs	r3, #1
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	0e1b      	lsrs	r3, r3, #24
 800241c:	b2da      	uxtb	r2, r3
 800241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002420:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	3301      	adds	r3, #1
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242a:	3b01      	subs	r3, #1
 800242c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800242e:	f7fe fbbb 	bl	8000ba8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800243a:	429a      	cmp	r2, r3
 800243c:	d902      	bls.n	8002444 <HAL_SD_ReadBlocks+0x350>
 800243e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002440:	2b00      	cmp	r3, #0
 8002442:	d112      	bne.n	800246a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a18      	ldr	r2, [pc, #96]	; (80024ac <HAL_SD_ReadBlocks+0x3b8>)
 800244a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e01b      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_SD_ReadBlocks+0x38a>
 8002478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1a6      	bne.n	80023cc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f240 523a 	movw	r2, #1338	; 0x53a
 8002486:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e006      	b.n	80024a2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
  }
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3748      	adds	r7, #72	; 0x48
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	004005ff 	.word	0x004005ff

080024b0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b092      	sub	sp, #72	; 0x48
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80024be:	f7fe fb73 	bl	8000ba8 <HAL_GetTick>
 80024c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e166      	b.n	80027b0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	f040 8159 	bne.w	80027a2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80024f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	441a      	add	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	429a      	cmp	r2, r3
 8002502:	d907      	bls.n	8002514 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e14d      	b.n	80027b0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2203      	movs	r2, #3
 8002518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2200      	movs	r2, #0
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	2b01      	cmp	r3, #1
 800252a:	d002      	beq.n	8002532 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	025b      	lsls	r3, r3, #9
 8002530:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800253e:	2390      	movs	r3, #144	; 0x90
 8002540:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002546:	2300      	movs	r3, #0
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800254a:	2301      	movs	r3, #1
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f107 0218 	add.w	r2, r7, #24
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f001 f9f9 	bl	8003950 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d90a      	bls.n	800257a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002570:	4618      	mov	r0, r3
 8002572:	f001 faa1 	bl	8003ab8 <SDMMC_CmdWriteMultiBlock>
 8002576:	6478      	str	r0, [r7, #68]	; 0x44
 8002578:	e009      	b.n	800258e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2210      	movs	r2, #16
 800257e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fa74 	bl	8003a74 <SDMMC_CmdWriteSingleBlock>
 800258c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800258e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a87      	ldr	r2, [pc, #540]	; (80027b8 <HAL_SD_WriteBlocks+0x308>)
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0fa      	b.n	80027b0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80025be:	e065      	b.n	800268c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d040      	beq.n	8002650 <HAL_SD_WriteBlocks+0x1a0>
 80025ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d03d      	beq.n	8002650 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	643b      	str	r3, [r7, #64]	; 0x40
 80025d8:	e037      	b.n	800264a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	3301      	adds	r3, #1
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80025e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e8:	3b01      	subs	r3, #1
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80025ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	021a      	lsls	r2, r3, #8
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	3301      	adds	r3, #1
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80025fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002600:	3b01      	subs	r3, #1
 8002602:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	3301      	adds	r3, #1
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002618:	3b01      	subs	r3, #1
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	061a      	lsls	r2, r3, #24
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262a:	3301      	adds	r3, #1
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	3b01      	subs	r3, #1
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f107 0214 	add.w	r2, r7, #20
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f001 f90f 	bl	8003862 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002646:	3301      	adds	r3, #1
 8002648:	643b      	str	r3, [r7, #64]	; 0x40
 800264a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264c:	2b07      	cmp	r3, #7
 800264e:	d9c4      	bls.n	80025da <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002650:	f7fe faaa 	bl	8000ba8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800265c:	429a      	cmp	r2, r3
 800265e:	d902      	bls.n	8002666 <HAL_SD_WriteBlocks+0x1b6>
 8002660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002662:	2b00      	cmp	r3, #0
 8002664:	d112      	bne.n	800268c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a53      	ldr	r2, [pc, #332]	; (80027b8 <HAL_SD_WriteBlocks+0x308>)
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e091      	b.n	80027b0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002692:	f240 331a 	movw	r3, #794	; 0x31a
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d091      	beq.n	80025c0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d022      	beq.n	80026f0 <HAL_SD_WriteBlocks+0x240>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d91f      	bls.n	80026f0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d01b      	beq.n	80026f0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 fa1d 	bl	8003afc <SDMMC_CmdStopTransfer>
 80026c2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80026c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d012      	beq.n	80026f0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <HAL_SD_WriteBlocks+0x308>)
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e05f      	b.n	80027b0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d012      	beq.n	8002724 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <HAL_SD_WriteBlocks+0x308>)
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	f043 0208 	orr.w	r2, r3, #8
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e045      	b.n	80027b0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d012      	beq.n	8002758 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <HAL_SD_WriteBlocks+0x308>)
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	f043 0202 	orr.w	r2, r3, #2
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e02b      	b.n	80027b0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <HAL_SD_WriteBlocks+0x308>)
 800276c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	f043 0210 	orr.w	r2, r3, #16
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e011      	b.n	80027b0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f240 523a 	movw	r2, #1338	; 0x53a
 8002794:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e006      	b.n	80027b0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
  }
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3748      	adds	r7, #72	; 0x48
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	004005ff 	.word	0x004005ff

080027bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_SD_IRQHandler+0x2e>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 ff5f 	bl	80036a6 <SD_Read_IT>
 80027e8:	e165      	b.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 808f 	beq.w	8002918 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002802:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002812:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002816:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d039      	beq.n	80028a6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_SD_IRQHandler+0x8a>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d011      	beq.n	800286a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f956 	bl	8003afc <SDMMC_CmdStopTransfer>
 8002850:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f92f 	bl	8002ac8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f240 523a 	movw	r2, #1338	; 0x53a
 8002872:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <HAL_SD_IRQHandler+0xda>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f001 fdcc 	bl	8004434 <HAL_SD_RxCpltCallback>
 800289c:	e10b      	b.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f001 fdbe 	bl	8004420 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80028a4:	e107      	b.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8102 	beq.w	8002ab6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d011      	beq.n	80028e0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f001 f91b 	bl	8003afc <SDMMC_CmdStopTransfer>
 80028c6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8f4 	bl	8002ac8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 80e5 	bne.w	8002ab6 <HAL_SD_IRQHandler+0x2fa>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 80df 	bne.w	8002ab6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0208 	bic.w	r2, r2, #8
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f001 fd85 	bl	8004420 <HAL_SD_TxCpltCallback>
}
 8002916:	e0ce      	b.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_SD_IRQHandler+0x17c>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 ff09 	bl	8003748 <SD_Write_IT>
 8002936:	e0be      	b.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293e:	f240 233a 	movw	r3, #570	; 0x23a
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80b6 	beq.w	8002ab6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	f043 0202 	orr.w	r2, r3, #2
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	f043 0208 	orr.w	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	f043 0210 	orr.w	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	f043 0208 	orr.w	r2, r3, #8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f240 723a 	movw	r2, #1850	; 0x73a
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80029e4:	f023 0302 	bic.w	r3, r3, #2
 80029e8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 f884 	bl	8003afc <SDMMC_CmdStopTransfer>
 80029f4:	4602      	mov	r2, r0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f855 	bl	8002ac8 <HAL_SD_ErrorCallback>
}
 8002a1e:	e04a      	b.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d045      	beq.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_SD_IRQHandler+0x282>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d011      	beq.n	8002a62 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_SD_IRQHandler+0x304>)
 8002a44:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fa9c 	bl	8000f88 <HAL_DMA_Abort_IT>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d02f      	beq.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fac8 	bl	8002ff0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002a60:	e029      	b.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <HAL_SD_IRQHandler+0x2ba>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d011      	beq.n	8002a9a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_SD_IRQHandler+0x308>)
 8002a7c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fa80 	bl	8000f88 <HAL_DMA_Abort_IT>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d013      	beq.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fae3 	bl	800305e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002a98:	e00d      	b.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f001 fcac 	bl	800440c <HAL_SD_AbortCallback>
}
 8002ab4:	e7ff      	b.n	8002ab6 <HAL_SD_IRQHandler+0x2fa>
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	08002ff1 	.word	0x08002ff1
 8002ac4:	0800305f 	.word	0x0800305f

08002ac8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aea:	0f9b      	lsrs	r3, r3, #30
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b08:	0e1b      	lsrs	r3, r3, #24
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1a:	0c1b      	lsrs	r3, r3, #16
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b3c:	0d1b      	lsrs	r3, r3, #20
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b5a:	0bdb      	lsrs	r3, r3, #15
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6c:	0b9b      	lsrs	r3, r3, #14
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7e:	0b5b      	lsrs	r3, r3, #13
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b90:	0b1b      	lsrs	r3, r3, #12
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d163      	bne.n	8002c74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb0:	009a      	lsls	r2, r3, #2
 8002bb2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002bbc:	0f92      	lsrs	r2, r2, #30
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc8:	0edb      	lsrs	r3, r3, #27
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bda:	0e1b      	lsrs	r3, r3, #24
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bec:	0d5b      	lsrs	r3, r3, #21
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfe:	0c9b      	lsrs	r3, r3, #18
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c10:	0bdb      	lsrs	r3, r3, #15
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	7e1b      	ldrb	r3, [r3, #24]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	3302      	adds	r3, #2
 8002c34:	2201      	movs	r2, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c3e:	fb03 f202 	mul.w	r2, r3, r2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	7a1b      	ldrb	r3, [r3, #8]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c60:	0a52      	lsrs	r2, r2, #9
 8002c62:	fb03 f202 	mul.w	r2, r3, r2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c70:	661a      	str	r2, [r3, #96]	; 0x60
 8002c72:	e031      	b.n	8002cd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d11d      	bne.n	8002cb8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	3301      	adds	r3, #1
 8002c98:	029a      	lsls	r2, r3, #10
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	661a      	str	r2, [r3, #96]	; 0x60
 8002cb6:	e00f      	b.n	8002cd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <HAL_SD_GetCardCSD+0x344>)
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e09d      	b.n	8002e14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cdc:	0b9b      	lsrs	r3, r3, #14
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cee:	09db      	lsrs	r3, r3, #7
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	0fdb      	lsrs	r3, r3, #31
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	0f5b      	lsrs	r3, r3, #29
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	0d9b      	lsrs	r3, r3, #22
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	0d5b      	lsrs	r3, r3, #21
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	0bdb      	lsrs	r3, r3, #15
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	0b9b      	lsrs	r3, r3, #14
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	0b5b      	lsrs	r3, r3, #13
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	0b1b      	lsrs	r3, r3, #12
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	0a9b      	lsrs	r3, r3, #10
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	004005ff 	.word	0x004005ff

08002e24 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002e7c:	b5b0      	push	{r4, r5, r7, lr}
 8002e7e:	b08e      	sub	sp, #56	; 0x38
 8002e80:	af04      	add	r7, sp, #16
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d02e      	beq.n	8002efa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb0:	e029      	b.n	8002f06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa8a 	bl	80033d4 <SD_WideBus_Enable>
 8002ec0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8002ece:	e01a      	b.n	8002f06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10a      	bne.n	8002eec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fac7 	bl	800346a <SD_WideBus_Disable>
 8002edc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8002eea:	e00c      	b.n	8002f06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ef8:	e005      	b.n	8002f06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a26      	ldr	r2, [pc, #152]	; (8002fac <HAL_SD_ConfigWideBusOperation+0x130>)
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f24:	e01f      	b.n	8002f66 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681d      	ldr	r5, [r3, #0]
 8002f4c:	466c      	mov	r4, sp
 8002f4e:	f107 0314 	add.w	r3, r7, #20
 8002f52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f60:	4628      	mov	r0, r5
 8002f62:	f000 fc46 	bl	80037f2 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fd1a 	bl	80039a8 <SDMMC_CmdBlockLength>
 8002f74:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_SD_ConfigWideBusOperation+0x130>)
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3728      	adds	r7, #40	; 0x28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	004005ff 	.word	0x004005ff

08002fb0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f9de 	bl	8003384 <SD_SendStatus>
 8002fc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	0a5b      	lsrs	r3, r3, #9
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002fe6:	693b      	ldr	r3, [r7, #16]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f240 523a 	movw	r2, #1338	; 0x53a
 8003006:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f7ff ffd1 	bl	8002fb0 <HAL_SD_GetCardState>
 800300e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b06      	cmp	r3, #6
 8003022:	d002      	beq.n	800302a <SD_DMATxAbort+0x3a>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d10a      	bne.n	8003040 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fd64 	bl	8003afc <SDMMC_CmdStopTransfer>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	431a      	orrs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	2b00      	cmp	r3, #0
 8003046:	d103      	bne.n	8003050 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f001 f9df 	bl	800440c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800304e:	e002      	b.n	8003056 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff fd39 	bl	8002ac8 <HAL_SD_ErrorCallback>
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f240 523a 	movw	r2, #1338	; 0x53a
 8003074:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff ff9a 	bl	8002fb0 <HAL_SD_GetCardState>
 800307c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b06      	cmp	r3, #6
 8003090:	d002      	beq.n	8003098 <SD_DMARxAbort+0x3a>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b05      	cmp	r3, #5
 8003096:	d10a      	bne.n	80030ae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fd2d 	bl	8003afc <SDMMC_CmdStopTransfer>
 80030a2:	4602      	mov	r2, r0
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f001 f9a8 	bl	800440c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80030bc:	e002      	b.n	80030c4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff fd02 	bl	8002ac8 <HAL_SD_ErrorCallback>
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030cc:	b5b0      	push	{r4, r5, r7, lr}
 80030ce:	b094      	sub	sp, #80	; 0x50
 80030d0:	af04      	add	r7, sp, #16
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80030d4:	2301      	movs	r3, #1
 80030d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fbdf 	bl	80038a0 <SDIO_GetPowerState>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80030e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030ec:	e0b8      	b.n	8003260 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d02f      	beq.n	8003156 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fe08 	bl	8003d10 <SDMMC_CmdSendCID>
 8003100:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <SD_InitCard+0x40>
    {
      return errorstate;
 8003108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310a:	e0a9      	b.n	8003260 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fc09 	bl	800392a <SDIO_GetResponse>
 8003118:	4602      	mov	r2, r0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2104      	movs	r1, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fc00 	bl	800392a <SDIO_GetResponse>
 800312a:	4602      	mov	r2, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2108      	movs	r1, #8
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fbf7 	bl	800392a <SDIO_GetResponse>
 800313c:	4602      	mov	r2, r0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	210c      	movs	r1, #12
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fbee 	bl	800392a <SDIO_GetResponse>
 800314e:	4602      	mov	r2, r0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	2b03      	cmp	r3, #3
 800315c:	d00d      	beq.n	800317a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f107 020e 	add.w	r2, r7, #14
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fe0e 	bl	8003d8a <SDMMC_CmdSetRelAdd>
 800316e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <SD_InitCard+0xae>
    {
      return errorstate;
 8003176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003178:	e072      	b.n	8003260 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	2b03      	cmp	r3, #3
 8003180:	d036      	beq.n	80031f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003182:	89fb      	ldrh	r3, [r7, #14]
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f000 fdd8 	bl	8003d4c <SDMMC_CmdSendCSD>
 800319c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80031a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a6:	e05b      	b.n	8003260 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fbbb 	bl	800392a <SDIO_GetResponse>
 80031b4:	4602      	mov	r2, r0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2104      	movs	r1, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fbb2 	bl	800392a <SDIO_GetResponse>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2108      	movs	r1, #8
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fba9 	bl	800392a <SDIO_GetResponse>
 80031d8:	4602      	mov	r2, r0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	210c      	movs	r1, #12
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fba0 	bl	800392a <SDIO_GetResponse>
 80031ea:	4602      	mov	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2104      	movs	r1, #4
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fb97 	bl	800392a <SDIO_GetResponse>
 80031fc:	4603      	mov	r3, r0
 80031fe:	0d1a      	lsrs	r2, r3, #20
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003204:	f107 0310 	add.w	r3, r7, #16
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fc66 	bl	8002adc <HAL_SD_GetCardCSD>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003216:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800321a:	e021      	b.n	8003260 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	2200      	movs	r2, #0
 8003228:	461c      	mov	r4, r3
 800322a:	4615      	mov	r5, r2
 800322c:	4622      	mov	r2, r4
 800322e:	462b      	mov	r3, r5
 8003230:	4608      	mov	r0, r1
 8003232:	f000 fc85 	bl	8003b40 <SDMMC_CmdSelDesel>
 8003236:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <SD_InitCard+0x176>
  {
    return errorstate;
 800323e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003240:	e00e      	b.n	8003260 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681d      	ldr	r5, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	466c      	mov	r4, sp
 800324a:	f103 0210 	add.w	r2, r3, #16
 800324e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003254:	3304      	adds	r3, #4
 8003256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003258:	4628      	mov	r0, r5
 800325a:	f000 faca 	bl	80037f2 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3740      	adds	r7, #64	; 0x40
 8003264:	46bd      	mov	sp, r7
 8003266:	bdb0      	pop	{r4, r5, r7, pc}

08003268 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fc80 	bl	8003b86 <SDMMC_CmdGoIdleState>
 8003286:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <SD_PowerON+0x2a>
  {
    return errorstate;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	e072      	b.n	8003378 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fc93 	bl	8003bc2 <SDMMC_CmdOperCond>
 800329c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fc69 	bl	8003b86 <SDMMC_CmdGoIdleState>
 80032b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	e05b      	b.n	8003378 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d137      	bne.n	800333e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fc93 	bl	8003c00 <SDMMC_CmdAppCommand>
 80032da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02d      	beq.n	800333e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032e6:	e047      	b.n	8003378 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fc86 	bl	8003c00 <SDMMC_CmdAppCommand>
 80032f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <SD_PowerON+0x98>
    {
      return errorstate;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	e03b      	b.n	8003378 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	491e      	ldr	r1, [pc, #120]	; (8003380 <SD_PowerON+0x118>)
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fc9c 	bl	8003c44 <SDMMC_CmdAppOperCommand>
 800330c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003314:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003318:	e02e      	b.n	8003378 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fb02 	bl	800392a <SDIO_GetResponse>
 8003326:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	0fdb      	lsrs	r3, r3, #31
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <SD_PowerON+0xcc>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <SD_PowerON+0xce>
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]

    count++;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	3301      	adds	r3, #1
 800333c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003344:	4293      	cmp	r3, r2
 8003346:	d802      	bhi.n	800334e <SD_PowerON+0xe6>
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0cc      	beq.n	80032e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003354:	4293      	cmp	r3, r2
 8003356:	d902      	bls.n	800335e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800335c:	e00c      	b.n	8003378 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
 800336e:	e002      	b.n	8003376 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	c1100000 	.word	0xc1100000

08003384 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003398:	e018      	b.n	80033cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 fd10 	bl	8003dcc <SDMMC_CmdSendStatus>
 80033ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	e009      	b.n	80033cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fab3 	bl	800392a <SDIO_GetResponse>
 80033c4:	4602      	mov	r2, r0
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fa9d 	bl	800392a <SDIO_GetResponse>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033fa:	d102      	bne.n	8003402 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80033fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003400:	e02f      	b.n	8003462 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003402:	f107 030c 	add.w	r3, r7, #12
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f879 	bl	8003500 <SD_FindSCR>
 800340e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	e023      	b.n	8003462 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01c      	beq.n	800345e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342c:	041b      	lsls	r3, r3, #16
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f000 fbe5 	bl	8003c00 <SDMMC_CmdAppCommand>
 8003436:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	e00f      	b.n	8003462 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2102      	movs	r1, #2
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fc1e 	bl	8003c8a <SDMMC_CmdBusWidth>
 800344e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	e003      	b.n	8003462 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800345a:	2300      	movs	r3, #0
 800345c:	e001      	b.n	8003462 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800345e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fa52 	bl	800392a <SDIO_GetResponse>
 8003486:	4603      	mov	r3, r0
 8003488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003490:	d102      	bne.n	8003498 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003496:	e02f      	b.n	80034f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003498:	f107 030c 	add.w	r3, r7, #12
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82e 	bl	8003500 <SD_FindSCR>
 80034a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	e023      	b.n	80034f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01c      	beq.n	80034f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f000 fb9a 	bl	8003c00 <SDMMC_CmdAppCommand>
 80034cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	e00f      	b.n	80034f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fbd3 	bl	8003c8a <SDMMC_CmdBusWidth>
 80034e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	e003      	b.n	80034f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e001      	b.n	80034f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b08f      	sub	sp, #60	; 0x3c
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800350a:	f7fd fb4d 	bl	8000ba8 <HAL_GetTick>
 800350e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2108      	movs	r1, #8
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa3e 	bl	80039a8 <SDMMC_CmdBlockLength>
 800352c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	e0b2      	b.n	800369e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	4619      	mov	r1, r3
 8003544:	4610      	mov	r0, r2
 8003546:	f000 fb5b 	bl	8003c00 <SDMMC_CmdAppCommand>
 800354a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	e0a3      	b.n	800369e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800355c:	2308      	movs	r3, #8
 800355e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003560:	2330      	movs	r3, #48	; 0x30
 8003562:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003564:	2302      	movs	r3, #2
 8003566:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800356c:	2301      	movs	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f107 0210 	add.w	r2, r7, #16
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f9e8 	bl	8003950 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fba2 	bl	8003cce <SDMMC_CmdSendSCR>
 800358a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02a      	beq.n	80035e8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	e083      	b.n	800369e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00f      	beq.n	80035c4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	f107 0208 	add.w	r2, r7, #8
 80035b0:	18d4      	adds	r4, r2, r3
 80035b2:	4608      	mov	r0, r1
 80035b4:	f000 f948 	bl	8003848 <SDIO_ReadFIFO>
 80035b8:	4603      	mov	r3, r0
 80035ba:	6023      	str	r3, [r4, #0]
      index++;
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	3301      	adds	r3, #1
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
 80035c2:	e006      	b.n	80035d2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d012      	beq.n	80035f8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80035d2:	f7fd fae9 	bl	8000ba8 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d102      	bne.n	80035e8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80035e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035e6:	e05a      	b.n	800369e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0cf      	beq.n	8003596 <SD_FindSCR+0x96>
 80035f6:	e000      	b.n	80035fa <SD_FindSCR+0xfa>
      break;
 80035f8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2208      	movs	r2, #8
 800360e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003610:	2308      	movs	r3, #8
 8003612:	e044      	b.n	800369e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2202      	movs	r2, #2
 8003628:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800362a:	2302      	movs	r3, #2
 800362c:	e037      	b.n	800369e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2220      	movs	r2, #32
 8003642:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003644:	2320      	movs	r3, #32
 8003646:	e02a      	b.n	800369e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003650:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	061a      	lsls	r2, r3, #24
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800365e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003668:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0e1b      	lsrs	r3, r3, #24
 800366e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	601a      	str	r2, [r3, #0]
    scr++;
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	3304      	adds	r3, #4
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	061a      	lsls	r2, r3, #24
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003686:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003690:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0e1b      	lsrs	r3, r3, #24
 8003696:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	373c      	adds	r7, #60	; 0x3c
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd90      	pop	{r4, r7, pc}

080036a6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d03f      	beq.n	8003740 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e033      	b.n	800372e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f8bc 	bl	8003848 <SDIO_ReadFIFO>
 80036d0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3301      	adds	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3301      	adds	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3301      	adds	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3b01      	subs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0e1b      	lsrs	r3, r3, #24
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	3b01      	subs	r3, #1
 8003726:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3301      	adds	r3, #1
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b07      	cmp	r3, #7
 8003732:	d9c8      	bls.n	80036c6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003740:	bf00      	nop
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d043      	beq.n	80037ea <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e037      	b.n	80037d8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3301      	adds	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	3b01      	subs	r3, #1
 8003778:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	021a      	lsls	r2, r3, #8
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
 8003784:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3301      	adds	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3b01      	subs	r3, #1
 8003790:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	041a      	lsls	r2, r3, #16
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
 800379c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3301      	adds	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	061a      	lsls	r2, r3, #24
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3301      	adds	r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3b01      	subs	r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f107 0208 	add.w	r2, r7, #8
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f848 	bl	8003862 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3301      	adds	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b07      	cmp	r3, #7
 80037dc:	d9c4      	bls.n	8003768 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80037f2:	b084      	sub	sp, #16
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	f107 001c 	add.w	r0, r7, #28
 8003800:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003808:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800380a:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800380c:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003810:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003814:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003818:	431a      	orrs	r2, r3
             Init.ClockDiv
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800381c:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800382c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	b004      	add	sp, #16
 8003846:	4770      	bx	lr

08003848 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2203      	movs	r2, #3
 8003890:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0303 	and.w	r3, r3, #3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80038e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80038e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80038f6:	f023 030f 	bic.w	r3, r3, #15
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	b2db      	uxtb	r3, r3
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3314      	adds	r3, #20
 8003938:	461a      	mov	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4413      	add	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
}  
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003976:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800397c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003982:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800399a:	2300      	movs	r3, #0

}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80039b6:	2310      	movs	r3, #16
 80039b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039ba:	2340      	movs	r3, #64	; 0x40
 80039bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039c8:	f107 0308 	add.w	r3, r7, #8
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ff74 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80039d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d8:	2110      	movs	r1, #16
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa18 	bl	8003e10 <SDMMC_GetCmdResp1>
 80039e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039e2:	69fb      	ldr	r3, [r7, #28]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80039fa:	2311      	movs	r3, #17
 80039fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039fe:	2340      	movs	r3, #64	; 0x40
 8003a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a0c:	f107 0308 	add.w	r3, r7, #8
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff52 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	2111      	movs	r1, #17
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f9f6 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a26:	69fb      	ldr	r3, [r7, #28]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003a3e:	2312      	movs	r3, #18
 8003a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a42:	2340      	movs	r3, #64	; 0x40
 8003a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a50:	f107 0308 	add.w	r3, r7, #8
 8003a54:	4619      	mov	r1, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ff30 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	2112      	movs	r1, #18
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9d4 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003a82:	2318      	movs	r3, #24
 8003a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a86:	2340      	movs	r3, #64	; 0x40
 8003a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a94:	f107 0308 	add.w	r3, r7, #8
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff0e 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	2118      	movs	r1, #24
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9b2 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003aac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003aae:	69fb      	ldr	r3, [r7, #28]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003ac6:	2319      	movs	r3, #25
 8003ac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aca:	2340      	movs	r3, #64	; 0x40
 8003acc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ad8:	f107 0308 	add.w	r3, r7, #8
 8003adc:	4619      	mov	r1, r3
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff feec 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	2119      	movs	r1, #25
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f990 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003af0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003af2:	69fb      	ldr	r3, [r7, #28]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003b08:	230c      	movs	r3, #12
 8003b0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b0c:	2340      	movs	r3, #64	; 0x40
 8003b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b1a:	f107 0308 	add.w	r3, r7, #8
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff fecb 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003b26:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <SDMMC_CmdStopTransfer+0x40>)
 8003b28:	210c      	movs	r1, #12
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f970 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b32:	69fb      	ldr	r3, [r7, #28]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	05f5e100 	.word	0x05f5e100

08003b40 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003b50:	2307      	movs	r3, #7
 8003b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b54:	2340      	movs	r3, #64	; 0x40
 8003b56:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b60:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b62:	f107 0310 	add.w	r3, r7, #16
 8003b66:	4619      	mov	r1, r3
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff fea7 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	2107      	movs	r1, #7
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f94b 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003b7a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3728      	adds	r7, #40	; 0x28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b088      	sub	sp, #32
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ba4:	f107 0308 	add.w	r3, r7, #8
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fe86 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fb65 	bl	8004280 <SDMMC_GetCmdError>
 8003bb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b088      	sub	sp, #32
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003bca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003bce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bd4:	2340      	movs	r3, #64	; 0x40
 8003bd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff fe67 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 faf8 	bl	80041e4 <SDMMC_GetCmdResp7>
 8003bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003c0e:	2337      	movs	r3, #55	; 0x37
 8003c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c12:	2340      	movs	r3, #64	; 0x40
 8003c14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c20:	f107 0308 	add.w	r3, r7, #8
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fe48 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c30:	2137      	movs	r1, #55	; 0x37
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8ec 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003c38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003c5a:	2329      	movs	r3, #41	; 0x29
 8003c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c5e:	2340      	movs	r3, #64	; 0x40
 8003c60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c6c:	f107 0308 	add.w	r3, r7, #8
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff fe22 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f9ff 	bl	800407c <SDMMC_GetCmdResp3>
 8003c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c80:	69fb      	ldr	r3, [r7, #28]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b088      	sub	sp, #32
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003c98:	2306      	movs	r3, #6
 8003c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c9c:	2340      	movs	r3, #64	; 0x40
 8003c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fe03 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	2106      	movs	r1, #6
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8a7 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b088      	sub	sp, #32
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003cda:	2333      	movs	r3, #51	; 0x33
 8003cdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cde:	2340      	movs	r3, #64	; 0x40
 8003ce0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fde2 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	2133      	movs	r1, #51	; 0x33
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f886 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003d04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d06:	69fb      	ldr	r3, [r7, #28]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d20:	23c0      	movs	r3, #192	; 0xc0
 8003d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d2e:	f107 0308 	add.w	r3, r7, #8
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff fdc1 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f956 	bl	8003fec <SDMMC_GetCmdResp2>
 8003d40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d42:	69fb      	ldr	r3, [r7, #28]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003d5a:	2309      	movs	r3, #9
 8003d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d5e:	23c0      	movs	r3, #192	; 0xc0
 8003d60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d6c:	f107 0308 	add.w	r3, r7, #8
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fda2 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f937 	bl	8003fec <SDMMC_GetCmdResp2>
 8003d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d80:	69fb      	ldr	r3, [r7, #28]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b088      	sub	sp, #32
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d9c:	2340      	movs	r3, #64	; 0x40
 8003d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fd83 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	2103      	movs	r1, #3
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f99c 	bl	80040f8 <SDMMC_GetCmdResp6>
 8003dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003dda:	230d      	movs	r3, #13
 8003ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dde:	2340      	movs	r3, #64	; 0x40
 8003de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fd62 	bl	80038bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	210d      	movs	r1, #13
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f806 	bl	8003e10 <SDMMC_GetCmdResp1>
 8003e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e06:	69fb      	ldr	r3, [r7, #28]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003e1e:	4b70      	ldr	r3, [pc, #448]	; (8003fe0 <SDMMC_GetCmdResp1+0x1d0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a70      	ldr	r2, [pc, #448]	; (8003fe4 <SDMMC_GetCmdResp1+0x1d4>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	0a5a      	lsrs	r2, r3, #9
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	1e5a      	subs	r2, r3, #1
 8003e36:	61fa      	str	r2, [r7, #28]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e40:	e0c9      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0ef      	beq.n	8003e32 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ea      	bne.n	8003e32 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e6e:	2304      	movs	r3, #4
 8003e70:	e0b1      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0a6      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	22c5      	movs	r2, #197	; 0xc5
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff fd3e 	bl	8003910 <SDIO_GetCommandResponse>
 8003e94:	4603      	mov	r3, r0
 8003e96:	461a      	mov	r2, r3
 8003e98:	7afb      	ldrb	r3, [r7, #11]
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d001      	beq.n	8003ea2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e099      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff fd40 	bl	800392a <SDIO_GetResponse>
 8003eaa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4b4e      	ldr	r3, [pc, #312]	; (8003fe8 <SDMMC_GetCmdResp1+0x1d8>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e08d      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	da02      	bge.n	8003ec6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003ec0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ec4:	e087      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003ed0:	2340      	movs	r3, #64	; 0x40
 8003ed2:	e080      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	e079      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ef0:	e071      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f00:	e069      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f10:	e061      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f20:	e059      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f30:	e051      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f40:	e049      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f50:	e041      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f60:	e039      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f70:	e031      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003f7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f80:	e029      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003f8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f90:	e021      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003f9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fa0:	e019      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003fac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fb0:	e011      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003fbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fc0:	e009      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003fcc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003fd0:	e001      	b.n	8003fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	10624dd3 	.word	0x10624dd3
 8003fe8:	fdffe008 	.word	0xfdffe008

08003fec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <SDMMC_GetCmdResp2+0x88>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <SDMMC_GetCmdResp2+0x8c>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0a5b      	lsrs	r3, r3, #9
 8004000:	f241 3288 	movw	r2, #5000	; 0x1388
 8004004:	fb02 f303 	mul.w	r3, r2, r3
 8004008:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e5a      	subs	r2, r3, #1
 800400e:	60fa      	str	r2, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004014:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004018:	e026      	b.n	8004068 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ef      	beq.n	800400a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ea      	bne.n	800400a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004046:	2304      	movs	r3, #4
 8004048:	e00e      	b.n	8004068 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d004      	beq.n	8004060 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800405c:	2301      	movs	r3, #1
 800405e:	e003      	b.n	8004068 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	22c5      	movs	r2, #197	; 0xc5
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	20000000 	.word	0x20000000
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <SDMMC_GetCmdResp3+0x74>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <SDMMC_GetCmdResp3+0x78>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	0a5b      	lsrs	r3, r3, #9
 8004090:	f241 3288 	movw	r2, #5000	; 0x1388
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1e5a      	subs	r2, r3, #1
 800409e:	60fa      	str	r2, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80040a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040a8:	e01b      	b.n	80040e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ef      	beq.n	800409a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1ea      	bne.n	800409a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2204      	movs	r2, #4
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040d6:	2304      	movs	r3, #4
 80040d8:	e003      	b.n	80040e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	22c5      	movs	r2, #197	; 0xc5
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000000 	.word	0x20000000
 80040f4:	10624dd3 	.word	0x10624dd3

080040f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	460b      	mov	r3, r1
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004106:	4b35      	ldr	r3, [pc, #212]	; (80041dc <SDMMC_GetCmdResp6+0xe4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a35      	ldr	r2, [pc, #212]	; (80041e0 <SDMMC_GetCmdResp6+0xe8>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	0a5b      	lsrs	r3, r3, #9
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	1e5a      	subs	r2, r3, #1
 8004120:	61fa      	str	r2, [r7, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004126:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800412a:	e052      	b.n	80041d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ef      	beq.n	800411c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1ea      	bne.n	800411c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d004      	beq.n	800415c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2204      	movs	r2, #4
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004158:	2304      	movs	r3, #4
 800415a:	e03a      	b.n	80041d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800416e:	2301      	movs	r3, #1
 8004170:	e02f      	b.n	80041d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff fbcc 	bl	8003910 <SDIO_GetCommandResponse>
 8004178:	4603      	mov	r3, r0
 800417a:	461a      	mov	r2, r3
 800417c:	7afb      	ldrb	r3, [r7, #11]
 800417e:	4293      	cmp	r3, r2
 8004180:	d001      	beq.n	8004186 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004182:	2301      	movs	r3, #1
 8004184:	e025      	b.n	80041d2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	22c5      	movs	r2, #197	; 0xc5
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800418c:	2100      	movs	r1, #0
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff fbcb 	bl	800392a <SDIO_GetResponse>
 8004194:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	0c1b      	lsrs	r3, r3, #16
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e011      	b.n	80041d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80041b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041bc:	e009      	b.n	80041d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80041c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041cc:	e001      	b.n	80041d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80041ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000000 	.word	0x20000000
 80041e0:	10624dd3 	.word	0x10624dd3

080041e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041ec:	4b22      	ldr	r3, [pc, #136]	; (8004278 <SDMMC_GetCmdResp7+0x94>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a22      	ldr	r2, [pc, #136]	; (800427c <SDMMC_GetCmdResp7+0x98>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	0a5b      	lsrs	r3, r3, #9
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1e5a      	subs	r2, r3, #1
 8004206:	60fa      	str	r2, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800420c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004210:	e02c      	b.n	800426c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0ef      	beq.n	8004202 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ea      	bne.n	8004202 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2204      	movs	r2, #4
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800423e:	2304      	movs	r3, #4
 8004240:	e014      	b.n	800426c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004254:	2301      	movs	r3, #1
 8004256:	e009      	b.n	800426c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2240      	movs	r2, #64	; 0x40
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800426a:	2300      	movs	r3, #0
  
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000000 	.word	0x20000000
 800427c:	10624dd3 	.word	0x10624dd3

08004280 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <SDMMC_GetCmdError+0x50>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <SDMMC_GetCmdError+0x54>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	0a5b      	lsrs	r3, r3, #9
 8004294:	f241 3288 	movw	r2, #5000	; 0x1388
 8004298:	fb02 f303 	mul.w	r3, r2, r3
 800429c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1e5a      	subs	r2, r3, #1
 80042a2:	60fa      	str	r2, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042ac:	e009      	b.n	80042c2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f1      	beq.n	800429e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	22c5      	movs	r2, #197	; 0xc5
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000000 	.word	0x20000000
 80042d4:	10624dd3 	.word	0x10624dd3

080042d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80042dc:	4904      	ldr	r1, [pc, #16]	; (80042f0 <MX_FATFS_Init+0x18>)
 80042de:	4805      	ldr	r0, [pc, #20]	; (80042f4 <MX_FATFS_Init+0x1c>)
 80042e0:	f002 ff8e 	bl	8007200 <FATFS_LinkDriver>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <MX_FATFS_Init+0x20>)
 80042ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000174 	.word	0x20000174
 80042f4:	08007324 	.word	0x08007324
 80042f8:	20000170 	.word	0x20000170

080042fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004300:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004302:	4618      	mov	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004316:	f000 f8ac 	bl	8004472 <BSP_SD_IsDetected>
 800431a:	4603      	mov	r3, r0
 800431c:	2b01      	cmp	r3, #1
 800431e:	d001      	beq.n	8004324 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e012      	b.n	800434a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004324:	480b      	ldr	r0, [pc, #44]	; (8004354 <BSP_SD_Init+0x48>)
 8004326:	f7fd fe35 	bl	8001f94 <HAL_SD_Init>
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004338:	4806      	ldr	r0, [pc, #24]	; (8004354 <BSP_SD_Init+0x48>)
 800433a:	f7fe fd9f 	bl	8002e7c <HAL_SD_ConfigWideBusOperation>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004348:	79fb      	ldrb	r3, [r7, #7]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000028 	.word	0x20000028

08004358 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	68f9      	ldr	r1, [r7, #12]
 8004374:	4806      	ldr	r0, [pc, #24]	; (8004390 <BSP_SD_ReadBlocks+0x38>)
 8004376:	f7fd febd 	bl	80020f4 <HAL_SD_ReadBlocks>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000028 	.word	0x20000028

08004394 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	68f9      	ldr	r1, [r7, #12]
 80043b0:	4806      	ldr	r0, [pc, #24]	; (80043cc <BSP_SD_WriteBlocks+0x38>)
 80043b2:	f7fe f87d 	bl	80024b0 <HAL_SD_WriteBlocks>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000028 	.word	0x20000028

080043d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80043d4:	4805      	ldr	r0, [pc, #20]	; (80043ec <BSP_SD_GetCardState+0x1c>)
 80043d6:	f7fe fdeb 	bl	8002fb0 <HAL_SD_GetCardState>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b04      	cmp	r3, #4
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000028 	.word	0x20000028

080043f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4803      	ldr	r0, [pc, #12]	; (8004408 <BSP_SD_GetCardInfo+0x18>)
 80043fc:	f7fe fd12 	bl	8002e24 <HAL_SD_GetCardInfo>
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000028 	.word	0x20000028

0800440c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004414:	f000 f818 	bl	8004448 <BSP_SD_AbortCallback>
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004428:	f000 f815 	bl	8004456 <BSP_SD_WriteCpltCallback>
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800443c:	f000 f812 	bl	8004464 <BSP_SD_ReadCpltCallback>
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0

}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8004456:	b480      	push	{r7}
 8004458:	af00      	add	r7, sp, #0

}
 800445a:	bf00      	nop
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0

}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004478:	2301      	movs	r3, #1
 800447a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	b2db      	uxtb	r3, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <SD_CheckStatus+0x38>)
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800449c:	f7ff ff98 	bl	80043d0 <BSP_SD_GetCardState>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d107      	bne.n	80044b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80044a6:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <SD_CheckStatus+0x38>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <SD_CheckStatus+0x38>)
 80044b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80044b6:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <SD_CheckStatus+0x38>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b2db      	uxtb	r3, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000009 	.word	0x20000009

080044c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <SD_initialize+0x38>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80044d8:	f7ff ff18 	bl	800430c <BSP_SD_Init>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ffd1 	bl	800448c <SD_CheckStatus>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <SD_initialize+0x38>)
 80044f0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80044f2:	4b03      	ldr	r3, [pc, #12]	; (8004500 <SD_initialize+0x38>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000009 	.word	0x20000009

08004504 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ffbb 	bl	800448c <SD_CheckStatus>
 8004516:	4603      	mov	r3, r0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004534:	f04f 33ff 	mov.w	r3, #4294967295
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	68b8      	ldr	r0, [r7, #8]
 800453e:	f7ff ff0b 	bl	8004358 <BSP_SD_ReadBlocks>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d107      	bne.n	8004558 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004548:	bf00      	nop
 800454a:	f7ff ff41 	bl	80043d0 <BSP_SD_GetCardState>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1fa      	bne.n	800454a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	4603      	mov	r3, r0
 8004570:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004576:	f04f 33ff 	mov.w	r3, #4294967295
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f7ff ff08 	bl	8004394 <BSP_SD_WriteBlocks>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800458a:	bf00      	nop
 800458c:	f7ff ff20 	bl	80043d0 <BSP_SD_GetCardState>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1fa      	bne.n	800458c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08c      	sub	sp, #48	; 0x30
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	603a      	str	r2, [r7, #0]
 80045ae:	71fb      	strb	r3, [r7, #7]
 80045b0:	460b      	mov	r3, r1
 80045b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80045ba:	4b25      	ldr	r3, [pc, #148]	; (8004650 <SD_ioctl+0xac>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <SD_ioctl+0x28>
 80045c8:	2303      	movs	r3, #3
 80045ca:	e03c      	b.n	8004646 <SD_ioctl+0xa2>

  switch (cmd)
 80045cc:	79bb      	ldrb	r3, [r7, #6]
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d834      	bhi.n	800463c <SD_ioctl+0x98>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <SD_ioctl+0x34>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045f1 	.word	0x080045f1
 80045e0:	08004609 	.word	0x08004609
 80045e4:	08004623 	.word	0x08004623
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80045ee:	e028      	b.n	8004642 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fefb 	bl	80043f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80045fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004606:	e01c      	b.n	8004642 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004608:	f107 030c 	add.w	r3, r7, #12
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff feef 	bl	80043f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	b29a      	uxth	r2, r3
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004620:	e00f      	b.n	8004642 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004622:	f107 030c 	add.w	r3, r7, #12
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fee2 	bl	80043f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	0a5a      	lsrs	r2, r3, #9
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800463a:	e002      	b.n	8004642 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800463c:	2304      	movs	r3, #4
 800463e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004646:	4618      	mov	r0, r3
 8004648:	3730      	adds	r7, #48	; 0x30
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20000009 	.word	0x20000009

08004654 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <disk_status+0x30>)
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	79fa      	ldrb	r2, [r7, #7]
 800466c:	4905      	ldr	r1, [pc, #20]	; (8004684 <disk_status+0x30>)
 800466e:	440a      	add	r2, r1
 8004670:	7a12      	ldrb	r2, [r2, #8]
 8004672:	4610      	mov	r0, r2
 8004674:	4798      	blx	r3
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]
  return stat;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000600 	.word	0x20000600

08004688 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4a0d      	ldr	r2, [pc, #52]	; (80046d0 <disk_initialize+0x48>)
 800469a:	5cd3      	ldrb	r3, [r2, r3]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d111      	bne.n	80046c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <disk_initialize+0x48>)
 80046a4:	2101      	movs	r1, #1
 80046a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <disk_initialize+0x48>)
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	79fa      	ldrb	r2, [r7, #7]
 80046b6:	4906      	ldr	r1, [pc, #24]	; (80046d0 <disk_initialize+0x48>)
 80046b8:	440a      	add	r2, r1
 80046ba:	7a12      	ldrb	r2, [r2, #8]
 80046bc:	4610      	mov	r0, r2
 80046be:	4798      	blx	r3
 80046c0:	4603      	mov	r3, r0
 80046c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000600 	.word	0x20000600

080046d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	4603      	mov	r3, r0
 80046e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <disk_read+0x3c>)
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	689c      	ldr	r4, [r3, #8]
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	4a07      	ldr	r2, [pc, #28]	; (8004710 <disk_read+0x3c>)
 80046f4:	4413      	add	r3, r2
 80046f6:	7a18      	ldrb	r0, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	47a0      	blx	r4
 8004700:	4603      	mov	r3, r0
 8004702:	75fb      	strb	r3, [r7, #23]
  return res;
 8004704:	7dfb      	ldrb	r3, [r7, #23]
}
 8004706:	4618      	mov	r0, r3
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	bd90      	pop	{r4, r7, pc}
 800470e:	bf00      	nop
 8004710:	20000600 	.word	0x20000600

08004714 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <disk_write+0x3c>)
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	68dc      	ldr	r4, [r3, #12]
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <disk_write+0x3c>)
 8004734:	4413      	add	r3, r2
 8004736:	7a18      	ldrb	r0, [r3, #8]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	47a0      	blx	r4
 8004740:	4603      	mov	r3, r0
 8004742:	75fb      	strb	r3, [r7, #23]
  return res;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
}
 8004746:	4618      	mov	r0, r3
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd90      	pop	{r4, r7, pc}
 800474e:	bf00      	nop
 8004750:	20000600 	.word	0x20000600

08004754 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	603a      	str	r2, [r7, #0]
 800475e:	71fb      	strb	r3, [r7, #7]
 8004760:	460b      	mov	r3, r1
 8004762:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	4a09      	ldr	r2, [pc, #36]	; (800478c <disk_ioctl+0x38>)
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	79fa      	ldrb	r2, [r7, #7]
 8004772:	4906      	ldr	r1, [pc, #24]	; (800478c <disk_ioctl+0x38>)
 8004774:	440a      	add	r2, r1
 8004776:	7a10      	ldrb	r0, [r2, #8]
 8004778:	79b9      	ldrb	r1, [r7, #6]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4798      	blx	r3
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
  return res;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000600 	.word	0x20000600

08004790 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3301      	adds	r3, #1
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	b21a      	sxth	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	b21b      	sxth	r3, r3
 80047ac:	4313      	orrs	r3, r2
 80047ae:	b21b      	sxth	r3, r3
 80047b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80047b2:	89fb      	ldrh	r3, [r7, #14]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3303      	adds	r3, #3
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	3202      	adds	r2, #2
 80047d8:	7812      	ldrb	r2, [r2, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	3201      	adds	r2, #1
 80047e6:	7812      	ldrb	r2, [r2, #0]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	7812      	ldrb	r2, [r2, #0]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80047f8:	68fb      	ldr	r3, [r7, #12]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	887a      	ldrh	r2, [r7, #2]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	0a1b      	lsrs	r3, r3, #8
 8004822:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	1c53      	adds	r3, r2, #1
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	1c59      	adds	r1, r3, #1
 80048b8:	6179      	str	r1, [r7, #20]
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f1      	bne.n	80048ae <mem_cpy+0x1a>
	}
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80048d6:	b480      	push	{r7}
 80048d8:	b087      	sub	sp, #28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	617a      	str	r2, [r7, #20]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f3      	bne.n	80048e6 <mem_set+0x10>
}
 80048fe:	bf00      	nop
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800490c:	b480      	push	{r7}
 800490e:	b089      	sub	sp, #36	; 0x24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	61fa      	str	r2, [r7, #28]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	4619      	mov	r1, r3
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	61ba      	str	r2, [r7, #24]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	1acb      	subs	r3, r1, r3
 8004938:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3b01      	subs	r3, #1
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <mem_cmp+0x40>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0eb      	beq.n	8004924 <mem_cmp+0x18>

	return r;
 800494c:	697b      	ldr	r3, [r7, #20]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004964:	e002      	b.n	800496c <chk_chr+0x12>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3301      	adds	r3, #1
 800496a:	607b      	str	r3, [r7, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <chk_chr+0x26>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	4293      	cmp	r3, r2
 800497e:	d1f2      	bne.n	8004966 <chk_chr+0xc>
	return *str;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	781b      	ldrb	r3, [r3, #0]
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e029      	b.n	80049f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80049a4:	4a27      	ldr	r2, [pc, #156]	; (8004a44 <chk_lock+0xb4>)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	4413      	add	r3, r2
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01d      	beq.n	80049ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80049b2:	4a24      	ldr	r2, [pc, #144]	; (8004a44 <chk_lock+0xb4>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	4413      	add	r3, r2
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d116      	bne.n	80049f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80049c4:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <chk_lock+0xb4>)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	4413      	add	r3, r2
 80049cc:	3304      	adds	r3, #4
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d10c      	bne.n	80049f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80049d8:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <chk_lock+0xb4>)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	4413      	add	r3, r2
 80049e0:	3308      	adds	r3, #8
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d102      	bne.n	80049f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80049ec:	e007      	b.n	80049fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d9d2      	bls.n	80049a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d109      	bne.n	8004a18 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <chk_lock+0x80>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d101      	bne.n	8004a14 <chk_lock+0x84>
 8004a10:	2300      	movs	r3, #0
 8004a12:	e010      	b.n	8004a36 <chk_lock+0xa6>
 8004a14:	2312      	movs	r3, #18
 8004a16:	e00e      	b.n	8004a36 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d108      	bne.n	8004a30 <chk_lock+0xa0>
 8004a1e:	4a09      	ldr	r2, [pc, #36]	; (8004a44 <chk_lock+0xb4>)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	4413      	add	r3, r2
 8004a26:	330c      	adds	r3, #12
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2e:	d101      	bne.n	8004a34 <chk_lock+0xa4>
 8004a30:	2310      	movs	r3, #16
 8004a32:	e000      	b.n	8004a36 <chk_lock+0xa6>
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	200005e0 	.word	0x200005e0

08004a48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	e002      	b.n	8004a5a <enq_lock+0x12>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d806      	bhi.n	8004a6e <enq_lock+0x26>
 8004a60:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <enq_lock+0x40>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	4413      	add	r3, r2
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f2      	bne.n	8004a54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	bf14      	ite	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	2300      	moveq	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	200005e0 	.word	0x200005e0

08004a8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e01f      	b.n	8004adc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004a9c:	4a41      	ldr	r2, [pc, #260]	; (8004ba4 <inc_lock+0x118>)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	4413      	add	r3, r2
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d113      	bne.n	8004ad6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004aae:	4a3d      	ldr	r2, [pc, #244]	; (8004ba4 <inc_lock+0x118>)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d109      	bne.n	8004ad6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004ac2:	4a38      	ldr	r2, [pc, #224]	; (8004ba4 <inc_lock+0x118>)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	4413      	add	r3, r2
 8004aca:	3308      	adds	r3, #8
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d006      	beq.n	8004ae4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d9dc      	bls.n	8004a9c <inc_lock+0x10>
 8004ae2:	e000      	b.n	8004ae6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004ae4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d132      	bne.n	8004b52 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e002      	b.n	8004af8 <inc_lock+0x6c>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3301      	adds	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d806      	bhi.n	8004b0c <inc_lock+0x80>
 8004afe:	4a29      	ldr	r2, [pc, #164]	; (8004ba4 <inc_lock+0x118>)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	4413      	add	r3, r2
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f2      	bne.n	8004af2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d101      	bne.n	8004b16 <inc_lock+0x8a>
 8004b12:	2300      	movs	r3, #0
 8004b14:	e040      	b.n	8004b98 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4922      	ldr	r1, [pc, #136]	; (8004ba4 <inc_lock+0x118>)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	440b      	add	r3, r1
 8004b22:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	491e      	ldr	r1, [pc, #120]	; (8004ba4 <inc_lock+0x118>)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	440b      	add	r3, r1
 8004b30:	3304      	adds	r3, #4
 8004b32:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	491a      	ldr	r1, [pc, #104]	; (8004ba4 <inc_lock+0x118>)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	440b      	add	r3, r1
 8004b40:	3308      	adds	r3, #8
 8004b42:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004b44:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <inc_lock+0x118>)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	4413      	add	r3, r2
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	2200      	movs	r2, #0
 8004b50:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <inc_lock+0xe0>
 8004b58:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <inc_lock+0x118>)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	4413      	add	r3, r2
 8004b60:	330c      	adds	r3, #12
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <inc_lock+0xe0>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e015      	b.n	8004b98 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d108      	bne.n	8004b84 <inc_lock+0xf8>
 8004b72:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <inc_lock+0x118>)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	4413      	add	r3, r2
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	e001      	b.n	8004b88 <inc_lock+0xfc>
 8004b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b88:	4906      	ldr	r1, [pc, #24]	; (8004ba4 <inc_lock+0x118>)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	440b      	add	r3, r1
 8004b90:	330c      	adds	r3, #12
 8004b92:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	200005e0 	.word	0x200005e0

08004ba8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d825      	bhi.n	8004c08 <dec_lock+0x60>
		n = Files[i].ctr;
 8004bbc:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <dec_lock+0x74>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	4413      	add	r3, r2
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004bca:	89fb      	ldrh	r3, [r7, #14]
 8004bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd0:	d101      	bne.n	8004bd6 <dec_lock+0x2e>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004bd6:	89fb      	ldrh	r3, [r7, #14]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <dec_lock+0x3a>
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004be2:	4a0e      	ldr	r2, [pc, #56]	; (8004c1c <dec_lock+0x74>)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	4413      	add	r3, r2
 8004bea:	330c      	adds	r3, #12
 8004bec:	89fa      	ldrh	r2, [r7, #14]
 8004bee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d105      	bne.n	8004c02 <dec_lock+0x5a>
 8004bf6:	4a09      	ldr	r2, [pc, #36]	; (8004c1c <dec_lock+0x74>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	4413      	add	r3, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	737b      	strb	r3, [r7, #13]
 8004c06:	e001      	b.n	8004c0c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004c08:	2302      	movs	r3, #2
 8004c0a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004c0c:	7b7b      	ldrb	r3, [r7, #13]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	200005e0 	.word	0x200005e0

08004c20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e010      	b.n	8004c50 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004c2e:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <clear_lock+0x44>)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	4413      	add	r3, r2
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d105      	bne.n	8004c4a <clear_lock+0x2a>
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <clear_lock+0x44>)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	4413      	add	r3, r2
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d9eb      	bls.n	8004c2e <clear_lock+0xe>
	}
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	200005e0 	.word	0x200005e0

08004c68 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	78db      	ldrb	r3, [r3, #3]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d034      	beq.n	8004ce6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	7858      	ldrb	r0, [r3, #1]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	f7ff fd40 	bl	8004714 <disk_write>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
 8004c9e:	e022      	b.n	8004ce6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	1ad2      	subs	r2, r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d217      	bcs.n	8004ce6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	789b      	ldrb	r3, [r3, #2]
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	e010      	b.n	8004ce0 <sync_window+0x78>
					wsect += fs->fsize;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	7858      	ldrb	r0, [r3, #1]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	f7ff fd1d 	bl	8004714 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d8eb      	bhi.n	8004cbe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d01b      	beq.n	8004d40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff ffad 	bl	8004c68 <sync_window>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d113      	bne.n	8004d40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	7858      	ldrb	r0, [r3, #1]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d22:	2301      	movs	r3, #1
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	f7ff fcd5 	bl	80046d4 <disk_read>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004d30:	f04f 33ff 	mov.w	r3, #4294967295
 8004d34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff87 	bl	8004c68 <sync_window>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d158      	bne.n	8004e16 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d148      	bne.n	8004dfe <sync_fs+0xb2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	791b      	ldrb	r3, [r3, #4]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d144      	bne.n	8004dfe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3330      	adds	r3, #48	; 0x30
 8004d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fda9 	bl	80048d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3330      	adds	r3, #48	; 0x30
 8004d88:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004d8c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fd38 	bl	8004806 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3330      	adds	r3, #48	; 0x30
 8004d9a:	4921      	ldr	r1, [pc, #132]	; (8004e20 <sync_fs+0xd4>)
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fd4d 	bl	800483c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3330      	adds	r3, #48	; 0x30
 8004da6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004daa:	491e      	ldr	r1, [pc, #120]	; (8004e24 <sync_fs+0xd8>)
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fd45 	bl	800483c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3330      	adds	r3, #48	; 0x30
 8004db6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7ff fd3b 	bl	800483c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3330      	adds	r3, #48	; 0x30
 8004dca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f7ff fd31 	bl	800483c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7858      	ldrb	r0, [r3, #1]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df2:	2301      	movs	r3, #1
 8004df4:	f7ff fc8e 	bl	8004714 <disk_write>
			fs->fsi_flag = 0;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	785b      	ldrb	r3, [r3, #1]
 8004e02:	2200      	movs	r2, #0
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fca4 	bl	8004754 <disk_ioctl>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <sync_fs+0xca>
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	41615252 	.word	0x41615252
 8004e24:	61417272 	.word	0x61417272

08004e28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	3b02      	subs	r3, #2
 8004e36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	3b02      	subs	r3, #2
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d301      	bcc.n	8004e48 <clust2sect+0x20>
 8004e44:	2300      	movs	r3, #0
 8004e46:	e008      	b.n	8004e5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	895b      	ldrh	r3, [r3, #10]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	fb03 f202 	mul.w	r2, r3, r2
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	4413      	add	r3, r2
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d904      	bls.n	8004e86 <get_fat+0x20>
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004e86:	2301      	movs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e08f      	b.n	8004fac <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d062      	beq.n	8004f60 <get_fat+0xfa>
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	dc7c      	bgt.n	8004f98 <get_fat+0x132>
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d002      	beq.n	8004ea8 <get_fat+0x42>
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d042      	beq.n	8004f2c <get_fat+0xc6>
 8004ea6:	e077      	b.n	8004f98 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6a1a      	ldr	r2, [r3, #32]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	0a5b      	lsrs	r3, r3, #9
 8004ebe:	4413      	add	r3, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6938      	ldr	r0, [r7, #16]
 8004ec4:	f7ff ff14 	bl	8004cf0 <move_window>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d167      	bne.n	8004f9e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	60fa      	str	r2, [r7, #12]
 8004ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ee0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	6a1a      	ldr	r2, [r3, #32]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	0a5b      	lsrs	r3, r3, #9
 8004eea:	4413      	add	r3, r2
 8004eec:	4619      	mov	r1, r3
 8004eee:	6938      	ldr	r0, [r7, #16]
 8004ef0:	f7ff fefe 	bl	8004cf0 <move_window>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d153      	bne.n	8004fa2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <get_fat+0xbc>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	e002      	b.n	8004f28 <get_fat+0xc2>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f28:	617b      	str	r3, [r7, #20]
			break;
 8004f2a:	e03f      	b.n	8004fac <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6a1a      	ldr	r2, [r3, #32]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	4413      	add	r3, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	6938      	ldr	r0, [r7, #16]
 8004f3a:	f7ff fed9 	bl	8004cf0 <move_window>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d130      	bne.n	8004fa6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004f52:	4413      	add	r3, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fc1b 	bl	8004790 <ld_word>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	617b      	str	r3, [r7, #20]
			break;
 8004f5e:	e025      	b.n	8004fac <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	09db      	lsrs	r3, r3, #7
 8004f68:	4413      	add	r3, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6938      	ldr	r0, [r7, #16]
 8004f6e:	f7ff febf 	bl	8004cf0 <move_window>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d118      	bne.n	8004faa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f86:	4413      	add	r3, r2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fc19 	bl	80047c0 <ld_dword>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f94:	617b      	str	r3, [r7, #20]
			break;
 8004f96:	e009      	b.n	8004fac <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004f98:	2301      	movs	r3, #1
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	e006      	b.n	8004fac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f9e:	bf00      	nop
 8004fa0:	e004      	b.n	8004fac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fa2:	bf00      	nop
 8004fa4:	e002      	b.n	8004fac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004faa:	bf00      	nop
		}
	}

	return val;
 8004fac:	697b      	ldr	r3, [r7, #20]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004fb6:	b590      	push	{r4, r7, lr}
 8004fb8:	b089      	sub	sp, #36	; 0x24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	f240 80d9 	bls.w	8005180 <put_fat+0x1ca>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	f080 80d3 	bcs.w	8005180 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	f000 8096 	beq.w	8005110 <put_fat+0x15a>
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	f300 80cb 	bgt.w	8005180 <put_fat+0x1ca>
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d002      	beq.n	8004ff4 <put_fat+0x3e>
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d06e      	beq.n	80050d0 <put_fat+0x11a>
 8004ff2:	e0c5      	b.n	8005180 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4413      	add	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	0a5b      	lsrs	r3, r3, #9
 800500a:	4413      	add	r3, r2
 800500c:	4619      	mov	r1, r3
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff fe6e 	bl	8004cf0 <move_window>
 8005014:	4603      	mov	r3, r0
 8005016:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005018:	7ffb      	ldrb	r3, [r7, #31]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f040 80a9 	bne.w	8005172 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	1c59      	adds	r1, r3, #1
 800502a:	61b9      	str	r1, [r7, #24]
 800502c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005030:	4413      	add	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00d      	beq.n	800505a <put_fat+0xa4>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	b25b      	sxtb	r3, r3
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	b25a      	sxtb	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	b25b      	sxtb	r3, r3
 8005052:	4313      	orrs	r3, r2
 8005054:	b25b      	sxtb	r3, r3
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e001      	b.n	800505e <put_fat+0xa8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	0a5b      	lsrs	r3, r3, #9
 8005070:	4413      	add	r3, r2
 8005072:	4619      	mov	r1, r3
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff fe3b 	bl	8004cf0 <move_window>
 800507a:	4603      	mov	r3, r0
 800507c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800507e:	7ffb      	ldrb	r3, [r7, #31]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d178      	bne.n	8005176 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005090:	4413      	add	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <put_fat+0xf0>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e00e      	b.n	80050c4 <put_fat+0x10e>
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b25b      	sxtb	r3, r3
 80050ac:	f023 030f 	bic.w	r3, r3, #15
 80050b0:	b25a      	sxtb	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	b25b      	sxtb	r3, r3
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	b25b      	sxtb	r3, r3
 80050be:	4313      	orrs	r3, r2
 80050c0:	b25b      	sxtb	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	70da      	strb	r2, [r3, #3]
			break;
 80050ce:	e057      	b.n	8005180 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	4413      	add	r3, r2
 80050da:	4619      	mov	r1, r3
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff fe07 	bl	8004cf0 <move_window>
 80050e2:	4603      	mov	r3, r0
 80050e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050e6:	7ffb      	ldrb	r3, [r7, #31]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d146      	bne.n	800517a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80050fa:	4413      	add	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	b292      	uxth	r2, r2
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fb7f 	bl	8004806 <st_word>
			fs->wflag = 1;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	70da      	strb	r2, [r3, #3]
			break;
 800510e:	e037      	b.n	8005180 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	09db      	lsrs	r3, r3, #7
 8005118:	4413      	add	r3, r2
 800511a:	4619      	mov	r1, r3
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7ff fde7 	bl	8004cf0 <move_window>
 8005122:	4603      	mov	r3, r0
 8005124:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005126:	7ffb      	ldrb	r3, [r7, #31]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d128      	bne.n	800517e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005140:	4413      	add	r3, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fb3c 	bl	80047c0 <ld_dword>
 8005148:	4603      	mov	r3, r0
 800514a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800514e:	4323      	orrs	r3, r4
 8005150:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005160:	4413      	add	r3, r2
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fb69 	bl	800483c <st_dword>
			fs->wflag = 1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	70da      	strb	r2, [r3, #3]
			break;
 8005170:	e006      	b.n	8005180 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005172:	bf00      	nop
 8005174:	e004      	b.n	8005180 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800517e:	bf00      	nop
		}
	}
	return res;
 8005180:	7ffb      	ldrb	r3, [r7, #31]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd90      	pop	{r4, r7, pc}

0800518a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b088      	sub	sp, #32
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d904      	bls.n	80051b0 <remove_chain+0x26>
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d301      	bcc.n	80051b4 <remove_chain+0x2a>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e04b      	b.n	800524c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80051ba:	f04f 32ff 	mov.w	r2, #4294967295
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	69b8      	ldr	r0, [r7, #24]
 80051c2:	f7ff fef8 	bl	8004fb6 <put_fat>
 80051c6:	4603      	mov	r3, r0
 80051c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80051ca:	7ffb      	ldrb	r3, [r7, #31]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <remove_chain+0x4a>
 80051d0:	7ffb      	ldrb	r3, [r7, #31]
 80051d2:	e03b      	b.n	800524c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff fe45 	bl	8004e66 <get_fat>
 80051dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d031      	beq.n	8005248 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <remove_chain+0x64>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e02e      	b.n	800524c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f4:	d101      	bne.n	80051fa <remove_chain+0x70>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e028      	b.n	800524c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80051fa:	2200      	movs	r2, #0
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	69b8      	ldr	r0, [r7, #24]
 8005200:	f7ff fed9 	bl	8004fb6 <put_fat>
 8005204:	4603      	mov	r3, r0
 8005206:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005208:	7ffb      	ldrb	r3, [r7, #31]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <remove_chain+0x88>
 800520e:	7ffb      	ldrb	r3, [r7, #31]
 8005210:	e01c      	b.n	800524c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	3b02      	subs	r3, #2
 800521c:	429a      	cmp	r2, r3
 800521e:	d20b      	bcs.n	8005238 <remove_chain+0xae>
			fs->free_clst++;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	791b      	ldrb	r3, [r3, #4]
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	b2da      	uxtb	r2, r3
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	d3c6      	bcc.n	80051d4 <remove_chain+0x4a>
 8005246:	e000      	b.n	800524a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005248:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10d      	bne.n	8005286 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <create_chain+0x2c>
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d31b      	bcc.n	80052b8 <create_chain+0x64>
 8005280:	2301      	movs	r3, #1
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	e018      	b.n	80052b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff fdec 	bl	8004e66 <get_fat>
 800528e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d801      	bhi.n	800529a <create_chain+0x46>
 8005296:	2301      	movs	r3, #1
 8005298:	e070      	b.n	800537c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d101      	bne.n	80052a6 <create_chain+0x52>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	e06a      	b.n	800537c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d201      	bcs.n	80052b4 <create_chain+0x60>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	e063      	b.n	800537c <create_chain+0x128>
		scl = clst;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	3301      	adds	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d307      	bcc.n	80052dc <create_chain+0x88>
				ncl = 2;
 80052cc:	2302      	movs	r3, #2
 80052ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d901      	bls.n	80052dc <create_chain+0x88>
 80052d8:	2300      	movs	r3, #0
 80052da:	e04f      	b.n	800537c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80052dc:	69f9      	ldr	r1, [r7, #28]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fdc1 	bl	8004e66 <get_fat>
 80052e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d003      	beq.n	80052fa <create_chain+0xa6>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f8:	d101      	bne.n	80052fe <create_chain+0xaa>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	e03e      	b.n	800537c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	429a      	cmp	r2, r3
 8005304:	d1da      	bne.n	80052bc <create_chain+0x68>
 8005306:	2300      	movs	r3, #0
 8005308:	e038      	b.n	800537c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800530a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800530c:	f04f 32ff 	mov.w	r2, #4294967295
 8005310:	69f9      	ldr	r1, [r7, #28]
 8005312:	6938      	ldr	r0, [r7, #16]
 8005314:	f7ff fe4f 	bl	8004fb6 <put_fat>
 8005318:	4603      	mov	r3, r0
 800531a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <create_chain+0xe2>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6938      	ldr	r0, [r7, #16]
 800532e:	f7ff fe42 	bl	8004fb6 <put_fat>
 8005332:	4603      	mov	r3, r0
 8005334:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d116      	bne.n	800536a <create_chain+0x116>
		fs->last_clst = ncl;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	3b02      	subs	r3, #2
 800534c:	429a      	cmp	r2, r3
 800534e:	d804      	bhi.n	800535a <create_chain+0x106>
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	1e5a      	subs	r2, r3, #1
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	791b      	ldrb	r3, [r3, #4]
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	711a      	strb	r2, [r3, #4]
 8005368:	e007      	b.n	800537a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d102      	bne.n	8005376 <create_chain+0x122>
 8005370:	f04f 33ff 	mov.w	r3, #4294967295
 8005374:	e000      	b.n	8005378 <create_chain+0x124>
 8005376:	2301      	movs	r3, #1
 8005378:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800537a:	69fb      	ldr	r3, [r7, #28]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	3304      	adds	r3, #4
 800539a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	0a5b      	lsrs	r3, r3, #9
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	8952      	ldrh	r2, [r2, #10]
 80053a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1d1a      	adds	r2, r3, #4
 80053ae:	613a      	str	r2, [r7, #16]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <clmt_clust+0x3a>
 80053ba:	2300      	movs	r3, #0
 80053bc:	e010      	b.n	80053e0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d307      	bcc.n	80053d6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3304      	adds	r3, #4
 80053d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80053d4:	e7e9      	b.n	80053aa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80053d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005402:	d204      	bcs.n	800540e <dir_sdi+0x22>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <dir_sdi+0x26>
		return FR_INT_ERR;
 800540e:	2302      	movs	r3, #2
 8005410:	e063      	b.n	80054da <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <dir_sdi+0x46>
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d902      	bls.n	8005432 <dir_sdi+0x46>
		clst = fs->dirbase;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10c      	bne.n	8005452 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	8912      	ldrh	r2, [r2, #8]
 8005440:	4293      	cmp	r3, r2
 8005442:	d301      	bcc.n	8005448 <dir_sdi+0x5c>
 8005444:	2302      	movs	r3, #2
 8005446:	e048      	b.n	80054da <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	61da      	str	r2, [r3, #28]
 8005450:	e029      	b.n	80054a6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	895b      	ldrh	r3, [r3, #10]
 8005456:	025b      	lsls	r3, r3, #9
 8005458:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800545a:	e019      	b.n	8005490 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6979      	ldr	r1, [r7, #20]
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff fd00 	bl	8004e66 <get_fat>
 8005466:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d101      	bne.n	8005474 <dir_sdi+0x88>
 8005470:	2301      	movs	r3, #1
 8005472:	e032      	b.n	80054da <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d904      	bls.n	8005484 <dir_sdi+0x98>
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	d301      	bcc.n	8005488 <dir_sdi+0x9c>
 8005484:	2302      	movs	r3, #2
 8005486:	e028      	b.n	80054da <dir_sdi+0xee>
			ofs -= csz;
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	429a      	cmp	r2, r3
 8005496:	d2e1      	bcs.n	800545c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005498:	6979      	ldr	r1, [r7, #20]
 800549a:	6938      	ldr	r0, [r7, #16]
 800549c:	f7ff fcc4 	bl	8004e28 <clust2sect>
 80054a0:	4602      	mov	r2, r0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <dir_sdi+0xcc>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e010      	b.n	80054da <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	0a5b      	lsrs	r3, r3, #9
 80054c0:	441a      	add	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d2:	441a      	add	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b086      	sub	sp, #24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	3320      	adds	r3, #32
 80054f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <dir_next+0x28>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005508:	d301      	bcc.n	800550e <dir_next+0x2c>
 800550a:	2304      	movs	r3, #4
 800550c:	e0aa      	b.n	8005664 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005514:	2b00      	cmp	r3, #0
 8005516:	f040 8098 	bne.w	800564a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	8912      	ldrh	r2, [r2, #8]
 8005534:	4293      	cmp	r3, r2
 8005536:	f0c0 8088 	bcc.w	800564a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	61da      	str	r2, [r3, #28]
 8005540:	2304      	movs	r3, #4
 8005542:	e08f      	b.n	8005664 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	0a5b      	lsrs	r3, r3, #9
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	8952      	ldrh	r2, [r2, #10]
 800554c:	3a01      	subs	r2, #1
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d17a      	bne.n	800564a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f7ff fc82 	bl	8004e66 <get_fat>
 8005562:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d801      	bhi.n	800556e <dir_next+0x8c>
 800556a:	2302      	movs	r3, #2
 800556c:	e07a      	b.n	8005664 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d101      	bne.n	800557a <dir_next+0x98>
 8005576:	2301      	movs	r3, #1
 8005578:	e074      	b.n	8005664 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	429a      	cmp	r2, r3
 8005582:	d358      	bcc.n	8005636 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d104      	bne.n	8005594 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	61da      	str	r2, [r3, #28]
 8005590:	2304      	movs	r3, #4
 8005592:	e067      	b.n	8005664 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f7ff fe59 	bl	8005254 <create_chain>
 80055a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <dir_next+0xcc>
 80055aa:	2307      	movs	r3, #7
 80055ac:	e05a      	b.n	8005664 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <dir_next+0xd6>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e055      	b.n	8005664 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d101      	bne.n	80055c4 <dir_next+0xe2>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e04f      	b.n	8005664 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff fb4f 	bl	8004c68 <sync_window>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <dir_next+0xf2>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e047      	b.n	8005664 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3330      	adds	r3, #48	; 0x30
 80055d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff f979 	bl	80048d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f7ff fc1c 	bl	8004e28 <clust2sect>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80055f6:	e012      	b.n	800561e <dir_next+0x13c>
						fs->wflag = 1;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff fb32 	bl	8004c68 <sync_window>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <dir_next+0x12c>
 800560a:	2301      	movs	r3, #1
 800560c:	e02a      	b.n	8005664 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	3301      	adds	r3, #1
 8005612:	613b      	str	r3, [r7, #16]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	62da      	str	r2, [r3, #44]	; 0x2c
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	895b      	ldrh	r3, [r3, #10]
 8005622:	461a      	mov	r2, r3
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4293      	cmp	r3, r2
 8005628:	d3e6      	bcc.n	80055f8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad2      	subs	r2, r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800563c:	6979      	ldr	r1, [r7, #20]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff fbf2 	bl	8004e28 <clust2sect>
 8005644:	4602      	mov	r2, r0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565c:	441a      	add	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800567c:	2100      	movs	r1, #0
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff feb4 	bl	80053ec <dir_sdi>
 8005684:	4603      	mov	r3, r0
 8005686:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005688:	7dfb      	ldrb	r3, [r7, #23]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d12b      	bne.n	80056e6 <dir_alloc+0x7a>
		n = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	4619      	mov	r1, r3
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff fb29 	bl	8004cf0 <move_window>
 800569e:	4603      	mov	r3, r0
 80056a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11d      	bne.n	80056e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2be5      	cmp	r3, #229	; 0xe5
 80056b0:	d004      	beq.n	80056bc <dir_alloc+0x50>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d107      	bne.n	80056cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	3301      	adds	r3, #1
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d102      	bne.n	80056d0 <dir_alloc+0x64>
 80056ca:	e00c      	b.n	80056e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80056d0:	2101      	movs	r1, #1
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff ff05 	bl	80054e2 <dir_next>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0d7      	beq.n	8005692 <dir_alloc+0x26>
 80056e2:	e000      	b.n	80056e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80056e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d101      	bne.n	80056f0 <dir_alloc+0x84>
 80056ec:	2307      	movs	r3, #7
 80056ee:	75fb      	strb	r3, [r7, #23]
	return res;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	331a      	adds	r3, #26
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff f841 	bl	8004790 <ld_word>
 800570e:	4603      	mov	r3, r0
 8005710:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d109      	bne.n	800572e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	3314      	adds	r3, #20
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff f836 	bl	8004790 <ld_word>
 8005724:	4603      	mov	r3, r0
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800572e:	68fb      	ldr	r3, [r7, #12]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	331a      	adds	r3, #26
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	b292      	uxth	r2, r2
 800574c:	4611      	mov	r1, r2
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff f859 	bl	8004806 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b03      	cmp	r3, #3
 800575a:	d109      	bne.n	8005770 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f103 0214 	add.w	r2, r3, #20
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	b29b      	uxth	r3, r3
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f7ff f84b 	bl	8004806 <st_word>
	}
}
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005786:	2100      	movs	r1, #0
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fe2f 	bl	80053ec <dir_sdi>
 800578e:	4603      	mov	r3, r0
 8005790:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <dir_find+0x24>
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	e03e      	b.n	800581a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	4619      	mov	r1, r3
 80057a2:	6938      	ldr	r0, [r7, #16]
 80057a4:	f7ff faa4 	bl	8004cf0 <move_window>
 80057a8:	4603      	mov	r3, r0
 80057aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d12f      	bne.n	8005812 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <dir_find+0x4e>
 80057c0:	2304      	movs	r3, #4
 80057c2:	75fb      	strb	r3, [r7, #23]
 80057c4:	e028      	b.n	8005818 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	330b      	adds	r3, #11
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	330b      	adds	r3, #11
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <dir_find+0x86>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a18      	ldr	r0, [r3, #32]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3324      	adds	r3, #36	; 0x24
 80057f0:	220b      	movs	r2, #11
 80057f2:	4619      	mov	r1, r3
 80057f4:	f7ff f88a 	bl	800490c <mem_cmp>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80057fe:	2100      	movs	r1, #0
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fe6e 	bl	80054e2 <dir_next>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0c5      	beq.n	800579c <dir_find+0x24>
 8005810:	e002      	b.n	8005818 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005816:	bf00      	nop

	return res;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005830:	2101      	movs	r1, #1
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff ff1a 	bl	800566c <dir_alloc>
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d11c      	bne.n	800587c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	4619      	mov	r1, r3
 8005848:	68b8      	ldr	r0, [r7, #8]
 800584a:	f7ff fa51 	bl	8004cf0 <move_window>
 800584e:	4603      	mov	r3, r0
 8005850:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d111      	bne.n	800587c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	2220      	movs	r2, #32
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff f838 	bl	80048d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a18      	ldr	r0, [r3, #32]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3324      	adds	r3, #36	; 0x24
 800586e:	220b      	movs	r2, #11
 8005870:	4619      	mov	r1, r3
 8005872:	f7ff f80f 	bl	8004894 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2201      	movs	r2, #1
 800587a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3324      	adds	r3, #36	; 0x24
 800589c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800589e:	220b      	movs	r2, #11
 80058a0:	2120      	movs	r1, #32
 80058a2:	68b8      	ldr	r0, [r7, #8]
 80058a4:	f7ff f817 	bl	80048d6 <mem_set>
	si = i = 0; ni = 8;
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	2308      	movs	r3, #8
 80058b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	61fa      	str	r2, [r7, #28]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80058c2:	7efb      	ldrb	r3, [r7, #27]
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d94e      	bls.n	8005966 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80058c8:	7efb      	ldrb	r3, [r7, #27]
 80058ca:	2b2f      	cmp	r3, #47	; 0x2f
 80058cc:	d006      	beq.n	80058dc <create_name+0x54>
 80058ce:	7efb      	ldrb	r3, [r7, #27]
 80058d0:	2b5c      	cmp	r3, #92	; 0x5c
 80058d2:	d110      	bne.n	80058f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80058d4:	e002      	b.n	80058dc <create_name+0x54>
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	3301      	adds	r3, #1
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b2f      	cmp	r3, #47	; 0x2f
 80058e6:	d0f6      	beq.n	80058d6 <create_name+0x4e>
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b5c      	cmp	r3, #92	; 0x5c
 80058f2:	d0f0      	beq.n	80058d6 <create_name+0x4e>
			break;
 80058f4:	e038      	b.n	8005968 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80058f6:	7efb      	ldrb	r3, [r7, #27]
 80058f8:	2b2e      	cmp	r3, #46	; 0x2e
 80058fa:	d003      	beq.n	8005904 <create_name+0x7c>
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	429a      	cmp	r2, r3
 8005902:	d30c      	bcc.n	800591e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b0b      	cmp	r3, #11
 8005908:	d002      	beq.n	8005910 <create_name+0x88>
 800590a:	7efb      	ldrb	r3, [r7, #27]
 800590c:	2b2e      	cmp	r3, #46	; 0x2e
 800590e:	d001      	beq.n	8005914 <create_name+0x8c>
 8005910:	2306      	movs	r3, #6
 8005912:	e044      	b.n	800599e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005914:	2308      	movs	r3, #8
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	230b      	movs	r3, #11
 800591a:	617b      	str	r3, [r7, #20]
			continue;
 800591c:	e022      	b.n	8005964 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800591e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005922:	2b00      	cmp	r3, #0
 8005924:	da04      	bge.n	8005930 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005926:	7efb      	ldrb	r3, [r7, #27]
 8005928:	3b80      	subs	r3, #128	; 0x80
 800592a:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <create_name+0x120>)
 800592c:	5cd3      	ldrb	r3, [r2, r3]
 800592e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005930:	7efb      	ldrb	r3, [r7, #27]
 8005932:	4619      	mov	r1, r3
 8005934:	481d      	ldr	r0, [pc, #116]	; (80059ac <create_name+0x124>)
 8005936:	f7ff f810 	bl	800495a <chk_chr>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <create_name+0xbc>
 8005940:	2306      	movs	r3, #6
 8005942:	e02c      	b.n	800599e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005944:	7efb      	ldrb	r3, [r7, #27]
 8005946:	2b60      	cmp	r3, #96	; 0x60
 8005948:	d905      	bls.n	8005956 <create_name+0xce>
 800594a:	7efb      	ldrb	r3, [r7, #27]
 800594c:	2b7a      	cmp	r3, #122	; 0x7a
 800594e:	d802      	bhi.n	8005956 <create_name+0xce>
 8005950:	7efb      	ldrb	r3, [r7, #27]
 8005952:	3b20      	subs	r3, #32
 8005954:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	613a      	str	r2, [r7, #16]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	4413      	add	r3, r2
 8005960:	7efa      	ldrb	r2, [r7, #27]
 8005962:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005964:	e7a6      	b.n	80058b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005966:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	441a      	add	r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <create_name+0xf4>
 8005978:	2306      	movs	r3, #6
 800597a:	e010      	b.n	800599e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2be5      	cmp	r3, #229	; 0xe5
 8005982:	d102      	bne.n	800598a <create_name+0x102>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2205      	movs	r2, #5
 8005988:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800598a:	7efb      	ldrb	r3, [r7, #27]
 800598c:	2b20      	cmp	r3, #32
 800598e:	d801      	bhi.n	8005994 <create_name+0x10c>
 8005990:	2204      	movs	r2, #4
 8005992:	e000      	b.n	8005996 <create_name+0x10e>
 8005994:	2200      	movs	r2, #0
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	330b      	adds	r3, #11
 800599a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800599c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	08007338 	.word	0x08007338
 80059ac:	080072c8 	.word	0x080072c8

080059b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80059c4:	e002      	b.n	80059cc <follow_path+0x1c>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b2f      	cmp	r3, #47	; 0x2f
 80059d2:	d0f8      	beq.n	80059c6 <follow_path+0x16>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b5c      	cmp	r3, #92	; 0x5c
 80059da:	d0f4      	beq.n	80059c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2200      	movs	r2, #0
 80059e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b1f      	cmp	r3, #31
 80059e8:	d80a      	bhi.n	8005a00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80059f2:	2100      	movs	r1, #0
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff fcf9 	bl	80053ec <dir_sdi>
 80059fa:	4603      	mov	r3, r0
 80059fc:	75fb      	strb	r3, [r7, #23]
 80059fe:	e043      	b.n	8005a88 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a00:	463b      	mov	r3, r7
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff ff3f 	bl	8005888 <create_name>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d134      	bne.n	8005a7e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff feaf 	bl	8005778 <dir_find>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005a24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d127      	bne.n	8005a82 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005a32:	7afb      	ldrb	r3, [r7, #11]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d122      	bne.n	8005a82 <follow_path+0xd2>
 8005a3c:	2305      	movs	r3, #5
 8005a3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005a40:	e01f      	b.n	8005a82 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a42:	7afb      	ldrb	r3, [r7, #11]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11c      	bne.n	8005a86 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	799b      	ldrb	r3, [r3, #6]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005a58:	2305      	movs	r3, #5
 8005a5a:	75fb      	strb	r3, [r7, #23]
 8005a5c:	e014      	b.n	8005a88 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6c:	4413      	add	r3, r2
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff fe42 	bl	80056fa <ld_clust>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a7c:	e7c0      	b.n	8005a00 <follow_path+0x50>
			if (res != FR_OK) break;
 8005a7e:	bf00      	nop
 8005a80:	e002      	b.n	8005a88 <follow_path+0xd8>
				break;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a86:	bf00      	nop
			}
		}
	}

	return res;
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b087      	sub	sp, #28
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d031      	beq.n	8005b0c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e002      	b.n	8005ab6 <get_ldnumber+0x24>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d903      	bls.n	8005ac6 <get_ldnumber+0x34>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b3a      	cmp	r3, #58	; 0x3a
 8005ac4:	d1f4      	bne.n	8005ab0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b3a      	cmp	r3, #58	; 0x3a
 8005acc:	d11c      	bne.n	8005b08 <get_ldnumber+0x76>
			tp = *path;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	60fa      	str	r2, [r7, #12]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	3b30      	subs	r3, #48	; 0x30
 8005ade:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b09      	cmp	r3, #9
 8005ae4:	d80e      	bhi.n	8005b04 <get_ldnumber+0x72>
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d10a      	bne.n	8005b04 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <get_ldnumber+0x72>
					vol = (int)i;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	3301      	adds	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	e002      	b.n	8005b0e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005b08:	2300      	movs	r3, #0
 8005b0a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005b0c:	693b      	ldr	r3, [r7, #16]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	70da      	strb	r2, [r3, #3]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff f8da 	bl	8004cf0 <move_window>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <check_fs+0x2a>
 8005b42:	2304      	movs	r3, #4
 8005b44:	e038      	b.n	8005bb8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3330      	adds	r3, #48	; 0x30
 8005b4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fe1e 	bl	8004790 <ld_word>
 8005b54:	4603      	mov	r3, r0
 8005b56:	461a      	mov	r2, r3
 8005b58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <check_fs+0x48>
 8005b60:	2303      	movs	r3, #3
 8005b62:	e029      	b.n	8005bb8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b6a:	2be9      	cmp	r3, #233	; 0xe9
 8005b6c:	d009      	beq.n	8005b82 <check_fs+0x66>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b74:	2beb      	cmp	r3, #235	; 0xeb
 8005b76:	d11e      	bne.n	8005bb6 <check_fs+0x9a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b7e:	2b90      	cmp	r3, #144	; 0x90
 8005b80:	d119      	bne.n	8005bb6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3330      	adds	r3, #48	; 0x30
 8005b86:	3336      	adds	r3, #54	; 0x36
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe fe19 	bl	80047c0 <ld_dword>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b94:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <check_fs+0xa4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <check_fs+0x82>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e00c      	b.n	8005bb8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3330      	adds	r3, #48	; 0x30
 8005ba2:	3352      	adds	r3, #82	; 0x52
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fe0b 	bl	80047c0 <ld_dword>
 8005baa:	4603      	mov	r3, r0
 8005bac:	4a05      	ldr	r2, [pc, #20]	; (8005bc4 <check_fs+0xa8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d101      	bne.n	8005bb6 <check_fs+0x9a>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e000      	b.n	8005bb8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005bb6:	2302      	movs	r3, #2
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	00544146 	.word	0x00544146
 8005bc4:	33544146 	.word	0x33544146

08005bc8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b096      	sub	sp, #88	; 0x58
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f7ff ff58 	bl	8005a92 <get_ldnumber>
 8005be2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da01      	bge.n	8005bee <find_volume+0x26>
 8005bea:	230b      	movs	r3, #11
 8005bec:	e22d      	b.n	800604a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005bee:	4aa1      	ldr	r2, [pc, #644]	; (8005e74 <find_volume+0x2ac>)
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <find_volume+0x3a>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	e223      	b.n	800604a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01a      	beq.n	8005c4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fd19 	bl	8004654 <disk_status>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005c28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10c      	bne.n	8005c4e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <find_volume+0x82>
 8005c3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005c46:	230a      	movs	r3, #10
 8005c48:	e1ff      	b.n	800604a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e1fd      	b.n	800604a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fd11 	bl	8004688 <disk_initialize>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e1e6      	b.n	800604a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <find_volume+0xca>
 8005c82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005c8e:	230a      	movs	r3, #10
 8005c90:	e1db      	b.n	800604a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005c96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c9a:	f7ff ff3f 	bl	8005b1c <check_fs>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d149      	bne.n	8005d40 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005cac:	2300      	movs	r3, #0
 8005cae:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb0:	e01e      	b.n	8005cf0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005cc0:	4413      	add	r3, r2
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d006      	beq.n	8005cdc <find_volume+0x114>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe fd74 	bl	80047c0 <ld_dword>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	e000      	b.n	8005cde <find_volume+0x116>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	3358      	adds	r3, #88	; 0x58
 8005ce4:	443b      	add	r3, r7
 8005ce6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cec:	3301      	adds	r3, #1
 8005cee:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d9dd      	bls.n	8005cb2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <find_volume+0x13e>
 8005d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d02:	3b01      	subs	r3, #1
 8005d04:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	3358      	adds	r3, #88	; 0x58
 8005d0c:	443b      	add	r3, r7
 8005d0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005d12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <find_volume+0x15e>
 8005d1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d1e:	f7ff fefd 	bl	8005b1c <check_fs>
 8005d22:	4603      	mov	r3, r0
 8005d24:	e000      	b.n	8005d28 <find_volume+0x160>
 8005d26:	2303      	movs	r3, #3
 8005d28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d905      	bls.n	8005d40 <find_volume+0x178>
 8005d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d36:	3301      	adds	r3, #1
 8005d38:	643b      	str	r3, [r7, #64]	; 0x40
 8005d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d9e2      	bls.n	8005d06 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d101      	bne.n	8005d4c <find_volume+0x184>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e17e      	b.n	800604a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d901      	bls.n	8005d58 <find_volume+0x190>
 8005d54:	230d      	movs	r3, #13
 8005d56:	e178      	b.n	800604a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	3330      	adds	r3, #48	; 0x30
 8005d5c:	330b      	adds	r3, #11
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fd16 	bl	8004790 <ld_word>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d6a:	d001      	beq.n	8005d70 <find_volume+0x1a8>
 8005d6c:	230d      	movs	r3, #13
 8005d6e:	e16c      	b.n	800604a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	3330      	adds	r3, #48	; 0x30
 8005d74:	3316      	adds	r3, #22
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fd0a 	bl	8004790 <ld_word>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <find_volume+0x1cc>
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d88:	3330      	adds	r3, #48	; 0x30
 8005d8a:	3324      	adds	r3, #36	; 0x24
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe fd17 	bl	80047c0 <ld_dword>
 8005d92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d98:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	789b      	ldrb	r3, [r3, #2]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d005      	beq.n	8005db8 <find_volume+0x1f0>
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	789b      	ldrb	r3, [r3, #2]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d001      	beq.n	8005db8 <find_volume+0x1f0>
 8005db4:	230d      	movs	r3, #13
 8005db6:	e148      	b.n	800604a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	789b      	ldrb	r3, [r3, #2]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	895b      	ldrh	r3, [r3, #10]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d008      	beq.n	8005dec <find_volume+0x224>
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	895b      	ldrh	r3, [r3, #10]
 8005dde:	461a      	mov	r2, r3
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	895b      	ldrh	r3, [r3, #10]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	4013      	ands	r3, r2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <find_volume+0x228>
 8005dec:	230d      	movs	r3, #13
 8005dee:	e12c      	b.n	800604a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	3330      	adds	r3, #48	; 0x30
 8005df4:	3311      	adds	r3, #17
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fcca 	bl	8004790 <ld_word>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	891b      	ldrh	r3, [r3, #8]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <find_volume+0x24e>
 8005e12:	230d      	movs	r3, #13
 8005e14:	e119      	b.n	800604a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	3330      	adds	r3, #48	; 0x30
 8005e1a:	3313      	adds	r3, #19
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe fcb7 	bl	8004790 <ld_word>
 8005e22:	4603      	mov	r3, r0
 8005e24:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <find_volume+0x272>
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	3330      	adds	r3, #48	; 0x30
 8005e30:	3320      	adds	r3, #32
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fcc4 	bl	80047c0 <ld_dword>
 8005e38:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	3330      	adds	r3, #48	; 0x30
 8005e3e:	330e      	adds	r3, #14
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fca5 	bl	8004790 <ld_word>
 8005e46:	4603      	mov	r3, r0
 8005e48:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005e4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <find_volume+0x28c>
 8005e50:	230d      	movs	r3, #13
 8005e52:	e0fa      	b.n	800604a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005e54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e58:	4413      	add	r3, r2
 8005e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e5c:	8912      	ldrh	r2, [r2, #8]
 8005e5e:	0912      	lsrs	r2, r2, #4
 8005e60:	b292      	uxth	r2, r2
 8005e62:	4413      	add	r3, r2
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d204      	bcs.n	8005e78 <find_volume+0x2b0>
 8005e6e:	230d      	movs	r3, #13
 8005e70:	e0eb      	b.n	800604a <find_volume+0x482>
 8005e72:	bf00      	nop
 8005e74:	200005d8 	.word	0x200005d8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e80:	8952      	ldrh	r2, [r2, #10]
 8005e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <find_volume+0x2ca>
 8005e8e:	230d      	movs	r3, #13
 8005e90:	e0db      	b.n	800604a <find_volume+0x482>
		fmt = FS_FAT32;
 8005e92:	2303      	movs	r3, #3
 8005e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d802      	bhi.n	8005ea8 <find_volume+0x2e0>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d802      	bhi.n	8005eb8 <find_volume+0x2f0>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	1c9a      	adds	r2, r3, #2
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ec4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005ec6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eca:	441a      	add	r2, r3
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005ed0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	441a      	add	r2, r3
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005eda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d11e      	bne.n	8005f20 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	3330      	adds	r3, #48	; 0x30
 8005ee6:	332a      	adds	r3, #42	; 0x2a
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fc51 	bl	8004790 <ld_word>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <find_volume+0x330>
 8005ef4:	230d      	movs	r3, #13
 8005ef6:	e0a8      	b.n	800604a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	891b      	ldrh	r3, [r3, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <find_volume+0x33c>
 8005f00:	230d      	movs	r3, #13
 8005f02:	e0a2      	b.n	800604a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	3330      	adds	r3, #48	; 0x30
 8005f08:	332c      	adds	r3, #44	; 0x2c
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe fc58 	bl	80047c0 <ld_dword>
 8005f10:	4602      	mov	r2, r0
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1e:	e01f      	b.n	8005f60 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	891b      	ldrh	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <find_volume+0x364>
 8005f28:	230d      	movs	r3, #13
 8005f2a:	e08e      	b.n	800604a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	6a1a      	ldr	r2, [r3, #32]
 8005f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f32:	441a      	add	r2, r3
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d103      	bne.n	8005f48 <find_volume+0x380>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	e00a      	b.n	8005f5e <find_volume+0x396>
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4413      	add	r3, r2
 8005f52:	085a      	lsrs	r2, r3, #1
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005f5e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f66:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005f6a:	0a5b      	lsrs	r3, r3, #9
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d201      	bcs.n	8005f74 <find_volume+0x3ac>
 8005f70:	230d      	movs	r3, #13
 8005f72:	e06a      	b.n	800604a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7a:	611a      	str	r2, [r3, #16]
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	2280      	movs	r2, #128	; 0x80
 8005f88:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d149      	bne.n	8006026 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	3330      	adds	r3, #48	; 0x30
 8005f96:	3330      	adds	r3, #48	; 0x30
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fbf9 	bl	8004790 <ld_word>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d140      	bne.n	8006026 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fac:	f7fe fea0 	bl	8004cf0 <move_window>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d137      	bne.n	8006026 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	2200      	movs	r2, #0
 8005fba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	3330      	adds	r3, #48	; 0x30
 8005fc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fbe3 	bl	8004790 <ld_word>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d127      	bne.n	8006026 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	3330      	adds	r3, #48	; 0x30
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe fbf0 	bl	80047c0 <ld_dword>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <find_volume+0x48c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d11e      	bne.n	8006026 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	3330      	adds	r3, #48	; 0x30
 8005fec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe fbe5 	bl	80047c0 <ld_dword>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4a17      	ldr	r2, [pc, #92]	; (8006058 <find_volume+0x490>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d113      	bne.n	8006026 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	3330      	adds	r3, #48	; 0x30
 8006002:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe fbda 	bl	80047c0 <ld_dword>
 800600c:	4602      	mov	r2, r0
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	3330      	adds	r3, #48	; 0x30
 8006016:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe fbd0 	bl	80047c0 <ld_dword>
 8006020:	4602      	mov	r2, r0
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800602c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800602e:	4b0b      	ldr	r3, [pc, #44]	; (800605c <find_volume+0x494>)
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <find_volume+0x494>)
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	4b08      	ldr	r3, [pc, #32]	; (800605c <find_volume+0x494>)
 800603c:	881a      	ldrh	r2, [r3, #0]
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006042:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006044:	f7fe fdec 	bl	8004c20 <clear_lock>
#endif
	return FR_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3758      	adds	r7, #88	; 0x58
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	41615252 	.word	0x41615252
 8006058:	61417272 	.word	0x61417272
 800605c:	200005dc 	.word	0x200005dc

08006060 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800606a:	2309      	movs	r3, #9
 800606c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01c      	beq.n	80060ae <validate+0x4e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d018      	beq.n	80060ae <validate+0x4e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d013      	beq.n	80060ae <validate+0x4e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	889a      	ldrh	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	88db      	ldrh	r3, [r3, #6]
 8006090:	429a      	cmp	r2, r3
 8006092:	d10c      	bne.n	80060ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	785b      	ldrb	r3, [r3, #1]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fada 	bl	8004654 <disk_status>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <validate+0x4e>
			res = FR_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <validate+0x5a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	e000      	b.n	80060bc <validate+0x5c>
 80060ba:	2300      	movs	r3, #0
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	6013      	str	r3, [r2, #0]
	return res;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80060de:	f107 0310 	add.w	r3, r7, #16
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fcd5 	bl	8005a92 <get_ldnumber>
 80060e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	da01      	bge.n	80060f4 <f_mount+0x28>
 80060f0:	230b      	movs	r3, #11
 80060f2:	e02b      	b.n	800614c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80060f4:	4a17      	ldr	r2, [pc, #92]	; (8006154 <f_mount+0x88>)
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006104:	69b8      	ldr	r0, [r7, #24]
 8006106:	f7fe fd8b 	bl	8004c20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	490d      	ldr	r1, [pc, #52]	; (8006154 <f_mount+0x88>)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <f_mount+0x66>
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d001      	beq.n	8006136 <f_mount+0x6a>
 8006132:	2300      	movs	r3, #0
 8006134:	e00a      	b.n	800614c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006136:	f107 010c 	add.w	r1, r7, #12
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	2200      	movs	r2, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fd41 	bl	8005bc8 <find_volume>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800614a:	7dfb      	ldrb	r3, [r7, #23]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200005d8 	.word	0x200005d8

08006158 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b098      	sub	sp, #96	; 0x60
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	4613      	mov	r3, r2
 8006164:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <f_open+0x18>
 800616c:	2309      	movs	r3, #9
 800616e:	e1ad      	b.n	80064cc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006176:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006178:	79fa      	ldrb	r2, [r7, #7]
 800617a:	f107 0110 	add.w	r1, r7, #16
 800617e:	f107 0308 	add.w	r3, r7, #8
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fd20 	bl	8005bc8 <find_volume>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800618e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006192:	2b00      	cmp	r3, #0
 8006194:	f040 8191 	bne.w	80064ba <f_open+0x362>
		dj.obj.fs = fs;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	f107 0314 	add.w	r3, r7, #20
 80061a2:	4611      	mov	r1, r2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fc03 	bl	80059b0 <follow_path>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80061b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d11a      	bne.n	80061ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80061b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061bc:	b25b      	sxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	da03      	bge.n	80061ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80061c2:	2306      	movs	r3, #6
 80061c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80061c8:	e011      	b.n	80061ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	461a      	mov	r2, r3
 80061dc:	f107 0314 	add.w	r3, r7, #20
 80061e0:	4611      	mov	r1, r2
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe fbd4 	bl	8004990 <chk_lock>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	f003 031c 	and.w	r3, r3, #28
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d07f      	beq.n	80062f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80061f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006204:	2b04      	cmp	r3, #4
 8006206:	d10e      	bne.n	8006226 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006208:	f7fe fc1e 	bl	8004a48 <enq_lock>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d006      	beq.n	8006220 <f_open+0xc8>
 8006212:	f107 0314 	add.w	r3, r7, #20
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fb03 	bl	8005822 <dir_register>
 800621c:	4603      	mov	r3, r0
 800621e:	e000      	b.n	8006222 <f_open+0xca>
 8006220:	2312      	movs	r3, #18
 8006222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	f043 0308 	orr.w	r3, r3, #8
 800622c:	71fb      	strb	r3, [r7, #7]
 800622e:	e010      	b.n	8006252 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006230:	7ebb      	ldrb	r3, [r7, #26]
 8006232:	f003 0311 	and.w	r3, r3, #17
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <f_open+0xea>
					res = FR_DENIED;
 800623a:	2307      	movs	r3, #7
 800623c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006240:	e007      	b.n	8006252 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <f_open+0xfa>
 800624c:	2308      	movs	r3, #8
 800624e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006252:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006256:	2b00      	cmp	r3, #0
 8006258:	d168      	bne.n	800632c <f_open+0x1d4>
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d063      	beq.n	800632c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006264:	f7fe f84a 	bl	80042fc <get_fattime>
 8006268:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	330e      	adds	r3, #14
 800626e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006270:	4618      	mov	r0, r3
 8006272:	f7fe fae3 	bl	800483c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	3316      	adds	r3, #22
 800627a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800627c:	4618      	mov	r0, r3
 800627e:	f7fe fadd 	bl	800483c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	330b      	adds	r3, #11
 8006286:	2220      	movs	r2, #32
 8006288:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800628e:	4611      	mov	r1, r2
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fa32 	bl	80056fa <ld_clust>
 8006296:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800629c:	2200      	movs	r2, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff fa4a 	bl	8005738 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	331c      	adds	r3, #28
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe fac6 	bl	800483c <st_dword>
					fs->wflag = 1;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2201      	movs	r2, #1
 80062b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80062b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d037      	beq.n	800632c <f_open+0x1d4>
						dw = fs->winsect;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80062c2:	f107 0314 	add.w	r3, r7, #20
 80062c6:	2200      	movs	r2, #0
 80062c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe ff5d 	bl	800518a <remove_chain>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80062d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d126      	bne.n	800632c <f_open+0x1d4>
							res = move_window(fs, dw);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fd04 	bl	8004cf0 <move_window>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062f2:	3a01      	subs	r2, #1
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	e019      	b.n	800632c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80062f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d115      	bne.n	800632c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006300:	7ebb      	ldrb	r3, [r7, #26]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <f_open+0x1ba>
					res = FR_NO_FILE;
 800630a:	2304      	movs	r3, #4
 800630c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006310:	e00c      	b.n	800632c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <f_open+0x1d4>
 800631c:	7ebb      	ldrb	r3, [r7, #26]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <f_open+0x1d4>
						res = FR_DENIED;
 8006326:	2307      	movs	r3, #7
 8006328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800632c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006330:	2b00      	cmp	r3, #0
 8006332:	d128      	bne.n	8006386 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006344:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800634e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	bf14      	ite	ne
 800635e:	2301      	movne	r3, #1
 8006360:	2300      	moveq	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	f107 0314 	add.w	r3, r7, #20
 800636a:	4611      	mov	r1, r2
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fb8d 	bl	8004a8c <inc_lock>
 8006372:	4602      	mov	r2, r0
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <f_open+0x22e>
 8006380:	2302      	movs	r3, #2
 8006382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800638a:	2b00      	cmp	r3, #0
 800638c:	f040 8095 	bne.w	80064ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006394:	4611      	mov	r1, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff f9af 	bl	80056fa <ld_clust>
 800639c:	4602      	mov	r2, r0
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	331c      	adds	r3, #28
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fa0a 	bl	80047c0 <ld_dword>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	88da      	ldrh	r2, [r3, #6]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	79fa      	ldrb	r2, [r7, #7]
 80063ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3330      	adds	r3, #48	; 0x30
 80063e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e6:	2100      	movs	r1, #0
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fe fa74 	bl	80048d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d060      	beq.n	80064ba <f_open+0x362>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d05c      	beq.n	80064ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	895b      	ldrh	r3, [r3, #10]
 800640c:	025b      	lsls	r3, r3, #9
 800640e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	657b      	str	r3, [r7, #84]	; 0x54
 800641c:	e016      	b.n	800644c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fd1f 	bl	8004e66 <get_fat>
 8006428:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800642a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800642c:	2b01      	cmp	r3, #1
 800642e:	d802      	bhi.n	8006436 <f_open+0x2de>
 8006430:	2302      	movs	r3, #2
 8006432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d102      	bne.n	8006444 <f_open+0x2ec>
 800643e:	2301      	movs	r3, #1
 8006440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006444:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	657b      	str	r3, [r7, #84]	; 0x54
 800644c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <f_open+0x304>
 8006454:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006458:	429a      	cmp	r2, r3
 800645a:	d8e0      	bhi.n	800641e <f_open+0x2c6>
				}
				fp->clust = clst;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006460:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006466:	2b00      	cmp	r3, #0
 8006468:	d127      	bne.n	80064ba <f_open+0x362>
 800646a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006470:	2b00      	cmp	r3, #0
 8006472:	d022      	beq.n	80064ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe fcd5 	bl	8004e28 <clust2sect>
 800647e:	6478      	str	r0, [r7, #68]	; 0x44
 8006480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <f_open+0x336>
						res = FR_INT_ERR;
 8006486:	2302      	movs	r3, #2
 8006488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800648c:	e015      	b.n	80064ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800648e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006490:	0a5a      	lsrs	r2, r3, #9
 8006492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006494:	441a      	add	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	7858      	ldrb	r0, [r3, #1]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1a      	ldr	r2, [r3, #32]
 80064a8:	2301      	movs	r3, #1
 80064aa:	f7fe f913 	bl	80046d4 <disk_read>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <f_open+0x362>
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80064ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <f_open+0x370>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80064c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3760      	adds	r7, #96	; 0x60
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08c      	sub	sp, #48	; 0x30
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f107 0210 	add.w	r2, r7, #16
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fdb3 	bl	8006060 <validate>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006504:	2b00      	cmp	r3, #0
 8006506:	d107      	bne.n	8006518 <f_write+0x44>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	7d5b      	ldrb	r3, [r3, #21]
 800650c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <f_write+0x4a>
 8006518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800651c:	e14b      	b.n	80067b6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	7d1b      	ldrb	r3, [r3, #20]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <f_write+0x5a>
 800652a:	2307      	movs	r3, #7
 800652c:	e143      	b.n	80067b6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	441a      	add	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	429a      	cmp	r2, r3
 800653c:	f080 812d 	bcs.w	800679a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	43db      	mvns	r3, r3
 8006546:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006548:	e127      	b.n	800679a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006552:	2b00      	cmp	r3, #0
 8006554:	f040 80e3 	bne.w	800671e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	0a5b      	lsrs	r3, r3, #9
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	8952      	ldrh	r2, [r2, #10]
 8006562:	3a01      	subs	r2, #1
 8006564:	4013      	ands	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d143      	bne.n	80065f6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10c      	bne.n	8006590 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	2b00      	cmp	r3, #0
 8006580:	d11a      	bne.n	80065b8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2100      	movs	r1, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe fe64 	bl	8005254 <create_chain>
 800658c:	62b8      	str	r0, [r7, #40]	; 0x28
 800658e:	e013      	b.n	80065b8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	4619      	mov	r1, r3
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f7fe fef0 	bl	8005384 <clmt_clust>
 80065a4:	62b8      	str	r0, [r7, #40]	; 0x28
 80065a6:	e007      	b.n	80065b8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f7fe fe4f 	bl	8005254 <create_chain>
 80065b6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 80f2 	beq.w	80067a4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d104      	bne.n	80065d0 <f_write+0xfc>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2202      	movs	r2, #2
 80065ca:	755a      	strb	r2, [r3, #21]
 80065cc:	2302      	movs	r3, #2
 80065ce:	e0f2      	b.n	80067b6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d6:	d104      	bne.n	80065e2 <f_write+0x10e>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	755a      	strb	r2, [r3, #21]
 80065de:	2301      	movs	r3, #1
 80065e0:	e0e9      	b.n	80067b6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <f_write+0x122>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	7d1b      	ldrb	r3, [r3, #20]
 80065fa:	b25b      	sxtb	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	da18      	bge.n	8006632 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	7858      	ldrb	r0, [r3, #1]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	2301      	movs	r3, #1
 8006610:	f7fe f880 	bl	8004714 <disk_write>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <f_write+0x150>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	755a      	strb	r2, [r3, #21]
 8006620:	2301      	movs	r3, #1
 8006622:	e0c8      	b.n	80067b6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	7d1b      	ldrb	r3, [r3, #20]
 8006628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662c:	b2da      	uxtb	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f7fe fbf4 	bl	8004e28 <clust2sect>
 8006640:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <f_write+0x17e>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2202      	movs	r2, #2
 800664c:	755a      	strb	r2, [r3, #21]
 800664e:	2302      	movs	r3, #2
 8006650:	e0b1      	b.n	80067b6 <f_write+0x2e2>
			sect += csect;
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	4413      	add	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0a5b      	lsrs	r3, r3, #9
 800665e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d03c      	beq.n	80066e0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	4413      	add	r3, r2
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	8952      	ldrh	r2, [r2, #10]
 8006670:	4293      	cmp	r3, r2
 8006672:	d905      	bls.n	8006680 <f_write+0x1ac>
					cc = fs->csize - csect;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	895b      	ldrh	r3, [r3, #10]
 8006678:	461a      	mov	r2, r3
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	7858      	ldrb	r0, [r3, #1]
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	69f9      	ldr	r1, [r7, #28]
 800668a:	f7fe f843 	bl	8004714 <disk_write>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <f_write+0x1ca>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	755a      	strb	r2, [r3, #21]
 800669a:	2301      	movs	r3, #1
 800669c:	e08b      	b.n	80067b6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a1a      	ldr	r2, [r3, #32]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	6a3a      	ldr	r2, [r7, #32]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d915      	bls.n	80066d8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1a      	ldr	r2, [r3, #32]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	025b      	lsls	r3, r3, #9
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c4:	4619      	mov	r1, r3
 80066c6:	f7fe f8e5 	bl	8004894 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	7d1b      	ldrb	r3, [r3, #20]
 80066ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	025b      	lsls	r3, r3, #9
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80066de:	e03f      	b.n	8006760 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d016      	beq.n	8006718 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d210      	bcs.n	8006718 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	7858      	ldrb	r0, [r3, #1]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006700:	2301      	movs	r3, #1
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	f7fd ffe6 	bl	80046d4 <disk_read>
 8006708:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800670a:	2b00      	cmp	r3, #0
 800670c:	d004      	beq.n	8006718 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	755a      	strb	r2, [r3, #21]
 8006714:	2301      	movs	r3, #1
 8006716:	e04e      	b.n	80067b6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800672c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	429a      	cmp	r2, r3
 8006732:	d901      	bls.n	8006738 <f_write+0x264>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006746:	4413      	add	r3, r2
 8006748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674a:	69f9      	ldr	r1, [r7, #28]
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe f8a1 	bl	8004894 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	7d1b      	ldrb	r3, [r3, #20]
 8006756:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800675a:	b2da      	uxtb	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	4413      	add	r3, r2
 8006766:	61fb      	str	r3, [r7, #28]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	441a      	add	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	619a      	str	r2, [r3, #24]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	429a      	cmp	r2, r3
 800677e:	bf38      	it	cc
 8006780:	461a      	movcc	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	60da      	str	r2, [r3, #12]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	441a      	add	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f47f aed4 	bne.w	800654a <f_write+0x76>
 80067a2:	e000      	b.n	80067a6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067a4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	7d1b      	ldrb	r3, [r3, #20]
 80067aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3730      	adds	r7, #48	; 0x30
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b086      	sub	sp, #24
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f107 0208 	add.w	r2, r7, #8
 80067cc:	4611      	mov	r1, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff fc46 	bl	8006060 <validate>
 80067d4:	4603      	mov	r3, r0
 80067d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d168      	bne.n	80068b0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7d1b      	ldrb	r3, [r3, #20]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d062      	beq.n	80068b0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	7d1b      	ldrb	r3, [r3, #20]
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	da15      	bge.n	8006820 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	7858      	ldrb	r0, [r3, #1]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1a      	ldr	r2, [r3, #32]
 8006802:	2301      	movs	r3, #1
 8006804:	f7fd ff86 	bl	8004714 <disk_write>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <f_sync+0x54>
 800680e:	2301      	movs	r3, #1
 8006810:	e04f      	b.n	80068b2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	7d1b      	ldrb	r3, [r3, #20]
 8006816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681a:	b2da      	uxtb	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006820:	f7fd fd6c 	bl	80042fc <get_fattime>
 8006824:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f7fe fa5e 	bl	8004cf0 <move_window>
 8006834:	4603      	mov	r3, r0
 8006836:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d138      	bne.n	80068b0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	330b      	adds	r3, #11
 8006848:	781a      	ldrb	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	330b      	adds	r3, #11
 800684e:	f042 0220 	orr.w	r2, r2, #32
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	461a      	mov	r2, r3
 8006860:	68f9      	ldr	r1, [r7, #12]
 8006862:	f7fe ff69 	bl	8005738 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f103 021c 	add.w	r2, r3, #28
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	4619      	mov	r1, r3
 8006872:	4610      	mov	r0, r2
 8006874:	f7fd ffe2 	bl	800483c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3316      	adds	r3, #22
 800687c:	6939      	ldr	r1, [r7, #16]
 800687e:	4618      	mov	r0, r3
 8006880:	f7fd ffdc 	bl	800483c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3312      	adds	r3, #18
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f7fd ffbb 	bl	8004806 <st_word>
					fs->wflag = 1;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2201      	movs	r2, #1
 8006894:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4618      	mov	r0, r3
 800689a:	f7fe fa57 	bl	8004d4c <sync_fs>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7d1b      	ldrb	r3, [r3, #20]
 80068a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff ff7b 	bl	80067be <f_sync>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d118      	bne.n	8006904 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f107 0208 	add.w	r2, r7, #8
 80068d8:	4611      	mov	r1, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff fbc0 	bl	8006060 <validate>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10c      	bne.n	8006904 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe f95a 	bl	8004ba8 <dec_lock>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b09d      	sub	sp, #116	; 0x74
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	460b      	mov	r3, r1
 800691e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8006920:	2301      	movs	r3, #1
 8006922:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8006924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006928:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800692a:	f107 030c 	add.w	r3, r7, #12
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff f8af 	bl	8005a92 <get_ldnumber>
 8006934:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006938:	2b00      	cmp	r3, #0
 800693a:	da02      	bge.n	8006942 <f_mkfs+0x32>
 800693c:	230b      	movs	r3, #11
 800693e:	f000 bc0d 	b.w	800715c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8006942:	4a94      	ldr	r2, [pc, #592]	; (8006b94 <f_mkfs+0x284>)
 8006944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <f_mkfs+0x4a>
 800694e:	4a91      	ldr	r2, [pc, #580]	; (8006b94 <f_mkfs+0x284>)
 8006950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006956:	2200      	movs	r2, #0
 8006958:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800695a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8006960:	2300      	movs	r3, #0
 8006962:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8006966:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800696a:	4618      	mov	r0, r3
 800696c:	f7fd fe8c 	bl	8004688 <disk_initialize>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8006976:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <f_mkfs+0x76>
 8006982:	2303      	movs	r3, #3
 8006984:	e3ea      	b.n	800715c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8006986:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <f_mkfs+0x86>
 8006992:	230a      	movs	r3, #10
 8006994:	e3e2      	b.n	800715c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8006996:	f107 0214 	add.w	r2, r7, #20
 800699a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800699e:	2103      	movs	r1, #3
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fd fed7 	bl	8004754 <disk_ioctl>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10c      	bne.n	80069c6 <f_mkfs+0xb6>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <f_mkfs+0xb6>
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b8:	d805      	bhi.n	80069c6 <f_mkfs+0xb6>
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	1e5a      	subs	r2, r3, #1
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <f_mkfs+0xba>
 80069c6:	2301      	movs	r3, #1
 80069c8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80069ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ce:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <f_mkfs+0xce>
 80069d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d309      	bcc.n	80069f2 <f_mkfs+0xe2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069e4:	d805      	bhi.n	80069f2 <f_mkfs+0xe2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	1e5a      	subs	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <f_mkfs+0xe6>
 80069f2:	2313      	movs	r3, #19
 80069f4:	e3b2      	b.n	800715c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80069f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fe:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8006a04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8006a10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	fb02 f303 	mul.w	r3, r2, r3
 8006a18:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <f_mkfs+0x114>
 8006a20:	230e      	movs	r3, #14
 8006a22:	e39b      	b.n	800715c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8006a24:	f107 0210 	add.w	r2, r7, #16
 8006a28:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fd fe90 	bl	8004754 <disk_ioctl>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <f_mkfs+0x12e>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e38e      	b.n	800715c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8006a3e:	7afb      	ldrb	r3, [r7, #11]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <f_mkfs+0x13c>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e000      	b.n	8006a4e <f_mkfs+0x13e>
 8006a4c:	233f      	movs	r3, #63	; 0x3f
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d901      	bls.n	8006a5c <f_mkfs+0x14c>
 8006a58:	230e      	movs	r3, #14
 8006a5a:	e37f      	b.n	800715c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b7f      	cmp	r3, #127	; 0x7f
 8006a68:	d801      	bhi.n	8006a6e <f_mkfs+0x15e>
 8006a6a:	230e      	movs	r3, #14
 8006a6c:	e376      	b.n	800715c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b80      	cmp	r3, #128	; 0x80
 8006a72:	d901      	bls.n	8006a78 <f_mkfs+0x168>
 8006a74:	2313      	movs	r3, #19
 8006a76:	e371      	b.n	800715c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00d      	beq.n	8006a9e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8006a82:	7afb      	ldrb	r3, [r7, #11]
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d004      	beq.n	8006a96 <f_mkfs+0x186>
 8006a8c:	7afb      	ldrb	r3, [r7, #11]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8006a96:	2303      	movs	r3, #3
 8006a98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a9c:	e009      	b.n	8006ab2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <f_mkfs+0x19c>
 8006aa8:	2313      	movs	r3, #19
 8006aaa:	e357      	b.n	800715c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8006aac:	2302      	movs	r3, #2
 8006aae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8006ab6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d13c      	bne.n	8006b38 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8006abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11b      	bne.n	8006afc <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	0c5b      	lsrs	r3, r3, #17
 8006ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006aca:	2300      	movs	r3, #0
 8006acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ace:	2301      	movs	r3, #1
 8006ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad2:	e005      	b.n	8006ae0 <f_mkfs+0x1d0>
 8006ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	653b      	str	r3, [r7, #80]	; 0x50
 8006ae0:	4a2d      	ldr	r2, [pc, #180]	; (8006b98 <f_mkfs+0x288>)
 8006ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <f_mkfs+0x1ec>
 8006aec:	4a2a      	ldr	r2, [pc, #168]	; (8006b98 <f_mkfs+0x288>)
 8006aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d2eb      	bcs.n	8006ad4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	3302      	adds	r3, #2
 8006b0a:	009a      	lsls	r2, r3, #2
 8006b0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b0e:	4413      	add	r3, r2
 8006b10:	1e5a      	subs	r2, r3, #1
 8006b12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b18:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8006b1a:	2320      	movs	r3, #32
 8006b1c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8006b1e:	2300      	movs	r3, #0
 8006b20:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d903      	bls.n	8006b34 <f_mkfs+0x224>
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	4a1b      	ldr	r2, [pc, #108]	; (8006b9c <f_mkfs+0x28c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d952      	bls.n	8006bda <f_mkfs+0x2ca>
 8006b34:	230e      	movs	r3, #14
 8006b36:	e311      	b.n	800715c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8006b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11b      	bne.n	8006b76 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	0b1b      	lsrs	r3, r3, #12
 8006b42:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006b44:	2300      	movs	r3, #0
 8006b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b48:	2301      	movs	r3, #1
 8006b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b4c:	e005      	b.n	8006b5a <f_mkfs+0x24a>
 8006b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b50:	3301      	adds	r3, #1
 8006b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	653b      	str	r3, [r7, #80]	; 0x50
 8006b5a:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <f_mkfs+0x290>)
 8006b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <f_mkfs+0x266>
 8006b66:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <f_mkfs+0x290>)
 8006b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d2eb      	bcs.n	8006b4e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d90c      	bls.n	8006ba4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b92:	e012      	b.n	8006bba <f_mkfs+0x2aa>
 8006b94:	200005d8 	.word	0x200005d8
 8006b98:	080073b8 	.word	0x080073b8
 8006b9c:	0ffffff5 	.word	0x0ffffff5
 8006ba0:	080073c8 	.word	0x080073c8
				} else {
					fmt = FS_FAT12;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8006baa:	6a3a      	ldr	r2, [r7, #32]
 8006bac:	4613      	mov	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	3303      	adds	r3, #3
 8006bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8006bba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bbe:	4413      	add	r3, r2
 8006bc0:	1e5a      	subs	r2, r3, #1
 8006bc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8006bca:	2301      	movs	r3, #1
 8006bcc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8006bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8006bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bde:	4413      	add	r3, r2
 8006be0:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8006be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006be6:	fb03 f202 	mul.w	r2, r3, r2
 8006bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bec:	4413      	add	r3, r2
 8006bee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bf0:	4413      	add	r3, r2
 8006bf2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	425b      	negs	r3, r3
 8006c00:	401a      	ands	r2, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8006c08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d108      	bne.n	8006c22 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8006c10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c14:	4413      	add	r3, r2
 8006c16:	657b      	str	r3, [r7, #84]	; 0x54
 8006c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c1c:	4413      	add	r3, r2
 8006c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c20:	e006      	b.n	8006c30 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8006c22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c2c:	4413      	add	r3, r2
 8006c2e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8006c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c32:	011a      	lsls	r2, r3, #4
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	441a      	add	r2, r3
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	1ad2      	subs	r2, r2, r3
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d901      	bls.n	8006c46 <f_mkfs+0x336>
 8006c42:	230e      	movs	r3, #14
 8006c44:	e28a      	b.n	800715c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c4a:	1ad2      	subs	r2, r2, r3
 8006c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	1ad2      	subs	r2, r2, r3
 8006c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c58:	1ad2      	subs	r2, r2, r3
 8006c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c60:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8006c62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d10f      	bne.n	8006c8a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d80a      	bhi.n	8006c8a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d105      	bne.n	8006c86 <f_mkfs+0x376>
 8006c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c7c:	085b      	lsrs	r3, r3, #1
 8006c7e:	607b      	str	r3, [r7, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d144      	bne.n	8006d10 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8006c86:	230e      	movs	r3, #14
 8006c88:	e268      	b.n	800715c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8006c8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d133      	bne.n	8006cfa <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d91e      	bls.n	8006cda <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d107      	bne.n	8006cb2 <f_mkfs+0x3a2>
 8006ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d803      	bhi.n	8006cb2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	607b      	str	r3, [r7, #4]
 8006cb0:	e033      	b.n	8006d1a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006cc2:	e02a      	b.n	8006d1a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d105      	bne.n	8006cd6 <f_mkfs+0x3c6>
 8006cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	607b      	str	r3, [r7, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b80      	cmp	r3, #128	; 0x80
 8006cd4:	d91e      	bls.n	8006d14 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8006cd6:	230e      	movs	r3, #14
 8006cd8:	e240      	b.n	800715c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d80a      	bhi.n	8006cfa <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d105      	bne.n	8006cf6 <f_mkfs+0x3e6>
 8006cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	607b      	str	r3, [r7, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d910      	bls.n	8006d18 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8006cf6:	230e      	movs	r3, #14
 8006cf8:	e230      	b.n	800715c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8006cfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d10c      	bne.n	8006d1c <f_mkfs+0x40c>
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d907      	bls.n	8006d1c <f_mkfs+0x40c>
 8006d0c:	230e      	movs	r3, #14
 8006d0e:	e225      	b.n	800715c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006d10:	bf00      	nop
 8006d12:	e6ce      	b.n	8006ab2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006d14:	bf00      	nop
 8006d16:	e6cc      	b.n	8006ab2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006d18:	bf00      	nop
			pau = au;
 8006d1a:	e6ca      	b.n	8006ab2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8006d1c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8006d1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d20:	461a      	mov	r2, r3
 8006d22:	2100      	movs	r1, #0
 8006d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d26:	f7fd fdd6 	bl	80048d6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8006d2a:	220b      	movs	r2, #11
 8006d2c:	49b2      	ldr	r1, [pc, #712]	; (8006ff8 <f_mkfs+0x6e8>)
 8006d2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d30:	f7fd fdb0 	bl	8004894 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	330b      	adds	r3, #11
 8006d38:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fd fd62 	bl	8004806 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	330d      	adds	r3, #13
 8006d46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	330e      	adds	r3, #14
 8006d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d52:	b292      	uxth	r2, r2
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fd fd55 	bl	8004806 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	3310      	adds	r3, #16
 8006d60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	f103 0211 	add.w	r2, r3, #17
 8006d6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d002      	beq.n	8006d7a <f_mkfs+0x46a>
 8006d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	e000      	b.n	8006d7c <f_mkfs+0x46c>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	f7fd fd41 	bl	8004806 <st_word>
		if (sz_vol < 0x10000) {
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8a:	d208      	bcs.n	8006d9e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	3313      	adds	r3, #19
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	b292      	uxth	r2, r2
 8006d94:	4611      	mov	r1, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fd fd35 	bl	8004806 <st_word>
 8006d9c:	e006      	b.n	8006dac <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	3320      	adds	r3, #32
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fd fd48 	bl	800483c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	3315      	adds	r3, #21
 8006db0:	22f8      	movs	r2, #248	; 0xf8
 8006db2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	3318      	adds	r3, #24
 8006db8:	213f      	movs	r1, #63	; 0x3f
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fd fd23 	bl	8004806 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	331a      	adds	r3, #26
 8006dc4:	21ff      	movs	r1, #255	; 0xff
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fd fd1d 	bl	8004806 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	331c      	adds	r3, #28
 8006dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fd fd32 	bl	800483c <st_dword>
		if (fmt == FS_FAT32) {
 8006dd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d131      	bne.n	8006e44 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8006de6:	f7fd fa89 	bl	80042fc <get_fattime>
 8006dea:	4603      	mov	r3, r0
 8006dec:	4619      	mov	r1, r3
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7fd fd24 	bl	800483c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	3324      	adds	r3, #36	; 0x24
 8006df8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fd fd1e 	bl	800483c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	332c      	adds	r3, #44	; 0x2c
 8006e04:	2102      	movs	r1, #2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fd fd18 	bl	800483c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	3330      	adds	r3, #48	; 0x30
 8006e10:	2101      	movs	r1, #1
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fd fcf7 	bl	8004806 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	3332      	adds	r3, #50	; 0x32
 8006e1c:	2106      	movs	r1, #6
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fd fcf1 	bl	8004806 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	3340      	adds	r3, #64	; 0x40
 8006e28:	2280      	movs	r2, #128	; 0x80
 8006e2a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	3342      	adds	r3, #66	; 0x42
 8006e30:	2229      	movs	r2, #41	; 0x29
 8006e32:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	3347      	adds	r3, #71	; 0x47
 8006e38:	2213      	movs	r2, #19
 8006e3a:	4970      	ldr	r1, [pc, #448]	; (8006ffc <f_mkfs+0x6ec>)
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fd fd29 	bl	8004894 <mem_cpy>
 8006e42:	e020      	b.n	8006e86 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8006e4a:	f7fd fa57 	bl	80042fc <get_fattime>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4619      	mov	r1, r3
 8006e52:	4620      	mov	r0, r4
 8006e54:	f7fd fcf2 	bl	800483c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	3316      	adds	r3, #22
 8006e5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e5e:	b292      	uxth	r2, r2
 8006e60:	4611      	mov	r1, r2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fd fccf 	bl	8004806 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	3324      	adds	r3, #36	; 0x24
 8006e6c:	2280      	movs	r2, #128	; 0x80
 8006e6e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	3326      	adds	r3, #38	; 0x26
 8006e74:	2229      	movs	r2, #41	; 0x29
 8006e76:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	332b      	adds	r3, #43	; 0x2b
 8006e7c:	2213      	movs	r2, #19
 8006e7e:	4960      	ldr	r1, [pc, #384]	; (8007000 <f_mkfs+0x6f0>)
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fd fd07 	bl	8004894 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e8c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fd fcb8 	bl	8004806 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8006e96:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ea0:	f7fd fc38 	bl	8004714 <disk_write>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <f_mkfs+0x59e>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e156      	b.n	800715c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8006eae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d140      	bne.n	8006f38 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	1d9a      	adds	r2, r3, #6
 8006eba:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ec2:	f7fd fc27 	bl	8004714 <disk_write>
			mem_set(buf, 0, ss);
 8006ec6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2100      	movs	r1, #0
 8006ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ece:	f7fd fd02 	bl	80048d6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8006ed2:	494c      	ldr	r1, [pc, #304]	; (8007004 <f_mkfs+0x6f4>)
 8006ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ed6:	f7fd fcb1 	bl	800483c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006ee0:	4949      	ldr	r1, [pc, #292]	; (8007008 <f_mkfs+0x6f8>)
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fd fcaa 	bl	800483c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	f7fd fca1 	bl	800483c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006f00:	2102      	movs	r1, #2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fd fc9a 	bl	800483c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f0e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fd fc77 	bl	8004806 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	1dda      	adds	r2, r3, #7
 8006f1c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006f20:	2301      	movs	r3, #1
 8006f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f24:	f7fd fbf6 	bl	8004714 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006f30:	2301      	movs	r3, #1
 8006f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f34:	f7fd fbee 	bl	8004714 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8006f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f3e:	f7fd fcca 	bl	80048d6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8006f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f44:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8006f46:	2300      	movs	r3, #0
 8006f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f4a:	e04b      	b.n	8006fe4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8006f4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d113      	bne.n	8006f7c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8006f54:	f06f 0107 	mvn.w	r1, #7
 8006f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f5a:	f7fd fc6f 	bl	800483c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	3304      	adds	r3, #4
 8006f62:	f04f 31ff 	mov.w	r1, #4294967295
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fd fc68 	bl	800483c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	3308      	adds	r3, #8
 8006f70:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fd fc61 	bl	800483c <st_dword>
 8006f7a:	e00b      	b.n	8006f94 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8006f7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <f_mkfs+0x678>
 8006f84:	4b21      	ldr	r3, [pc, #132]	; (800700c <f_mkfs+0x6fc>)
 8006f86:	e001      	b.n	8006f8c <f_mkfs+0x67c>
 8006f88:	f06f 0307 	mvn.w	r3, #7
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f90:	f7fd fc54 	bl	800483c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8006f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f96:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8006f98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	bf28      	it	cs
 8006fa0:	4613      	movcs	r3, r2
 8006fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8006fa4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006faa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fae:	f7fd fbb1 	bl	8004714 <disk_write>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <f_mkfs+0x6ac>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0cf      	b.n	800715c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8006fbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fc4:	f7fd fc87 	bl	80048d6 <mem_set>
				sect += n; nsect -= n;
 8006fc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fcc:	4413      	add	r3, r2
 8006fce:	667b      	str	r3, [r7, #100]	; 0x64
 8006fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8006fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1dc      	bne.n	8006f98 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8006fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d3af      	bcc.n	8006f4c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8006fec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d10d      	bne.n	8007010 <f_mkfs+0x700>
 8006ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff6:	e00c      	b.n	8007012 <f_mkfs+0x702>
 8006ff8:	080072d8 	.word	0x080072d8
 8006ffc:	080072e4 	.word	0x080072e4
 8007000:	080072f8 	.word	0x080072f8
 8007004:	41615252 	.word	0x41615252
 8007008:	61417272 	.word	0x61417272
 800700c:	00fffff8 	.word	0x00fffff8
 8007010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007012:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007014:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	4293      	cmp	r3, r2
 800701a:	bf28      	it	cs
 800701c:	4613      	movcs	r3, r2
 800701e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007020:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007026:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800702a:	f7fd fb73 	bl	8004714 <disk_write>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <f_mkfs+0x728>
 8007034:	2301      	movs	r3, #1
 8007036:	e091      	b.n	800715c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8007038:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800703a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703c:	4413      	add	r3, r2
 800703e:	667b      	str	r3, [r7, #100]	; 0x64
 8007040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8007048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e2      	bne.n	8007014 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800704e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007052:	2b03      	cmp	r3, #3
 8007054:	d103      	bne.n	800705e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8007056:	230c      	movs	r3, #12
 8007058:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800705c:	e010      	b.n	8007080 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007064:	d303      	bcc.n	800706e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8007066:	2306      	movs	r3, #6
 8007068:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800706c:	e008      	b.n	8007080 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800706e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007072:	2b02      	cmp	r3, #2
 8007074:	d101      	bne.n	800707a <f_mkfs+0x76a>
 8007076:	2304      	movs	r3, #4
 8007078:	e000      	b.n	800707c <f_mkfs+0x76c>
 800707a:	2301      	movs	r3, #1
 800707c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b00      	cmp	r3, #0
 8007088:	d15b      	bne.n	8007142 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800708a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800708c:	461a      	mov	r2, r3
 800708e:	2100      	movs	r1, #0
 8007090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007092:	f7fd fc20 	bl	80048d6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800709c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fd fbb0 	bl	8004806 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80070ac:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	3301      	adds	r3, #1
 80070b8:	2201      	movs	r2, #1
 80070ba:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	3302      	adds	r3, #2
 80070c0:	2201      	movs	r2, #1
 80070c2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	3303      	adds	r3, #3
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	3304      	adds	r3, #4
 80070d0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80070d4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	441a      	add	r2, r3
 80070dc:	4b21      	ldr	r3, [pc, #132]	; (8007164 <f_mkfs+0x854>)
 80070de:	fba3 1302 	umull	r1, r3, r3, r2
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	0852      	lsrs	r2, r2, #1
 80070e6:	4413      	add	r3, r2
 80070e8:	0b5b      	lsrs	r3, r3, #13
 80070ea:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	3305      	adds	r3, #5
 80070f0:	22fe      	movs	r2, #254	; 0xfe
 80070f2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80070f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070f6:	089b      	lsrs	r3, r3, #2
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	3306      	adds	r3, #6
 80070fe:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	3307      	adds	r3, #7
 800710a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	3308      	adds	r3, #8
 8007114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007116:	4618      	mov	r0, r3
 8007118:	f7fd fb90 	bl	800483c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	330c      	adds	r3, #12
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f7fd fb89 	bl	800483c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800712a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800712e:	2301      	movs	r3, #1
 8007130:	2200      	movs	r2, #0
 8007132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007134:	f7fd faee 	bl	8004714 <disk_write>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <f_mkfs+0x832>
 800713e:	2301      	movs	r3, #1
 8007140:	e00c      	b.n	800715c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8007142:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007146:	2200      	movs	r2, #0
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f7fd fb02 	bl	8004754 <disk_ioctl>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <f_mkfs+0x84a>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <f_mkfs+0x84c>

	return FR_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3774      	adds	r7, #116	; 0x74
 8007160:	46bd      	mov	sp, r7
 8007162:	bd90      	pop	{r4, r7, pc}
 8007164:	0515565b 	.word	0x0515565b

08007168 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	4613      	mov	r3, r2
 8007174:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007176:	2301      	movs	r3, #1
 8007178:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800717e:	4b1f      	ldr	r3, [pc, #124]	; (80071fc <FATFS_LinkDriverEx+0x94>)
 8007180:	7a5b      	ldrb	r3, [r3, #9]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d131      	bne.n	80071ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007188:	4b1c      	ldr	r3, [pc, #112]	; (80071fc <FATFS_LinkDriverEx+0x94>)
 800718a:	7a5b      	ldrb	r3, [r3, #9]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <FATFS_LinkDriverEx+0x94>)
 8007192:	2100      	movs	r1, #0
 8007194:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007196:	4b19      	ldr	r3, [pc, #100]	; (80071fc <FATFS_LinkDriverEx+0x94>)
 8007198:	7a5b      	ldrb	r3, [r3, #9]
 800719a:	b2db      	uxtb	r3, r3
 800719c:	4a17      	ldr	r2, [pc, #92]	; (80071fc <FATFS_LinkDriverEx+0x94>)
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80071a6:	4b15      	ldr	r3, [pc, #84]	; (80071fc <FATFS_LinkDriverEx+0x94>)
 80071a8:	7a5b      	ldrb	r3, [r3, #9]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <FATFS_LinkDriverEx+0x94>)
 80071b0:	4413      	add	r3, r2
 80071b2:	79fa      	ldrb	r2, [r7, #7]
 80071b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80071b6:	4b11      	ldr	r3, [pc, #68]	; (80071fc <FATFS_LinkDriverEx+0x94>)
 80071b8:	7a5b      	ldrb	r3, [r3, #9]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	b2d1      	uxtb	r1, r2
 80071c0:	4a0e      	ldr	r2, [pc, #56]	; (80071fc <FATFS_LinkDriverEx+0x94>)
 80071c2:	7251      	strb	r1, [r2, #9]
 80071c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80071c6:	7dbb      	ldrb	r3, [r7, #22]
 80071c8:	3330      	adds	r3, #48	; 0x30
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	3301      	adds	r3, #1
 80071d4:	223a      	movs	r2, #58	; 0x3a
 80071d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	3302      	adds	r3, #2
 80071dc:	222f      	movs	r2, #47	; 0x2f
 80071de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	3303      	adds	r3, #3
 80071e4:	2200      	movs	r2, #0
 80071e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	20000600 	.word	0x20000600

08007200 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800720a:	2200      	movs	r2, #0
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff ffaa 	bl	8007168 <FATFS_LinkDriverEx>
 8007214:	4603      	mov	r3, r0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <memset>:
 800721e:	4402      	add	r2, r0
 8007220:	4603      	mov	r3, r0
 8007222:	4293      	cmp	r3, r2
 8007224:	d100      	bne.n	8007228 <memset+0xa>
 8007226:	4770      	bx	lr
 8007228:	f803 1b01 	strb.w	r1, [r3], #1
 800722c:	e7f9      	b.n	8007222 <memset+0x4>
	...

08007230 <__libc_init_array>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	4d0d      	ldr	r5, [pc, #52]	; (8007268 <__libc_init_array+0x38>)
 8007234:	4c0d      	ldr	r4, [pc, #52]	; (800726c <__libc_init_array+0x3c>)
 8007236:	1b64      	subs	r4, r4, r5
 8007238:	10a4      	asrs	r4, r4, #2
 800723a:	2600      	movs	r6, #0
 800723c:	42a6      	cmp	r6, r4
 800723e:	d109      	bne.n	8007254 <__libc_init_array+0x24>
 8007240:	4d0b      	ldr	r5, [pc, #44]	; (8007270 <__libc_init_array+0x40>)
 8007242:	4c0c      	ldr	r4, [pc, #48]	; (8007274 <__libc_init_array+0x44>)
 8007244:	f000 f818 	bl	8007278 <_init>
 8007248:	1b64      	subs	r4, r4, r5
 800724a:	10a4      	asrs	r4, r4, #2
 800724c:	2600      	movs	r6, #0
 800724e:	42a6      	cmp	r6, r4
 8007250:	d105      	bne.n	800725e <__libc_init_array+0x2e>
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	f855 3b04 	ldr.w	r3, [r5], #4
 8007258:	4798      	blx	r3
 800725a:	3601      	adds	r6, #1
 800725c:	e7ee      	b.n	800723c <__libc_init_array+0xc>
 800725e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007262:	4798      	blx	r3
 8007264:	3601      	adds	r6, #1
 8007266:	e7f2      	b.n	800724e <__libc_init_array+0x1e>
 8007268:	080073e0 	.word	0x080073e0
 800726c:	080073e0 	.word	0x080073e0
 8007270:	080073e0 	.word	0x080073e0
 8007274:	080073e4 	.word	0x080073e4

08007278 <_init>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr

08007284 <_fini>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	bf00      	nop
 8007288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728a:	bc08      	pop	{r3}
 800728c:	469e      	mov	lr, r3
 800728e:	4770      	bx	lr
