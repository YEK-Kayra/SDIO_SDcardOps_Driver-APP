
SDIO_SDcardOps_Driver-APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000455c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004738  08004738  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004740  08004740  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08004754  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000018c  08004754  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bac  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fda  00000000  00000000  00029c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b0  00000000  00000000  0002c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000221e  00000000  00000000  0002cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b68d  00000000  00000000  0002ede6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087d42  00000000  00000000  0003a473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002330  00000000  00000000  000c21b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000c44e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080046d8 	.word	0x080046d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080046d8 	.word	0x080046d8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; 										/* FatFs function common result code */
	uint32_t byteswritten; 								/* File write/read counter*/
	uint8_t wtext[] = "TAISAT SDIO Subsystem unit "; 	/* File write buffer as 1byte */
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <main+0x38>)
 80004da:	f507 7401 	add.w	r4, r7, #516	; 0x204
 80004de:	461d      	mov	r5, r3
 80004e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fa9a 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f80c 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8be 	bl	8000674 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f8:	f000 f894 	bl	8000624 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80004fc:	f000 f870 	bl	80005e0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000500:	f003 fe24 	bl	800414c <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x34>
 8000506:	bf00      	nop
 8000508:	080046f0 	.word	0x080046f0

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 f8af 	bl	800467e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <SystemClock_Config+0xd0>)
 800055a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000580:	2310      	movs	r3, #16
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000584:	23c0      	movs	r3, #192	; 0xc0
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f001 f90f 	bl	80017b8 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005a0:	f000 f89e 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fb72 	bl	8001ca8 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ca:	f000 f889 	bl	80006e0 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MX_SDIO_SD_Init+0x3c>)
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <MX_SDIO_SD_Init+0x40>)
 80005e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_SDIO_SD_Init+0x3c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_SDIO_SD_Init+0x3c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_SDIO_SD_Init+0x3c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_SDIO_SD_Init+0x3c>)
 80005fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000602:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_SDIO_SD_Init+0x3c>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <MX_SDIO_SD_Init+0x3c>)
 800060c:	2201      	movs	r2, #1
 800060e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000028 	.word	0x20000028
 8000620:	40012c00 	.word	0x40012c00

08000624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_DMA_Init+0x4c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <MX_DMA_Init+0x4c>)
 8000634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_DMA_Init+0x4c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	203b      	movs	r0, #59	; 0x3b
 800064c:	f000 fb5b 	bl	8000d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000650:	203b      	movs	r0, #59	; 0x3b
 8000652:	f000 fb74 	bl	8000d3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	2045      	movs	r0, #69	; 0x45
 800065c:	f000 fb53 	bl	8000d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000660:	2045      	movs	r0, #69	; 0x45
 8000662:	f000 fb6c 	bl	8000d3e <HAL_NVIC_EnableIRQ>

}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_GPIO_Init+0x68>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a16      	ldr	r2, [pc, #88]	; (80006dc <MX_GPIO_Init+0x68>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_GPIO_Init+0x68>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_GPIO_Init+0x68>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <MX_GPIO_Init+0x68>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_GPIO_Init+0x68>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_GPIO_Init+0x68>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <MX_GPIO_Init+0x68>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_GPIO_Init+0x68>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <HAL_MspInit+0x4c>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <HAL_MspInit+0x4c>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6453      	str	r3, [r2, #68]	; 0x44
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x4c>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <HAL_MspInit+0x4c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a68      	ldr	r2, [pc, #416]	; (80008fc <HAL_SD_MspInit+0x1c0>)
 800075a:	4293      	cmp	r3, r2
 800075c:	f040 80c9 	bne.w	80008f2 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	4b66      	ldr	r3, [pc, #408]	; (8000900 <HAL_SD_MspInit+0x1c4>)
 8000766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000768:	4a65      	ldr	r2, [pc, #404]	; (8000900 <HAL_SD_MspInit+0x1c4>)
 800076a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800076e:	6453      	str	r3, [r2, #68]	; 0x44
 8000770:	4b63      	ldr	r3, [pc, #396]	; (8000900 <HAL_SD_MspInit+0x1c4>)
 8000772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	4b5f      	ldr	r3, [pc, #380]	; (8000900 <HAL_SD_MspInit+0x1c4>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	4a5e      	ldr	r2, [pc, #376]	; (8000900 <HAL_SD_MspInit+0x1c4>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6313      	str	r3, [r2, #48]	; 0x30
 800078c:	4b5c      	ldr	r3, [pc, #368]	; (8000900 <HAL_SD_MspInit+0x1c4>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	f003 0304 	and.w	r3, r3, #4
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	4b58      	ldr	r3, [pc, #352]	; (8000900 <HAL_SD_MspInit+0x1c4>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	4a57      	ldr	r2, [pc, #348]	; (8000900 <HAL_SD_MspInit+0x1c4>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6313      	str	r3, [r2, #48]	; 0x30
 80007a8:	4b55      	ldr	r3, [pc, #340]	; (8000900 <HAL_SD_MspInit+0x1c4>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007b4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007c6:	230c      	movs	r3, #12
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	484c      	ldr	r0, [pc, #304]	; (8000904 <HAL_SD_MspInit+0x1c8>)
 80007d2:	f000 fe6d 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007d6:	2304      	movs	r3, #4
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007e6:	230c      	movs	r3, #12
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4845      	ldr	r0, [pc, #276]	; (8000908 <HAL_SD_MspInit+0x1cc>)
 80007f2:	f000 fe5d 	bl	80014b0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <HAL_SD_MspInit+0x1d0>)
 80007f8:	4a45      	ldr	r2, [pc, #276]	; (8000910 <HAL_SD_MspInit+0x1d4>)
 80007fa:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80007fc:	4b43      	ldr	r3, [pc, #268]	; (800090c <HAL_SD_MspInit+0x1d0>)
 80007fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000802:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000804:	4b41      	ldr	r3, [pc, #260]	; (800090c <HAL_SD_MspInit+0x1d0>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080a:	4b40      	ldr	r3, [pc, #256]	; (800090c <HAL_SD_MspInit+0x1d0>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000810:	4b3e      	ldr	r3, [pc, #248]	; (800090c <HAL_SD_MspInit+0x1d0>)
 8000812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000816:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <HAL_SD_MspInit+0x1d0>)
 800081a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800081e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000820:	4b3a      	ldr	r3, [pc, #232]	; (800090c <HAL_SD_MspInit+0x1d0>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000828:	4b38      	ldr	r3, [pc, #224]	; (800090c <HAL_SD_MspInit+0x1d0>)
 800082a:	2220      	movs	r2, #32
 800082c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800082e:	4b37      	ldr	r3, [pc, #220]	; (800090c <HAL_SD_MspInit+0x1d0>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <HAL_SD_MspInit+0x1d0>)
 8000836:	2204      	movs	r2, #4
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <HAL_SD_MspInit+0x1d0>)
 800083c:	2203      	movs	r2, #3
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000840:	4b32      	ldr	r3, [pc, #200]	; (800090c <HAL_SD_MspInit+0x1d0>)
 8000842:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <HAL_SD_MspInit+0x1d0>)
 800084a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000850:	482e      	ldr	r0, [pc, #184]	; (800090c <HAL_SD_MspInit+0x1d0>)
 8000852:	f000 fa8f 	bl	8000d74 <HAL_DMA_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800085c:	f7ff ff40 	bl	80006e0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <HAL_SD_MspInit+0x1d0>)
 8000864:	641a      	str	r2, [r3, #64]	; 0x40
 8000866:	4a29      	ldr	r2, [pc, #164]	; (800090c <HAL_SD_MspInit+0x1d0>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 800086e:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <HAL_SD_MspInit+0x1dc>)
 8000870:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 8000874:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000878:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 800087c:	2240      	movs	r2, #64	; 0x40
 800087e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 8000888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 8000890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000894:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 8000898:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800089c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 80008a0:	2220      	movs	r2, #32
 80008a2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 80008b2:	2203      	movs	r2, #3
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 80008b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 80008c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 80008c8:	f000 fa54 	bl	8000d74 <HAL_DMA_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80008d2:	f7ff ff05 	bl	80006e0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 80008da:	63da      	str	r2, [r3, #60]	; 0x3c
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <HAL_SD_MspInit+0x1d8>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2031      	movs	r0, #49	; 0x31
 80008e8:	f000 fa0d 	bl	8000d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80008ec:	2031      	movs	r0, #49	; 0x31
 80008ee:	f000 fa26 	bl	8000d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40012c00 	.word	0x40012c00
 8000900:	40023800 	.word	0x40023800
 8000904:	40020800 	.word	0x40020800
 8000908:	40020c00 	.word	0x40020c00
 800090c:	200000ac 	.word	0x200000ac
 8000910:	40026458 	.word	0x40026458
 8000914:	2000010c 	.word	0x2000010c
 8000918:	400264a0 	.word	0x400264a0

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f8ae 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <SDIO_IRQHandler+0x10>)
 8000976:	f001 fdbb 	bl	80024f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000028 	.word	0x20000028

08000984 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <DMA2_Stream3_IRQHandler+0x10>)
 800098a:	f000 fb1b 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000ac 	.word	0x200000ac

08000998 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <DMA2_Stream6_IRQHandler+0x10>)
 800099e:	f000 fb11 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000010c 	.word	0x2000010c

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d6:	490e      	ldr	r1, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009ec:	4c0b      	ldr	r4, [pc, #44]	; (8000a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009fa:	f7ff ffd7 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fe:	f003 fe47 	bl	8004690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fd65 	bl	80004d0 <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a14:	08004748 	.word	0x08004748
  ldr r2, =_sbss
 8000a18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a1c:	2000018c 	.word	0x2000018c

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f94f 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fe48 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f967 	bl	8000d5a <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f92f 	bl	8000d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	2000016c 	.word	0x2000016c

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	2000016c 	.word	0x2000016c

08000b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_Delay+0x44>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <__NVIC_EnableIRQ+0x38>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff29 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff3e 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff8e 	bl	8000c44 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff31 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffa2 	bl	8000cac <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff feb6 	bl	8000af0 <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e099      	b.n	8000ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2202      	movs	r2, #2
 8000d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0201 	bic.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000db0:	e00f      	b.n	8000dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000db2:	f7ff fe9d 	bl	8000af0 <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d908      	bls.n	8000dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e078      	b.n	8000ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e8      	bne.n	8000db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <HAL_DMA_Init+0x158>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d107      	bne.n	8000e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4313      	orrs	r3, r2
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f023 0307 	bic.w	r3, r3, #7
 8000e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d117      	bne.n	8000e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00e      	beq.n	8000e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 fa9d 	bl	80013b8 <DMA_CheckFifoParam>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d008      	beq.n	8000e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2240      	movs	r2, #64	; 0x40
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e92:	2301      	movs	r3, #1
 8000e94:	e016      	b.n	8000ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 fa54 	bl	800134c <DMA_CalcBaseAndBitshift>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eac:	223f      	movs	r2, #63	; 0x3f
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	f010803f 	.word	0xf010803f

08000ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <HAL_DMA_Start_IT+0x26>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e040      	b.n	8000f78 <HAL_DMA_Start_IT+0xa8>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d12f      	bne.n	8000f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f000 f9e6 	bl	80012f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f28:	223f      	movs	r2, #63	; 0x3f
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0216 	orr.w	r2, r2, #22
 8000f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d007      	beq.n	8000f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0208 	orr.w	r2, r2, #8
 8000f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e005      	b.n	8000f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f72:	2302      	movs	r3, #2
 8000f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d004      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00c      	b.n	8000fb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fd0:	4b8e      	ldr	r3, [pc, #568]	; (800120c <HAL_DMA_IRQHandler+0x248>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a8e      	ldr	r2, [pc, #568]	; (8001210 <HAL_DMA_IRQHandler+0x24c>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0a9b      	lsrs	r3, r3, #10
 8000fdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fee:	2208      	movs	r2, #8
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d01a      	beq.n	8001030 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0204 	bic.w	r2, r2, #4
 8001016:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800101c:	2208      	movs	r2, #8
 800101e:	409a      	lsls	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	2201      	movs	r2, #1
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001052:	2201      	movs	r2, #1
 8001054:	409a      	lsls	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105e:	f043 0202 	orr.w	r2, r3, #2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106a:	2204      	movs	r2, #4
 800106c:	409a      	lsls	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4013      	ands	r3, r2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d012      	beq.n	800109c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00b      	beq.n	800109c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	2204      	movs	r2, #4
 800108a:	409a      	lsls	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	f043 0204 	orr.w	r2, r3, #4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	2210      	movs	r2, #16
 80010a2:	409a      	lsls	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d043      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d03c      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010be:	2210      	movs	r2, #16
 80010c0:	409a      	lsls	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d018      	beq.n	8001106 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d108      	bne.n	80010f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d024      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	4798      	blx	r3
 80010f2:	e01f      	b.n	8001134 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01b      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4798      	blx	r3
 8001104:	e016      	b.n	8001134 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d107      	bne.n	8001124 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0208 	bic.w	r2, r2, #8
 8001122:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001138:	2220      	movs	r2, #32
 800113a:	409a      	lsls	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 808f 	beq.w	8001264 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 8087 	beq.w	8001264 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115a:	2220      	movs	r2, #32
 800115c:	409a      	lsls	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b05      	cmp	r3, #5
 800116c:	d136      	bne.n	80011dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0216 	bic.w	r2, r2, #22
 800117c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800118c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d103      	bne.n	800119e <HAL_DMA_IRQHandler+0x1da>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0208 	bic.w	r2, r2, #8
 80011ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	223f      	movs	r2, #63	; 0x3f
 80011b4:	409a      	lsls	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d07e      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	4798      	blx	r3
        }
        return;
 80011da:	e079      	b.n	80012d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d01d      	beq.n	8001226 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10d      	bne.n	8001214 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d031      	beq.n	8001264 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	4798      	blx	r3
 8001208:	e02c      	b.n	8001264 <HAL_DMA_IRQHandler+0x2a0>
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000
 8001210:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	2b00      	cmp	r3, #0
 800121a:	d023      	beq.n	8001264 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	4798      	blx	r3
 8001224:	e01e      	b.n	8001264 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10f      	bne.n	8001254 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0210 	bic.w	r2, r2, #16
 8001242:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001268:	2b00      	cmp	r3, #0
 800126a:	d032      	beq.n	80012d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d022      	beq.n	80012be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2205      	movs	r2, #5
 800127c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	d307      	bcc.n	80012ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f2      	bne.n	8001290 <HAL_DMA_IRQHandler+0x2cc>
 80012aa:	e000      	b.n	80012ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80012ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	4798      	blx	r3
 80012ce:	e000      	b.n	80012d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80012d0:	bf00      	nop
    }
  }
}
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800130c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b40      	cmp	r3, #64	; 0x40
 800131c:	d108      	bne.n	8001330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800132e:	e007      	b.n	8001340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	3b10      	subs	r3, #16
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <DMA_CalcBaseAndBitshift+0x64>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001366:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d909      	bls.n	800138e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001382:	f023 0303 	bic.w	r3, r3, #3
 8001386:	1d1a      	adds	r2, r3, #4
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	659a      	str	r2, [r3, #88]	; 0x58
 800138c:	e007      	b.n	800139e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	aaaaaaab 	.word	0xaaaaaaab
 80013b4:	0800471c 	.word	0x0800471c

080013b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d11f      	bne.n	8001412 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d856      	bhi.n	8001486 <DMA_CheckFifoParam+0xce>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <DMA_CheckFifoParam+0x28>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	080013f1 	.word	0x080013f1
 80013e4:	08001403 	.word	0x08001403
 80013e8:	080013f1 	.word	0x080013f1
 80013ec:	08001487 	.word	0x08001487
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d046      	beq.n	800148a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001400:	e043      	b.n	800148a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800140a:	d140      	bne.n	800148e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001410:	e03d      	b.n	800148e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800141a:	d121      	bne.n	8001460 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d837      	bhi.n	8001492 <DMA_CheckFifoParam+0xda>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <DMA_CheckFifoParam+0x70>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	08001439 	.word	0x08001439
 800142c:	0800143f 	.word	0x0800143f
 8001430:	08001439 	.word	0x08001439
 8001434:	08001451 	.word	0x08001451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
      break;
 800143c:	e030      	b.n	80014a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d025      	beq.n	8001496 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800144e:	e022      	b.n	8001496 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001458:	d11f      	bne.n	800149a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800145e:	e01c      	b.n	800149a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d903      	bls.n	800146e <DMA_CheckFifoParam+0xb6>
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d003      	beq.n	8001474 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800146c:	e018      	b.n	80014a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
      break;
 8001472:	e015      	b.n	80014a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00e      	beq.n	800149e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
      break;
 8001484:	e00b      	b.n	800149e <DMA_CheckFifoParam+0xe6>
      break;
 8001486:	bf00      	nop
 8001488:	e00a      	b.n	80014a0 <DMA_CheckFifoParam+0xe8>
      break;
 800148a:	bf00      	nop
 800148c:	e008      	b.n	80014a0 <DMA_CheckFifoParam+0xe8>
      break;
 800148e:	bf00      	nop
 8001490:	e006      	b.n	80014a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001492:	bf00      	nop
 8001494:	e004      	b.n	80014a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001496:	bf00      	nop
 8001498:	e002      	b.n	80014a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800149a:	bf00      	nop
 800149c:	e000      	b.n	80014a0 <DMA_CheckFifoParam+0xe8>
      break;
 800149e:	bf00      	nop
    }
  } 
  
  return status; 
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e159      	b.n	8001780 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8148 	bne.w	800177a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d130      	bne.n	8001564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d017      	beq.n	80015a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	69b9      	ldr	r1, [r7, #24]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80a2 	beq.w	800177a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b57      	ldr	r3, [pc, #348]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a56      	ldr	r2, [pc, #344]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b54      	ldr	r3, [pc, #336]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001652:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_GPIO_Init+0x2ec>)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x2f0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_Init+0x202>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_GPIO_Init+0x2f4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x1fe>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <HAL_GPIO_Init+0x2f8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x1fa>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a46      	ldr	r2, [pc, #280]	; (80017ac <HAL_GPIO_Init+0x2fc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x1f6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a45      	ldr	r2, [pc, #276]	; (80017b0 <HAL_GPIO_Init+0x300>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x1f2>
 800169e:	2304      	movs	r3, #4
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016b2:	2300      	movs	r3, #0
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x2ec>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <HAL_GPIO_Init+0x304>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f6:	4a2f      	ldr	r2, [pc, #188]	; (80017b4 <HAL_GPIO_Init+0x304>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <HAL_GPIO_Init+0x304>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001720:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <HAL_GPIO_Init+0x304>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_GPIO_Init+0x304>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174a:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <HAL_GPIO_Init+0x304>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_GPIO_Init+0x304>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_GPIO_Init+0x304>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	f67f aea2 	bls.w	80014cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40013c00 	.word	0x40013c00

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e267      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d075      	beq.n	80018c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017d6:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d00c      	beq.n	80017fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e2:	4b85      	ldr	r3, [pc, #532]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d112      	bne.n	8001814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ee:	4b82      	ldr	r3, [pc, #520]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017fa:	d10b      	bne.n	8001814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d05b      	beq.n	80018c0 <HAL_RCC_OscConfig+0x108>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d157      	bne.n	80018c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e242      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x74>
 800181e:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a75      	ldr	r2, [pc, #468]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x98>
 8001836:	4b70      	ldr	r3, [pc, #448]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6f      	ldr	r2, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 8001850:	4b69      	ldr	r3, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a68      	ldr	r2, [pc, #416]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff f93e 	bl	8000af0 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff f93a 	bl	8000af0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e207      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xc0>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff f92a 	bl	8000af0 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff f926 	bl	8000af0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1f3      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0xe8>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d063      	beq.n	8001996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ce:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018da:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d11c      	bne.n	8001920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e6:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d116      	bne.n	8001920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_RCC_OscConfig+0x152>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e1c7      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4937      	ldr	r1, [pc, #220]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	e03a      	b.n	8001996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001928:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_RCC_OscConfig+0x244>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192e:	f7ff f8df 	bl	8000af0 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff f8db 	bl	8000af0 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1a8      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4925      	ldr	r1, [pc, #148]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e015      	b.n	8001996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_OscConfig+0x244>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f8be 	bl	8000af0 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001978:	f7ff f8ba 	bl	8000af0 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e187      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d036      	beq.n	8001a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d016      	beq.n	80019d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_RCC_OscConfig+0x248>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff f89e 	bl	8000af0 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff f89a 	bl	8000af0 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e167      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_OscConfig+0x240>)
 80019cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x200>
 80019d6:	e01b      	b.n	8001a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCC_OscConfig+0x248>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019de:	f7ff f887 	bl	8000af0 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e4:	e00e      	b.n	8001a04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff f883 	bl	8000af0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d907      	bls.n	8001a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e150      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
 80019f8:	40023800 	.word	0x40023800
 80019fc:	42470000 	.word	0x42470000
 8001a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	4b88      	ldr	r3, [pc, #544]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ea      	bne.n	80019e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 8097 	beq.w	8001b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b81      	ldr	r3, [pc, #516]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b7d      	ldr	r3, [pc, #500]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a7c      	ldr	r2, [pc, #496]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b77      	ldr	r3, [pc, #476]	; (8001c2c <HAL_RCC_OscConfig+0x474>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d118      	bne.n	8001a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5a:	4b74      	ldr	r3, [pc, #464]	; (8001c2c <HAL_RCC_OscConfig+0x474>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a73      	ldr	r2, [pc, #460]	; (8001c2c <HAL_RCC_OscConfig+0x474>)
 8001a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a66:	f7ff f843 	bl	8000af0 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff f83f 	bl	8000af0 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e10c      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_OscConfig+0x474>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
 8001a94:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a63      	ldr	r2, [pc, #396]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x324>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x30c>
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	4a5b      	ldr	r2, [pc, #364]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0x324>
 8001ac4:	4b58      	ldr	r3, [pc, #352]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	4a57      	ldr	r2, [pc, #348]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad0:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	f023 0304 	bic.w	r3, r3, #4
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d015      	beq.n	8001b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f804 	bl	8000af0 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff f800 	bl	8000af0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0cb      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b02:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0ee      	beq.n	8001aec <HAL_RCC_OscConfig+0x334>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b10:	f7fe ffee 	bl	8000af0 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7fe ffea 	bl	8000af0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0b5      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ee      	bne.n	8001b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	4a38      	ldr	r2, [pc, #224]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80a1 	beq.w	8001c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b56:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d05c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d141      	bne.n	8001bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_OscConfig+0x478>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7fe ffbe 	bl	8000af0 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b78:	f7fe ffba 	bl	8000af0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e087      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	019b      	lsls	r3, r3, #6
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	041b      	lsls	r3, r3, #16
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	491b      	ldr	r1, [pc, #108]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x478>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7fe ff93 	bl	8000af0 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe ff8f 	bl	8000af0 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e05c      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x416>
 8001bec:	e054      	b.n	8001c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_RCC_OscConfig+0x478>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ff7c 	bl	8000af0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe ff78 	bl	8000af0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e045      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_OscConfig+0x470>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x444>
 8001c1a:	e03d      	b.n	8001c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e038      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_RCC_OscConfig+0x4ec>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d028      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d121      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d11a      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d111      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0cc      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d90c      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b65      	ldr	r3, [pc, #404]	; (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0b8      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d14:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	494d      	ldr	r1, [pc, #308]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d044      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d119      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e07f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e06f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e067      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4934      	ldr	r1, [pc, #208]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d98:	f7fe feaa 	bl	8000af0 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7fe fea6 	bl	8000af0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e04f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d20c      	bcs.n	8001df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e032      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4916      	ldr	r1, [pc, #88]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	490e      	ldr	r1, [pc, #56]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e2e:	f000 f821 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 8001e32:	4602      	mov	r2, r0
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	490a      	ldr	r1, [pc, #40]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	5ccb      	ldrb	r3, [r1, r3]
 8001e42:	fa22 f303 	lsr.w	r3, r2, r3
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fe0a 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023c00 	.word	0x40023c00
 8001e64:	40023800 	.word	0x40023800
 8001e68:	0800470c 	.word	0x0800470c
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e78:	b090      	sub	sp, #64	; 0x40
 8001e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e80:	2300      	movs	r3, #0
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e84:	2300      	movs	r3, #0
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e8c:	4b59      	ldr	r3, [pc, #356]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d00d      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	f200 80a1 	bhi.w	8001fe0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x3a>
 8001ea6:	e09b      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eaa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001eac:	e09b      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eae:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x188>)
 8001eb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eb2:	e098      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ebe:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d028      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	099b      	lsrs	r3, r3, #6
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	623b      	str	r3, [r7, #32]
 8001ed4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001edc:	2100      	movs	r1, #0
 8001ede:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ee0:	fb03 f201 	mul.w	r2, r3, r1
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	fb00 f303 	mul.w	r3, r0, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	4a43      	ldr	r2, [pc, #268]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x188>)
 8001eee:	fba0 1202 	umull	r1, r2, r0, r2
 8001ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efa:	4413      	add	r3, r2
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f00:	2200      	movs	r2, #0
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	61fa      	str	r2, [r7, #28]
 8001f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f0e:	f7fe f961 	bl	80001d4 <__aeabi_uldivmod>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4613      	mov	r3, r2
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f1a:	e053      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1c:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	2200      	movs	r2, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	617a      	str	r2, [r7, #20]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f2e:	f04f 0b00 	mov.w	fp, #0
 8001f32:	4652      	mov	r2, sl
 8001f34:	465b      	mov	r3, fp
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0159      	lsls	r1, r3, #5
 8001f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f44:	0150      	lsls	r0, r2, #5
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	ebb2 080a 	subs.w	r8, r2, sl
 8001f4e:	eb63 090b 	sbc.w	r9, r3, fp
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f66:	ebb2 0408 	subs.w	r4, r2, r8
 8001f6a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	00eb      	lsls	r3, r5, #3
 8001f78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f7c:	00e2      	lsls	r2, r4, #3
 8001f7e:	4614      	mov	r4, r2
 8001f80:	461d      	mov	r5, r3
 8001f82:	eb14 030a 	adds.w	r3, r4, sl
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	eb45 030b 	adc.w	r3, r5, fp
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	028b      	lsls	r3, r1, #10
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	028a      	lsls	r2, r1, #10
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	60fa      	str	r2, [r7, #12]
 8001fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fb8:	f7fe f90c 	bl	80001d4 <__aeabi_uldivmod>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001fd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fde:	e002      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3740      	adds	r7, #64	; 0x40
 8001fec:	46bd      	mov	sp, r7
 8001fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	00f42400 	.word	0x00f42400
 8001ffc:	017d7840 	.word	0x017d7840

08002000 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e022      	b.n	8002058 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7fe fb89 	bl	800073c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2203      	movs	r2, #3
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f814 	bl	8002060 <HAL_SD_InitCard>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00a      	b.n	8002058 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002060:	b5b0      	push	{r4, r5, r7, lr}
 8002062:	b08e      	sub	sp, #56	; 0x38
 8002064:	af04      	add	r7, sp, #16
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800207c:	2376      	movs	r3, #118	; 0x76
 800207e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681d      	ldr	r5, [r3, #0]
 8002084:	466c      	mov	r4, sp
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800208e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002098:	4628      	mov	r0, r5
 800209a:	f001 fae4 	bl	8003666 <SDIO_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80020a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e04f      	b.n	8002150 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <HAL_SD_InitCard+0xf8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fb1c 	bl	80036f8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <HAL_SD_InitCard+0xf8>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80020c6:	2002      	movs	r0, #2
 80020c8:	f7fe fd1e 	bl	8000b08 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f001 f805 	bl	80030dc <SD_PowerON>
 80020d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e02e      	b.n	8002150 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 ff24 	bl	8002f40 <SD_InitCard>
 80020f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00b      	beq.n	8002118 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e01b      	b.n	8002150 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002120:	4618      	mov	r0, r3
 8002122:	f001 fb7b 	bl	800381c <SDMMC_CmdBlockLength>
 8002126:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00f      	beq.n	800214e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_SD_InitCard+0xfc>)
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bdb0      	pop	{r4, r5, r7, pc}
 8002158:	422580a0 	.word	0x422580a0
 800215c:	004005ff 	.word	0x004005ff

08002160 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d107      	bne.n	8002188 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0c0      	b.n	800230a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	f040 80b9 	bne.w	8002308 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800219c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	441a      	add	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d907      	bls.n	80021ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0a7      	b.n	800230a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2203      	movs	r2, #3
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a4c      	ldr	r2, [pc, #304]	; (8002314 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80021e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a4b      	ldr	r2, [pc, #300]	; (8002318 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80021ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2200      	movs	r2, #0
 80021f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3380      	adds	r3, #128	; 0x80
 8002224:	4619      	mov	r1, r3
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	f7fe fe4f 	bl	8000ed0 <HAL_DMA_Start_IT>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d017      	beq.n	8002268 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002246:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a33      	ldr	r2, [pc, #204]	; (800231c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800224e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e050      	b.n	800230a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	2b01      	cmp	r3, #1
 8002274:	d002      	beq.n	800227c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	025b      	lsls	r3, r3, #9
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
 8002280:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	025b      	lsls	r3, r3, #9
 8002286:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002288:	2390      	movs	r3, #144	; 0x90
 800228a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800228c:	2302      	movs	r3, #2
 800228e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002294:	2301      	movs	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f107 0210 	add.w	r2, r7, #16
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 fa8e 	bl	80037c4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d90a      	bls.n	80022c4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2282      	movs	r2, #130	; 0x82
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 faf2 	bl	80038a4 <SDMMC_CmdReadMultiBlock>
 80022c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80022c2:	e009      	b.n	80022d8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2281      	movs	r2, #129	; 0x81
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 fac5 	bl	8003860 <SDMMC_CmdReadSingleBlock>
 80022d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d012      	beq.n	8002304 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0e      	ldr	r2, [pc, #56]	; (800231c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	431a      	orrs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e002      	b.n	800230a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e000      	b.n	800230a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002308:	2302      	movs	r3, #2
  }
}
 800230a:	4618      	mov	r0, r3
 800230c:	3730      	adds	r7, #48	; 0x30
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	08002d4f 	.word	0x08002d4f
 8002318:	08002dc1 	.word	0x08002dc1
 800231c:	004005ff 	.word	0x004005ff
 8002320:	4225858c 	.word	0x4225858c

08002324 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	; 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0c5      	b.n	80024d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	f040 80be 	bne.w	80024d6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	441a      	add	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	429a      	cmp	r2, r3
 800236c:	d907      	bls.n	800237e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0ac      	b.n	80024d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2203      	movs	r2, #3
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	4a4e      	ldr	r2, [pc, #312]	; (80024e0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80023a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	4a4d      	ldr	r2, [pc, #308]	; (80024e4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80023b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	2200      	movs	r2, #0
 80023b8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d002      	beq.n	80023c8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	025b      	lsls	r3, r3, #9
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d90a      	bls.n	80023e4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	22a0      	movs	r2, #160	; 0xa0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023da:	4618      	mov	r0, r3
 80023dc:	f001 faa6 	bl	800392c <SDMMC_CmdWriteMultiBlock>
 80023e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80023e2:	e009      	b.n	80023f8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2290      	movs	r2, #144	; 0x90
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 fa79 	bl	80038e8 <SDMMC_CmdWriteSingleBlock>
 80023f6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	431a      	orrs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e059      	b.n	80024d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3380      	adds	r3, #128	; 0x80
 800245a:	461a      	mov	r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	025b      	lsls	r3, r3, #9
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	f7fe fd35 	bl	8000ed0 <HAL_DMA_Start_IT>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01c      	beq.n	80024a6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800247a:	f023 0302 	bic.w	r3, r3, #2
 800247e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002486:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e018      	b.n	80024d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	025b      	lsls	r3, r3, #9
 80024b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80024b2:	2390      	movs	r3, #144	; 0x90
 80024b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80024be:	2301      	movs	r3, #1
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f107 0210 	add.w	r2, r7, #16
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f979 	bl	80037c4 <SDIO_ConfigData>

      return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
  }
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3730      	adds	r7, #48	; 0x30
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08002d25 	.word	0x08002d25
 80024e4:	08002dc1 	.word	0x08002dc1
 80024e8:	004005ff 	.word	0x004005ff
 80024ec:	4225858c 	.word	0x4225858c

080024f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_SD_IRQHandler+0x2e>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 ffff 	bl	800351a <SD_Read_IT>
 800251c:	e165      	b.n	80027ea <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 808f 	beq.w	800264c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002536:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002546:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800254a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d039      	beq.n	80025da <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d104      	bne.n	800257a <HAL_SD_IRQHandler+0x8a>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d011      	beq.n	800259e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f001 f9f6 	bl	8003970 <SDMMC_CmdStopTransfer>
 8002584:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f92f 	bl	80027fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <HAL_SD_IRQHandler+0xda>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f001 fe5c 	bl	8004288 <HAL_SD_RxCpltCallback>
 80025d0:	e10b      	b.n	80027ea <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f001 fe4e 	bl	8004274 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80025d8:	e107      	b.n	80027ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8102 	beq.w	80027ea <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d011      	beq.n	8002614 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 f9bb 	bl	8003970 <SDMMC_CmdStopTransfer>
 80025fa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f8f4 	bl	80027fc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 80e5 	bne.w	80027ea <HAL_SD_IRQHandler+0x2fa>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 80df 	bne.w	80027ea <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0208 	bic.w	r2, r2, #8
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f001 fe15 	bl	8004274 <HAL_SD_TxCpltCallback>
}
 800264a:	e0ce      	b.n	80027ea <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_SD_IRQHandler+0x17c>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 ffa9 	bl	80035bc <SD_Write_IT>
 800266a:	e0be      	b.n	80027ea <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002672:	f240 233a 	movw	r3, #570	; 0x23a
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80b6 	beq.w	80027ea <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	f043 0202 	orr.w	r2, r3, #2
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	f043 0208 	orr.w	r2, r3, #8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	f043 0208 	orr.w	r2, r3, #8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f240 723a 	movw	r2, #1850	; 0x73a
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002718:	f023 0302 	bic.w	r3, r3, #2
 800271c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f001 f924 	bl	8003970 <SDMMC_CmdStopTransfer>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f855 	bl	80027fc <HAL_SD_ErrorCallback>
}
 8002752:	e04a      	b.n	80027ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d045      	beq.n	80027ea <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_SD_IRQHandler+0x282>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d011      	beq.n	8002796 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <HAL_SD_IRQHandler+0x304>)
 8002778:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fbfe 	bl	8000f80 <HAL_DMA_Abort_IT>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d02f      	beq.n	80027ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fb68 	bl	8002e64 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002794:	e029      	b.n	80027ea <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_SD_IRQHandler+0x2ba>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d011      	beq.n	80027ce <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <HAL_SD_IRQHandler+0x308>)
 80027b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fbe2 	bl	8000f80 <HAL_DMA_Abort_IT>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d013      	beq.n	80027ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fb83 	bl	8002ed2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80027cc:	e00d      	b.n	80027ea <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f001 fd3c 	bl	8004260 <HAL_SD_AbortCallback>
}
 80027e8:	e7ff      	b.n	80027ea <HAL_SD_IRQHandler+0x2fa>
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	08002e65 	.word	0x08002e65
 80027f8:	08002ed3 	.word	0x08002ed3

080027fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800281e:	0f9b      	lsrs	r3, r3, #30
 8002820:	b2da      	uxtb	r2, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	b2da      	uxtb	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283c:	0e1b      	lsrs	r3, r3, #24
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	b2da      	uxtb	r2, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	b2da      	uxtb	r2, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	b2da      	uxtb	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002866:	b2da      	uxtb	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002870:	0d1b      	lsrs	r3, r3, #20
 8002872:	b29a      	uxth	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	b2da      	uxtb	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800288e:	0bdb      	lsrs	r3, r3, #15
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a0:	0b9b      	lsrs	r3, r3, #14
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b2:	0b5b      	lsrs	r3, r3, #13
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c4:	0b1b      	lsrs	r3, r3, #12
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d163      	bne.n	80029a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e4:	009a      	lsls	r2, r3, #2
 80028e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80028f0:	0f92      	lsrs	r2, r2, #30
 80028f2:	431a      	orrs	r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fc:	0edb      	lsrs	r3, r3, #27
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	b2da      	uxtb	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290e:	0e1b      	lsrs	r3, r3, #24
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	b2da      	uxtb	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002920:	0d5b      	lsrs	r3, r3, #21
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	b2da      	uxtb	r2, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002932:	0c9b      	lsrs	r3, r3, #18
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	b2da      	uxtb	r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002944:	0bdb      	lsrs	r3, r3, #15
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	b2da      	uxtb	r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	7e1b      	ldrb	r3, [r3, #24]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	3302      	adds	r3, #2
 8002968:	2201      	movs	r2, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002972:	fb03 f202 	mul.w	r2, r3, r2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	7a1b      	ldrb	r3, [r3, #8]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	2201      	movs	r2, #1
 8002986:	409a      	lsls	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002994:	0a52      	lsrs	r2, r2, #9
 8002996:	fb03 f202 	mul.w	r2, r3, r2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a4:	661a      	str	r2, [r3, #96]	; 0x60
 80029a6:	e031      	b.n	8002a0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d11d      	bne.n	80029ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029be:	0c1b      	lsrs	r3, r3, #16
 80029c0:	431a      	orrs	r2, r3
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	3301      	adds	r3, #1
 80029cc:	029a      	lsls	r2, r3, #10
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	661a      	str	r2, [r3, #96]	; 0x60
 80029ea:	e00f      	b.n	8002a0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_SD_GetCardCSD+0x344>)
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e09d      	b.n	8002b48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a10:	0b9b      	lsrs	r3, r3, #14
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a22:	09db      	lsrs	r3, r3, #7
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	0fdb      	lsrs	r3, r3, #31
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	0f5b      	lsrs	r3, r3, #29
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	0e9b      	lsrs	r3, r3, #26
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	0d9b      	lsrs	r3, r3, #22
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	0d5b      	lsrs	r3, r3, #21
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	0bdb      	lsrs	r3, r3, #15
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	0b9b      	lsrs	r3, r3, #14
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	0b5b      	lsrs	r3, r3, #13
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	0b1b      	lsrs	r3, r3, #12
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	0a9b      	lsrs	r3, r3, #10
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	004005ff 	.word	0x004005ff

08002b58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b08e      	sub	sp, #56	; 0x38
 8002bb4:	af04      	add	r7, sp, #16
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d02e      	beq.n	8002c2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	d106      	bne.n	8002be6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
 8002be4:	e029      	b.n	8002c3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bec:	d10a      	bne.n	8002c04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fb2a 	bl	8003248 <SD_WideBus_Enable>
 8002bf4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38
 8002c02:	e01a      	b.n	8002c3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fb67 	bl	80032de <SD_WideBus_Disable>
 8002c10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c1e:	e00c      	b.n	8002c3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c2c:	e005      	b.n	8002c3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c58:	e01f      	b.n	8002c9a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681d      	ldr	r5, [r3, #0]
 8002c80:	466c      	mov	r4, sp
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c94:	4628      	mov	r0, r5
 8002c96:	f000 fce6 	bl	8003666 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fdba 	bl	800381c <SDMMC_CmdBlockLength>
 8002ca8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00c      	beq.n	8002cca <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3728      	adds	r7, #40	; 0x28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	004005ff 	.word	0x004005ff

08002ce4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002cf0:	f107 030c 	add.w	r3, r7, #12
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa7e 	bl	80031f8 <SD_SendStatus>
 8002cfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	0a5b      	lsrs	r3, r3, #9
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002d1a:	693b      	ldr	r3, [r7, #16]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	2b82      	cmp	r3, #130	; 0x82
 8002d62:	d111      	bne.n	8002d88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fe01 	bl	8003970 <SDMMC_CmdStopTransfer>
 8002d6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f7ff fd3a 	bl	80027fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0208 	bic.w	r2, r2, #8
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f001 fa69 	bl	8004288 <HAL_SD_RxCpltCallback>
#endif
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe fa82 	bl	80012d8 <HAL_DMA_GetError>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d03e      	beq.n	8002e58 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d002      	beq.n	8002df6 <SD_DMAError+0x36>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d12d      	bne.n	8002e52 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <SD_DMAError+0xa0>)
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002e0c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002e1a:	6978      	ldr	r0, [r7, #20]
 8002e1c:	f7ff ff62 	bl	8002ce4 <HAL_SD_GetCardState>
 8002e20:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b06      	cmp	r3, #6
 8002e26:	d002      	beq.n	8002e2e <SD_DMAError+0x6e>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d10a      	bne.n	8002e44 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fd9c 	bl	8003970 <SDMMC_CmdStopTransfer>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff fcd2 	bl	80027fc <HAL_SD_ErrorCallback>
#endif
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	004005ff 	.word	0x004005ff

08002e64 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f240 523a 	movw	r2, #1338	; 0x53a
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff ff31 	bl	8002ce4 <HAL_SD_GetCardState>
 8002e82:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d002      	beq.n	8002e9e <SD_DMATxAbort+0x3a>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10a      	bne.n	8002eb4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fd64 	bl	8003970 <SDMMC_CmdStopTransfer>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f001 f9cf 	bl	8004260 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002ec2:	e002      	b.n	8002eca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fc99 	bl	80027fc <HAL_SD_ErrorCallback>
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f240 523a 	movw	r2, #1338	; 0x53a
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff fefa 	bl	8002ce4 <HAL_SD_GetCardState>
 8002ef0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d002      	beq.n	8002f0c <SD_DMARxAbort+0x3a>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d10a      	bne.n	8002f22 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fd2d 	bl	8003970 <SDMMC_CmdStopTransfer>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f001 f998 	bl	8004260 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002f30:	e002      	b.n	8002f38 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff fc62 	bl	80027fc <HAL_SD_ErrorCallback>
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002f40:	b5b0      	push	{r4, r5, r7, lr}
 8002f42:	b094      	sub	sp, #80	; 0x50
 8002f44:	af04      	add	r7, sp, #16
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fbdf 	bl	8003714 <SDIO_GetPowerState>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f60:	e0b8      	b.n	80030d4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d02f      	beq.n	8002fca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fe08 	bl	8003b84 <SDMMC_CmdSendCID>
 8002f74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <SD_InitCard+0x40>
    {
      return errorstate;
 8002f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7e:	e0a9      	b.n	80030d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fc09 	bl	800379e <SDIO_GetResponse>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2104      	movs	r1, #4
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fc00 	bl	800379e <SDIO_GetResponse>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2108      	movs	r1, #8
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fbf7 	bl	800379e <SDIO_GetResponse>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	210c      	movs	r1, #12
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fbee 	bl	800379e <SDIO_GetResponse>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d00d      	beq.n	8002fee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f107 020e 	add.w	r2, r7, #14
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fe0e 	bl	8003bfe <SDMMC_CmdSetRelAdd>
 8002fe2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <SD_InitCard+0xae>
    {
      return errorstate;
 8002fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fec:	e072      	b.n	80030d4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d036      	beq.n	8003064 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f000 fdd8 	bl	8003bc0 <SDMMC_CmdSendCSD>
 8003010:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	e05b      	b.n	80030d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fbbb 	bl	800379e <SDIO_GetResponse>
 8003028:	4602      	mov	r2, r0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2104      	movs	r1, #4
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fbb2 	bl	800379e <SDIO_GetResponse>
 800303a:	4602      	mov	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2108      	movs	r1, #8
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fba9 	bl	800379e <SDIO_GetResponse>
 800304c:	4602      	mov	r2, r0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	210c      	movs	r1, #12
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fba0 	bl	800379e <SDIO_GetResponse>
 800305e:	4602      	mov	r2, r0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2104      	movs	r1, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fb97 	bl	800379e <SDIO_GetResponse>
 8003070:	4603      	mov	r3, r0
 8003072:	0d1a      	lsrs	r2, r3, #20
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fbc6 	bl	8002810 <HAL_SD_GetCardCSD>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800308a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800308e:	e021      	b.n	80030d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	2200      	movs	r2, #0
 800309c:	461c      	mov	r4, r3
 800309e:	4615      	mov	r5, r2
 80030a0:	4622      	mov	r2, r4
 80030a2:	462b      	mov	r3, r5
 80030a4:	4608      	mov	r0, r1
 80030a6:	f000 fc85 	bl	80039b4 <SDMMC_CmdSelDesel>
 80030aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80030ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <SD_InitCard+0x176>
  {
    return errorstate;
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b4:	e00e      	b.n	80030d4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681d      	ldr	r5, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	466c      	mov	r4, sp
 80030be:	f103 0210 	add.w	r2, r3, #16
 80030c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80030c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030c8:	3304      	adds	r3, #4
 80030ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030cc:	4628      	mov	r0, r5
 80030ce:	f000 faca 	bl	8003666 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3740      	adds	r7, #64	; 0x40
 80030d8:	46bd      	mov	sp, r7
 80030da:	bdb0      	pop	{r4, r5, r7, pc}

080030dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fc80 	bl	80039fa <SDMMC_CmdGoIdleState>
 80030fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	e072      	b.n	80031ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fc93 	bl	8003a36 <SDMMC_CmdOperCond>
 8003110:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fc69 	bl	80039fa <SDMMC_CmdGoIdleState>
 8003128:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	e05b      	b.n	80031ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313e:	2b01      	cmp	r3, #1
 8003140:	d137      	bne.n	80031b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2100      	movs	r1, #0
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fc93 	bl	8003a74 <SDMMC_CmdAppCommand>
 800314e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d02d      	beq.n	80031b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003156:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800315a:	e047      	b.n	80031ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fc86 	bl	8003a74 <SDMMC_CmdAppCommand>
 8003168:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <SD_PowerON+0x98>
    {
      return errorstate;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	e03b      	b.n	80031ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	491e      	ldr	r1, [pc, #120]	; (80031f4 <SD_PowerON+0x118>)
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fc9c 	bl	8003ab8 <SDMMC_CmdAppOperCommand>
 8003180:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003188:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800318c:	e02e      	b.n	80031ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fb02 	bl	800379e <SDIO_GetResponse>
 800319a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	0fdb      	lsrs	r3, r3, #31
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <SD_PowerON+0xcc>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <SD_PowerON+0xce>
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]

    count++;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	3301      	adds	r3, #1
 80031b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d802      	bhi.n	80031c2 <SD_PowerON+0xe6>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0cc      	beq.n	800315c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d902      	bls.n	80031d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80031cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031d0:	e00c      	b.n	80031ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44
 80031e2:	e002      	b.n	80031ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	c1100000 	.word	0xc1100000

080031f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800320c:	e018      	b.n	8003240 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 fd10 	bl	8003c40 <SDMMC_CmdSendStatus>
 8003220:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	e009      	b.n	8003240 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fab3 	bl	800379e <SDIO_GetResponse>
 8003238:	4602      	mov	r2, r0
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fa9d 	bl	800379e <SDIO_GetResponse>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800326e:	d102      	bne.n	8003276 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003274:	e02f      	b.n	80032d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f879 	bl	8003374 <SD_FindSCR>
 8003282:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	e023      	b.n	80032d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01c      	beq.n	80032d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f000 fbe5 	bl	8003a74 <SDMMC_CmdAppCommand>
 80032aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	e00f      	b.n	80032d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2102      	movs	r1, #2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fc1e 	bl	8003afe <SDMMC_CmdBusWidth>
 80032c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	e003      	b.n	80032d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e001      	b.n	80032d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80032d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fa52 	bl	800379e <SDIO_GetResponse>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003304:	d102      	bne.n	800330c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800330a:	e02f      	b.n	800336c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800330c:	f107 030c 	add.w	r3, r7, #12
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f82e 	bl	8003374 <SD_FindSCR>
 8003318:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	e023      	b.n	800336c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01c      	beq.n	8003368 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 fb9a 	bl	8003a74 <SDMMC_CmdAppCommand>
 8003340:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	e00f      	b.n	800336c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fbd3 	bl	8003afe <SDMMC_CmdBusWidth>
 8003358:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	e003      	b.n	800336c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003364:	2300      	movs	r3, #0
 8003366:	e001      	b.n	800336c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003368:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b08f      	sub	sp, #60	; 0x3c
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800337e:	f7fd fbb7 	bl	8000af0 <HAL_GetTick>
 8003382:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2108      	movs	r1, #8
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fa3e 	bl	800381c <SDMMC_CmdBlockLength>
 80033a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	e0b2      	b.n	8003512 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f000 fb5b 	bl	8003a74 <SDMMC_CmdAppCommand>
 80033be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	e0a3      	b.n	8003512 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80033d0:	2308      	movs	r3, #8
 80033d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80033d4:	2330      	movs	r3, #48	; 0x30
 80033d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80033d8:	2302      	movs	r3, #2
 80033da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033dc:	2300      	movs	r3, #0
 80033de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f107 0210 	add.w	r2, r7, #16
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f9e8 	bl	80037c4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fba2 	bl	8003b42 <SDMMC_CmdSendSCR>
 80033fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b00      	cmp	r3, #0
 8003404:	d02a      	beq.n	800345c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	e083      	b.n	8003512 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00f      	beq.n	8003438 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	f107 0208 	add.w	r2, r7, #8
 8003424:	18d4      	adds	r4, r2, r3
 8003426:	4608      	mov	r0, r1
 8003428:	f000 f948 	bl	80036bc <SDIO_ReadFIFO>
 800342c:	4603      	mov	r3, r0
 800342e:	6023      	str	r3, [r4, #0]
      index++;
 8003430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003432:	3301      	adds	r3, #1
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
 8003436:	e006      	b.n	8003446 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d012      	beq.n	800346c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003446:	f7fd fb53 	bl	8000af0 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d102      	bne.n	800345c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003456:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800345a:	e05a      	b.n	8003512 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003462:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0cf      	beq.n	800340a <SD_FindSCR+0x96>
 800346a:	e000      	b.n	800346e <SD_FindSCR+0xfa>
      break;
 800346c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2208      	movs	r2, #8
 8003482:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003484:	2308      	movs	r3, #8
 8003486:	e044      	b.n	8003512 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2202      	movs	r2, #2
 800349c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800349e:	2302      	movs	r3, #2
 80034a0:	e037      	b.n	8003512 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2220      	movs	r2, #32
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e02a      	b.n	8003512 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	061a      	lsls	r2, r3, #24
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80034dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	0e1b      	lsrs	r3, r3, #24
 80034e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	601a      	str	r2, [r3, #0]
    scr++;
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	3304      	adds	r3, #4
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	061a      	lsls	r2, r3, #24
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003504:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	0e1b      	lsrs	r3, r3, #24
 800350a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	373c      	adds	r7, #60	; 0x3c
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03f      	beq.n	80035b4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e033      	b.n	80035a2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f8bc 	bl	80036bc <SDIO_ReadFIFO>
 8003544:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3301      	adds	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	3b01      	subs	r3, #1
 8003558:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3301      	adds	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	3b01      	subs	r3, #1
 800356e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	701a      	strb	r2, [r3, #0]
      tmp++;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3301      	adds	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	3b01      	subs	r3, #1
 8003584:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	0e1b      	lsrs	r3, r3, #24
 800358a:	b2da      	uxtb	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3301      	adds	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	3b01      	subs	r3, #1
 800359a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3301      	adds	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	d9c8      	bls.n	800353a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80035b4:	bf00      	nop
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d043      	beq.n	800365e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e037      	b.n	800364c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3301      	adds	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021a      	lsls	r2, r3, #8
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3b01      	subs	r3, #1
 8003604:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	041a      	lsls	r2, r3, #16
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3301      	adds	r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3b01      	subs	r3, #1
 800361c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	061a      	lsls	r2, r3, #24
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
 8003628:	60bb      	str	r3, [r7, #8]
      tmp++;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3301      	adds	r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	3b01      	subs	r3, #1
 8003634:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f107 0208 	add.w	r2, r7, #8
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f848 	bl	80036d6 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	3301      	adds	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b07      	cmp	r3, #7
 8003650:	d9c4      	bls.n	80035dc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003666:	b084      	sub	sp, #16
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	f107 001c 	add.w	r0, r7, #28
 8003674:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800367c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800367e:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003680:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003684:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003688:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800368c:	431a      	orrs	r2, r3
             Init.ClockDiv
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003690:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80036a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	b004      	add	sp, #16
 80036ba:	4770      	bx	lr

080036bc <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2203      	movs	r2, #3
 8003704:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0303 	and.w	r3, r3, #3
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800374e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003754:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800375a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800376a:	f023 030f 	bic.w	r3, r3, #15
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	b2db      	uxtb	r3, r3
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3314      	adds	r3, #20
 80037ac:	461a      	mov	r2, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
}  
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037ea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80037f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80037f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800380e:	2300      	movs	r3, #0

}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800382a:	2310      	movs	r3, #16
 800382c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800382e:	2340      	movs	r3, #64	; 0x40
 8003830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800383a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800383c:	f107 0308 	add.w	r3, r7, #8
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff74 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003848:	f241 3288 	movw	r2, #5000	; 0x1388
 800384c:	2110      	movs	r1, #16
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa18 	bl	8003c84 <SDMMC_GetCmdResp1>
 8003854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003856:	69fb      	ldr	r3, [r7, #28]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800386e:	2311      	movs	r3, #17
 8003870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003872:	2340      	movs	r3, #64	; 0x40
 8003874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800387a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800387e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003880:	f107 0308 	add.w	r3, r7, #8
 8003884:	4619      	mov	r1, r3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ff52 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	2111      	movs	r1, #17
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f9f6 	bl	8003c84 <SDMMC_GetCmdResp1>
 8003898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800389a:	69fb      	ldr	r3, [r7, #28]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3720      	adds	r7, #32
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80038b2:	2312      	movs	r3, #18
 80038b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038b6:	2340      	movs	r3, #64	; 0x40
 80038b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038c4:	f107 0308 	add.w	r3, r7, #8
 80038c8:	4619      	mov	r1, r3
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff ff30 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	2112      	movs	r1, #18
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9d4 	bl	8003c84 <SDMMC_GetCmdResp1>
 80038dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038de:	69fb      	ldr	r3, [r7, #28]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80038f6:	2318      	movs	r3, #24
 80038f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038fa:	2340      	movs	r3, #64	; 0x40
 80038fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003906:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003908:	f107 0308 	add.w	r3, r7, #8
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ff0e 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003914:	f241 3288 	movw	r2, #5000	; 0x1388
 8003918:	2118      	movs	r1, #24
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9b2 	bl	8003c84 <SDMMC_GetCmdResp1>
 8003920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003922:	69fb      	ldr	r3, [r7, #28]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800393a:	2319      	movs	r3, #25
 800393c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800393e:	2340      	movs	r3, #64	; 0x40
 8003940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800394c:	f107 0308 	add.w	r3, r7, #8
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff feec 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	2119      	movs	r1, #25
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f990 	bl	8003c84 <SDMMC_GetCmdResp1>
 8003964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003966:	69fb      	ldr	r3, [r7, #28]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800397c:	230c      	movs	r3, #12
 800397e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003980:	2340      	movs	r3, #64	; 0x40
 8003982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800398e:	f107 0308 	add.w	r3, r7, #8
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fecb 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800399a:	4a05      	ldr	r2, [pc, #20]	; (80039b0 <SDMMC_CmdStopTransfer+0x40>)
 800399c:	210c      	movs	r1, #12
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f970 	bl	8003c84 <SDMMC_GetCmdResp1>
 80039a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039a6:	69fb      	ldr	r3, [r7, #28]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	05f5e100 	.word	0x05f5e100

080039b4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80039c4:	2307      	movs	r3, #7
 80039c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039c8:	2340      	movs	r3, #64	; 0x40
 80039ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039d6:	f107 0310 	add.w	r3, r7, #16
 80039da:	4619      	mov	r1, r3
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff fea7 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	2107      	movs	r1, #7
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f94b 	bl	8003c84 <SDMMC_GetCmdResp1>
 80039ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3728      	adds	r7, #40	; 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b088      	sub	sp, #32
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a18:	f107 0308 	add.w	r3, r7, #8
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff fe86 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fb65 	bl	80040f4 <SDMMC_GetCmdError>
 8003a2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b088      	sub	sp, #32
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003a3e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003a42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003a44:	2308      	movs	r3, #8
 8003a46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a48:	2340      	movs	r3, #64	; 0x40
 8003a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fe67 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 faf8 	bl	8004058 <SDMMC_GetCmdResp7>
 8003a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003a82:	2337      	movs	r3, #55	; 0x37
 8003a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a86:	2340      	movs	r3, #64	; 0x40
 8003a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a94:	f107 0308 	add.w	r3, r7, #8
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fe48 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	2137      	movs	r1, #55	; 0x37
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8ec 	bl	8003c84 <SDMMC_GetCmdResp1>
 8003aac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003aae:	69fb      	ldr	r3, [r7, #28]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003ace:	2329      	movs	r3, #41	; 0x29
 8003ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ad2:	2340      	movs	r3, #64	; 0x40
 8003ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ade:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ae0:	f107 0308 	add.w	r3, r7, #8
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fe22 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f9ff 	bl	8003ef0 <SDMMC_GetCmdResp3>
 8003af2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003af4:	69fb      	ldr	r3, [r7, #28]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b088      	sub	sp, #32
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003b0c:	2306      	movs	r3, #6
 8003b0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b10:	2340      	movs	r3, #64	; 0x40
 8003b12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b1e:	f107 0308 	add.w	r3, r7, #8
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fe03 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	2106      	movs	r1, #6
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8a7 	bl	8003c84 <SDMMC_GetCmdResp1>
 8003b36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b38:	69fb      	ldr	r3, [r7, #28]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b088      	sub	sp, #32
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003b4e:	2333      	movs	r3, #51	; 0x33
 8003b50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b52:	2340      	movs	r3, #64	; 0x40
 8003b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b60:	f107 0308 	add.w	r3, r7, #8
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fde2 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	2133      	movs	r1, #51	; 0x33
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f886 	bl	8003c84 <SDMMC_GetCmdResp1>
 8003b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003b90:	2302      	movs	r3, #2
 8003b92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003b94:	23c0      	movs	r3, #192	; 0xc0
 8003b96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fdc1 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f956 	bl	8003e60 <SDMMC_GetCmdResp2>
 8003bb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003bce:	2309      	movs	r3, #9
 8003bd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003bd2:	23c0      	movs	r3, #192	; 0xc0
 8003bd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003be0:	f107 0308 	add.w	r3, r7, #8
 8003be4:	4619      	mov	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fda2 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f937 	bl	8003e60 <SDMMC_GetCmdResp2>
 8003bf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b088      	sub	sp, #32
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c10:	2340      	movs	r3, #64	; 0x40
 8003c12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c1e:	f107 0308 	add.w	r3, r7, #8
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fd83 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	2103      	movs	r1, #3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f99c 	bl	8003f6c <SDMMC_GetCmdResp6>
 8003c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c36:	69fb      	ldr	r3, [r7, #28]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003c4e:	230d      	movs	r3, #13
 8003c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c52:	2340      	movs	r3, #64	; 0x40
 8003c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c60:	f107 0308 	add.w	r3, r7, #8
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fd62 	bl	8003730 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	210d      	movs	r1, #13
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f806 	bl	8003c84 <SDMMC_GetCmdResp1>
 8003c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c92:	4b70      	ldr	r3, [pc, #448]	; (8003e54 <SDMMC_GetCmdResp1+0x1d0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a70      	ldr	r2, [pc, #448]	; (8003e58 <SDMMC_GetCmdResp1+0x1d4>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	0a5a      	lsrs	r2, r3, #9
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	1e5a      	subs	r2, r3, #1
 8003caa:	61fa      	str	r2, [r7, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003cb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003cb4:	e0c9      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ef      	beq.n	8003ca6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ea      	bne.n	8003ca6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e0b1      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0a6      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	22c5      	movs	r2, #197	; 0xc5
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f7ff fd3e 	bl	8003784 <SDIO_GetCommandResponse>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	7afb      	ldrb	r3, [r7, #11]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d001      	beq.n	8003d16 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e099      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003d16:	2100      	movs	r1, #0
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff fd40 	bl	800379e <SDIO_GetResponse>
 8003d1e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4b4e      	ldr	r3, [pc, #312]	; (8003e5c <SDMMC_GetCmdResp1+0x1d8>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e08d      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da02      	bge.n	8003d3a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d38:	e087      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003d44:	2340      	movs	r3, #64	; 0x40
 8003d46:	e080      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	e079      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d64:	e071      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d74:	e069      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d84:	e061      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d94:	e059      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da4:	e051      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003db4:	e049      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003dc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dc4:	e041      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd4:	e039      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003de4:	e031      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003df0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003df4:	e029      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003e00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003e04:	e021      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003e10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e14:	e019      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003e20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e24:	e011      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003e30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e34:	e009      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003e40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003e44:	e001      	b.n	8003e4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000000 	.word	0x20000000
 8003e58:	10624dd3 	.word	0x10624dd3
 8003e5c:	fdffe008 	.word	0xfdffe008

08003e60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e68:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <SDMMC_GetCmdResp2+0x88>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <SDMMC_GetCmdResp2+0x8c>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	0a5b      	lsrs	r3, r3, #9
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1e5a      	subs	r2, r3, #1
 8003e82:	60fa      	str	r2, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e8c:	e026      	b.n	8003edc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ef      	beq.n	8003e7e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ea      	bne.n	8003e7e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003eba:	2304      	movs	r3, #4
 8003ebc:	e00e      	b.n	8003edc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e003      	b.n	8003edc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	22c5      	movs	r2, #197	; 0xc5
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	10624dd3 	.word	0x10624dd3

08003ef0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ef8:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <SDMMC_GetCmdResp3+0x74>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <SDMMC_GetCmdResp3+0x78>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	0a5b      	lsrs	r3, r3, #9
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	fb02 f303 	mul.w	r3, r2, r3
 8003f0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1e5a      	subs	r2, r3, #1
 8003f12:	60fa      	str	r2, [r7, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f1c:	e01b      	b.n	8003f56 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ef      	beq.n	8003f0e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ea      	bne.n	8003f0e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2204      	movs	r2, #4
 8003f48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	e003      	b.n	8003f56 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	22c5      	movs	r2, #197	; 0xc5
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000000 	.word	0x20000000
 8003f68:	10624dd3 	.word	0x10624dd3

08003f6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	460b      	mov	r3, r1
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f7a:	4b35      	ldr	r3, [pc, #212]	; (8004050 <SDMMC_GetCmdResp6+0xe4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a35      	ldr	r2, [pc, #212]	; (8004054 <SDMMC_GetCmdResp6+0xe8>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	0a5b      	lsrs	r3, r3, #9
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	61fa      	str	r2, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f9e:	e052      	b.n	8004046 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ef      	beq.n	8003f90 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ea      	bne.n	8003f90 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003fcc:	2304      	movs	r3, #4
 8003fce:	e03a      	b.n	8004046 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e02f      	b.n	8004046 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff fbcc 	bl	8003784 <SDIO_GetCommandResponse>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	7afb      	ldrb	r3, [r7, #11]
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d001      	beq.n	8003ffa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e025      	b.n	8004046 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	22c5      	movs	r2, #197	; 0xc5
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004000:	2100      	movs	r1, #0
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7ff fbcb 	bl	800379e <SDIO_GetResponse>
 8004008:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800401e:	2300      	movs	r3, #0
 8004020:	e011      	b.n	8004046 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800402c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004030:	e009      	b.n	8004046 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800403c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004040:	e001      	b.n	8004046 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000000 	.word	0x20000000
 8004054:	10624dd3 	.word	0x10624dd3

08004058 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004060:	4b22      	ldr	r3, [pc, #136]	; (80040ec <SDMMC_GetCmdResp7+0x94>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a22      	ldr	r2, [pc, #136]	; (80040f0 <SDMMC_GetCmdResp7+0x98>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	0a5b      	lsrs	r3, r3, #9
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1e5a      	subs	r2, r3, #1
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004080:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004084:	e02c      	b.n	80040e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0ef      	beq.n	8004076 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ea      	bne.n	8004076 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2204      	movs	r2, #4
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040b2:	2304      	movs	r3, #4
 80040b4:	e014      	b.n	80040e0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e009      	b.n	80040e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80040de:	2300      	movs	r3, #0
  
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	20000000 	.word	0x20000000
 80040f0:	10624dd3 	.word	0x10624dd3

080040f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <SDMMC_GetCmdError+0x50>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a11      	ldr	r2, [pc, #68]	; (8004148 <SDMMC_GetCmdError+0x54>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	0a5b      	lsrs	r3, r3, #9
 8004108:	f241 3288 	movw	r2, #5000	; 0x1388
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1e5a      	subs	r2, r3, #1
 8004116:	60fa      	str	r2, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800411c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004120:	e009      	b.n	8004136 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f1      	beq.n	8004112 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	22c5      	movs	r2, #197	; 0xc5
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000000 	.word	0x20000000
 8004148:	10624dd3 	.word	0x10624dd3

0800414c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004150:	4904      	ldr	r1, [pc, #16]	; (8004164 <MX_FATFS_Init+0x18>)
 8004152:	4805      	ldr	r0, [pc, #20]	; (8004168 <MX_FATFS_Init+0x1c>)
 8004154:	f000 fa84 	bl	8004660 <FATFS_LinkDriver>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <MX_FATFS_Init+0x20>)
 800415e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000174 	.word	0x20000174
 8004168:	08004724 	.word	0x08004724
 800416c:	20000170 	.word	0x20000170

08004170 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800417a:	f000 f896 	bl	80042aa <BSP_SD_IsDetected>
 800417e:	4603      	mov	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	d001      	beq.n	8004188 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e012      	b.n	80041ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004188:	480b      	ldr	r0, [pc, #44]	; (80041b8 <BSP_SD_Init+0x48>)
 800418a:	f7fd ff39 	bl	8002000 <HAL_SD_Init>
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800419c:	4806      	ldr	r0, [pc, #24]	; (80041b8 <BSP_SD_Init+0x48>)
 800419e:	f7fe fd07 	bl	8002bb0 <HAL_SD_ConfigWideBusOperation>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80041ac:	79fb      	ldrb	r3, [r7, #7]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000028 	.word	0x20000028

080041bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	4806      	ldr	r0, [pc, #24]	; (80041ec <BSP_SD_ReadBlocks_DMA+0x30>)
 80041d4:	f7fd ffc4 	bl	8002160 <HAL_SD_ReadBlocks_DMA>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000028 	.word	0x20000028

080041f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	68f9      	ldr	r1, [r7, #12]
 8004206:	4806      	ldr	r0, [pc, #24]	; (8004220 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004208:	f7fe f88c 	bl	8002324 <HAL_SD_WriteBlocks_DMA>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000028 	.word	0x20000028

08004224 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004228:	4805      	ldr	r0, [pc, #20]	; (8004240 <BSP_SD_GetCardState+0x1c>)
 800422a:	f7fe fd5b 	bl	8002ce4 <HAL_SD_GetCardState>
 800422e:	4603      	mov	r3, r0
 8004230:	2b04      	cmp	r3, #4
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000028 	.word	0x20000028

08004244 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4803      	ldr	r0, [pc, #12]	; (800425c <BSP_SD_GetCardInfo+0x18>)
 8004250:	f7fe fc82 	bl	8002b58 <HAL_SD_GetCardInfo>
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000028 	.word	0x20000028

08004260 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004268:	f000 f818 	bl	800429c <BSP_SD_AbortCallback>
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800427c:	f000 f98c 	bl	8004598 <BSP_SD_WriteCpltCallback>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004290:	f000 f98e 	bl	80045b0 <BSP_SD_ReadCpltCallback>
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0

}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80042b0:	2301      	movs	r3, #1
 80042b2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	b2db      	uxtb	r3, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80042cc:	f7fc fc10 	bl	8000af0 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80042d2:	e006      	b.n	80042e2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80042d4:	f7ff ffa6 	bl	8004224 <BSP_SD_GetCardState>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	e009      	b.n	80042f6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80042e2:	f7fc fc05 	bl	8000af0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d8f0      	bhi.n	80042d4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <SD_CheckStatus+0x38>)
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004310:	f7ff ff88 	bl	8004224 <BSP_SD_GetCardState>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <SD_CheckStatus+0x38>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4b04      	ldr	r3, [pc, #16]	; (8004338 <SD_CheckStatus+0x38>)
 8004328:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800432a:	4b03      	ldr	r3, [pc, #12]	; (8004338 <SD_CheckStatus+0x38>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	b2db      	uxtb	r3, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000009 	.word	0x20000009

0800433c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004346:	f7ff ff13 	bl	8004170 <BSP_SD_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff ffd4 	bl	8004300 <SD_CheckStatus>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <SD_initialize+0x34>)
 800435e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <SD_initialize+0x34>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000009 	.word	0x20000009

08004374 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ffbd 	bl	8004300 <SD_CheckStatus>
 8004386:	4603      	mov	r3, r0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80043a4:	f247 5030 	movw	r0, #30000	; 0x7530
 80043a8:	f7ff ff8c 	bl	80042c4 <SD_CheckStatusWithTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da01      	bge.n	80043b6 <SD_read+0x26>
  {
    return res;
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	e03b      	b.n	800442e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	68b8      	ldr	r0, [r7, #8]
 80043bc:	f7ff fefe 	bl	80041bc <BSP_SD_ReadBlocks_DMA>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d132      	bne.n	800442c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <SD_read+0xa8>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80043cc:	f7fc fb90 	bl	8000af0 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80043d2:	bf00      	nop
 80043d4:	4b18      	ldr	r3, [pc, #96]	; (8004438 <SD_read+0xa8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d108      	bne.n	80043ee <SD_read+0x5e>
 80043dc:	f7fc fb88 	bl	8000af0 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d9f2      	bls.n	80043d4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <SD_read+0xa8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
 80043fa:	e017      	b.n	800442c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <SD_read+0xa8>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004402:	f7fc fb75 	bl	8000af0 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004408:	e007      	b.n	800441a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800440a:	f7ff ff0b 	bl	8004224 <BSP_SD_GetCardState>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <SD_read+0x8a>
          {
            res = RES_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004418:	e008      	b.n	800442c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800441a:	f7fc fb69 	bl	8000af0 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f247 522f 	movw	r2, #29999	; 0x752f
 8004428:	4293      	cmp	r3, r2
 800442a:	d9ee      	bls.n	800440a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800442c:	7dfb      	ldrb	r3, [r7, #23]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2000017c 	.word	0x2000017c

0800443c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <SD_write+0xa8>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004456:	f247 5030 	movw	r0, #30000	; 0x7530
 800445a:	f7ff ff33 	bl	80042c4 <SD_CheckStatusWithTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	da01      	bge.n	8004468 <SD_write+0x2c>
  {
    return res;
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	e038      	b.n	80044da <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	68b8      	ldr	r0, [r7, #8]
 800446e:	f7ff febf 	bl	80041f0 <BSP_SD_WriteBlocks_DMA>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d12f      	bne.n	80044d8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004478:	f7fc fb3a 	bl	8000af0 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800447e:	bf00      	nop
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <SD_write+0xa8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d108      	bne.n	800449a <SD_write+0x5e>
 8004488:	f7fc fb32 	bl	8000af0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f247 522f 	movw	r2, #29999	; 0x752f
 8004496:	4293      	cmp	r3, r2
 8004498:	d9f2      	bls.n	8004480 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <SD_write+0xa8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	75fb      	strb	r3, [r7, #23]
 80044a6:	e017      	b.n	80044d8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <SD_write+0xa8>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80044ae:	f7fc fb1f 	bl	8000af0 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80044b4:	e007      	b.n	80044c6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80044b6:	f7ff feb5 	bl	8004224 <BSP_SD_GetCardState>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <SD_write+0x8a>
          {
            res = RES_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	75fb      	strb	r3, [r7, #23]
            break;
 80044c4:	e008      	b.n	80044d8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80044c6:	f7fc fb13 	bl	8000af0 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f247 522f 	movw	r2, #29999	; 0x752f
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d9ee      	bls.n	80044b6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000178 	.word	0x20000178

080044e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	; 0x30
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	603a      	str	r2, [r7, #0]
 80044f2:	71fb      	strb	r3, [r7, #7]
 80044f4:	460b      	mov	r3, r1
 80044f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80044fe:	4b25      	ldr	r3, [pc, #148]	; (8004594 <SD_ioctl+0xac>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <SD_ioctl+0x28>
 800450c:	2303      	movs	r3, #3
 800450e:	e03c      	b.n	800458a <SD_ioctl+0xa2>

  switch (cmd)
 8004510:	79bb      	ldrb	r3, [r7, #6]
 8004512:	2b03      	cmp	r3, #3
 8004514:	d834      	bhi.n	8004580 <SD_ioctl+0x98>
 8004516:	a201      	add	r2, pc, #4	; (adr r2, 800451c <SD_ioctl+0x34>)
 8004518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451c:	0800452d 	.word	0x0800452d
 8004520:	08004535 	.word	0x08004535
 8004524:	0800454d 	.word	0x0800454d
 8004528:	08004567 	.word	0x08004567
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004532:	e028      	b.n	8004586 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004534:	f107 030c 	add.w	r3, r7, #12
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fe83 	bl	8004244 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800453e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800454a:	e01c      	b.n	8004586 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800454c:	f107 030c 	add.w	r3, r7, #12
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fe77 	bl	8004244 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	b29a      	uxth	r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004564:	e00f      	b.n	8004586 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004566:	f107 030c 	add.w	r3, r7, #12
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fe6a 	bl	8004244 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	0a5a      	lsrs	r2, r3, #9
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800457e:	e002      	b.n	8004586 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004580:	2304      	movs	r3, #4
 8004582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800458a:	4618      	mov	r0, r3
 800458c:	3730      	adds	r7, #48	; 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000009 	.word	0x20000009

08004598 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <BSP_SD_WriteCpltCallback+0x14>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000178 	.word	0x20000178

080045b0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <BSP_SD_ReadCpltCallback+0x14>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	2000017c 	.word	0x2000017c

080045c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045e0:	7a5b      	ldrb	r3, [r3, #9]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d131      	bne.n	800464c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80045e8:	4b1c      	ldr	r3, [pc, #112]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045ea:	7a5b      	ldrb	r3, [r3, #9]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045f2:	2100      	movs	r1, #0
 80045f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80045f6:	4b19      	ldr	r3, [pc, #100]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045f8:	7a5b      	ldrb	r3, [r3, #9]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <FATFS_LinkDriverEx+0x94>)
 8004608:	7a5b      	ldrb	r3, [r3, #9]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <FATFS_LinkDriverEx+0x94>)
 8004610:	4413      	add	r3, r2
 8004612:	79fa      	ldrb	r2, [r7, #7]
 8004614:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <FATFS_LinkDriverEx+0x94>)
 8004618:	7a5b      	ldrb	r3, [r3, #9]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	b2d1      	uxtb	r1, r2
 8004620:	4a0e      	ldr	r2, [pc, #56]	; (800465c <FATFS_LinkDriverEx+0x94>)
 8004622:	7251      	strb	r1, [r2, #9]
 8004624:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004626:	7dbb      	ldrb	r3, [r7, #22]
 8004628:	3330      	adds	r3, #48	; 0x30
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3301      	adds	r3, #1
 8004634:	223a      	movs	r2, #58	; 0x3a
 8004636:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3302      	adds	r3, #2
 800463c:	222f      	movs	r2, #47	; 0x2f
 800463e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	3303      	adds	r3, #3
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
}
 800464e:	4618      	mov	r0, r3
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000180 	.word	0x20000180

08004660 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800466a:	2200      	movs	r2, #0
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff ffaa 	bl	80045c8 <FATFS_LinkDriverEx>
 8004674:	4603      	mov	r3, r0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <memset>:
 800467e:	4402      	add	r2, r0
 8004680:	4603      	mov	r3, r0
 8004682:	4293      	cmp	r3, r2
 8004684:	d100      	bne.n	8004688 <memset+0xa>
 8004686:	4770      	bx	lr
 8004688:	f803 1b01 	strb.w	r1, [r3], #1
 800468c:	e7f9      	b.n	8004682 <memset+0x4>
	...

08004690 <__libc_init_array>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	4d0d      	ldr	r5, [pc, #52]	; (80046c8 <__libc_init_array+0x38>)
 8004694:	4c0d      	ldr	r4, [pc, #52]	; (80046cc <__libc_init_array+0x3c>)
 8004696:	1b64      	subs	r4, r4, r5
 8004698:	10a4      	asrs	r4, r4, #2
 800469a:	2600      	movs	r6, #0
 800469c:	42a6      	cmp	r6, r4
 800469e:	d109      	bne.n	80046b4 <__libc_init_array+0x24>
 80046a0:	4d0b      	ldr	r5, [pc, #44]	; (80046d0 <__libc_init_array+0x40>)
 80046a2:	4c0c      	ldr	r4, [pc, #48]	; (80046d4 <__libc_init_array+0x44>)
 80046a4:	f000 f818 	bl	80046d8 <_init>
 80046a8:	1b64      	subs	r4, r4, r5
 80046aa:	10a4      	asrs	r4, r4, #2
 80046ac:	2600      	movs	r6, #0
 80046ae:	42a6      	cmp	r6, r4
 80046b0:	d105      	bne.n	80046be <__libc_init_array+0x2e>
 80046b2:	bd70      	pop	{r4, r5, r6, pc}
 80046b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b8:	4798      	blx	r3
 80046ba:	3601      	adds	r6, #1
 80046bc:	e7ee      	b.n	800469c <__libc_init_array+0xc>
 80046be:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c2:	4798      	blx	r3
 80046c4:	3601      	adds	r6, #1
 80046c6:	e7f2      	b.n	80046ae <__libc_init_array+0x1e>
 80046c8:	08004740 	.word	0x08004740
 80046cc:	08004740 	.word	0x08004740
 80046d0:	08004740 	.word	0x08004740
 80046d4:	08004744 	.word	0x08004744

080046d8 <_init>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

080046e4 <_fini>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr
